
Neopixel_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f88  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08009120  08009120  00019120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009310  08009310  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009310  08009310  00019310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009318  08009318  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009318  08009318  00019318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800931c  0800931c  0001931c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d78  20000010  08009330  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d88  08009330  00021d88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a4e0  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001982  00000000  00000000  0002a563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0002bee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e3  00000000  00000000  0002c918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015f57  00000000  00000000  0002d0fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c15b  00000000  00000000  00043052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bee5  00000000  00000000  0004f1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e5c  00000000  00000000  000db094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000ddef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009108 	.word	0x08009108

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08009108 	.word	0x08009108

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b970 	b.w	8000eac <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9e08      	ldr	r6, [sp, #32]
 8000bea:	460d      	mov	r5, r1
 8000bec:	4604      	mov	r4, r0
 8000bee:	460f      	mov	r7, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14a      	bne.n	8000c8a <__udivmoddi4+0xa6>
 8000bf4:	428a      	cmp	r2, r1
 8000bf6:	4694      	mov	ip, r2
 8000bf8:	d965      	bls.n	8000cc6 <__udivmoddi4+0xe2>
 8000bfa:	fab2 f382 	clz	r3, r2
 8000bfe:	b143      	cbz	r3, 8000c12 <__udivmoddi4+0x2e>
 8000c00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c04:	f1c3 0220 	rsb	r2, r3, #32
 8000c08:	409f      	lsls	r7, r3
 8000c0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0e:	4317      	orrs	r7, r2
 8000c10:	409c      	lsls	r4, r3
 8000c12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c16:	fa1f f58c 	uxth.w	r5, ip
 8000c1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c1e:	0c22      	lsrs	r2, r4, #16
 8000c20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c28:	fb01 f005 	mul.w	r0, r1, r5
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	d90a      	bls.n	8000c46 <__udivmoddi4+0x62>
 8000c30:	eb1c 0202 	adds.w	r2, ip, r2
 8000c34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c38:	f080 811c 	bcs.w	8000e74 <__udivmoddi4+0x290>
 8000c3c:	4290      	cmp	r0, r2
 8000c3e:	f240 8119 	bls.w	8000e74 <__udivmoddi4+0x290>
 8000c42:	3902      	subs	r1, #2
 8000c44:	4462      	add	r2, ip
 8000c46:	1a12      	subs	r2, r2, r0
 8000c48:	b2a4      	uxth	r4, r4
 8000c4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c56:	fb00 f505 	mul.w	r5, r0, r5
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x90>
 8000c5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c62:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x294>
 8000c6a:	42a5      	cmp	r5, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x294>
 8000c70:	4464      	add	r4, ip
 8000c72:	3802      	subs	r0, #2
 8000c74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c78:	1b64      	subs	r4, r4, r5
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	b11e      	cbz	r6, 8000c86 <__udivmoddi4+0xa2>
 8000c7e:	40dc      	lsrs	r4, r3
 8000c80:	2300      	movs	r3, #0
 8000c82:	e9c6 4300 	strd	r4, r3, [r6]
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0xbc>
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	f000 80ed 	beq.w	8000e6e <__udivmoddi4+0x28a>
 8000c94:	2100      	movs	r1, #0
 8000c96:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca0:	fab3 f183 	clz	r1, r3
 8000ca4:	2900      	cmp	r1, #0
 8000ca6:	d149      	bne.n	8000d3c <__udivmoddi4+0x158>
 8000ca8:	42ab      	cmp	r3, r5
 8000caa:	d302      	bcc.n	8000cb2 <__udivmoddi4+0xce>
 8000cac:	4282      	cmp	r2, r0
 8000cae:	f200 80f8 	bhi.w	8000ea2 <__udivmoddi4+0x2be>
 8000cb2:	1a84      	subs	r4, r0, r2
 8000cb4:	eb65 0203 	sbc.w	r2, r5, r3
 8000cb8:	2001      	movs	r0, #1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d0e2      	beq.n	8000c86 <__udivmoddi4+0xa2>
 8000cc0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc4:	e7df      	b.n	8000c86 <__udivmoddi4+0xa2>
 8000cc6:	b902      	cbnz	r2, 8000cca <__udivmoddi4+0xe6>
 8000cc8:	deff      	udf	#255	; 0xff
 8000cca:	fab2 f382 	clz	r3, r2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f040 8090 	bne.w	8000df4 <__udivmoddi4+0x210>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	2101      	movs	r1, #1
 8000ce0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ce8:	0c22      	lsrs	r2, r4, #16
 8000cea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cee:	fb0e f005 	mul.w	r0, lr, r5
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x124>
 8000cf6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x122>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f200 80cb 	bhi.w	8000e9c <__udivmoddi4+0x2b8>
 8000d06:	4645      	mov	r5, r8
 8000d08:	1a12      	subs	r2, r2, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d10:	fb07 2210 	mls	r2, r7, r0, r2
 8000d14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d18:	fb0e fe00 	mul.w	lr, lr, r0
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x14e>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x14c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2c2>
 8000d30:	4610      	mov	r0, r2
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3a:	e79f      	b.n	8000c7c <__udivmoddi4+0x98>
 8000d3c:	f1c1 0720 	rsb	r7, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d52:	40fd      	lsrs	r5, r7
 8000d54:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d58:	4323      	orrs	r3, r4
 8000d5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	fb09 5518 	mls	r5, r9, r8, r5
 8000d66:	0c1c      	lsrs	r4, r3, #16
 8000d68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d6c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d70:	42a5      	cmp	r5, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b0>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2b4>
 8000d88:	42a5      	cmp	r5, r4
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2b4>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4464      	add	r4, ip
 8000d94:	1b64      	subs	r4, r4, r5
 8000d96:	b29d      	uxth	r5, r3
 8000d98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000da0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1da>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2ac>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2ac>
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	4464      	add	r4, ip
 8000dbe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc2:	fba3 9502 	umull	r9, r5, r3, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	42ac      	cmp	r4, r5
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46ae      	mov	lr, r5
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x29c>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x298>
 8000dd4:	b156      	cbz	r6, 8000dec <__udivmoddi4+0x208>
 8000dd6:	ebb0 0208 	subs.w	r2, r0, r8
 8000dda:	eb64 040e 	sbc.w	r4, r4, lr
 8000dde:	fa04 f707 	lsl.w	r7, r4, r7
 8000de2:	40ca      	lsrs	r2, r1
 8000de4:	40cc      	lsrs	r4, r1
 8000de6:	4317      	orrs	r7, r2
 8000de8:	e9c6 7400 	strd	r7, r4, [r6]
 8000dec:	4618      	mov	r0, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df4:	f1c3 0120 	rsb	r1, r3, #32
 8000df8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dfc:	fa20 f201 	lsr.w	r2, r0, r1
 8000e00:	fa25 f101 	lsr.w	r1, r5, r1
 8000e04:	409d      	lsls	r5, r3
 8000e06:	432a      	orrs	r2, r5
 8000e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0c:	fa1f fe8c 	uxth.w	lr, ip
 8000e10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e14:	fb07 1510 	mls	r5, r7, r0, r1
 8000e18:	0c11      	lsrs	r1, r2, #16
 8000e1a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e1e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e22:	428d      	cmp	r5, r1
 8000e24:	fa04 f403 	lsl.w	r4, r4, r3
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x258>
 8000e2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b0>
 8000e34:	428d      	cmp	r5, r1
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b0>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4461      	add	r1, ip
 8000e3c:	1b49      	subs	r1, r1, r5
 8000e3e:	b292      	uxth	r2, r2
 8000e40:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e44:	fb07 1115 	mls	r1, r7, r5, r1
 8000e48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e4c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e50:	4291      	cmp	r1, r2
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x282>
 8000e54:	eb1c 0202 	adds.w	r2, ip, r2
 8000e58:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2a8>
 8000e5e:	4291      	cmp	r1, r2
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2a8>
 8000e62:	3d02      	subs	r5, #2
 8000e64:	4462      	add	r2, ip
 8000e66:	1a52      	subs	r2, r2, r1
 8000e68:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0xfc>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e708      	b.n	8000c86 <__udivmoddi4+0xa2>
 8000e74:	4639      	mov	r1, r7
 8000e76:	e6e6      	b.n	8000c46 <__udivmoddi4+0x62>
 8000e78:	4610      	mov	r0, r2
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x90>
 8000e7c:	4548      	cmp	r0, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f0>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f0>
 8000e8c:	4645      	mov	r5, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x282>
 8000e90:	462b      	mov	r3, r5
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1da>
 8000e94:	4640      	mov	r0, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x258>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b0>
 8000e9c:	3d02      	subs	r5, #2
 8000e9e:	4462      	add	r2, ip
 8000ea0:	e732      	b.n	8000d08 <__udivmoddi4+0x124>
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e70a      	b.n	8000cbc <__udivmoddi4+0xd8>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x14e>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <Set_Pixel>:
uint8_t Datos_Pixel_F[Num_pixels][4];


//Me armo una funcion que setee cada LED por separado
void Set_Pixel(uint8_t n, uint8_t Verde, uint8_t Rojo, uint8_t Azul)
{
 8000eb0:	b490      	push	{r4, r7}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	4608      	mov	r0, r1
 8000eba:	4611      	mov	r1, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71bb      	strb	r3, [r7, #6]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	717b      	strb	r3, [r7, #5]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	713b      	strb	r3, [r7, #4]
	Datos_Pixel[n][0] = n;
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	490d      	ldr	r1, [pc, #52]	; (8000f08 <Set_Pixel+0x58>)
 8000ed2:	79fa      	ldrb	r2, [r7, #7]
 8000ed4:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	Datos_Pixel[n][1] = Verde;
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <Set_Pixel+0x58>)
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	79ba      	ldrb	r2, [r7, #6]
 8000ee2:	705a      	strb	r2, [r3, #1]
	Datos_Pixel[n][2] = Rojo;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <Set_Pixel+0x58>)
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	797a      	ldrb	r2, [r7, #5]
 8000eee:	709a      	strb	r2, [r3, #2]
	Datos_Pixel[n][3] = Azul;
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <Set_Pixel+0x58>)
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	793a      	ldrb	r2, [r7, #4]
 8000efa:	70da      	strb	r2, [r3, #3]

}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc90      	pop	{r4, r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20001980 	.word	0x20001980
 8000f0c:	00000000 	.word	0x00000000

08000f10 <Set_Brillo>:
//Me armo una funcion que controle el brillo
//float brillo=100; //La manejo en porcentaje
//encontre que es mejor manejarse con una funcion con curva suave. Uso la tangente

float brillo= 45;
void Set_Brillo(float brillo){
 8000f10:	b5b0      	push	{r4, r5, r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	ed87 0a01 	vstr	s0, [r7, #4]
	if(brillo>45) brillo = 45;
 8000f1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f1e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001010 <Set_Brillo+0x100>
 8000f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2a:	dd01      	ble.n	8000f30 <Set_Brillo+0x20>
 8000f2c:	4b39      	ldr	r3, [pc, #228]	; (8001014 <Set_Brillo+0x104>)
 8000f2e:	607b      	str	r3, [r7, #4]
	for(int i=0;i<Num_pixels;i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	e05f      	b.n	8000ff6 <Set_Brillo+0xe6>
	{
		Datos_Pixel_F[i][0] = Datos_Pixel[i][0];
 8000f36:	4a38      	ldr	r2, [pc, #224]	; (8001018 <Set_Brillo+0x108>)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000f3e:	4a37      	ldr	r2, [pc, #220]	; (800101c <Set_Brillo+0x10c>)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for(int j=1;j<4;j++)
 8000f46:	2301      	movs	r3, #1
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	e04e      	b.n	8000fea <Set_Brillo+0xda>
		{
			float angulo = 90 - brillo;
 8000f4c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001020 <Set_Brillo+0x110>
 8000f50:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f58:	edc7 7a03 	vstr	s15, [r7, #12]
			angulo = angulo*3.14/180;
 8000f5c:	68f8      	ldr	r0, [r7, #12]
 8000f5e:	f7ff fa9f 	bl	80004a0 <__aeabi_f2d>
 8000f62:	a329      	add	r3, pc, #164	; (adr r3, 8001008 <Set_Brillo+0xf8>)
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	f7ff faf2 	bl	8000550 <__aeabi_dmul>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <Set_Brillo+0x114>)
 8000f7a:	f7ff fc13 	bl	80007a4 <__aeabi_ddiv>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4610      	mov	r0, r2
 8000f84:	4619      	mov	r1, r3
 8000f86:	f7ff fdc5 	bl	8000b14 <__aeabi_d2f>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	60fb      	str	r3, [r7, #12]
			Datos_Pixel_F[i][j] = Datos_Pixel[i][j]/(tan(angulo));
 8000f8e:	4a22      	ldr	r2, [pc, #136]	; (8001018 <Set_Brillo+0x108>)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	441a      	add	r2, r3
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4413      	add	r3, r2
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fa6d 	bl	800047c <__aeabi_i2d>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	460d      	mov	r5, r1
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f7ff fa7a 	bl	80004a0 <__aeabi_f2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	ec43 2b10 	vmov	d0, r2, r3
 8000fb4:	f007 f808 	bl	8007fc8 <tan>
 8000fb8:	ec53 2b10 	vmov	r2, r3, d0
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	4629      	mov	r1, r5
 8000fc0:	f7ff fbf0 	bl	80007a4 <__aeabi_ddiv>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fd82 	bl	8000ad4 <__aeabi_d2uiz>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	b2d9      	uxtb	r1, r3
 8000fd4:	4a11      	ldr	r2, [pc, #68]	; (800101c <Set_Brillo+0x10c>)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	441a      	add	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4413      	add	r3, r2
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	701a      	strb	r2, [r3, #0]
		for(int j=1;j<4;j++)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	ddad      	ble.n	8000f4c <Set_Brillo+0x3c>
	for(int i=0;i<Num_pixels;i++)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	2b7f      	cmp	r3, #127	; 0x7f
 8000ffa:	dd9c      	ble.n	8000f36 <Set_Brillo+0x26>
		}
	}


}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bdb0      	pop	{r4, r5, r7, pc}
 8001006:	bf00      	nop
 8001008:	51eb851f 	.word	0x51eb851f
 800100c:	40091eb8 	.word	0x40091eb8
 8001010:	42340000 	.word	0x42340000
 8001014:	42340000 	.word	0x42340000
 8001018:	20001980 	.word	0x20001980
 800101c:	20001b80 	.word	0x20001b80
 8001020:	42b40000 	.word	0x42b40000
 8001024:	40668000 	.word	0x40668000

08001028 <Enviar_datos>:

//Me armo una función que envíe los datos desde DMA a neopixeles

void Enviar_datos (void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
// Para el programa final trabajar a 24 fps
	//uint32_t datos;
	uint16_t Prueba_pwmDatos = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	80fb      	strh	r3, [r7, #6]
	datos datos;
	uint16_t index = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	82fb      	strh	r3, [r7, #22]


	for (int i = 0; i<Num_pixels; i++)
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	e038      	b.n	80010ae <Enviar_datos+0x86>
	{
		//si no funciona tambien deberia andar el codigo siguiente
		datos.Datos8[0]=Datos_Pixel_F[i][3];
 800103c:	4a30      	ldr	r2, [pc, #192]	; (8001100 <Enviar_datos+0xd8>)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	78db      	ldrb	r3, [r3, #3]
 8001046:	703b      	strb	r3, [r7, #0]
		datos.Datos8[1]=Datos_Pixel_F[i][2];
 8001048:	4a2d      	ldr	r2, [pc, #180]	; (8001100 <Enviar_datos+0xd8>)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	789b      	ldrb	r3, [r3, #2]
 8001052:	707b      	strb	r3, [r7, #1]
		datos.Datos8[2]=Datos_Pixel_F[i][1];
 8001054:	4a2a      	ldr	r2, [pc, #168]	; (8001100 <Enviar_datos+0xd8>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	70bb      	strb	r3, [r7, #2]

		//datos = ((Datos_Pixel_F[i][1]<<16) | (Datos_Pixel_F[i][2]<<8)|(Datos_Pixel_F[i][3]));


		for (int i = 23; i>=0; i--)
 8001060:	2317      	movs	r3, #23
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e01d      	b.n	80010a2 <Enviar_datos+0x7a>
		{

			if (datos.Datos32&(1<<i) ) pwmDatos[index] = Neopixel_uno; //ver counter&(1<<j)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	2101      	movs	r1, #1
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	fa01 f202 	lsl.w	r2, r1, r2
 8001070:	4013      	ands	r3, r2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <Enviar_datos+0x5a>
 8001076:	8afb      	ldrh	r3, [r7, #22]
 8001078:	4a22      	ldr	r2, [pc, #136]	; (8001104 <Enviar_datos+0xdc>)
 800107a:	214c      	movs	r1, #76	; 0x4c
 800107c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001080:	e004      	b.n	800108c <Enviar_datos+0x64>
			else pwmDatos[index] = Neopixel_cero;
 8001082:	8afb      	ldrh	r3, [r7, #22]
 8001084:	4a1f      	ldr	r2, [pc, #124]	; (8001104 <Enviar_datos+0xdc>)
 8001086:	2126      	movs	r1, #38	; 0x26
 8001088:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			Prueba_pwmDatos = pwmDatos[index];
 800108c:	8afb      	ldrh	r3, [r7, #22]
 800108e:	4a1d      	ldr	r2, [pc, #116]	; (8001104 <Enviar_datos+0xdc>)
 8001090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001094:	80fb      	strh	r3, [r7, #6]
			index++;
 8001096:	8afb      	ldrh	r3, [r7, #22]
 8001098:	3301      	adds	r3, #1
 800109a:	82fb      	strh	r3, [r7, #22]
		for (int i = 23; i>=0; i--)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3b01      	subs	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dade      	bge.n	8001066 <Enviar_datos+0x3e>
	for (int i = 0; i<Num_pixels; i++)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	3301      	adds	r3, #1
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	2b7f      	cmp	r3, #127	; 0x7f
 80010b2:	ddc3      	ble.n	800103c <Enviar_datos+0x14>

		}

	}

	for (int i=0; i<50;i++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	e00f      	b.n	80010da <Enviar_datos+0xb2>
	{
		pwmDatos[index] = 0;
 80010ba:	8afb      	ldrh	r3, [r7, #22]
 80010bc:	4a11      	ldr	r2, [pc, #68]	; (8001104 <Enviar_datos+0xdc>)
 80010be:	2100      	movs	r1, #0
 80010c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		index++;
 80010c4:	8afb      	ldrh	r3, [r7, #22]
 80010c6:	3301      	adds	r3, #1
 80010c8:	82fb      	strh	r3, [r7, #22]
		Prueba_pwmDatos = pwmDatos[index];
 80010ca:	8afb      	ldrh	r3, [r7, #22]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <Enviar_datos+0xdc>)
 80010ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d2:	80fb      	strh	r3, [r7, #6]
	for (int i=0; i<50;i++)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	3301      	adds	r3, #1
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	2b31      	cmp	r3, #49	; 0x31
 80010de:	ddec      	ble.n	80010ba <Enviar_datos+0x92>



	//Envio la informacion con esta funcion de la HAL

		if(HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_2,(uint32_t *)pwmDatos,index)!=HAL_OK)
 80010e0:	8afb      	ldrh	r3, [r7, #22]
 80010e2:	4a08      	ldr	r2, [pc, #32]	; (8001104 <Enviar_datos+0xdc>)
 80010e4:	2104      	movs	r1, #4
 80010e6:	4808      	ldr	r0, [pc, #32]	; (8001108 <Enviar_datos+0xe0>)
 80010e8:	f005 fea4 	bl	8006e34 <HAL_TIM_PWM_Start_DMA>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <Enviar_datos+0xce>
			{
			Error_Handler();
 80010f2:	f004 f937 	bl	8005364 <Error_Handler>
	/*
	Acordarse de cambiar la función de carga al TIM2 para PWM por DMA para hacerla por
	Interrupciones. De esa forma podemos procesar informacion durante los tiempo
	muertos de envio de datos. El HAL_TIM_PWM_Start_DMA dice que es no bloqueante
	*/
	}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20001b80 	.word	0x20001b80
 8001104:	2000011c 	.word	0x2000011c
 8001108:	20000074 	.word	0x20000074

0800110c <vumetro>:
//Ver como es el recorrido de las luces en la matriz led, por lo que vi
//en el arcoiris estan conectados los bordes
//la comento porque no va a tener sentido todavia si no estan todos los valores
//declarados. Es para la funcion final
//Toma un valor entero sin signo para la intensidad de las bandas
void vumetro(uint8_t banda1,uint8_t banda2,uint8_t banda3,uint8_t banda4,uint8_t banda5,uint8_t banda6,uint8_t banda7,uint8_t banda8){
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b0b5      	sub	sp, #212	; 0xd4
 8001110:	af00      	add	r7, sp, #0
 8001112:	4604      	mov	r4, r0
 8001114:	4608      	mov	r0, r1
 8001116:	4611      	mov	r1, r2
 8001118:	461a      	mov	r2, r3
 800111a:	4623      	mov	r3, r4
 800111c:	71fb      	strb	r3, [r7, #7]
 800111e:	4603      	mov	r3, r0
 8001120:	71bb      	strb	r3, [r7, #6]
 8001122:	460b      	mov	r3, r1
 8001124:	717b      	strb	r3, [r7, #5]
 8001126:	4613      	mov	r3, r2
 8001128:	713b      	strb	r3, [r7, #4]

//void vumetro(uint8_t banda1,uint8_t banda2,uint8_t banda3,uint8_t banda4){
//Hay que tener en cuenta que cada banda del vumetro son dos de la matriz, pero
//por como se recorre una esta invertida
//colores: violeta, rosa, azul, dos verdes, amarillo, dos rojos
int numled=0;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]

switch(banda1){
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	3b01      	subs	r3, #1
 8001132:	2b06      	cmp	r3, #6
 8001134:	f200 8341 	bhi.w	80017ba <vumetro+0x6ae>
 8001138:	a201      	add	r2, pc, #4	; (adr r2, 8001140 <vumetro+0x34>)
 800113a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113e:	bf00      	nop
 8001140:	0800115d 	.word	0x0800115d
 8001144:	080011e3 	.word	0x080011e3
 8001148:	0800128d 	.word	0x0800128d
 800114c:	0800135b 	.word	0x0800135b
 8001150:	0800144d 	.word	0x0800144d
 8001154:	08001563 	.word	0x08001563
 8001158:	0800169d 	.word	0x0800169d
case 1||0:
	Set_Pixel(0+numled,76,0,153);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	b2d8      	uxtb	r0, r3
 8001160:	2399      	movs	r3, #153	; 0x99
 8001162:	2200      	movs	r2, #0
 8001164:	214c      	movs	r1, #76	; 0x4c
 8001166:	f7ff fea3 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 800116a:	2301      	movs	r3, #1
 800116c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8001170:	e010      	b.n	8001194 <vumetro+0x88>
		Set_Pixel(j+numled,0,0,0);
 8001172:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001176:	b2da      	uxtb	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4413      	add	r3, r2
 800117e:	b2d8      	uxtb	r0, r3
 8001180:	2300      	movs	r3, #0
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	f7ff fe93 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 800118a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800118e:	3301      	adds	r3, #1
 8001190:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8001194:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001198:	2b07      	cmp	r3, #7
 800119a:	d9ea      	bls.n	8001172 <vumetro+0x66>
	}
	Set_Pixel(8+numled,76,0,153);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	3308      	adds	r3, #8
 80011a2:	b2d8      	uxtb	r0, r3
 80011a4:	2399      	movs	r3, #153	; 0x99
 80011a6:	2200      	movs	r2, #0
 80011a8:	214c      	movs	r1, #76	; 0x4c
 80011aa:	f7ff fe81 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 80011ae:	2309      	movs	r3, #9
 80011b0:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 80011b4:	e010      	b.n	80011d8 <vumetro+0xcc>
		Set_Pixel(j+numled,0,0,0);
 80011b6:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	4413      	add	r3, r2
 80011c2:	b2d8      	uxtb	r0, r3
 80011c4:	2300      	movs	r3, #0
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	f7ff fe71 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 80011ce:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80011d2:	3301      	adds	r3, #1
 80011d4:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 80011d8:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	d9ea      	bls.n	80011b6 <vumetro+0xaa>
	}
	break;
 80011e0:	e37a      	b.n	80018d8 <vumetro+0x7cc>
case 2:
	Set_Pixel(0+numled,0,76,153);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	b2d8      	uxtb	r0, r3
 80011e6:	2399      	movs	r3, #153	; 0x99
 80011e8:	224c      	movs	r2, #76	; 0x4c
 80011ea:	2100      	movs	r1, #0
 80011ec:	f7ff fe60 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	3301      	adds	r3, #1
 80011f6:	b2d8      	uxtb	r0, r3
 80011f8:	2399      	movs	r3, #153	; 0x99
 80011fa:	2299      	movs	r2, #153	; 0x99
 80011fc:	2100      	movs	r1, #0
 80011fe:	f7ff fe57 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8001202:	2302      	movs	r3, #2
 8001204:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 8001208:	e010      	b.n	800122c <vumetro+0x120>
		Set_Pixel(j+numled,0,0,0);
 800120a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800120e:	b2da      	uxtb	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	4413      	add	r3, r2
 8001216:	b2d8      	uxtb	r0, r3
 8001218:	2300      	movs	r3, #0
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	f7ff fe47 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8001222:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8001226:	3301      	adds	r3, #1
 8001228:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 800122c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8001230:	2b07      	cmp	r3, #7
 8001232:	d9ea      	bls.n	800120a <vumetro+0xfe>
	}
	Set_Pixel(8+numled,0,76,153);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	3308      	adds	r3, #8
 800123a:	b2d8      	uxtb	r0, r3
 800123c:	2399      	movs	r3, #153	; 0x99
 800123e:	224c      	movs	r2, #76	; 0x4c
 8001240:	2100      	movs	r1, #0
 8001242:	f7ff fe35 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	3309      	adds	r3, #9
 800124c:	b2d8      	uxtb	r0, r3
 800124e:	2399      	movs	r3, #153	; 0x99
 8001250:	2299      	movs	r2, #153	; 0x99
 8001252:	2100      	movs	r1, #0
 8001254:	f7ff fe2c 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8001258:	230a      	movs	r3, #10
 800125a:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 800125e:	e010      	b.n	8001282 <vumetro+0x176>
		Set_Pixel(j+numled,0,0,0);
 8001260:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8001264:	b2da      	uxtb	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	4413      	add	r3, r2
 800126c:	b2d8      	uxtb	r0, r3
 800126e:	2300      	movs	r3, #0
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	f7ff fe1c 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8001278:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800127c:	3301      	adds	r3, #1
 800127e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 8001282:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8001286:	2b0f      	cmp	r3, #15
 8001288:	d9ea      	bls.n	8001260 <vumetro+0x154>
	}
	break;
 800128a:	e325      	b.n	80018d8 <vumetro+0x7cc>

case 3:
	Set_Pixel(0+numled,0,76,153);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	b2d8      	uxtb	r0, r3
 8001290:	2399      	movs	r3, #153	; 0x99
 8001292:	224c      	movs	r2, #76	; 0x4c
 8001294:	2100      	movs	r1, #0
 8001296:	f7ff fe0b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	b2d8      	uxtb	r0, r3
 80012a2:	2399      	movs	r3, #153	; 0x99
 80012a4:	2299      	movs	r2, #153	; 0x99
 80012a6:	2100      	movs	r1, #0
 80012a8:	f7ff fe02 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	3302      	adds	r3, #2
 80012b2:	b2d8      	uxtb	r0, r3
 80012b4:	23cc      	movs	r3, #204	; 0xcc
 80012b6:	2200      	movs	r2, #0
 80012b8:	2166      	movs	r1, #102	; 0x66
 80012ba:	f7ff fdf9 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 80012be:	2303      	movs	r3, #3
 80012c0:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 80012c4:	e010      	b.n	80012e8 <vumetro+0x1dc>
		Set_Pixel(j+numled,0,0,0);
 80012c6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	4413      	add	r3, r2
 80012d2:	b2d8      	uxtb	r0, r3
 80012d4:	2300      	movs	r3, #0
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	f7ff fde9 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 80012de:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80012e2:	3301      	adds	r3, #1
 80012e4:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 80012e8:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80012ec:	2b07      	cmp	r3, #7
 80012ee:	d9ea      	bls.n	80012c6 <vumetro+0x1ba>
	}
	Set_Pixel(8+numled,0,76,153);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	3308      	adds	r3, #8
 80012f6:	b2d8      	uxtb	r0, r3
 80012f8:	2399      	movs	r3, #153	; 0x99
 80012fa:	224c      	movs	r2, #76	; 0x4c
 80012fc:	2100      	movs	r1, #0
 80012fe:	f7ff fdd7 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3309      	adds	r3, #9
 8001308:	b2d8      	uxtb	r0, r3
 800130a:	2399      	movs	r3, #153	; 0x99
 800130c:	2299      	movs	r2, #153	; 0x99
 800130e:	2100      	movs	r1, #0
 8001310:	f7ff fdce 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	330a      	adds	r3, #10
 800131a:	b2d8      	uxtb	r0, r3
 800131c:	23cc      	movs	r3, #204	; 0xcc
 800131e:	2200      	movs	r2, #0
 8001320:	2166      	movs	r1, #102	; 0x66
 8001322:	f7ff fdc5 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8001326:	230b      	movs	r3, #11
 8001328:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800132c:	e010      	b.n	8001350 <vumetro+0x244>
		Set_Pixel(j+numled,0,0,0);
 800132e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8001332:	b2da      	uxtb	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4413      	add	r3, r2
 800133a:	b2d8      	uxtb	r0, r3
 800133c:	2300      	movs	r3, #0
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	f7ff fdb5 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8001346:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800134a:	3301      	adds	r3, #1
 800134c:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8001350:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d9ea      	bls.n	800132e <vumetro+0x222>
	}
	break;
 8001358:	e2be      	b.n	80018d8 <vumetro+0x7cc>
case 4:
	Set_Pixel(0+numled,0,76,153);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	b2d8      	uxtb	r0, r3
 800135e:	2399      	movs	r3, #153	; 0x99
 8001360:	224c      	movs	r2, #76	; 0x4c
 8001362:	2100      	movs	r1, #0
 8001364:	f7ff fda4 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	3301      	adds	r3, #1
 800136e:	b2d8      	uxtb	r0, r3
 8001370:	2399      	movs	r3, #153	; 0x99
 8001372:	2299      	movs	r2, #153	; 0x99
 8001374:	2100      	movs	r1, #0
 8001376:	f7ff fd9b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	3302      	adds	r3, #2
 8001380:	b2d8      	uxtb	r0, r3
 8001382:	23cc      	movs	r3, #204	; 0xcc
 8001384:	2200      	movs	r2, #0
 8001386:	2166      	movs	r1, #102	; 0x66
 8001388:	f7ff fd92 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	3303      	adds	r3, #3
 8001392:	b2d8      	uxtb	r0, r3
 8001394:	2300      	movs	r3, #0
 8001396:	2200      	movs	r2, #0
 8001398:	21cc      	movs	r1, #204	; 0xcc
 800139a:	f7ff fd89 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 800139e:	2304      	movs	r3, #4
 80013a0:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 80013a4:	e010      	b.n	80013c8 <vumetro+0x2bc>
		Set_Pixel(j+numled,0,0,0);
 80013a6:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4413      	add	r3, r2
 80013b2:	b2d8      	uxtb	r0, r3
 80013b4:	2300      	movs	r3, #0
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	f7ff fd79 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 80013be:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80013c2:	3301      	adds	r3, #1
 80013c4:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 80013c8:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80013cc:	2b07      	cmp	r3, #7
 80013ce:	d9ea      	bls.n	80013a6 <vumetro+0x29a>
	}
	Set_Pixel(8+numled,0,76,153);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	3308      	adds	r3, #8
 80013d6:	b2d8      	uxtb	r0, r3
 80013d8:	2399      	movs	r3, #153	; 0x99
 80013da:	224c      	movs	r2, #76	; 0x4c
 80013dc:	2100      	movs	r1, #0
 80013de:	f7ff fd67 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	3309      	adds	r3, #9
 80013e8:	b2d8      	uxtb	r0, r3
 80013ea:	2399      	movs	r3, #153	; 0x99
 80013ec:	2299      	movs	r2, #153	; 0x99
 80013ee:	2100      	movs	r1, #0
 80013f0:	f7ff fd5e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	330a      	adds	r3, #10
 80013fa:	b2d8      	uxtb	r0, r3
 80013fc:	23cc      	movs	r3, #204	; 0xcc
 80013fe:	2200      	movs	r2, #0
 8001400:	2166      	movs	r1, #102	; 0x66
 8001402:	f7ff fd55 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	330b      	adds	r3, #11
 800140c:	b2d8      	uxtb	r0, r3
 800140e:	2300      	movs	r3, #0
 8001410:	2200      	movs	r2, #0
 8001412:	21cc      	movs	r1, #204	; 0xcc
 8001414:	f7ff fd4c 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8001418:	230c      	movs	r3, #12
 800141a:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 800141e:	e010      	b.n	8001442 <vumetro+0x336>
		Set_Pixel(j+numled,0,0,0);
 8001420:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8001424:	b2da      	uxtb	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4413      	add	r3, r2
 800142c:	b2d8      	uxtb	r0, r3
 800142e:	2300      	movs	r3, #0
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	f7ff fd3c 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8001438:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800143c:	3301      	adds	r3, #1
 800143e:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 8001442:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8001446:	2b0f      	cmp	r3, #15
 8001448:	d9ea      	bls.n	8001420 <vumetro+0x314>
	}
	break;
 800144a:	e245      	b.n	80018d8 <vumetro+0x7cc>
case 5:
	Set_Pixel(0+numled,0,76,153);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	b2d8      	uxtb	r0, r3
 8001450:	2399      	movs	r3, #153	; 0x99
 8001452:	224c      	movs	r2, #76	; 0x4c
 8001454:	2100      	movs	r1, #0
 8001456:	f7ff fd2b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	3301      	adds	r3, #1
 8001460:	b2d8      	uxtb	r0, r3
 8001462:	2399      	movs	r3, #153	; 0x99
 8001464:	2299      	movs	r2, #153	; 0x99
 8001466:	2100      	movs	r1, #0
 8001468:	f7ff fd22 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	3302      	adds	r3, #2
 8001472:	b2d8      	uxtb	r0, r3
 8001474:	23cc      	movs	r3, #204	; 0xcc
 8001476:	2200      	movs	r2, #0
 8001478:	2166      	movs	r1, #102	; 0x66
 800147a:	f7ff fd19 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	3303      	adds	r3, #3
 8001484:	b2d8      	uxtb	r0, r3
 8001486:	2300      	movs	r3, #0
 8001488:	2200      	movs	r2, #0
 800148a:	21cc      	movs	r1, #204	; 0xcc
 800148c:	f7ff fd10 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	3304      	adds	r3, #4
 8001496:	b2d8      	uxtb	r0, r3
 8001498:	2300      	movs	r3, #0
 800149a:	2200      	movs	r2, #0
 800149c:	21cc      	movs	r1, #204	; 0xcc
 800149e:	f7ff fd07 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 80014a2:	2305      	movs	r3, #5
 80014a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80014a8:	e010      	b.n	80014cc <vumetro+0x3c0>
		Set_Pixel(j+numled,0,0,0);
 80014aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	4413      	add	r3, r2
 80014b6:	b2d8      	uxtb	r0, r3
 80014b8:	2300      	movs	r3, #0
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	f7ff fcf7 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 80014c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80014c6:	3301      	adds	r3, #1
 80014c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80014cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80014d0:	2b07      	cmp	r3, #7
 80014d2:	d9ea      	bls.n	80014aa <vumetro+0x39e>
	}
	Set_Pixel(8+numled,0,76,153);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	3308      	adds	r3, #8
 80014da:	b2d8      	uxtb	r0, r3
 80014dc:	2399      	movs	r3, #153	; 0x99
 80014de:	224c      	movs	r2, #76	; 0x4c
 80014e0:	2100      	movs	r1, #0
 80014e2:	f7ff fce5 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	3309      	adds	r3, #9
 80014ec:	b2d8      	uxtb	r0, r3
 80014ee:	2399      	movs	r3, #153	; 0x99
 80014f0:	2299      	movs	r2, #153	; 0x99
 80014f2:	2100      	movs	r1, #0
 80014f4:	f7ff fcdc 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	330a      	adds	r3, #10
 80014fe:	b2d8      	uxtb	r0, r3
 8001500:	23cc      	movs	r3, #204	; 0xcc
 8001502:	2200      	movs	r2, #0
 8001504:	2166      	movs	r1, #102	; 0x66
 8001506:	f7ff fcd3 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	330b      	adds	r3, #11
 8001510:	b2d8      	uxtb	r0, r3
 8001512:	2300      	movs	r3, #0
 8001514:	2200      	movs	r2, #0
 8001516:	21cc      	movs	r1, #204	; 0xcc
 8001518:	f7ff fcca 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	330c      	adds	r3, #12
 8001522:	b2d8      	uxtb	r0, r3
 8001524:	2300      	movs	r3, #0
 8001526:	2200      	movs	r2, #0
 8001528:	21cc      	movs	r1, #204	; 0xcc
 800152a:	f7ff fcc1 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 800152e:	230d      	movs	r3, #13
 8001530:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8001534:	e010      	b.n	8001558 <vumetro+0x44c>
		Set_Pixel(j+numled,0,0,0);
 8001536:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800153a:	b2da      	uxtb	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4413      	add	r3, r2
 8001542:	b2d8      	uxtb	r0, r3
 8001544:	2300      	movs	r3, #0
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	f7ff fcb1 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 800154e:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001552:	3301      	adds	r3, #1
 8001554:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8001558:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d9ea      	bls.n	8001536 <vumetro+0x42a>
	}
	break;
 8001560:	e1ba      	b.n	80018d8 <vumetro+0x7cc>
case 6:
	Set_Pixel(0+numled,0,76,153);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	b2d8      	uxtb	r0, r3
 8001566:	2399      	movs	r3, #153	; 0x99
 8001568:	224c      	movs	r2, #76	; 0x4c
 800156a:	2100      	movs	r1, #0
 800156c:	f7ff fca0 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	3301      	adds	r3, #1
 8001576:	b2d8      	uxtb	r0, r3
 8001578:	2399      	movs	r3, #153	; 0x99
 800157a:	2299      	movs	r2, #153	; 0x99
 800157c:	2100      	movs	r1, #0
 800157e:	f7ff fc97 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	3302      	adds	r3, #2
 8001588:	b2d8      	uxtb	r0, r3
 800158a:	23cc      	movs	r3, #204	; 0xcc
 800158c:	2200      	movs	r2, #0
 800158e:	2166      	movs	r1, #102	; 0x66
 8001590:	f7ff fc8e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	3303      	adds	r3, #3
 800159a:	b2d8      	uxtb	r0, r3
 800159c:	2300      	movs	r3, #0
 800159e:	2200      	movs	r2, #0
 80015a0:	21cc      	movs	r1, #204	; 0xcc
 80015a2:	f7ff fc85 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	3304      	adds	r3, #4
 80015ac:	b2d8      	uxtb	r0, r3
 80015ae:	2300      	movs	r3, #0
 80015b0:	2200      	movs	r2, #0
 80015b2:	21cc      	movs	r1, #204	; 0xcc
 80015b4:	f7ff fc7c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	3305      	adds	r3, #5
 80015be:	b2d8      	uxtb	r0, r3
 80015c0:	2333      	movs	r3, #51	; 0x33
 80015c2:	22ff      	movs	r2, #255	; 0xff
 80015c4:	21ff      	movs	r1, #255	; 0xff
 80015c6:	f7ff fc73 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 80015ca:	2306      	movs	r3, #6
 80015cc:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 80015d0:	e010      	b.n	80015f4 <vumetro+0x4e8>
		Set_Pixel(j+numled,0,0,0);
 80015d2:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4413      	add	r3, r2
 80015de:	b2d8      	uxtb	r0, r3
 80015e0:	2300      	movs	r3, #0
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	f7ff fc63 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 80015ea:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80015ee:	3301      	adds	r3, #1
 80015f0:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 80015f4:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80015f8:	2b07      	cmp	r3, #7
 80015fa:	d9ea      	bls.n	80015d2 <vumetro+0x4c6>
	}
	Set_Pixel(8+numled,0,76,153);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	3308      	adds	r3, #8
 8001602:	b2d8      	uxtb	r0, r3
 8001604:	2399      	movs	r3, #153	; 0x99
 8001606:	224c      	movs	r2, #76	; 0x4c
 8001608:	2100      	movs	r1, #0
 800160a:	f7ff fc51 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	3309      	adds	r3, #9
 8001614:	b2d8      	uxtb	r0, r3
 8001616:	2399      	movs	r3, #153	; 0x99
 8001618:	2299      	movs	r2, #153	; 0x99
 800161a:	2100      	movs	r1, #0
 800161c:	f7ff fc48 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	330a      	adds	r3, #10
 8001626:	b2d8      	uxtb	r0, r3
 8001628:	23cc      	movs	r3, #204	; 0xcc
 800162a:	2200      	movs	r2, #0
 800162c:	2166      	movs	r1, #102	; 0x66
 800162e:	f7ff fc3f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	330b      	adds	r3, #11
 8001638:	b2d8      	uxtb	r0, r3
 800163a:	2300      	movs	r3, #0
 800163c:	2200      	movs	r2, #0
 800163e:	21cc      	movs	r1, #204	; 0xcc
 8001640:	f7ff fc36 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	330c      	adds	r3, #12
 800164a:	b2d8      	uxtb	r0, r3
 800164c:	2300      	movs	r3, #0
 800164e:	2200      	movs	r2, #0
 8001650:	21cc      	movs	r1, #204	; 0xcc
 8001652:	f7ff fc2d 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	330d      	adds	r3, #13
 800165c:	b2d8      	uxtb	r0, r3
 800165e:	2333      	movs	r3, #51	; 0x33
 8001660:	22ff      	movs	r2, #255	; 0xff
 8001662:	21ff      	movs	r1, #255	; 0xff
 8001664:	f7ff fc24 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8001668:	230e      	movs	r3, #14
 800166a:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800166e:	e010      	b.n	8001692 <vumetro+0x586>
		Set_Pixel(j+numled,0,0,0);
 8001670:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8001674:	b2da      	uxtb	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	4413      	add	r3, r2
 800167c:	b2d8      	uxtb	r0, r3
 800167e:	2300      	movs	r3, #0
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	f7ff fc14 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8001688:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800168c:	3301      	adds	r3, #1
 800168e:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8001692:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8001696:	2b0f      	cmp	r3, #15
 8001698:	d9ea      	bls.n	8001670 <vumetro+0x564>
	}
	break;
 800169a:	e11d      	b.n	80018d8 <vumetro+0x7cc>
case 7:
	Set_Pixel(0+numled,0,76,153);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	b2d8      	uxtb	r0, r3
 80016a0:	2399      	movs	r3, #153	; 0x99
 80016a2:	224c      	movs	r2, #76	; 0x4c
 80016a4:	2100      	movs	r1, #0
 80016a6:	f7ff fc03 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	3301      	adds	r3, #1
 80016b0:	b2d8      	uxtb	r0, r3
 80016b2:	2399      	movs	r3, #153	; 0x99
 80016b4:	2299      	movs	r2, #153	; 0x99
 80016b6:	2100      	movs	r1, #0
 80016b8:	f7ff fbfa 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	3302      	adds	r3, #2
 80016c2:	b2d8      	uxtb	r0, r3
 80016c4:	23cc      	movs	r3, #204	; 0xcc
 80016c6:	2200      	movs	r2, #0
 80016c8:	2166      	movs	r1, #102	; 0x66
 80016ca:	f7ff fbf1 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	3303      	adds	r3, #3
 80016d4:	b2d8      	uxtb	r0, r3
 80016d6:	2300      	movs	r3, #0
 80016d8:	2200      	movs	r2, #0
 80016da:	21cc      	movs	r1, #204	; 0xcc
 80016dc:	f7ff fbe8 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	3304      	adds	r3, #4
 80016e6:	b2d8      	uxtb	r0, r3
 80016e8:	2300      	movs	r3, #0
 80016ea:	2200      	movs	r2, #0
 80016ec:	21cc      	movs	r1, #204	; 0xcc
 80016ee:	f7ff fbdf 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	3305      	adds	r3, #5
 80016f8:	b2d8      	uxtb	r0, r3
 80016fa:	2333      	movs	r3, #51	; 0x33
 80016fc:	22ff      	movs	r2, #255	; 0xff
 80016fe:	21ff      	movs	r1, #255	; 0xff
 8001700:	f7ff fbd6 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	3306      	adds	r3, #6
 800170a:	b2d8      	uxtb	r0, r3
 800170c:	2300      	movs	r3, #0
 800170e:	22cc      	movs	r2, #204	; 0xcc
 8001710:	2100      	movs	r1, #0
 8001712:	f7ff fbcd 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	3307      	adds	r3, #7
 800171c:	b2d8      	uxtb	r0, r3
 800171e:	2300      	movs	r3, #0
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	f7ff fbc4 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	3308      	adds	r3, #8
 800172e:	b2d8      	uxtb	r0, r3
 8001730:	2399      	movs	r3, #153	; 0x99
 8001732:	224c      	movs	r2, #76	; 0x4c
 8001734:	2100      	movs	r1, #0
 8001736:	f7ff fbbb 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	3309      	adds	r3, #9
 8001740:	b2d8      	uxtb	r0, r3
 8001742:	2399      	movs	r3, #153	; 0x99
 8001744:	2299      	movs	r2, #153	; 0x99
 8001746:	2100      	movs	r1, #0
 8001748:	f7ff fbb2 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	330a      	adds	r3, #10
 8001752:	b2d8      	uxtb	r0, r3
 8001754:	23cc      	movs	r3, #204	; 0xcc
 8001756:	2200      	movs	r2, #0
 8001758:	2166      	movs	r1, #102	; 0x66
 800175a:	f7ff fba9 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	330b      	adds	r3, #11
 8001764:	b2d8      	uxtb	r0, r3
 8001766:	2300      	movs	r3, #0
 8001768:	2200      	movs	r2, #0
 800176a:	21cc      	movs	r1, #204	; 0xcc
 800176c:	f7ff fba0 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	330c      	adds	r3, #12
 8001776:	b2d8      	uxtb	r0, r3
 8001778:	2300      	movs	r3, #0
 800177a:	2200      	movs	r2, #0
 800177c:	21cc      	movs	r1, #204	; 0xcc
 800177e:	f7ff fb97 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	330d      	adds	r3, #13
 8001788:	b2d8      	uxtb	r0, r3
 800178a:	2333      	movs	r3, #51	; 0x33
 800178c:	22ff      	movs	r2, #255	; 0xff
 800178e:	21ff      	movs	r1, #255	; 0xff
 8001790:	f7ff fb8e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	330e      	adds	r3, #14
 800179a:	b2d8      	uxtb	r0, r3
 800179c:	2300      	movs	r3, #0
 800179e:	22cc      	movs	r2, #204	; 0xcc
 80017a0:	2100      	movs	r1, #0
 80017a2:	f7ff fb85 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	330f      	adds	r3, #15
 80017ac:	b2d8      	uxtb	r0, r3
 80017ae:	2300      	movs	r3, #0
 80017b0:	2200      	movs	r2, #0
 80017b2:	2100      	movs	r1, #0
 80017b4:	f7ff fb7c 	bl	8000eb0 <Set_Pixel>
	break;
 80017b8:	e08e      	b.n	80018d8 <vumetro+0x7cc>
default:
	Set_Pixel(0+numled,0,76,153);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	b2d8      	uxtb	r0, r3
 80017be:	2399      	movs	r3, #153	; 0x99
 80017c0:	224c      	movs	r2, #76	; 0x4c
 80017c2:	2100      	movs	r1, #0
 80017c4:	f7ff fb74 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2d8      	uxtb	r0, r3
 80017d0:	2399      	movs	r3, #153	; 0x99
 80017d2:	2299      	movs	r2, #153	; 0x99
 80017d4:	2100      	movs	r1, #0
 80017d6:	f7ff fb6b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	3302      	adds	r3, #2
 80017e0:	b2d8      	uxtb	r0, r3
 80017e2:	23cc      	movs	r3, #204	; 0xcc
 80017e4:	2200      	movs	r2, #0
 80017e6:	2166      	movs	r1, #102	; 0x66
 80017e8:	f7ff fb62 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	3303      	adds	r3, #3
 80017f2:	b2d8      	uxtb	r0, r3
 80017f4:	2300      	movs	r3, #0
 80017f6:	2200      	movs	r2, #0
 80017f8:	21cc      	movs	r1, #204	; 0xcc
 80017fa:	f7ff fb59 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	3304      	adds	r3, #4
 8001804:	b2d8      	uxtb	r0, r3
 8001806:	2300      	movs	r3, #0
 8001808:	2200      	movs	r2, #0
 800180a:	21cc      	movs	r1, #204	; 0xcc
 800180c:	f7ff fb50 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	3305      	adds	r3, #5
 8001816:	b2d8      	uxtb	r0, r3
 8001818:	2333      	movs	r3, #51	; 0x33
 800181a:	22ff      	movs	r2, #255	; 0xff
 800181c:	21ff      	movs	r1, #255	; 0xff
 800181e:	f7ff fb47 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	3306      	adds	r3, #6
 8001828:	b2d8      	uxtb	r0, r3
 800182a:	2300      	movs	r3, #0
 800182c:	22cc      	movs	r2, #204	; 0xcc
 800182e:	2100      	movs	r1, #0
 8001830:	f7ff fb3e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3307      	adds	r3, #7
 800183a:	b2d8      	uxtb	r0, r3
 800183c:	2300      	movs	r3, #0
 800183e:	22cc      	movs	r2, #204	; 0xcc
 8001840:	2100      	movs	r1, #0
 8001842:	f7ff fb35 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	3308      	adds	r3, #8
 800184c:	b2d8      	uxtb	r0, r3
 800184e:	2399      	movs	r3, #153	; 0x99
 8001850:	224c      	movs	r2, #76	; 0x4c
 8001852:	2100      	movs	r1, #0
 8001854:	f7ff fb2c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	3309      	adds	r3, #9
 800185e:	b2d8      	uxtb	r0, r3
 8001860:	2399      	movs	r3, #153	; 0x99
 8001862:	2299      	movs	r2, #153	; 0x99
 8001864:	2100      	movs	r1, #0
 8001866:	f7ff fb23 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	330a      	adds	r3, #10
 8001870:	b2d8      	uxtb	r0, r3
 8001872:	23cc      	movs	r3, #204	; 0xcc
 8001874:	2200      	movs	r2, #0
 8001876:	2166      	movs	r1, #102	; 0x66
 8001878:	f7ff fb1a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	330b      	adds	r3, #11
 8001882:	b2d8      	uxtb	r0, r3
 8001884:	2300      	movs	r3, #0
 8001886:	2200      	movs	r2, #0
 8001888:	21cc      	movs	r1, #204	; 0xcc
 800188a:	f7ff fb11 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	330c      	adds	r3, #12
 8001894:	b2d8      	uxtb	r0, r3
 8001896:	2300      	movs	r3, #0
 8001898:	2200      	movs	r2, #0
 800189a:	21cc      	movs	r1, #204	; 0xcc
 800189c:	f7ff fb08 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	330d      	adds	r3, #13
 80018a6:	b2d8      	uxtb	r0, r3
 80018a8:	2333      	movs	r3, #51	; 0x33
 80018aa:	22ff      	movs	r2, #255	; 0xff
 80018ac:	21ff      	movs	r1, #255	; 0xff
 80018ae:	f7ff faff 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	330e      	adds	r3, #14
 80018b8:	b2d8      	uxtb	r0, r3
 80018ba:	2300      	movs	r3, #0
 80018bc:	22cc      	movs	r2, #204	; 0xcc
 80018be:	2100      	movs	r1, #0
 80018c0:	f7ff faf6 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	330f      	adds	r3, #15
 80018ca:	b2d8      	uxtb	r0, r3
 80018cc:	2300      	movs	r3, #0
 80018ce:	22cc      	movs	r2, #204	; 0xcc
 80018d0:	2100      	movs	r1, #0
 80018d2:	f7ff faed 	bl	8000eb0 <Set_Pixel>
	break;
 80018d6:	bf00      	nop
}

numled=16;
 80018d8:	2310      	movs	r3, #16
 80018da:	60fb      	str	r3, [r7, #12]
switch(banda2){
 80018dc:	79bb      	ldrb	r3, [r7, #6]
 80018de:	3b01      	subs	r3, #1
 80018e0:	2b06      	cmp	r3, #6
 80018e2:	f200 8340 	bhi.w	8001f66 <vumetro+0xe5a>
 80018e6:	a201      	add	r2, pc, #4	; (adr r2, 80018ec <vumetro+0x7e0>)
 80018e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ec:	08001909 	.word	0x08001909
 80018f0:	0800198f 	.word	0x0800198f
 80018f4:	08001a39 	.word	0x08001a39
 80018f8:	08001b07 	.word	0x08001b07
 80018fc:	08001bf9 	.word	0x08001bf9
 8001900:	08001d0f 	.word	0x08001d0f
 8001904:	08001e49 	.word	0x08001e49
case 1||0:
	Set_Pixel(0+numled,76,0,153);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	b2d8      	uxtb	r0, r3
 800190c:	2399      	movs	r3, #153	; 0x99
 800190e:	2200      	movs	r2, #0
 8001910:	214c      	movs	r1, #76	; 0x4c
 8001912:	f7ff facd 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8001916:	2301      	movs	r3, #1
 8001918:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800191c:	e010      	b.n	8001940 <vumetro+0x834>
		Set_Pixel(j+numled,0,0,0);
 800191e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8001922:	b2da      	uxtb	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	4413      	add	r3, r2
 800192a:	b2d8      	uxtb	r0, r3
 800192c:	2300      	movs	r3, #0
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	f7ff fabd 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8001936:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800193a:	3301      	adds	r3, #1
 800193c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 8001940:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8001944:	2b07      	cmp	r3, #7
 8001946:	d9ea      	bls.n	800191e <vumetro+0x812>
	}
	Set_Pixel(8+numled,76,0,153);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	3308      	adds	r3, #8
 800194e:	b2d8      	uxtb	r0, r3
 8001950:	2399      	movs	r3, #153	; 0x99
 8001952:	2200      	movs	r2, #0
 8001954:	214c      	movs	r1, #76	; 0x4c
 8001956:	f7ff faab 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 800195a:	2309      	movs	r3, #9
 800195c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8001960:	e010      	b.n	8001984 <vumetro+0x878>
		Set_Pixel(j+numled,0,0,0);
 8001962:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001966:	b2da      	uxtb	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4413      	add	r3, r2
 800196e:	b2d8      	uxtb	r0, r3
 8001970:	2300      	movs	r3, #0
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	f7ff fa9b 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 800197a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800197e:	3301      	adds	r3, #1
 8001980:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8001984:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001988:	2b0f      	cmp	r3, #15
 800198a:	d9ea      	bls.n	8001962 <vumetro+0x856>
	}
	break;
 800198c:	e37a      	b.n	8002084 <vumetro+0xf78>
case 2:
	Set_Pixel(0+numled,0,76,153);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	b2d8      	uxtb	r0, r3
 8001992:	2399      	movs	r3, #153	; 0x99
 8001994:	224c      	movs	r2, #76	; 0x4c
 8001996:	2100      	movs	r1, #0
 8001998:	f7ff fa8a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	3301      	adds	r3, #1
 80019a2:	b2d8      	uxtb	r0, r3
 80019a4:	2399      	movs	r3, #153	; 0x99
 80019a6:	2299      	movs	r2, #153	; 0x99
 80019a8:	2100      	movs	r1, #0
 80019aa:	f7ff fa81 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 80019ae:	2302      	movs	r3, #2
 80019b0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80019b4:	e010      	b.n	80019d8 <vumetro+0x8cc>
		Set_Pixel(j+numled,0,0,0);
 80019b6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	4413      	add	r3, r2
 80019c2:	b2d8      	uxtb	r0, r3
 80019c4:	2300      	movs	r3, #0
 80019c6:	2200      	movs	r2, #0
 80019c8:	2100      	movs	r1, #0
 80019ca:	f7ff fa71 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 80019ce:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80019d2:	3301      	adds	r3, #1
 80019d4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80019d8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80019dc:	2b07      	cmp	r3, #7
 80019de:	d9ea      	bls.n	80019b6 <vumetro+0x8aa>
	}
	Set_Pixel(8+numled,0,76,153);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	3308      	adds	r3, #8
 80019e6:	b2d8      	uxtb	r0, r3
 80019e8:	2399      	movs	r3, #153	; 0x99
 80019ea:	224c      	movs	r2, #76	; 0x4c
 80019ec:	2100      	movs	r1, #0
 80019ee:	f7ff fa5f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	3309      	adds	r3, #9
 80019f8:	b2d8      	uxtb	r0, r3
 80019fa:	2399      	movs	r3, #153	; 0x99
 80019fc:	2299      	movs	r2, #153	; 0x99
 80019fe:	2100      	movs	r1, #0
 8001a00:	f7ff fa56 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8001a04:	230a      	movs	r3, #10
 8001a06:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8001a0a:	e010      	b.n	8001a2e <vumetro+0x922>
		Set_Pixel(j+numled,0,0,0);
 8001a0c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	b2d8      	uxtb	r0, r3
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2100      	movs	r1, #0
 8001a20:	f7ff fa46 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8001a24:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8001a2e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8001a32:	2b0f      	cmp	r3, #15
 8001a34:	d9ea      	bls.n	8001a0c <vumetro+0x900>
	}
	break;
 8001a36:	e325      	b.n	8002084 <vumetro+0xf78>

case 3:
	Set_Pixel(0+numled,0,76,153);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	b2d8      	uxtb	r0, r3
 8001a3c:	2399      	movs	r3, #153	; 0x99
 8001a3e:	224c      	movs	r2, #76	; 0x4c
 8001a40:	2100      	movs	r1, #0
 8001a42:	f7ff fa35 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	b2d8      	uxtb	r0, r3
 8001a4e:	2399      	movs	r3, #153	; 0x99
 8001a50:	2299      	movs	r2, #153	; 0x99
 8001a52:	2100      	movs	r1, #0
 8001a54:	f7ff fa2c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	b2d8      	uxtb	r0, r3
 8001a60:	23cc      	movs	r3, #204	; 0xcc
 8001a62:	2200      	movs	r2, #0
 8001a64:	2166      	movs	r1, #102	; 0x66
 8001a66:	f7ff fa23 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001a70:	e010      	b.n	8001a94 <vumetro+0x988>
		Set_Pixel(j+numled,0,0,0);
 8001a72:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	b2d8      	uxtb	r0, r3
 8001a80:	2300      	movs	r3, #0
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	f7ff fa13 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8001a8a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001a94:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001a98:	2b07      	cmp	r3, #7
 8001a9a:	d9ea      	bls.n	8001a72 <vumetro+0x966>
	}
	Set_Pixel(8+numled,0,76,153);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	3308      	adds	r3, #8
 8001aa2:	b2d8      	uxtb	r0, r3
 8001aa4:	2399      	movs	r3, #153	; 0x99
 8001aa6:	224c      	movs	r2, #76	; 0x4c
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	f7ff fa01 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	3309      	adds	r3, #9
 8001ab4:	b2d8      	uxtb	r0, r3
 8001ab6:	2399      	movs	r3, #153	; 0x99
 8001ab8:	2299      	movs	r2, #153	; 0x99
 8001aba:	2100      	movs	r1, #0
 8001abc:	f7ff f9f8 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	330a      	adds	r3, #10
 8001ac6:	b2d8      	uxtb	r0, r3
 8001ac8:	23cc      	movs	r3, #204	; 0xcc
 8001aca:	2200      	movs	r2, #0
 8001acc:	2166      	movs	r1, #102	; 0x66
 8001ace:	f7ff f9ef 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8001ad2:	230b      	movs	r3, #11
 8001ad4:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8001ad8:	e010      	b.n	8001afc <vumetro+0x9f0>
		Set_Pixel(j+numled,0,0,0);
 8001ada:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b2d8      	uxtb	r0, r3
 8001ae8:	2300      	movs	r3, #0
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	f7ff f9df 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8001af2:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001af6:	3301      	adds	r3, #1
 8001af8:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8001afc:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001b00:	2b0f      	cmp	r3, #15
 8001b02:	d9ea      	bls.n	8001ada <vumetro+0x9ce>
	}
	break;
 8001b04:	e2be      	b.n	8002084 <vumetro+0xf78>
case 4:
	Set_Pixel(0+numled,0,76,153);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	b2d8      	uxtb	r0, r3
 8001b0a:	2399      	movs	r3, #153	; 0x99
 8001b0c:	224c      	movs	r2, #76	; 0x4c
 8001b0e:	2100      	movs	r1, #0
 8001b10:	f7ff f9ce 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	b2d8      	uxtb	r0, r3
 8001b1c:	2399      	movs	r3, #153	; 0x99
 8001b1e:	2299      	movs	r2, #153	; 0x99
 8001b20:	2100      	movs	r1, #0
 8001b22:	f7ff f9c5 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	b2d8      	uxtb	r0, r3
 8001b2e:	23cc      	movs	r3, #204	; 0xcc
 8001b30:	2200      	movs	r2, #0
 8001b32:	2166      	movs	r1, #102	; 0x66
 8001b34:	f7ff f9bc 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	3303      	adds	r3, #3
 8001b3e:	b2d8      	uxtb	r0, r3
 8001b40:	2300      	movs	r3, #0
 8001b42:	2200      	movs	r2, #0
 8001b44:	21cc      	movs	r1, #204	; 0xcc
 8001b46:	f7ff f9b3 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8001b50:	e010      	b.n	8001b74 <vumetro+0xa68>
		Set_Pixel(j+numled,0,0,0);
 8001b52:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	b2d8      	uxtb	r0, r3
 8001b60:	2300      	movs	r3, #0
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	f7ff f9a3 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8001b6a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001b6e:	3301      	adds	r3, #1
 8001b70:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8001b74:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001b78:	2b07      	cmp	r3, #7
 8001b7a:	d9ea      	bls.n	8001b52 <vumetro+0xa46>
	}
	Set_Pixel(8+numled,0,76,153);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	3308      	adds	r3, #8
 8001b82:	b2d8      	uxtb	r0, r3
 8001b84:	2399      	movs	r3, #153	; 0x99
 8001b86:	224c      	movs	r2, #76	; 0x4c
 8001b88:	2100      	movs	r1, #0
 8001b8a:	f7ff f991 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	3309      	adds	r3, #9
 8001b94:	b2d8      	uxtb	r0, r3
 8001b96:	2399      	movs	r3, #153	; 0x99
 8001b98:	2299      	movs	r2, #153	; 0x99
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	f7ff f988 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	330a      	adds	r3, #10
 8001ba6:	b2d8      	uxtb	r0, r3
 8001ba8:	23cc      	movs	r3, #204	; 0xcc
 8001baa:	2200      	movs	r2, #0
 8001bac:	2166      	movs	r1, #102	; 0x66
 8001bae:	f7ff f97f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	330b      	adds	r3, #11
 8001bb8:	b2d8      	uxtb	r0, r3
 8001bba:	2300      	movs	r3, #0
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	21cc      	movs	r1, #204	; 0xcc
 8001bc0:	f7ff f976 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8001bca:	e010      	b.n	8001bee <vumetro+0xae2>
		Set_Pixel(j+numled,0,0,0);
 8001bcc:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	b2d8      	uxtb	r0, r3
 8001bda:	2300      	movs	r3, #0
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2100      	movs	r1, #0
 8001be0:	f7ff f966 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8001be4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8001be8:	3301      	adds	r3, #1
 8001bea:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8001bee:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8001bf2:	2b0f      	cmp	r3, #15
 8001bf4:	d9ea      	bls.n	8001bcc <vumetro+0xac0>
	}
	break;
 8001bf6:	e245      	b.n	8002084 <vumetro+0xf78>
case 5:
	Set_Pixel(0+numled,0,76,153);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	b2d8      	uxtb	r0, r3
 8001bfc:	2399      	movs	r3, #153	; 0x99
 8001bfe:	224c      	movs	r2, #76	; 0x4c
 8001c00:	2100      	movs	r1, #0
 8001c02:	f7ff f955 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b2d8      	uxtb	r0, r3
 8001c0e:	2399      	movs	r3, #153	; 0x99
 8001c10:	2299      	movs	r2, #153	; 0x99
 8001c12:	2100      	movs	r1, #0
 8001c14:	f7ff f94c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	b2d8      	uxtb	r0, r3
 8001c20:	23cc      	movs	r3, #204	; 0xcc
 8001c22:	2200      	movs	r2, #0
 8001c24:	2166      	movs	r1, #102	; 0x66
 8001c26:	f7ff f943 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	3303      	adds	r3, #3
 8001c30:	b2d8      	uxtb	r0, r3
 8001c32:	2300      	movs	r3, #0
 8001c34:	2200      	movs	r2, #0
 8001c36:	21cc      	movs	r1, #204	; 0xcc
 8001c38:	f7ff f93a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	3304      	adds	r3, #4
 8001c42:	b2d8      	uxtb	r0, r3
 8001c44:	2300      	movs	r3, #0
 8001c46:	2200      	movs	r2, #0
 8001c48:	21cc      	movs	r1, #204	; 0xcc
 8001c4a:	f7ff f931 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8001c4e:	2305      	movs	r3, #5
 8001c50:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001c54:	e010      	b.n	8001c78 <vumetro+0xb6c>
		Set_Pixel(j+numled,0,0,0);
 8001c56:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	b2d8      	uxtb	r0, r3
 8001c64:	2300      	movs	r3, #0
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	f7ff f921 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8001c6e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001c72:	3301      	adds	r3, #1
 8001c74:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001c78:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001c7c:	2b07      	cmp	r3, #7
 8001c7e:	d9ea      	bls.n	8001c56 <vumetro+0xb4a>
	}
	Set_Pixel(8+numled,0,76,153);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	3308      	adds	r3, #8
 8001c86:	b2d8      	uxtb	r0, r3
 8001c88:	2399      	movs	r3, #153	; 0x99
 8001c8a:	224c      	movs	r2, #76	; 0x4c
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	f7ff f90f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	3309      	adds	r3, #9
 8001c98:	b2d8      	uxtb	r0, r3
 8001c9a:	2399      	movs	r3, #153	; 0x99
 8001c9c:	2299      	movs	r2, #153	; 0x99
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	f7ff f906 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	330a      	adds	r3, #10
 8001caa:	b2d8      	uxtb	r0, r3
 8001cac:	23cc      	movs	r3, #204	; 0xcc
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2166      	movs	r1, #102	; 0x66
 8001cb2:	f7ff f8fd 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	330b      	adds	r3, #11
 8001cbc:	b2d8      	uxtb	r0, r3
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	21cc      	movs	r1, #204	; 0xcc
 8001cc4:	f7ff f8f4 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	330c      	adds	r3, #12
 8001cce:	b2d8      	uxtb	r0, r3
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	21cc      	movs	r1, #204	; 0xcc
 8001cd6:	f7ff f8eb 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8001cda:	230d      	movs	r3, #13
 8001cdc:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8001ce0:	e010      	b.n	8001d04 <vumetro+0xbf8>
		Set_Pixel(j+numled,0,0,0);
 8001ce2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	b2d8      	uxtb	r0, r3
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	f7ff f8db 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8001cfa:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8001d04:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001d08:	2b0f      	cmp	r3, #15
 8001d0a:	d9ea      	bls.n	8001ce2 <vumetro+0xbd6>
	}
	break;
 8001d0c:	e1ba      	b.n	8002084 <vumetro+0xf78>
case 6:
	Set_Pixel(0+numled,0,76,153);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	b2d8      	uxtb	r0, r3
 8001d12:	2399      	movs	r3, #153	; 0x99
 8001d14:	224c      	movs	r2, #76	; 0x4c
 8001d16:	2100      	movs	r1, #0
 8001d18:	f7ff f8ca 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	3301      	adds	r3, #1
 8001d22:	b2d8      	uxtb	r0, r3
 8001d24:	2399      	movs	r3, #153	; 0x99
 8001d26:	2299      	movs	r2, #153	; 0x99
 8001d28:	2100      	movs	r1, #0
 8001d2a:	f7ff f8c1 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	3302      	adds	r3, #2
 8001d34:	b2d8      	uxtb	r0, r3
 8001d36:	23cc      	movs	r3, #204	; 0xcc
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2166      	movs	r1, #102	; 0x66
 8001d3c:	f7ff f8b8 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	3303      	adds	r3, #3
 8001d46:	b2d8      	uxtb	r0, r3
 8001d48:	2300      	movs	r3, #0
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	21cc      	movs	r1, #204	; 0xcc
 8001d4e:	f7ff f8af 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	3304      	adds	r3, #4
 8001d58:	b2d8      	uxtb	r0, r3
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	21cc      	movs	r1, #204	; 0xcc
 8001d60:	f7ff f8a6 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	3305      	adds	r3, #5
 8001d6a:	b2d8      	uxtb	r0, r3
 8001d6c:	2333      	movs	r3, #51	; 0x33
 8001d6e:	22ff      	movs	r2, #255	; 0xff
 8001d70:	21ff      	movs	r1, #255	; 0xff
 8001d72:	f7ff f89d 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8001d76:	2306      	movs	r3, #6
 8001d78:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8001d7c:	e010      	b.n	8001da0 <vumetro+0xc94>
		Set_Pixel(j+numled,0,0,0);
 8001d7e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	b2d8      	uxtb	r0, r3
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2100      	movs	r1, #0
 8001d92:	f7ff f88d 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8001d96:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8001da0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8001da4:	2b07      	cmp	r3, #7
 8001da6:	d9ea      	bls.n	8001d7e <vumetro+0xc72>
	}
	Set_Pixel(8+numled,0,76,153);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	3308      	adds	r3, #8
 8001dae:	b2d8      	uxtb	r0, r3
 8001db0:	2399      	movs	r3, #153	; 0x99
 8001db2:	224c      	movs	r2, #76	; 0x4c
 8001db4:	2100      	movs	r1, #0
 8001db6:	f7ff f87b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	3309      	adds	r3, #9
 8001dc0:	b2d8      	uxtb	r0, r3
 8001dc2:	2399      	movs	r3, #153	; 0x99
 8001dc4:	2299      	movs	r2, #153	; 0x99
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	f7ff f872 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	330a      	adds	r3, #10
 8001dd2:	b2d8      	uxtb	r0, r3
 8001dd4:	23cc      	movs	r3, #204	; 0xcc
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2166      	movs	r1, #102	; 0x66
 8001dda:	f7ff f869 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	330b      	adds	r3, #11
 8001de4:	b2d8      	uxtb	r0, r3
 8001de6:	2300      	movs	r3, #0
 8001de8:	2200      	movs	r2, #0
 8001dea:	21cc      	movs	r1, #204	; 0xcc
 8001dec:	f7ff f860 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	330c      	adds	r3, #12
 8001df6:	b2d8      	uxtb	r0, r3
 8001df8:	2300      	movs	r3, #0
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	21cc      	movs	r1, #204	; 0xcc
 8001dfe:	f7ff f857 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	330d      	adds	r3, #13
 8001e08:	b2d8      	uxtb	r0, r3
 8001e0a:	2333      	movs	r3, #51	; 0x33
 8001e0c:	22ff      	movs	r2, #255	; 0xff
 8001e0e:	21ff      	movs	r1, #255	; 0xff
 8001e10:	f7ff f84e 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8001e14:	230e      	movs	r3, #14
 8001e16:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8001e1a:	e010      	b.n	8001e3e <vumetro+0xd32>
		Set_Pixel(j+numled,0,0,0);
 8001e1c:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	b2d8      	uxtb	r0, r3
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2100      	movs	r1, #0
 8001e30:	f7ff f83e 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8001e34:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8001e3e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8001e42:	2b0f      	cmp	r3, #15
 8001e44:	d9ea      	bls.n	8001e1c <vumetro+0xd10>
	}
	break;
 8001e46:	e11d      	b.n	8002084 <vumetro+0xf78>
case 7:
	Set_Pixel(0+numled,0,76,153);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	b2d8      	uxtb	r0, r3
 8001e4c:	2399      	movs	r3, #153	; 0x99
 8001e4e:	224c      	movs	r2, #76	; 0x4c
 8001e50:	2100      	movs	r1, #0
 8001e52:	f7ff f82d 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	b2d8      	uxtb	r0, r3
 8001e5e:	2399      	movs	r3, #153	; 0x99
 8001e60:	2299      	movs	r2, #153	; 0x99
 8001e62:	2100      	movs	r1, #0
 8001e64:	f7ff f824 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	b2d8      	uxtb	r0, r3
 8001e70:	23cc      	movs	r3, #204	; 0xcc
 8001e72:	2200      	movs	r2, #0
 8001e74:	2166      	movs	r1, #102	; 0x66
 8001e76:	f7ff f81b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	3303      	adds	r3, #3
 8001e80:	b2d8      	uxtb	r0, r3
 8001e82:	2300      	movs	r3, #0
 8001e84:	2200      	movs	r2, #0
 8001e86:	21cc      	movs	r1, #204	; 0xcc
 8001e88:	f7ff f812 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	3304      	adds	r3, #4
 8001e92:	b2d8      	uxtb	r0, r3
 8001e94:	2300      	movs	r3, #0
 8001e96:	2200      	movs	r2, #0
 8001e98:	21cc      	movs	r1, #204	; 0xcc
 8001e9a:	f7ff f809 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	3305      	adds	r3, #5
 8001ea4:	b2d8      	uxtb	r0, r3
 8001ea6:	2333      	movs	r3, #51	; 0x33
 8001ea8:	22ff      	movs	r2, #255	; 0xff
 8001eaa:	21ff      	movs	r1, #255	; 0xff
 8001eac:	f7ff f800 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	3306      	adds	r3, #6
 8001eb6:	b2d8      	uxtb	r0, r3
 8001eb8:	2300      	movs	r3, #0
 8001eba:	22cc      	movs	r2, #204	; 0xcc
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	f7fe fff7 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	3307      	adds	r3, #7
 8001ec8:	b2d8      	uxtb	r0, r3
 8001eca:	2300      	movs	r3, #0
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2100      	movs	r1, #0
 8001ed0:	f7fe ffee 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	3308      	adds	r3, #8
 8001eda:	b2d8      	uxtb	r0, r3
 8001edc:	2399      	movs	r3, #153	; 0x99
 8001ede:	224c      	movs	r2, #76	; 0x4c
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	f7fe ffe5 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	3309      	adds	r3, #9
 8001eec:	b2d8      	uxtb	r0, r3
 8001eee:	2399      	movs	r3, #153	; 0x99
 8001ef0:	2299      	movs	r2, #153	; 0x99
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	f7fe ffdc 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	330a      	adds	r3, #10
 8001efe:	b2d8      	uxtb	r0, r3
 8001f00:	23cc      	movs	r3, #204	; 0xcc
 8001f02:	2200      	movs	r2, #0
 8001f04:	2166      	movs	r1, #102	; 0x66
 8001f06:	f7fe ffd3 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	330b      	adds	r3, #11
 8001f10:	b2d8      	uxtb	r0, r3
 8001f12:	2300      	movs	r3, #0
 8001f14:	2200      	movs	r2, #0
 8001f16:	21cc      	movs	r1, #204	; 0xcc
 8001f18:	f7fe ffca 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	330c      	adds	r3, #12
 8001f22:	b2d8      	uxtb	r0, r3
 8001f24:	2300      	movs	r3, #0
 8001f26:	2200      	movs	r2, #0
 8001f28:	21cc      	movs	r1, #204	; 0xcc
 8001f2a:	f7fe ffc1 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	330d      	adds	r3, #13
 8001f34:	b2d8      	uxtb	r0, r3
 8001f36:	2333      	movs	r3, #51	; 0x33
 8001f38:	22ff      	movs	r2, #255	; 0xff
 8001f3a:	21ff      	movs	r1, #255	; 0xff
 8001f3c:	f7fe ffb8 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	330e      	adds	r3, #14
 8001f46:	b2d8      	uxtb	r0, r3
 8001f48:	2300      	movs	r3, #0
 8001f4a:	22cc      	movs	r2, #204	; 0xcc
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	f7fe ffaf 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	330f      	adds	r3, #15
 8001f58:	b2d8      	uxtb	r0, r3
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2100      	movs	r1, #0
 8001f60:	f7fe ffa6 	bl	8000eb0 <Set_Pixel>
	break;
 8001f64:	e08e      	b.n	8002084 <vumetro+0xf78>
default:
	Set_Pixel(0+numled,0,76,153);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	b2d8      	uxtb	r0, r3
 8001f6a:	2399      	movs	r3, #153	; 0x99
 8001f6c:	224c      	movs	r2, #76	; 0x4c
 8001f6e:	2100      	movs	r1, #0
 8001f70:	f7fe ff9e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	3301      	adds	r3, #1
 8001f7a:	b2d8      	uxtb	r0, r3
 8001f7c:	2399      	movs	r3, #153	; 0x99
 8001f7e:	2299      	movs	r2, #153	; 0x99
 8001f80:	2100      	movs	r1, #0
 8001f82:	f7fe ff95 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	b2d8      	uxtb	r0, r3
 8001f8e:	23cc      	movs	r3, #204	; 0xcc
 8001f90:	2200      	movs	r2, #0
 8001f92:	2166      	movs	r1, #102	; 0x66
 8001f94:	f7fe ff8c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	3303      	adds	r3, #3
 8001f9e:	b2d8      	uxtb	r0, r3
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	21cc      	movs	r1, #204	; 0xcc
 8001fa6:	f7fe ff83 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	3304      	adds	r3, #4
 8001fb0:	b2d8      	uxtb	r0, r3
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	21cc      	movs	r1, #204	; 0xcc
 8001fb8:	f7fe ff7a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	3305      	adds	r3, #5
 8001fc2:	b2d8      	uxtb	r0, r3
 8001fc4:	2333      	movs	r3, #51	; 0x33
 8001fc6:	22ff      	movs	r2, #255	; 0xff
 8001fc8:	21ff      	movs	r1, #255	; 0xff
 8001fca:	f7fe ff71 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	3306      	adds	r3, #6
 8001fd4:	b2d8      	uxtb	r0, r3
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	22cc      	movs	r2, #204	; 0xcc
 8001fda:	2100      	movs	r1, #0
 8001fdc:	f7fe ff68 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	3307      	adds	r3, #7
 8001fe6:	b2d8      	uxtb	r0, r3
 8001fe8:	2300      	movs	r3, #0
 8001fea:	22cc      	movs	r2, #204	; 0xcc
 8001fec:	2100      	movs	r1, #0
 8001fee:	f7fe ff5f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	3308      	adds	r3, #8
 8001ff8:	b2d8      	uxtb	r0, r3
 8001ffa:	2399      	movs	r3, #153	; 0x99
 8001ffc:	224c      	movs	r2, #76	; 0x4c
 8001ffe:	2100      	movs	r1, #0
 8002000:	f7fe ff56 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	3309      	adds	r3, #9
 800200a:	b2d8      	uxtb	r0, r3
 800200c:	2399      	movs	r3, #153	; 0x99
 800200e:	2299      	movs	r2, #153	; 0x99
 8002010:	2100      	movs	r1, #0
 8002012:	f7fe ff4d 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	330a      	adds	r3, #10
 800201c:	b2d8      	uxtb	r0, r3
 800201e:	23cc      	movs	r3, #204	; 0xcc
 8002020:	2200      	movs	r2, #0
 8002022:	2166      	movs	r1, #102	; 0x66
 8002024:	f7fe ff44 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	330b      	adds	r3, #11
 800202e:	b2d8      	uxtb	r0, r3
 8002030:	2300      	movs	r3, #0
 8002032:	2200      	movs	r2, #0
 8002034:	21cc      	movs	r1, #204	; 0xcc
 8002036:	f7fe ff3b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	330c      	adds	r3, #12
 8002040:	b2d8      	uxtb	r0, r3
 8002042:	2300      	movs	r3, #0
 8002044:	2200      	movs	r2, #0
 8002046:	21cc      	movs	r1, #204	; 0xcc
 8002048:	f7fe ff32 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	330d      	adds	r3, #13
 8002052:	b2d8      	uxtb	r0, r3
 8002054:	2333      	movs	r3, #51	; 0x33
 8002056:	22ff      	movs	r2, #255	; 0xff
 8002058:	21ff      	movs	r1, #255	; 0xff
 800205a:	f7fe ff29 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	330e      	adds	r3, #14
 8002064:	b2d8      	uxtb	r0, r3
 8002066:	2300      	movs	r3, #0
 8002068:	22cc      	movs	r2, #204	; 0xcc
 800206a:	2100      	movs	r1, #0
 800206c:	f7fe ff20 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	330f      	adds	r3, #15
 8002076:	b2d8      	uxtb	r0, r3
 8002078:	2300      	movs	r3, #0
 800207a:	22cc      	movs	r2, #204	; 0xcc
 800207c:	2100      	movs	r1, #0
 800207e:	f7fe ff17 	bl	8000eb0 <Set_Pixel>
	break;
 8002082:	bf00      	nop
}

numled=32;
 8002084:	2320      	movs	r3, #32
 8002086:	60fb      	str	r3, [r7, #12]
switch(banda3){
 8002088:	797b      	ldrb	r3, [r7, #5]
 800208a:	3b01      	subs	r3, #1
 800208c:	2b06      	cmp	r3, #6
 800208e:	f200 8340 	bhi.w	8002712 <vumetro+0x1606>
 8002092:	a201      	add	r2, pc, #4	; (adr r2, 8002098 <vumetro+0xf8c>)
 8002094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002098:	080020b5 	.word	0x080020b5
 800209c:	0800213b 	.word	0x0800213b
 80020a0:	080021e5 	.word	0x080021e5
 80020a4:	080022b3 	.word	0x080022b3
 80020a8:	080023a5 	.word	0x080023a5
 80020ac:	080024bb 	.word	0x080024bb
 80020b0:	080025f5 	.word	0x080025f5
case 1||0:
	Set_Pixel(0+numled,76,0,153);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	b2d8      	uxtb	r0, r3
 80020b8:	2399      	movs	r3, #153	; 0x99
 80020ba:	2200      	movs	r2, #0
 80020bc:	214c      	movs	r1, #76	; 0x4c
 80020be:	f7fe fef7 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 80020c2:	2301      	movs	r3, #1
 80020c4:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80020c8:	e010      	b.n	80020ec <vumetro+0xfe0>
		Set_Pixel(j+numled,0,0,0);
 80020ca:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	b2d8      	uxtb	r0, r3
 80020d8:	2300      	movs	r3, #0
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	f7fe fee7 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 80020e2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80020e6:	3301      	adds	r3, #1
 80020e8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80020ec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80020f0:	2b07      	cmp	r3, #7
 80020f2:	d9ea      	bls.n	80020ca <vumetro+0xfbe>
	}
	Set_Pixel(8+numled,76,0,153);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	3308      	adds	r3, #8
 80020fa:	b2d8      	uxtb	r0, r3
 80020fc:	2399      	movs	r3, #153	; 0x99
 80020fe:	2200      	movs	r2, #0
 8002100:	214c      	movs	r1, #76	; 0x4c
 8002102:	f7fe fed5 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8002106:	2309      	movs	r3, #9
 8002108:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800210c:	e010      	b.n	8002130 <vumetro+0x1024>
		Set_Pixel(j+numled,0,0,0);
 800210e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002112:	b2da      	uxtb	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	4413      	add	r3, r2
 800211a:	b2d8      	uxtb	r0, r3
 800211c:	2300      	movs	r3, #0
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	f7fe fec5 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8002126:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800212a:	3301      	adds	r3, #1
 800212c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002130:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002134:	2b0f      	cmp	r3, #15
 8002136:	d9ea      	bls.n	800210e <vumetro+0x1002>
	}
	break;
 8002138:	e37a      	b.n	8002830 <vumetro+0x1724>
case 2:
	Set_Pixel(0+numled,0,76,153);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	b2d8      	uxtb	r0, r3
 800213e:	2399      	movs	r3, #153	; 0x99
 8002140:	224c      	movs	r2, #76	; 0x4c
 8002142:	2100      	movs	r1, #0
 8002144:	f7fe feb4 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	3301      	adds	r3, #1
 800214e:	b2d8      	uxtb	r0, r3
 8002150:	2399      	movs	r3, #153	; 0x99
 8002152:	2299      	movs	r2, #153	; 0x99
 8002154:	2100      	movs	r1, #0
 8002156:	f7fe feab 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 800215a:	2302      	movs	r3, #2
 800215c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8002160:	e010      	b.n	8002184 <vumetro+0x1078>
		Set_Pixel(j+numled,0,0,0);
 8002162:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002166:	b2da      	uxtb	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	4413      	add	r3, r2
 800216e:	b2d8      	uxtb	r0, r3
 8002170:	2300      	movs	r3, #0
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	f7fe fe9b 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 800217a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800217e:	3301      	adds	r3, #1
 8002180:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8002184:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002188:	2b07      	cmp	r3, #7
 800218a:	d9ea      	bls.n	8002162 <vumetro+0x1056>
	}
	Set_Pixel(8+numled,0,76,153);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	3308      	adds	r3, #8
 8002192:	b2d8      	uxtb	r0, r3
 8002194:	2399      	movs	r3, #153	; 0x99
 8002196:	224c      	movs	r2, #76	; 0x4c
 8002198:	2100      	movs	r1, #0
 800219a:	f7fe fe89 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3309      	adds	r3, #9
 80021a4:	b2d8      	uxtb	r0, r3
 80021a6:	2399      	movs	r3, #153	; 0x99
 80021a8:	2299      	movs	r2, #153	; 0x99
 80021aa:	2100      	movs	r1, #0
 80021ac:	f7fe fe80 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 80021b0:	230a      	movs	r3, #10
 80021b2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80021b6:	e010      	b.n	80021da <vumetro+0x10ce>
		Set_Pixel(j+numled,0,0,0);
 80021b8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	b2d8      	uxtb	r0, r3
 80021c6:	2300      	movs	r3, #0
 80021c8:	2200      	movs	r2, #0
 80021ca:	2100      	movs	r1, #0
 80021cc:	f7fe fe70 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 80021d0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80021d4:	3301      	adds	r3, #1
 80021d6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80021da:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80021de:	2b0f      	cmp	r3, #15
 80021e0:	d9ea      	bls.n	80021b8 <vumetro+0x10ac>
	}
	break;
 80021e2:	e325      	b.n	8002830 <vumetro+0x1724>

case 3:
	Set_Pixel(0+numled,0,76,153);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	b2d8      	uxtb	r0, r3
 80021e8:	2399      	movs	r3, #153	; 0x99
 80021ea:	224c      	movs	r2, #76	; 0x4c
 80021ec:	2100      	movs	r1, #0
 80021ee:	f7fe fe5f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	3301      	adds	r3, #1
 80021f8:	b2d8      	uxtb	r0, r3
 80021fa:	2399      	movs	r3, #153	; 0x99
 80021fc:	2299      	movs	r2, #153	; 0x99
 80021fe:	2100      	movs	r1, #0
 8002200:	f7fe fe56 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3302      	adds	r3, #2
 800220a:	b2d8      	uxtb	r0, r3
 800220c:	23cc      	movs	r3, #204	; 0xcc
 800220e:	2200      	movs	r2, #0
 8002210:	2166      	movs	r1, #102	; 0x66
 8002212:	f7fe fe4d 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8002216:	2303      	movs	r3, #3
 8002218:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800221c:	e010      	b.n	8002240 <vumetro+0x1134>
		Set_Pixel(j+numled,0,0,0);
 800221e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002222:	b2da      	uxtb	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	4413      	add	r3, r2
 800222a:	b2d8      	uxtb	r0, r3
 800222c:	2300      	movs	r3, #0
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	f7fe fe3d 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8002236:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800223a:	3301      	adds	r3, #1
 800223c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002240:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002244:	2b07      	cmp	r3, #7
 8002246:	d9ea      	bls.n	800221e <vumetro+0x1112>
	}
	Set_Pixel(8+numled,0,76,153);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	3308      	adds	r3, #8
 800224e:	b2d8      	uxtb	r0, r3
 8002250:	2399      	movs	r3, #153	; 0x99
 8002252:	224c      	movs	r2, #76	; 0x4c
 8002254:	2100      	movs	r1, #0
 8002256:	f7fe fe2b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	3309      	adds	r3, #9
 8002260:	b2d8      	uxtb	r0, r3
 8002262:	2399      	movs	r3, #153	; 0x99
 8002264:	2299      	movs	r2, #153	; 0x99
 8002266:	2100      	movs	r1, #0
 8002268:	f7fe fe22 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	330a      	adds	r3, #10
 8002272:	b2d8      	uxtb	r0, r3
 8002274:	23cc      	movs	r3, #204	; 0xcc
 8002276:	2200      	movs	r2, #0
 8002278:	2166      	movs	r1, #102	; 0x66
 800227a:	f7fe fe19 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 800227e:	230b      	movs	r3, #11
 8002280:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8002284:	e010      	b.n	80022a8 <vumetro+0x119c>
		Set_Pixel(j+numled,0,0,0);
 8002286:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800228a:	b2da      	uxtb	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	4413      	add	r3, r2
 8002292:	b2d8      	uxtb	r0, r3
 8002294:	2300      	movs	r3, #0
 8002296:	2200      	movs	r2, #0
 8002298:	2100      	movs	r1, #0
 800229a:	f7fe fe09 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 800229e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80022a2:	3301      	adds	r3, #1
 80022a4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80022a8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80022ac:	2b0f      	cmp	r3, #15
 80022ae:	d9ea      	bls.n	8002286 <vumetro+0x117a>
	}
	break;
 80022b0:	e2be      	b.n	8002830 <vumetro+0x1724>
case 4:
	Set_Pixel(0+numled,0,76,153);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	b2d8      	uxtb	r0, r3
 80022b6:	2399      	movs	r3, #153	; 0x99
 80022b8:	224c      	movs	r2, #76	; 0x4c
 80022ba:	2100      	movs	r1, #0
 80022bc:	f7fe fdf8 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	b2d8      	uxtb	r0, r3
 80022c8:	2399      	movs	r3, #153	; 0x99
 80022ca:	2299      	movs	r2, #153	; 0x99
 80022cc:	2100      	movs	r1, #0
 80022ce:	f7fe fdef 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	3302      	adds	r3, #2
 80022d8:	b2d8      	uxtb	r0, r3
 80022da:	23cc      	movs	r3, #204	; 0xcc
 80022dc:	2200      	movs	r2, #0
 80022de:	2166      	movs	r1, #102	; 0x66
 80022e0:	f7fe fde6 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	3303      	adds	r3, #3
 80022ea:	b2d8      	uxtb	r0, r3
 80022ec:	2300      	movs	r3, #0
 80022ee:	2200      	movs	r2, #0
 80022f0:	21cc      	movs	r1, #204	; 0xcc
 80022f2:	f7fe fddd 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 80022f6:	2304      	movs	r3, #4
 80022f8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80022fc:	e010      	b.n	8002320 <vumetro+0x1214>
		Set_Pixel(j+numled,0,0,0);
 80022fe:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002302:	b2da      	uxtb	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	4413      	add	r3, r2
 800230a:	b2d8      	uxtb	r0, r3
 800230c:	2300      	movs	r3, #0
 800230e:	2200      	movs	r2, #0
 8002310:	2100      	movs	r1, #0
 8002312:	f7fe fdcd 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8002316:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800231a:	3301      	adds	r3, #1
 800231c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002320:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002324:	2b07      	cmp	r3, #7
 8002326:	d9ea      	bls.n	80022fe <vumetro+0x11f2>
	}
	Set_Pixel(8+numled,0,76,153);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	3308      	adds	r3, #8
 800232e:	b2d8      	uxtb	r0, r3
 8002330:	2399      	movs	r3, #153	; 0x99
 8002332:	224c      	movs	r2, #76	; 0x4c
 8002334:	2100      	movs	r1, #0
 8002336:	f7fe fdbb 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	3309      	adds	r3, #9
 8002340:	b2d8      	uxtb	r0, r3
 8002342:	2399      	movs	r3, #153	; 0x99
 8002344:	2299      	movs	r2, #153	; 0x99
 8002346:	2100      	movs	r1, #0
 8002348:	f7fe fdb2 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	330a      	adds	r3, #10
 8002352:	b2d8      	uxtb	r0, r3
 8002354:	23cc      	movs	r3, #204	; 0xcc
 8002356:	2200      	movs	r2, #0
 8002358:	2166      	movs	r1, #102	; 0x66
 800235a:	f7fe fda9 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	330b      	adds	r3, #11
 8002364:	b2d8      	uxtb	r0, r3
 8002366:	2300      	movs	r3, #0
 8002368:	2200      	movs	r2, #0
 800236a:	21cc      	movs	r1, #204	; 0xcc
 800236c:	f7fe fda0 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8002370:	230c      	movs	r3, #12
 8002372:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8002376:	e010      	b.n	800239a <vumetro+0x128e>
		Set_Pixel(j+numled,0,0,0);
 8002378:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800237c:	b2da      	uxtb	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	4413      	add	r3, r2
 8002384:	b2d8      	uxtb	r0, r3
 8002386:	2300      	movs	r3, #0
 8002388:	2200      	movs	r2, #0
 800238a:	2100      	movs	r1, #0
 800238c:	f7fe fd90 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8002390:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002394:	3301      	adds	r3, #1
 8002396:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800239a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800239e:	2b0f      	cmp	r3, #15
 80023a0:	d9ea      	bls.n	8002378 <vumetro+0x126c>
	}
	break;
 80023a2:	e245      	b.n	8002830 <vumetro+0x1724>
case 5:
	Set_Pixel(0+numled,0,76,153);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	b2d8      	uxtb	r0, r3
 80023a8:	2399      	movs	r3, #153	; 0x99
 80023aa:	224c      	movs	r2, #76	; 0x4c
 80023ac:	2100      	movs	r1, #0
 80023ae:	f7fe fd7f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	b2d8      	uxtb	r0, r3
 80023ba:	2399      	movs	r3, #153	; 0x99
 80023bc:	2299      	movs	r2, #153	; 0x99
 80023be:	2100      	movs	r1, #0
 80023c0:	f7fe fd76 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	3302      	adds	r3, #2
 80023ca:	b2d8      	uxtb	r0, r3
 80023cc:	23cc      	movs	r3, #204	; 0xcc
 80023ce:	2200      	movs	r2, #0
 80023d0:	2166      	movs	r1, #102	; 0x66
 80023d2:	f7fe fd6d 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	3303      	adds	r3, #3
 80023dc:	b2d8      	uxtb	r0, r3
 80023de:	2300      	movs	r3, #0
 80023e0:	2200      	movs	r2, #0
 80023e2:	21cc      	movs	r1, #204	; 0xcc
 80023e4:	f7fe fd64 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	3304      	adds	r3, #4
 80023ee:	b2d8      	uxtb	r0, r3
 80023f0:	2300      	movs	r3, #0
 80023f2:	2200      	movs	r2, #0
 80023f4:	21cc      	movs	r1, #204	; 0xcc
 80023f6:	f7fe fd5b 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 80023fa:	2305      	movs	r3, #5
 80023fc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8002400:	e010      	b.n	8002424 <vumetro+0x1318>
		Set_Pixel(j+numled,0,0,0);
 8002402:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002406:	b2da      	uxtb	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4413      	add	r3, r2
 800240e:	b2d8      	uxtb	r0, r3
 8002410:	2300      	movs	r3, #0
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	f7fe fd4b 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 800241a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800241e:	3301      	adds	r3, #1
 8002420:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8002424:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002428:	2b07      	cmp	r3, #7
 800242a:	d9ea      	bls.n	8002402 <vumetro+0x12f6>
	}
	Set_Pixel(8+numled,0,76,153);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	3308      	adds	r3, #8
 8002432:	b2d8      	uxtb	r0, r3
 8002434:	2399      	movs	r3, #153	; 0x99
 8002436:	224c      	movs	r2, #76	; 0x4c
 8002438:	2100      	movs	r1, #0
 800243a:	f7fe fd39 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	3309      	adds	r3, #9
 8002444:	b2d8      	uxtb	r0, r3
 8002446:	2399      	movs	r3, #153	; 0x99
 8002448:	2299      	movs	r2, #153	; 0x99
 800244a:	2100      	movs	r1, #0
 800244c:	f7fe fd30 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	330a      	adds	r3, #10
 8002456:	b2d8      	uxtb	r0, r3
 8002458:	23cc      	movs	r3, #204	; 0xcc
 800245a:	2200      	movs	r2, #0
 800245c:	2166      	movs	r1, #102	; 0x66
 800245e:	f7fe fd27 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	330b      	adds	r3, #11
 8002468:	b2d8      	uxtb	r0, r3
 800246a:	2300      	movs	r3, #0
 800246c:	2200      	movs	r2, #0
 800246e:	21cc      	movs	r1, #204	; 0xcc
 8002470:	f7fe fd1e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	330c      	adds	r3, #12
 800247a:	b2d8      	uxtb	r0, r3
 800247c:	2300      	movs	r3, #0
 800247e:	2200      	movs	r2, #0
 8002480:	21cc      	movs	r1, #204	; 0xcc
 8002482:	f7fe fd15 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8002486:	230d      	movs	r3, #13
 8002488:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800248c:	e010      	b.n	80024b0 <vumetro+0x13a4>
		Set_Pixel(j+numled,0,0,0);
 800248e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002492:	b2da      	uxtb	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	4413      	add	r3, r2
 800249a:	b2d8      	uxtb	r0, r3
 800249c:	2300      	movs	r3, #0
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	f7fe fd05 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 80024a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80024aa:	3301      	adds	r3, #1
 80024ac:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80024b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80024b4:	2b0f      	cmp	r3, #15
 80024b6:	d9ea      	bls.n	800248e <vumetro+0x1382>
	}
	break;
 80024b8:	e1ba      	b.n	8002830 <vumetro+0x1724>
case 6:
	Set_Pixel(0+numled,0,76,153);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	b2d8      	uxtb	r0, r3
 80024be:	2399      	movs	r3, #153	; 0x99
 80024c0:	224c      	movs	r2, #76	; 0x4c
 80024c2:	2100      	movs	r1, #0
 80024c4:	f7fe fcf4 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	b2d8      	uxtb	r0, r3
 80024d0:	2399      	movs	r3, #153	; 0x99
 80024d2:	2299      	movs	r2, #153	; 0x99
 80024d4:	2100      	movs	r1, #0
 80024d6:	f7fe fceb 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	3302      	adds	r3, #2
 80024e0:	b2d8      	uxtb	r0, r3
 80024e2:	23cc      	movs	r3, #204	; 0xcc
 80024e4:	2200      	movs	r2, #0
 80024e6:	2166      	movs	r1, #102	; 0x66
 80024e8:	f7fe fce2 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	3303      	adds	r3, #3
 80024f2:	b2d8      	uxtb	r0, r3
 80024f4:	2300      	movs	r3, #0
 80024f6:	2200      	movs	r2, #0
 80024f8:	21cc      	movs	r1, #204	; 0xcc
 80024fa:	f7fe fcd9 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	3304      	adds	r3, #4
 8002504:	b2d8      	uxtb	r0, r3
 8002506:	2300      	movs	r3, #0
 8002508:	2200      	movs	r2, #0
 800250a:	21cc      	movs	r1, #204	; 0xcc
 800250c:	f7fe fcd0 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3305      	adds	r3, #5
 8002516:	b2d8      	uxtb	r0, r3
 8002518:	2333      	movs	r3, #51	; 0x33
 800251a:	22ff      	movs	r2, #255	; 0xff
 800251c:	21ff      	movs	r1, #255	; 0xff
 800251e:	f7fe fcc7 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8002522:	2306      	movs	r3, #6
 8002524:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002528:	e010      	b.n	800254c <vumetro+0x1440>
		Set_Pixel(j+numled,0,0,0);
 800252a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800252e:	b2da      	uxtb	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	4413      	add	r3, r2
 8002536:	b2d8      	uxtb	r0, r3
 8002538:	2300      	movs	r3, #0
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	f7fe fcb7 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8002542:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002546:	3301      	adds	r3, #1
 8002548:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800254c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002550:	2b07      	cmp	r3, #7
 8002552:	d9ea      	bls.n	800252a <vumetro+0x141e>
	}
	Set_Pixel(8+numled,0,76,153);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	3308      	adds	r3, #8
 800255a:	b2d8      	uxtb	r0, r3
 800255c:	2399      	movs	r3, #153	; 0x99
 800255e:	224c      	movs	r2, #76	; 0x4c
 8002560:	2100      	movs	r1, #0
 8002562:	f7fe fca5 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	3309      	adds	r3, #9
 800256c:	b2d8      	uxtb	r0, r3
 800256e:	2399      	movs	r3, #153	; 0x99
 8002570:	2299      	movs	r2, #153	; 0x99
 8002572:	2100      	movs	r1, #0
 8002574:	f7fe fc9c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	330a      	adds	r3, #10
 800257e:	b2d8      	uxtb	r0, r3
 8002580:	23cc      	movs	r3, #204	; 0xcc
 8002582:	2200      	movs	r2, #0
 8002584:	2166      	movs	r1, #102	; 0x66
 8002586:	f7fe fc93 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	330b      	adds	r3, #11
 8002590:	b2d8      	uxtb	r0, r3
 8002592:	2300      	movs	r3, #0
 8002594:	2200      	movs	r2, #0
 8002596:	21cc      	movs	r1, #204	; 0xcc
 8002598:	f7fe fc8a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	330c      	adds	r3, #12
 80025a2:	b2d8      	uxtb	r0, r3
 80025a4:	2300      	movs	r3, #0
 80025a6:	2200      	movs	r2, #0
 80025a8:	21cc      	movs	r1, #204	; 0xcc
 80025aa:	f7fe fc81 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	330d      	adds	r3, #13
 80025b4:	b2d8      	uxtb	r0, r3
 80025b6:	2333      	movs	r3, #51	; 0x33
 80025b8:	22ff      	movs	r2, #255	; 0xff
 80025ba:	21ff      	movs	r1, #255	; 0xff
 80025bc:	f7fe fc78 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 80025c0:	230e      	movs	r3, #14
 80025c2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80025c6:	e010      	b.n	80025ea <vumetro+0x14de>
		Set_Pixel(j+numled,0,0,0);
 80025c8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	b2d8      	uxtb	r0, r3
 80025d6:	2300      	movs	r3, #0
 80025d8:	2200      	movs	r2, #0
 80025da:	2100      	movs	r1, #0
 80025dc:	f7fe fc68 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 80025e0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80025e4:	3301      	adds	r3, #1
 80025e6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80025ea:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80025ee:	2b0f      	cmp	r3, #15
 80025f0:	d9ea      	bls.n	80025c8 <vumetro+0x14bc>
	}
	break;
 80025f2:	e11d      	b.n	8002830 <vumetro+0x1724>
case 7:
	Set_Pixel(0+numled,0,76,153);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	b2d8      	uxtb	r0, r3
 80025f8:	2399      	movs	r3, #153	; 0x99
 80025fa:	224c      	movs	r2, #76	; 0x4c
 80025fc:	2100      	movs	r1, #0
 80025fe:	f7fe fc57 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	3301      	adds	r3, #1
 8002608:	b2d8      	uxtb	r0, r3
 800260a:	2399      	movs	r3, #153	; 0x99
 800260c:	2299      	movs	r2, #153	; 0x99
 800260e:	2100      	movs	r1, #0
 8002610:	f7fe fc4e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	3302      	adds	r3, #2
 800261a:	b2d8      	uxtb	r0, r3
 800261c:	23cc      	movs	r3, #204	; 0xcc
 800261e:	2200      	movs	r2, #0
 8002620:	2166      	movs	r1, #102	; 0x66
 8002622:	f7fe fc45 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	3303      	adds	r3, #3
 800262c:	b2d8      	uxtb	r0, r3
 800262e:	2300      	movs	r3, #0
 8002630:	2200      	movs	r2, #0
 8002632:	21cc      	movs	r1, #204	; 0xcc
 8002634:	f7fe fc3c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	3304      	adds	r3, #4
 800263e:	b2d8      	uxtb	r0, r3
 8002640:	2300      	movs	r3, #0
 8002642:	2200      	movs	r2, #0
 8002644:	21cc      	movs	r1, #204	; 0xcc
 8002646:	f7fe fc33 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	3305      	adds	r3, #5
 8002650:	b2d8      	uxtb	r0, r3
 8002652:	2333      	movs	r3, #51	; 0x33
 8002654:	22ff      	movs	r2, #255	; 0xff
 8002656:	21ff      	movs	r1, #255	; 0xff
 8002658:	f7fe fc2a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	3306      	adds	r3, #6
 8002662:	b2d8      	uxtb	r0, r3
 8002664:	2300      	movs	r3, #0
 8002666:	22cc      	movs	r2, #204	; 0xcc
 8002668:	2100      	movs	r1, #0
 800266a:	f7fe fc21 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	3307      	adds	r3, #7
 8002674:	b2d8      	uxtb	r0, r3
 8002676:	2300      	movs	r3, #0
 8002678:	2200      	movs	r2, #0
 800267a:	2100      	movs	r1, #0
 800267c:	f7fe fc18 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	3308      	adds	r3, #8
 8002686:	b2d8      	uxtb	r0, r3
 8002688:	2399      	movs	r3, #153	; 0x99
 800268a:	224c      	movs	r2, #76	; 0x4c
 800268c:	2100      	movs	r1, #0
 800268e:	f7fe fc0f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	3309      	adds	r3, #9
 8002698:	b2d8      	uxtb	r0, r3
 800269a:	2399      	movs	r3, #153	; 0x99
 800269c:	2299      	movs	r2, #153	; 0x99
 800269e:	2100      	movs	r1, #0
 80026a0:	f7fe fc06 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	330a      	adds	r3, #10
 80026aa:	b2d8      	uxtb	r0, r3
 80026ac:	23cc      	movs	r3, #204	; 0xcc
 80026ae:	2200      	movs	r2, #0
 80026b0:	2166      	movs	r1, #102	; 0x66
 80026b2:	f7fe fbfd 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	330b      	adds	r3, #11
 80026bc:	b2d8      	uxtb	r0, r3
 80026be:	2300      	movs	r3, #0
 80026c0:	2200      	movs	r2, #0
 80026c2:	21cc      	movs	r1, #204	; 0xcc
 80026c4:	f7fe fbf4 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	330c      	adds	r3, #12
 80026ce:	b2d8      	uxtb	r0, r3
 80026d0:	2300      	movs	r3, #0
 80026d2:	2200      	movs	r2, #0
 80026d4:	21cc      	movs	r1, #204	; 0xcc
 80026d6:	f7fe fbeb 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	330d      	adds	r3, #13
 80026e0:	b2d8      	uxtb	r0, r3
 80026e2:	2333      	movs	r3, #51	; 0x33
 80026e4:	22ff      	movs	r2, #255	; 0xff
 80026e6:	21ff      	movs	r1, #255	; 0xff
 80026e8:	f7fe fbe2 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	330e      	adds	r3, #14
 80026f2:	b2d8      	uxtb	r0, r3
 80026f4:	2300      	movs	r3, #0
 80026f6:	22cc      	movs	r2, #204	; 0xcc
 80026f8:	2100      	movs	r1, #0
 80026fa:	f7fe fbd9 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	330f      	adds	r3, #15
 8002704:	b2d8      	uxtb	r0, r3
 8002706:	2300      	movs	r3, #0
 8002708:	2200      	movs	r2, #0
 800270a:	2100      	movs	r1, #0
 800270c:	f7fe fbd0 	bl	8000eb0 <Set_Pixel>
	break;
 8002710:	e08e      	b.n	8002830 <vumetro+0x1724>
default:
	Set_Pixel(0+numled,0,76,153);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	b2d8      	uxtb	r0, r3
 8002716:	2399      	movs	r3, #153	; 0x99
 8002718:	224c      	movs	r2, #76	; 0x4c
 800271a:	2100      	movs	r1, #0
 800271c:	f7fe fbc8 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	3301      	adds	r3, #1
 8002726:	b2d8      	uxtb	r0, r3
 8002728:	2399      	movs	r3, #153	; 0x99
 800272a:	2299      	movs	r2, #153	; 0x99
 800272c:	2100      	movs	r1, #0
 800272e:	f7fe fbbf 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	3302      	adds	r3, #2
 8002738:	b2d8      	uxtb	r0, r3
 800273a:	23cc      	movs	r3, #204	; 0xcc
 800273c:	2200      	movs	r2, #0
 800273e:	2166      	movs	r1, #102	; 0x66
 8002740:	f7fe fbb6 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	3303      	adds	r3, #3
 800274a:	b2d8      	uxtb	r0, r3
 800274c:	2300      	movs	r3, #0
 800274e:	2200      	movs	r2, #0
 8002750:	21cc      	movs	r1, #204	; 0xcc
 8002752:	f7fe fbad 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	3304      	adds	r3, #4
 800275c:	b2d8      	uxtb	r0, r3
 800275e:	2300      	movs	r3, #0
 8002760:	2200      	movs	r2, #0
 8002762:	21cc      	movs	r1, #204	; 0xcc
 8002764:	f7fe fba4 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	3305      	adds	r3, #5
 800276e:	b2d8      	uxtb	r0, r3
 8002770:	2333      	movs	r3, #51	; 0x33
 8002772:	22ff      	movs	r2, #255	; 0xff
 8002774:	21ff      	movs	r1, #255	; 0xff
 8002776:	f7fe fb9b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	3306      	adds	r3, #6
 8002780:	b2d8      	uxtb	r0, r3
 8002782:	2300      	movs	r3, #0
 8002784:	22cc      	movs	r2, #204	; 0xcc
 8002786:	2100      	movs	r1, #0
 8002788:	f7fe fb92 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	3307      	adds	r3, #7
 8002792:	b2d8      	uxtb	r0, r3
 8002794:	2300      	movs	r3, #0
 8002796:	22cc      	movs	r2, #204	; 0xcc
 8002798:	2100      	movs	r1, #0
 800279a:	f7fe fb89 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	3308      	adds	r3, #8
 80027a4:	b2d8      	uxtb	r0, r3
 80027a6:	2399      	movs	r3, #153	; 0x99
 80027a8:	224c      	movs	r2, #76	; 0x4c
 80027aa:	2100      	movs	r1, #0
 80027ac:	f7fe fb80 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	3309      	adds	r3, #9
 80027b6:	b2d8      	uxtb	r0, r3
 80027b8:	2399      	movs	r3, #153	; 0x99
 80027ba:	2299      	movs	r2, #153	; 0x99
 80027bc:	2100      	movs	r1, #0
 80027be:	f7fe fb77 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	330a      	adds	r3, #10
 80027c8:	b2d8      	uxtb	r0, r3
 80027ca:	23cc      	movs	r3, #204	; 0xcc
 80027cc:	2200      	movs	r2, #0
 80027ce:	2166      	movs	r1, #102	; 0x66
 80027d0:	f7fe fb6e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	330b      	adds	r3, #11
 80027da:	b2d8      	uxtb	r0, r3
 80027dc:	2300      	movs	r3, #0
 80027de:	2200      	movs	r2, #0
 80027e0:	21cc      	movs	r1, #204	; 0xcc
 80027e2:	f7fe fb65 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	330c      	adds	r3, #12
 80027ec:	b2d8      	uxtb	r0, r3
 80027ee:	2300      	movs	r3, #0
 80027f0:	2200      	movs	r2, #0
 80027f2:	21cc      	movs	r1, #204	; 0xcc
 80027f4:	f7fe fb5c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	330d      	adds	r3, #13
 80027fe:	b2d8      	uxtb	r0, r3
 8002800:	2333      	movs	r3, #51	; 0x33
 8002802:	22ff      	movs	r2, #255	; 0xff
 8002804:	21ff      	movs	r1, #255	; 0xff
 8002806:	f7fe fb53 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	330e      	adds	r3, #14
 8002810:	b2d8      	uxtb	r0, r3
 8002812:	2300      	movs	r3, #0
 8002814:	22cc      	movs	r2, #204	; 0xcc
 8002816:	2100      	movs	r1, #0
 8002818:	f7fe fb4a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	330f      	adds	r3, #15
 8002822:	b2d8      	uxtb	r0, r3
 8002824:	2300      	movs	r3, #0
 8002826:	22cc      	movs	r2, #204	; 0xcc
 8002828:	2100      	movs	r1, #0
 800282a:	f7fe fb41 	bl	8000eb0 <Set_Pixel>
	break;
 800282e:	bf00      	nop
}

numled=48;
 8002830:	2330      	movs	r3, #48	; 0x30
 8002832:	60fb      	str	r3, [r7, #12]
switch(banda4){
 8002834:	793b      	ldrb	r3, [r7, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	2b06      	cmp	r3, #6
 800283a:	f200 8340 	bhi.w	8002ebe <vumetro+0x1db2>
 800283e:	a201      	add	r2, pc, #4	; (adr r2, 8002844 <vumetro+0x1738>)
 8002840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002844:	08002861 	.word	0x08002861
 8002848:	080028e7 	.word	0x080028e7
 800284c:	08002991 	.word	0x08002991
 8002850:	08002a5f 	.word	0x08002a5f
 8002854:	08002b51 	.word	0x08002b51
 8002858:	08002c67 	.word	0x08002c67
 800285c:	08002da1 	.word	0x08002da1
case 1||0:
	Set_Pixel(0+numled,76,0,153);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	b2d8      	uxtb	r0, r3
 8002864:	2399      	movs	r3, #153	; 0x99
 8002866:	2200      	movs	r2, #0
 8002868:	214c      	movs	r1, #76	; 0x4c
 800286a:	f7fe fb21 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 800286e:	2301      	movs	r3, #1
 8002870:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002874:	e010      	b.n	8002898 <vumetro+0x178c>
		Set_Pixel(j+numled,0,0,0);
 8002876:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800287a:	b2da      	uxtb	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4413      	add	r3, r2
 8002882:	b2d8      	uxtb	r0, r3
 8002884:	2300      	movs	r3, #0
 8002886:	2200      	movs	r2, #0
 8002888:	2100      	movs	r1, #0
 800288a:	f7fe fb11 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 800288e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002892:	3301      	adds	r3, #1
 8002894:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002898:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800289c:	2b07      	cmp	r3, #7
 800289e:	d9ea      	bls.n	8002876 <vumetro+0x176a>
	}
	Set_Pixel(8+numled,76,0,153);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	3308      	adds	r3, #8
 80028a6:	b2d8      	uxtb	r0, r3
 80028a8:	2399      	movs	r3, #153	; 0x99
 80028aa:	2200      	movs	r2, #0
 80028ac:	214c      	movs	r1, #76	; 0x4c
 80028ae:	f7fe faff 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 80028b2:	2309      	movs	r3, #9
 80028b4:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 80028b8:	e010      	b.n	80028dc <vumetro+0x17d0>
		Set_Pixel(j+numled,0,0,0);
 80028ba:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	b2d8      	uxtb	r0, r3
 80028c8:	2300      	movs	r3, #0
 80028ca:	2200      	movs	r2, #0
 80028cc:	2100      	movs	r1, #0
 80028ce:	f7fe faef 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 80028d2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80028d6:	3301      	adds	r3, #1
 80028d8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 80028dc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80028e0:	2b0f      	cmp	r3, #15
 80028e2:	d9ea      	bls.n	80028ba <vumetro+0x17ae>
	}
	break;
 80028e4:	e37a      	b.n	8002fdc <vumetro+0x1ed0>
case 2:
	Set_Pixel(0+numled,0,76,153);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	b2d8      	uxtb	r0, r3
 80028ea:	2399      	movs	r3, #153	; 0x99
 80028ec:	224c      	movs	r2, #76	; 0x4c
 80028ee:	2100      	movs	r1, #0
 80028f0:	f7fe fade 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	3301      	adds	r3, #1
 80028fa:	b2d8      	uxtb	r0, r3
 80028fc:	2399      	movs	r3, #153	; 0x99
 80028fe:	2299      	movs	r2, #153	; 0x99
 8002900:	2100      	movs	r1, #0
 8002902:	f7fe fad5 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8002906:	2302      	movs	r3, #2
 8002908:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 800290c:	e010      	b.n	8002930 <vumetro+0x1824>
		Set_Pixel(j+numled,0,0,0);
 800290e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002912:	b2da      	uxtb	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	4413      	add	r3, r2
 800291a:	b2d8      	uxtb	r0, r3
 800291c:	2300      	movs	r3, #0
 800291e:	2200      	movs	r2, #0
 8002920:	2100      	movs	r1, #0
 8002922:	f7fe fac5 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8002926:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800292a:	3301      	adds	r3, #1
 800292c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8002930:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002934:	2b07      	cmp	r3, #7
 8002936:	d9ea      	bls.n	800290e <vumetro+0x1802>
	}
	Set_Pixel(8+numled,0,76,153);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	3308      	adds	r3, #8
 800293e:	b2d8      	uxtb	r0, r3
 8002940:	2399      	movs	r3, #153	; 0x99
 8002942:	224c      	movs	r2, #76	; 0x4c
 8002944:	2100      	movs	r1, #0
 8002946:	f7fe fab3 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	3309      	adds	r3, #9
 8002950:	b2d8      	uxtb	r0, r3
 8002952:	2399      	movs	r3, #153	; 0x99
 8002954:	2299      	movs	r2, #153	; 0x99
 8002956:	2100      	movs	r1, #0
 8002958:	f7fe faaa 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 800295c:	230a      	movs	r3, #10
 800295e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8002962:	e010      	b.n	8002986 <vumetro+0x187a>
		Set_Pixel(j+numled,0,0,0);
 8002964:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002968:	b2da      	uxtb	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	4413      	add	r3, r2
 8002970:	b2d8      	uxtb	r0, r3
 8002972:	2300      	movs	r3, #0
 8002974:	2200      	movs	r2, #0
 8002976:	2100      	movs	r1, #0
 8002978:	f7fe fa9a 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 800297c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002980:	3301      	adds	r3, #1
 8002982:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8002986:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800298a:	2b0f      	cmp	r3, #15
 800298c:	d9ea      	bls.n	8002964 <vumetro+0x1858>
	}
	break;
 800298e:	e325      	b.n	8002fdc <vumetro+0x1ed0>

case 3:
	Set_Pixel(0+numled,0,76,153);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	b2d8      	uxtb	r0, r3
 8002994:	2399      	movs	r3, #153	; 0x99
 8002996:	224c      	movs	r2, #76	; 0x4c
 8002998:	2100      	movs	r1, #0
 800299a:	f7fe fa89 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	3301      	adds	r3, #1
 80029a4:	b2d8      	uxtb	r0, r3
 80029a6:	2399      	movs	r3, #153	; 0x99
 80029a8:	2299      	movs	r2, #153	; 0x99
 80029aa:	2100      	movs	r1, #0
 80029ac:	f7fe fa80 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	3302      	adds	r3, #2
 80029b6:	b2d8      	uxtb	r0, r3
 80029b8:	23cc      	movs	r3, #204	; 0xcc
 80029ba:	2200      	movs	r2, #0
 80029bc:	2166      	movs	r1, #102	; 0x66
 80029be:	f7fe fa77 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 80029c2:	2303      	movs	r3, #3
 80029c4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80029c8:	e010      	b.n	80029ec <vumetro+0x18e0>
		Set_Pixel(j+numled,0,0,0);
 80029ca:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	b2d8      	uxtb	r0, r3
 80029d8:	2300      	movs	r3, #0
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	f7fe fa67 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 80029e2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80029e6:	3301      	adds	r3, #1
 80029e8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80029ec:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80029f0:	2b07      	cmp	r3, #7
 80029f2:	d9ea      	bls.n	80029ca <vumetro+0x18be>
	}
	Set_Pixel(8+numled,0,76,153);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	3308      	adds	r3, #8
 80029fa:	b2d8      	uxtb	r0, r3
 80029fc:	2399      	movs	r3, #153	; 0x99
 80029fe:	224c      	movs	r2, #76	; 0x4c
 8002a00:	2100      	movs	r1, #0
 8002a02:	f7fe fa55 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	3309      	adds	r3, #9
 8002a0c:	b2d8      	uxtb	r0, r3
 8002a0e:	2399      	movs	r3, #153	; 0x99
 8002a10:	2299      	movs	r2, #153	; 0x99
 8002a12:	2100      	movs	r1, #0
 8002a14:	f7fe fa4c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	330a      	adds	r3, #10
 8002a1e:	b2d8      	uxtb	r0, r3
 8002a20:	23cc      	movs	r3, #204	; 0xcc
 8002a22:	2200      	movs	r2, #0
 8002a24:	2166      	movs	r1, #102	; 0x66
 8002a26:	f7fe fa43 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8002a2a:	230b      	movs	r3, #11
 8002a2c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002a30:	e010      	b.n	8002a54 <vumetro+0x1948>
		Set_Pixel(j+numled,0,0,0);
 8002a32:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	b2d8      	uxtb	r0, r3
 8002a40:	2300      	movs	r3, #0
 8002a42:	2200      	movs	r2, #0
 8002a44:	2100      	movs	r1, #0
 8002a46:	f7fe fa33 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8002a4a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002a54:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002a58:	2b0f      	cmp	r3, #15
 8002a5a:	d9ea      	bls.n	8002a32 <vumetro+0x1926>
	}
	break;
 8002a5c:	e2be      	b.n	8002fdc <vumetro+0x1ed0>
case 4:
	Set_Pixel(0+numled,0,76,153);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	b2d8      	uxtb	r0, r3
 8002a62:	2399      	movs	r3, #153	; 0x99
 8002a64:	224c      	movs	r2, #76	; 0x4c
 8002a66:	2100      	movs	r1, #0
 8002a68:	f7fe fa22 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	3301      	adds	r3, #1
 8002a72:	b2d8      	uxtb	r0, r3
 8002a74:	2399      	movs	r3, #153	; 0x99
 8002a76:	2299      	movs	r2, #153	; 0x99
 8002a78:	2100      	movs	r1, #0
 8002a7a:	f7fe fa19 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	3302      	adds	r3, #2
 8002a84:	b2d8      	uxtb	r0, r3
 8002a86:	23cc      	movs	r3, #204	; 0xcc
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2166      	movs	r1, #102	; 0x66
 8002a8c:	f7fe fa10 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3303      	adds	r3, #3
 8002a96:	b2d8      	uxtb	r0, r3
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	21cc      	movs	r1, #204	; 0xcc
 8002a9e:	f7fe fa07 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002aa8:	e010      	b.n	8002acc <vumetro+0x19c0>
		Set_Pixel(j+numled,0,0,0);
 8002aaa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	b2d8      	uxtb	r0, r3
 8002ab8:	2300      	movs	r3, #0
 8002aba:	2200      	movs	r2, #0
 8002abc:	2100      	movs	r1, #0
 8002abe:	f7fe f9f7 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8002ac2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002acc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002ad0:	2b07      	cmp	r3, #7
 8002ad2:	d9ea      	bls.n	8002aaa <vumetro+0x199e>
	}
	Set_Pixel(8+numled,0,76,153);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	3308      	adds	r3, #8
 8002ada:	b2d8      	uxtb	r0, r3
 8002adc:	2399      	movs	r3, #153	; 0x99
 8002ade:	224c      	movs	r2, #76	; 0x4c
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	f7fe f9e5 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	3309      	adds	r3, #9
 8002aec:	b2d8      	uxtb	r0, r3
 8002aee:	2399      	movs	r3, #153	; 0x99
 8002af0:	2299      	movs	r2, #153	; 0x99
 8002af2:	2100      	movs	r1, #0
 8002af4:	f7fe f9dc 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	330a      	adds	r3, #10
 8002afe:	b2d8      	uxtb	r0, r3
 8002b00:	23cc      	movs	r3, #204	; 0xcc
 8002b02:	2200      	movs	r2, #0
 8002b04:	2166      	movs	r1, #102	; 0x66
 8002b06:	f7fe f9d3 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	330b      	adds	r3, #11
 8002b10:	b2d8      	uxtb	r0, r3
 8002b12:	2300      	movs	r3, #0
 8002b14:	2200      	movs	r2, #0
 8002b16:	21cc      	movs	r1, #204	; 0xcc
 8002b18:	f7fe f9ca 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8002b1c:	230c      	movs	r3, #12
 8002b1e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002b22:	e010      	b.n	8002b46 <vumetro+0x1a3a>
		Set_Pixel(j+numled,0,0,0);
 8002b24:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	b2d8      	uxtb	r0, r3
 8002b32:	2300      	movs	r3, #0
 8002b34:	2200      	movs	r2, #0
 8002b36:	2100      	movs	r1, #0
 8002b38:	f7fe f9ba 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8002b3c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002b40:	3301      	adds	r3, #1
 8002b42:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002b46:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002b4a:	2b0f      	cmp	r3, #15
 8002b4c:	d9ea      	bls.n	8002b24 <vumetro+0x1a18>
	}
	break;
 8002b4e:	e245      	b.n	8002fdc <vumetro+0x1ed0>
case 5:
	Set_Pixel(0+numled,0,76,153);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	b2d8      	uxtb	r0, r3
 8002b54:	2399      	movs	r3, #153	; 0x99
 8002b56:	224c      	movs	r2, #76	; 0x4c
 8002b58:	2100      	movs	r1, #0
 8002b5a:	f7fe f9a9 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	b2d8      	uxtb	r0, r3
 8002b66:	2399      	movs	r3, #153	; 0x99
 8002b68:	2299      	movs	r2, #153	; 0x99
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	f7fe f9a0 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	3302      	adds	r3, #2
 8002b76:	b2d8      	uxtb	r0, r3
 8002b78:	23cc      	movs	r3, #204	; 0xcc
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2166      	movs	r1, #102	; 0x66
 8002b7e:	f7fe f997 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	3303      	adds	r3, #3
 8002b88:	b2d8      	uxtb	r0, r3
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	21cc      	movs	r1, #204	; 0xcc
 8002b90:	f7fe f98e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	3304      	adds	r3, #4
 8002b9a:	b2d8      	uxtb	r0, r3
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	21cc      	movs	r1, #204	; 0xcc
 8002ba2:	f7fe f985 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8002ba6:	2305      	movs	r3, #5
 8002ba8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002bac:	e010      	b.n	8002bd0 <vumetro+0x1ac4>
		Set_Pixel(j+numled,0,0,0);
 8002bae:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	b2d8      	uxtb	r0, r3
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	f7fe f975 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8002bc6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002bd0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002bd4:	2b07      	cmp	r3, #7
 8002bd6:	d9ea      	bls.n	8002bae <vumetro+0x1aa2>
	}
	Set_Pixel(8+numled,0,76,153);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	3308      	adds	r3, #8
 8002bde:	b2d8      	uxtb	r0, r3
 8002be0:	2399      	movs	r3, #153	; 0x99
 8002be2:	224c      	movs	r2, #76	; 0x4c
 8002be4:	2100      	movs	r1, #0
 8002be6:	f7fe f963 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	3309      	adds	r3, #9
 8002bf0:	b2d8      	uxtb	r0, r3
 8002bf2:	2399      	movs	r3, #153	; 0x99
 8002bf4:	2299      	movs	r2, #153	; 0x99
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	f7fe f95a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	330a      	adds	r3, #10
 8002c02:	b2d8      	uxtb	r0, r3
 8002c04:	23cc      	movs	r3, #204	; 0xcc
 8002c06:	2200      	movs	r2, #0
 8002c08:	2166      	movs	r1, #102	; 0x66
 8002c0a:	f7fe f951 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	330b      	adds	r3, #11
 8002c14:	b2d8      	uxtb	r0, r3
 8002c16:	2300      	movs	r3, #0
 8002c18:	2200      	movs	r2, #0
 8002c1a:	21cc      	movs	r1, #204	; 0xcc
 8002c1c:	f7fe f948 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	330c      	adds	r3, #12
 8002c26:	b2d8      	uxtb	r0, r3
 8002c28:	2300      	movs	r3, #0
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	21cc      	movs	r1, #204	; 0xcc
 8002c2e:	f7fe f93f 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8002c32:	230d      	movs	r3, #13
 8002c34:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002c38:	e010      	b.n	8002c5c <vumetro+0x1b50>
		Set_Pixel(j+numled,0,0,0);
 8002c3a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	b2d8      	uxtb	r0, r3
 8002c48:	2300      	movs	r3, #0
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	f7fe f92f 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8002c52:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002c56:	3301      	adds	r3, #1
 8002c58:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002c5c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002c60:	2b0f      	cmp	r3, #15
 8002c62:	d9ea      	bls.n	8002c3a <vumetro+0x1b2e>
	}
	break;
 8002c64:	e1ba      	b.n	8002fdc <vumetro+0x1ed0>
case 6:
	Set_Pixel(0+numled,0,76,153);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	b2d8      	uxtb	r0, r3
 8002c6a:	2399      	movs	r3, #153	; 0x99
 8002c6c:	224c      	movs	r2, #76	; 0x4c
 8002c6e:	2100      	movs	r1, #0
 8002c70:	f7fe f91e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	3301      	adds	r3, #1
 8002c7a:	b2d8      	uxtb	r0, r3
 8002c7c:	2399      	movs	r3, #153	; 0x99
 8002c7e:	2299      	movs	r2, #153	; 0x99
 8002c80:	2100      	movs	r1, #0
 8002c82:	f7fe f915 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	b2d8      	uxtb	r0, r3
 8002c8e:	23cc      	movs	r3, #204	; 0xcc
 8002c90:	2200      	movs	r2, #0
 8002c92:	2166      	movs	r1, #102	; 0x66
 8002c94:	f7fe f90c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	3303      	adds	r3, #3
 8002c9e:	b2d8      	uxtb	r0, r3
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	21cc      	movs	r1, #204	; 0xcc
 8002ca6:	f7fe f903 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	3304      	adds	r3, #4
 8002cb0:	b2d8      	uxtb	r0, r3
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	21cc      	movs	r1, #204	; 0xcc
 8002cb8:	f7fe f8fa 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	3305      	adds	r3, #5
 8002cc2:	b2d8      	uxtb	r0, r3
 8002cc4:	2333      	movs	r3, #51	; 0x33
 8002cc6:	22ff      	movs	r2, #255	; 0xff
 8002cc8:	21ff      	movs	r1, #255	; 0xff
 8002cca:	f7fe f8f1 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8002cce:	2306      	movs	r3, #6
 8002cd0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002cd4:	e010      	b.n	8002cf8 <vumetro+0x1bec>
		Set_Pixel(j+numled,0,0,0);
 8002cd6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	b2d8      	uxtb	r0, r3
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2100      	movs	r1, #0
 8002cea:	f7fe f8e1 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8002cee:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002cf8:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002cfc:	2b07      	cmp	r3, #7
 8002cfe:	d9ea      	bls.n	8002cd6 <vumetro+0x1bca>
	}
	Set_Pixel(8+numled,0,76,153);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	3308      	adds	r3, #8
 8002d06:	b2d8      	uxtb	r0, r3
 8002d08:	2399      	movs	r3, #153	; 0x99
 8002d0a:	224c      	movs	r2, #76	; 0x4c
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	f7fe f8cf 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	3309      	adds	r3, #9
 8002d18:	b2d8      	uxtb	r0, r3
 8002d1a:	2399      	movs	r3, #153	; 0x99
 8002d1c:	2299      	movs	r2, #153	; 0x99
 8002d1e:	2100      	movs	r1, #0
 8002d20:	f7fe f8c6 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	330a      	adds	r3, #10
 8002d2a:	b2d8      	uxtb	r0, r3
 8002d2c:	23cc      	movs	r3, #204	; 0xcc
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2166      	movs	r1, #102	; 0x66
 8002d32:	f7fe f8bd 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	330b      	adds	r3, #11
 8002d3c:	b2d8      	uxtb	r0, r3
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2200      	movs	r2, #0
 8002d42:	21cc      	movs	r1, #204	; 0xcc
 8002d44:	f7fe f8b4 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	b2d8      	uxtb	r0, r3
 8002d50:	2300      	movs	r3, #0
 8002d52:	2200      	movs	r2, #0
 8002d54:	21cc      	movs	r1, #204	; 0xcc
 8002d56:	f7fe f8ab 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	330d      	adds	r3, #13
 8002d60:	b2d8      	uxtb	r0, r3
 8002d62:	2333      	movs	r3, #51	; 0x33
 8002d64:	22ff      	movs	r2, #255	; 0xff
 8002d66:	21ff      	movs	r1, #255	; 0xff
 8002d68:	f7fe f8a2 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8002d6c:	230e      	movs	r3, #14
 8002d6e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002d72:	e010      	b.n	8002d96 <vumetro+0x1c8a>
		Set_Pixel(j+numled,0,0,0);
 8002d74:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	b2d8      	uxtb	r0, r3
 8002d82:	2300      	movs	r3, #0
 8002d84:	2200      	movs	r2, #0
 8002d86:	2100      	movs	r1, #0
 8002d88:	f7fe f892 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8002d8c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002d90:	3301      	adds	r3, #1
 8002d92:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002d96:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002d9a:	2b0f      	cmp	r3, #15
 8002d9c:	d9ea      	bls.n	8002d74 <vumetro+0x1c68>
	}
	break;
 8002d9e:	e11d      	b.n	8002fdc <vumetro+0x1ed0>
case 7:
	Set_Pixel(0+numled,0,76,153);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	b2d8      	uxtb	r0, r3
 8002da4:	2399      	movs	r3, #153	; 0x99
 8002da6:	224c      	movs	r2, #76	; 0x4c
 8002da8:	2100      	movs	r1, #0
 8002daa:	f7fe f881 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	3301      	adds	r3, #1
 8002db4:	b2d8      	uxtb	r0, r3
 8002db6:	2399      	movs	r3, #153	; 0x99
 8002db8:	2299      	movs	r2, #153	; 0x99
 8002dba:	2100      	movs	r1, #0
 8002dbc:	f7fe f878 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	b2d8      	uxtb	r0, r3
 8002dc8:	23cc      	movs	r3, #204	; 0xcc
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2166      	movs	r1, #102	; 0x66
 8002dce:	f7fe f86f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	3303      	adds	r3, #3
 8002dd8:	b2d8      	uxtb	r0, r3
 8002dda:	2300      	movs	r3, #0
 8002ddc:	2200      	movs	r2, #0
 8002dde:	21cc      	movs	r1, #204	; 0xcc
 8002de0:	f7fe f866 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	3304      	adds	r3, #4
 8002dea:	b2d8      	uxtb	r0, r3
 8002dec:	2300      	movs	r3, #0
 8002dee:	2200      	movs	r2, #0
 8002df0:	21cc      	movs	r1, #204	; 0xcc
 8002df2:	f7fe f85d 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	3305      	adds	r3, #5
 8002dfc:	b2d8      	uxtb	r0, r3
 8002dfe:	2333      	movs	r3, #51	; 0x33
 8002e00:	22ff      	movs	r2, #255	; 0xff
 8002e02:	21ff      	movs	r1, #255	; 0xff
 8002e04:	f7fe f854 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	3306      	adds	r3, #6
 8002e0e:	b2d8      	uxtb	r0, r3
 8002e10:	2300      	movs	r3, #0
 8002e12:	22cc      	movs	r2, #204	; 0xcc
 8002e14:	2100      	movs	r1, #0
 8002e16:	f7fe f84b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	3307      	adds	r3, #7
 8002e20:	b2d8      	uxtb	r0, r3
 8002e22:	2300      	movs	r3, #0
 8002e24:	2200      	movs	r2, #0
 8002e26:	2100      	movs	r1, #0
 8002e28:	f7fe f842 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	3308      	adds	r3, #8
 8002e32:	b2d8      	uxtb	r0, r3
 8002e34:	2399      	movs	r3, #153	; 0x99
 8002e36:	224c      	movs	r2, #76	; 0x4c
 8002e38:	2100      	movs	r1, #0
 8002e3a:	f7fe f839 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	3309      	adds	r3, #9
 8002e44:	b2d8      	uxtb	r0, r3
 8002e46:	2399      	movs	r3, #153	; 0x99
 8002e48:	2299      	movs	r2, #153	; 0x99
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	f7fe f830 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	330a      	adds	r3, #10
 8002e56:	b2d8      	uxtb	r0, r3
 8002e58:	23cc      	movs	r3, #204	; 0xcc
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2166      	movs	r1, #102	; 0x66
 8002e5e:	f7fe f827 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	330b      	adds	r3, #11
 8002e68:	b2d8      	uxtb	r0, r3
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	21cc      	movs	r1, #204	; 0xcc
 8002e70:	f7fe f81e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	330c      	adds	r3, #12
 8002e7a:	b2d8      	uxtb	r0, r3
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	2200      	movs	r2, #0
 8002e80:	21cc      	movs	r1, #204	; 0xcc
 8002e82:	f7fe f815 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	330d      	adds	r3, #13
 8002e8c:	b2d8      	uxtb	r0, r3
 8002e8e:	2333      	movs	r3, #51	; 0x33
 8002e90:	22ff      	movs	r2, #255	; 0xff
 8002e92:	21ff      	movs	r1, #255	; 0xff
 8002e94:	f7fe f80c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	330e      	adds	r3, #14
 8002e9e:	b2d8      	uxtb	r0, r3
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	22cc      	movs	r2, #204	; 0xcc
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	f7fe f803 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	330f      	adds	r3, #15
 8002eb0:	b2d8      	uxtb	r0, r3
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	f7fd fffa 	bl	8000eb0 <Set_Pixel>
	break;
 8002ebc:	e08e      	b.n	8002fdc <vumetro+0x1ed0>
default:
	Set_Pixel(0+numled,0,76,153);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	b2d8      	uxtb	r0, r3
 8002ec2:	2399      	movs	r3, #153	; 0x99
 8002ec4:	224c      	movs	r2, #76	; 0x4c
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	f7fd fff2 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	b2d8      	uxtb	r0, r3
 8002ed4:	2399      	movs	r3, #153	; 0x99
 8002ed6:	2299      	movs	r2, #153	; 0x99
 8002ed8:	2100      	movs	r1, #0
 8002eda:	f7fd ffe9 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	3302      	adds	r3, #2
 8002ee4:	b2d8      	uxtb	r0, r3
 8002ee6:	23cc      	movs	r3, #204	; 0xcc
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2166      	movs	r1, #102	; 0x66
 8002eec:	f7fd ffe0 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	3303      	adds	r3, #3
 8002ef6:	b2d8      	uxtb	r0, r3
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2200      	movs	r2, #0
 8002efc:	21cc      	movs	r1, #204	; 0xcc
 8002efe:	f7fd ffd7 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	3304      	adds	r3, #4
 8002f08:	b2d8      	uxtb	r0, r3
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	21cc      	movs	r1, #204	; 0xcc
 8002f10:	f7fd ffce 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	3305      	adds	r3, #5
 8002f1a:	b2d8      	uxtb	r0, r3
 8002f1c:	2333      	movs	r3, #51	; 0x33
 8002f1e:	22ff      	movs	r2, #255	; 0xff
 8002f20:	21ff      	movs	r1, #255	; 0xff
 8002f22:	f7fd ffc5 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	3306      	adds	r3, #6
 8002f2c:	b2d8      	uxtb	r0, r3
 8002f2e:	2300      	movs	r3, #0
 8002f30:	22cc      	movs	r2, #204	; 0xcc
 8002f32:	2100      	movs	r1, #0
 8002f34:	f7fd ffbc 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	3307      	adds	r3, #7
 8002f3e:	b2d8      	uxtb	r0, r3
 8002f40:	2300      	movs	r3, #0
 8002f42:	22cc      	movs	r2, #204	; 0xcc
 8002f44:	2100      	movs	r1, #0
 8002f46:	f7fd ffb3 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	3308      	adds	r3, #8
 8002f50:	b2d8      	uxtb	r0, r3
 8002f52:	2399      	movs	r3, #153	; 0x99
 8002f54:	224c      	movs	r2, #76	; 0x4c
 8002f56:	2100      	movs	r1, #0
 8002f58:	f7fd ffaa 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	3309      	adds	r3, #9
 8002f62:	b2d8      	uxtb	r0, r3
 8002f64:	2399      	movs	r3, #153	; 0x99
 8002f66:	2299      	movs	r2, #153	; 0x99
 8002f68:	2100      	movs	r1, #0
 8002f6a:	f7fd ffa1 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	330a      	adds	r3, #10
 8002f74:	b2d8      	uxtb	r0, r3
 8002f76:	23cc      	movs	r3, #204	; 0xcc
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2166      	movs	r1, #102	; 0x66
 8002f7c:	f7fd ff98 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	330b      	adds	r3, #11
 8002f86:	b2d8      	uxtb	r0, r3
 8002f88:	2300      	movs	r3, #0
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	21cc      	movs	r1, #204	; 0xcc
 8002f8e:	f7fd ff8f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	330c      	adds	r3, #12
 8002f98:	b2d8      	uxtb	r0, r3
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	21cc      	movs	r1, #204	; 0xcc
 8002fa0:	f7fd ff86 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	330d      	adds	r3, #13
 8002faa:	b2d8      	uxtb	r0, r3
 8002fac:	2333      	movs	r3, #51	; 0x33
 8002fae:	22ff      	movs	r2, #255	; 0xff
 8002fb0:	21ff      	movs	r1, #255	; 0xff
 8002fb2:	f7fd ff7d 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	330e      	adds	r3, #14
 8002fbc:	b2d8      	uxtb	r0, r3
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	22cc      	movs	r2, #204	; 0xcc
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	f7fd ff74 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	330f      	adds	r3, #15
 8002fce:	b2d8      	uxtb	r0, r3
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	22cc      	movs	r2, #204	; 0xcc
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	f7fd ff6b 	bl	8000eb0 <Set_Pixel>
	break;
 8002fda:	bf00      	nop
}



numled=64;
 8002fdc:	2340      	movs	r3, #64	; 0x40
 8002fde:	60fb      	str	r3, [r7, #12]
switch(banda5){
 8002fe0:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	2b07      	cmp	r3, #7
 8002fe8:	f200 83d2 	bhi.w	8003790 <vumetro+0x2684>
 8002fec:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <vumetro+0x1ee8>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003015 	.word	0x08003015
 8002ff8:	0800309b 	.word	0x0800309b
 8002ffc:	08003145 	.word	0x08003145
 8003000:	08003213 	.word	0x08003213
 8003004:	08003305 	.word	0x08003305
 8003008:	0800341b 	.word	0x0800341b
 800300c:	08003555 	.word	0x08003555
 8003010:	08003673 	.word	0x08003673
case 1:
	Set_Pixel(0+numled,76,0,153);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	b2d8      	uxtb	r0, r3
 8003018:	2399      	movs	r3, #153	; 0x99
 800301a:	2200      	movs	r2, #0
 800301c:	214c      	movs	r1, #76	; 0x4c
 800301e:	f7fd ff47 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8003022:	2301      	movs	r3, #1
 8003024:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8003028:	e010      	b.n	800304c <vumetro+0x1f40>
		Set_Pixel(j+numled,0,0,0);
 800302a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800302e:	b2da      	uxtb	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	4413      	add	r3, r2
 8003036:	b2d8      	uxtb	r0, r3
 8003038:	2300      	movs	r3, #0
 800303a:	2200      	movs	r2, #0
 800303c:	2100      	movs	r1, #0
 800303e:	f7fd ff37 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8003042:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003046:	3301      	adds	r3, #1
 8003048:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800304c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003050:	2b07      	cmp	r3, #7
 8003052:	d9ea      	bls.n	800302a <vumetro+0x1f1e>
	}
	Set_Pixel(8+numled,76,0,153);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	3308      	adds	r3, #8
 800305a:	b2d8      	uxtb	r0, r3
 800305c:	2399      	movs	r3, #153	; 0x99
 800305e:	2200      	movs	r2, #0
 8003060:	214c      	movs	r1, #76	; 0x4c
 8003062:	f7fd ff25 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8003066:	2309      	movs	r3, #9
 8003068:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800306c:	e010      	b.n	8003090 <vumetro+0x1f84>
		Set_Pixel(j+numled,0,0,0);
 800306e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003072:	b2da      	uxtb	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	4413      	add	r3, r2
 800307a:	b2d8      	uxtb	r0, r3
 800307c:	2300      	movs	r3, #0
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	f7fd ff15 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8003086:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800308a:	3301      	adds	r3, #1
 800308c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8003090:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003094:	2b0f      	cmp	r3, #15
 8003096:	d9ea      	bls.n	800306e <vumetro+0x1f62>
	}
	break;
 8003098:	e37a      	b.n	8003790 <vumetro+0x2684>
case 2:
	Set_Pixel(0+numled,0,76,153);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	b2d8      	uxtb	r0, r3
 800309e:	2399      	movs	r3, #153	; 0x99
 80030a0:	224c      	movs	r2, #76	; 0x4c
 80030a2:	2100      	movs	r1, #0
 80030a4:	f7fd ff04 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	3301      	adds	r3, #1
 80030ae:	b2d8      	uxtb	r0, r3
 80030b0:	2399      	movs	r3, #153	; 0x99
 80030b2:	2299      	movs	r2, #153	; 0x99
 80030b4:	2100      	movs	r1, #0
 80030b6:	f7fd fefb 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 80030ba:	2302      	movs	r3, #2
 80030bc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80030c0:	e010      	b.n	80030e4 <vumetro+0x1fd8>
		Set_Pixel(j+numled,0,0,0);
 80030c2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	b2d8      	uxtb	r0, r3
 80030d0:	2300      	movs	r3, #0
 80030d2:	2200      	movs	r2, #0
 80030d4:	2100      	movs	r1, #0
 80030d6:	f7fd feeb 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 80030da:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80030de:	3301      	adds	r3, #1
 80030e0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80030e4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80030e8:	2b07      	cmp	r3, #7
 80030ea:	d9ea      	bls.n	80030c2 <vumetro+0x1fb6>
	}
	Set_Pixel(8+numled,0,76,153);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	3308      	adds	r3, #8
 80030f2:	b2d8      	uxtb	r0, r3
 80030f4:	2399      	movs	r3, #153	; 0x99
 80030f6:	224c      	movs	r2, #76	; 0x4c
 80030f8:	2100      	movs	r1, #0
 80030fa:	f7fd fed9 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	3309      	adds	r3, #9
 8003104:	b2d8      	uxtb	r0, r3
 8003106:	2399      	movs	r3, #153	; 0x99
 8003108:	2299      	movs	r2, #153	; 0x99
 800310a:	2100      	movs	r1, #0
 800310c:	f7fd fed0 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8003110:	230a      	movs	r3, #10
 8003112:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8003116:	e010      	b.n	800313a <vumetro+0x202e>
		Set_Pixel(j+numled,0,0,0);
 8003118:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800311c:	b2da      	uxtb	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	4413      	add	r3, r2
 8003124:	b2d8      	uxtb	r0, r3
 8003126:	2300      	movs	r3, #0
 8003128:	2200      	movs	r2, #0
 800312a:	2100      	movs	r1, #0
 800312c:	f7fd fec0 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8003130:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8003134:	3301      	adds	r3, #1
 8003136:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800313a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800313e:	2b0f      	cmp	r3, #15
 8003140:	d9ea      	bls.n	8003118 <vumetro+0x200c>
	}
	break;
 8003142:	e325      	b.n	8003790 <vumetro+0x2684>

case 3:
	Set_Pixel(0+numled,0,76,153);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	b2d8      	uxtb	r0, r3
 8003148:	2399      	movs	r3, #153	; 0x99
 800314a:	224c      	movs	r2, #76	; 0x4c
 800314c:	2100      	movs	r1, #0
 800314e:	f7fd feaf 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	3301      	adds	r3, #1
 8003158:	b2d8      	uxtb	r0, r3
 800315a:	2399      	movs	r3, #153	; 0x99
 800315c:	2299      	movs	r2, #153	; 0x99
 800315e:	2100      	movs	r1, #0
 8003160:	f7fd fea6 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	3302      	adds	r3, #2
 800316a:	b2d8      	uxtb	r0, r3
 800316c:	23cc      	movs	r3, #204	; 0xcc
 800316e:	2200      	movs	r2, #0
 8003170:	2166      	movs	r1, #102	; 0x66
 8003172:	f7fd fe9d 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8003176:	2303      	movs	r3, #3
 8003178:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800317c:	e010      	b.n	80031a0 <vumetro+0x2094>
		Set_Pixel(j+numled,0,0,0);
 800317e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003182:	b2da      	uxtb	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	4413      	add	r3, r2
 800318a:	b2d8      	uxtb	r0, r3
 800318c:	2300      	movs	r3, #0
 800318e:	2200      	movs	r2, #0
 8003190:	2100      	movs	r1, #0
 8003192:	f7fd fe8d 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8003196:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800319a:	3301      	adds	r3, #1
 800319c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80031a0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80031a4:	2b07      	cmp	r3, #7
 80031a6:	d9ea      	bls.n	800317e <vumetro+0x2072>
	}
	Set_Pixel(8+numled,0,76,153);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	3308      	adds	r3, #8
 80031ae:	b2d8      	uxtb	r0, r3
 80031b0:	2399      	movs	r3, #153	; 0x99
 80031b2:	224c      	movs	r2, #76	; 0x4c
 80031b4:	2100      	movs	r1, #0
 80031b6:	f7fd fe7b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	3309      	adds	r3, #9
 80031c0:	b2d8      	uxtb	r0, r3
 80031c2:	2399      	movs	r3, #153	; 0x99
 80031c4:	2299      	movs	r2, #153	; 0x99
 80031c6:	2100      	movs	r1, #0
 80031c8:	f7fd fe72 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	330a      	adds	r3, #10
 80031d2:	b2d8      	uxtb	r0, r3
 80031d4:	23cc      	movs	r3, #204	; 0xcc
 80031d6:	2200      	movs	r2, #0
 80031d8:	2166      	movs	r1, #102	; 0x66
 80031da:	f7fd fe69 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 80031de:	230b      	movs	r3, #11
 80031e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80031e4:	e010      	b.n	8003208 <vumetro+0x20fc>
		Set_Pixel(j+numled,0,0,0);
 80031e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	b2d8      	uxtb	r0, r3
 80031f4:	2300      	movs	r3, #0
 80031f6:	2200      	movs	r2, #0
 80031f8:	2100      	movs	r1, #0
 80031fa:	f7fd fe59 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 80031fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003202:	3301      	adds	r3, #1
 8003204:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003208:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800320c:	2b0f      	cmp	r3, #15
 800320e:	d9ea      	bls.n	80031e6 <vumetro+0x20da>
	}
	break;
 8003210:	e2be      	b.n	8003790 <vumetro+0x2684>
case 4:
	Set_Pixel(0+numled,0,76,153);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	b2d8      	uxtb	r0, r3
 8003216:	2399      	movs	r3, #153	; 0x99
 8003218:	224c      	movs	r2, #76	; 0x4c
 800321a:	2100      	movs	r1, #0
 800321c:	f7fd fe48 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	3301      	adds	r3, #1
 8003226:	b2d8      	uxtb	r0, r3
 8003228:	2399      	movs	r3, #153	; 0x99
 800322a:	2299      	movs	r2, #153	; 0x99
 800322c:	2100      	movs	r1, #0
 800322e:	f7fd fe3f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	3302      	adds	r3, #2
 8003238:	b2d8      	uxtb	r0, r3
 800323a:	23cc      	movs	r3, #204	; 0xcc
 800323c:	2200      	movs	r2, #0
 800323e:	2166      	movs	r1, #102	; 0x66
 8003240:	f7fd fe36 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	3303      	adds	r3, #3
 800324a:	b2d8      	uxtb	r0, r3
 800324c:	2300      	movs	r3, #0
 800324e:	2200      	movs	r2, #0
 8003250:	21cc      	movs	r1, #204	; 0xcc
 8003252:	f7fd fe2d 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8003256:	2304      	movs	r3, #4
 8003258:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800325c:	e010      	b.n	8003280 <vumetro+0x2174>
		Set_Pixel(j+numled,0,0,0);
 800325e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003262:	b2da      	uxtb	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	4413      	add	r3, r2
 800326a:	b2d8      	uxtb	r0, r3
 800326c:	2300      	movs	r3, #0
 800326e:	2200      	movs	r2, #0
 8003270:	2100      	movs	r1, #0
 8003272:	f7fd fe1d 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8003276:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800327a:	3301      	adds	r3, #1
 800327c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003280:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003284:	2b07      	cmp	r3, #7
 8003286:	d9ea      	bls.n	800325e <vumetro+0x2152>
	}
	Set_Pixel(8+numled,0,76,153);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	3308      	adds	r3, #8
 800328e:	b2d8      	uxtb	r0, r3
 8003290:	2399      	movs	r3, #153	; 0x99
 8003292:	224c      	movs	r2, #76	; 0x4c
 8003294:	2100      	movs	r1, #0
 8003296:	f7fd fe0b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	3309      	adds	r3, #9
 80032a0:	b2d8      	uxtb	r0, r3
 80032a2:	2399      	movs	r3, #153	; 0x99
 80032a4:	2299      	movs	r2, #153	; 0x99
 80032a6:	2100      	movs	r1, #0
 80032a8:	f7fd fe02 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	330a      	adds	r3, #10
 80032b2:	b2d8      	uxtb	r0, r3
 80032b4:	23cc      	movs	r3, #204	; 0xcc
 80032b6:	2200      	movs	r2, #0
 80032b8:	2166      	movs	r1, #102	; 0x66
 80032ba:	f7fd fdf9 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	330b      	adds	r3, #11
 80032c4:	b2d8      	uxtb	r0, r3
 80032c6:	2300      	movs	r3, #0
 80032c8:	2200      	movs	r2, #0
 80032ca:	21cc      	movs	r1, #204	; 0xcc
 80032cc:	f7fd fdf0 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 80032d0:	230c      	movs	r3, #12
 80032d2:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 80032d6:	e010      	b.n	80032fa <vumetro+0x21ee>
		Set_Pixel(j+numled,0,0,0);
 80032d8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	b2d8      	uxtb	r0, r3
 80032e6:	2300      	movs	r3, #0
 80032e8:	2200      	movs	r2, #0
 80032ea:	2100      	movs	r1, #0
 80032ec:	f7fd fde0 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 80032f0:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80032f4:	3301      	adds	r3, #1
 80032f6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 80032fa:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80032fe:	2b0f      	cmp	r3, #15
 8003300:	d9ea      	bls.n	80032d8 <vumetro+0x21cc>
	}
	break;
 8003302:	e245      	b.n	8003790 <vumetro+0x2684>
case 5:
	Set_Pixel(0+numled,0,76,153);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	b2d8      	uxtb	r0, r3
 8003308:	2399      	movs	r3, #153	; 0x99
 800330a:	224c      	movs	r2, #76	; 0x4c
 800330c:	2100      	movs	r1, #0
 800330e:	f7fd fdcf 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	3301      	adds	r3, #1
 8003318:	b2d8      	uxtb	r0, r3
 800331a:	2399      	movs	r3, #153	; 0x99
 800331c:	2299      	movs	r2, #153	; 0x99
 800331e:	2100      	movs	r1, #0
 8003320:	f7fd fdc6 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	3302      	adds	r3, #2
 800332a:	b2d8      	uxtb	r0, r3
 800332c:	23cc      	movs	r3, #204	; 0xcc
 800332e:	2200      	movs	r2, #0
 8003330:	2166      	movs	r1, #102	; 0x66
 8003332:	f7fd fdbd 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	3303      	adds	r3, #3
 800333c:	b2d8      	uxtb	r0, r3
 800333e:	2300      	movs	r3, #0
 8003340:	2200      	movs	r2, #0
 8003342:	21cc      	movs	r1, #204	; 0xcc
 8003344:	f7fd fdb4 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	3304      	adds	r3, #4
 800334e:	b2d8      	uxtb	r0, r3
 8003350:	2300      	movs	r3, #0
 8003352:	2200      	movs	r2, #0
 8003354:	21cc      	movs	r1, #204	; 0xcc
 8003356:	f7fd fdab 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 800335a:	2305      	movs	r3, #5
 800335c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003360:	e010      	b.n	8003384 <vumetro+0x2278>
		Set_Pixel(j+numled,0,0,0);
 8003362:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003366:	b2da      	uxtb	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	4413      	add	r3, r2
 800336e:	b2d8      	uxtb	r0, r3
 8003370:	2300      	movs	r3, #0
 8003372:	2200      	movs	r2, #0
 8003374:	2100      	movs	r1, #0
 8003376:	f7fd fd9b 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 800337a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800337e:	3301      	adds	r3, #1
 8003380:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003384:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003388:	2b07      	cmp	r3, #7
 800338a:	d9ea      	bls.n	8003362 <vumetro+0x2256>
	}
	Set_Pixel(8+numled,0,76,153);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	3308      	adds	r3, #8
 8003392:	b2d8      	uxtb	r0, r3
 8003394:	2399      	movs	r3, #153	; 0x99
 8003396:	224c      	movs	r2, #76	; 0x4c
 8003398:	2100      	movs	r1, #0
 800339a:	f7fd fd89 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	3309      	adds	r3, #9
 80033a4:	b2d8      	uxtb	r0, r3
 80033a6:	2399      	movs	r3, #153	; 0x99
 80033a8:	2299      	movs	r2, #153	; 0x99
 80033aa:	2100      	movs	r1, #0
 80033ac:	f7fd fd80 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	330a      	adds	r3, #10
 80033b6:	b2d8      	uxtb	r0, r3
 80033b8:	23cc      	movs	r3, #204	; 0xcc
 80033ba:	2200      	movs	r2, #0
 80033bc:	2166      	movs	r1, #102	; 0x66
 80033be:	f7fd fd77 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	330b      	adds	r3, #11
 80033c8:	b2d8      	uxtb	r0, r3
 80033ca:	2300      	movs	r3, #0
 80033cc:	2200      	movs	r2, #0
 80033ce:	21cc      	movs	r1, #204	; 0xcc
 80033d0:	f7fd fd6e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	330c      	adds	r3, #12
 80033da:	b2d8      	uxtb	r0, r3
 80033dc:	2300      	movs	r3, #0
 80033de:	2200      	movs	r2, #0
 80033e0:	21cc      	movs	r1, #204	; 0xcc
 80033e2:	f7fd fd65 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 80033e6:	230d      	movs	r3, #13
 80033e8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80033ec:	e010      	b.n	8003410 <vumetro+0x2304>
		Set_Pixel(j+numled,0,0,0);
 80033ee:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	b2d8      	uxtb	r0, r3
 80033fc:	2300      	movs	r3, #0
 80033fe:	2200      	movs	r2, #0
 8003400:	2100      	movs	r1, #0
 8003402:	f7fd fd55 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8003406:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800340a:	3301      	adds	r3, #1
 800340c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003410:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003414:	2b0f      	cmp	r3, #15
 8003416:	d9ea      	bls.n	80033ee <vumetro+0x22e2>
	}
	break;
 8003418:	e1ba      	b.n	8003790 <vumetro+0x2684>
case 6:
	Set_Pixel(0+numled,0,76,153);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	b2d8      	uxtb	r0, r3
 800341e:	2399      	movs	r3, #153	; 0x99
 8003420:	224c      	movs	r2, #76	; 0x4c
 8003422:	2100      	movs	r1, #0
 8003424:	f7fd fd44 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	3301      	adds	r3, #1
 800342e:	b2d8      	uxtb	r0, r3
 8003430:	2399      	movs	r3, #153	; 0x99
 8003432:	2299      	movs	r2, #153	; 0x99
 8003434:	2100      	movs	r1, #0
 8003436:	f7fd fd3b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	3302      	adds	r3, #2
 8003440:	b2d8      	uxtb	r0, r3
 8003442:	23cc      	movs	r3, #204	; 0xcc
 8003444:	2200      	movs	r2, #0
 8003446:	2166      	movs	r1, #102	; 0x66
 8003448:	f7fd fd32 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	3303      	adds	r3, #3
 8003452:	b2d8      	uxtb	r0, r3
 8003454:	2300      	movs	r3, #0
 8003456:	2200      	movs	r2, #0
 8003458:	21cc      	movs	r1, #204	; 0xcc
 800345a:	f7fd fd29 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	3304      	adds	r3, #4
 8003464:	b2d8      	uxtb	r0, r3
 8003466:	2300      	movs	r3, #0
 8003468:	2200      	movs	r2, #0
 800346a:	21cc      	movs	r1, #204	; 0xcc
 800346c:	f7fd fd20 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	3305      	adds	r3, #5
 8003476:	b2d8      	uxtb	r0, r3
 8003478:	2333      	movs	r3, #51	; 0x33
 800347a:	22ff      	movs	r2, #255	; 0xff
 800347c:	21ff      	movs	r1, #255	; 0xff
 800347e:	f7fd fd17 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8003482:	2306      	movs	r3, #6
 8003484:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003488:	e010      	b.n	80034ac <vumetro+0x23a0>
		Set_Pixel(j+numled,0,0,0);
 800348a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800348e:	b2da      	uxtb	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	4413      	add	r3, r2
 8003496:	b2d8      	uxtb	r0, r3
 8003498:	2300      	movs	r3, #0
 800349a:	2200      	movs	r2, #0
 800349c:	2100      	movs	r1, #0
 800349e:	f7fd fd07 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 80034a2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80034a6:	3301      	adds	r3, #1
 80034a8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80034ac:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80034b0:	2b07      	cmp	r3, #7
 80034b2:	d9ea      	bls.n	800348a <vumetro+0x237e>
	}
	Set_Pixel(8+numled,0,76,153);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	3308      	adds	r3, #8
 80034ba:	b2d8      	uxtb	r0, r3
 80034bc:	2399      	movs	r3, #153	; 0x99
 80034be:	224c      	movs	r2, #76	; 0x4c
 80034c0:	2100      	movs	r1, #0
 80034c2:	f7fd fcf5 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	3309      	adds	r3, #9
 80034cc:	b2d8      	uxtb	r0, r3
 80034ce:	2399      	movs	r3, #153	; 0x99
 80034d0:	2299      	movs	r2, #153	; 0x99
 80034d2:	2100      	movs	r1, #0
 80034d4:	f7fd fcec 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	330a      	adds	r3, #10
 80034de:	b2d8      	uxtb	r0, r3
 80034e0:	23cc      	movs	r3, #204	; 0xcc
 80034e2:	2200      	movs	r2, #0
 80034e4:	2166      	movs	r1, #102	; 0x66
 80034e6:	f7fd fce3 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	330b      	adds	r3, #11
 80034f0:	b2d8      	uxtb	r0, r3
 80034f2:	2300      	movs	r3, #0
 80034f4:	2200      	movs	r2, #0
 80034f6:	21cc      	movs	r1, #204	; 0xcc
 80034f8:	f7fd fcda 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	330c      	adds	r3, #12
 8003502:	b2d8      	uxtb	r0, r3
 8003504:	2300      	movs	r3, #0
 8003506:	2200      	movs	r2, #0
 8003508:	21cc      	movs	r1, #204	; 0xcc
 800350a:	f7fd fcd1 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	330d      	adds	r3, #13
 8003514:	b2d8      	uxtb	r0, r3
 8003516:	2333      	movs	r3, #51	; 0x33
 8003518:	22ff      	movs	r2, #255	; 0xff
 800351a:	21ff      	movs	r1, #255	; 0xff
 800351c:	f7fd fcc8 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8003520:	230e      	movs	r3, #14
 8003522:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8003526:	e010      	b.n	800354a <vumetro+0x243e>
		Set_Pixel(j+numled,0,0,0);
 8003528:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800352c:	b2da      	uxtb	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	4413      	add	r3, r2
 8003534:	b2d8      	uxtb	r0, r3
 8003536:	2300      	movs	r3, #0
 8003538:	2200      	movs	r2, #0
 800353a:	2100      	movs	r1, #0
 800353c:	f7fd fcb8 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8003540:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003544:	3301      	adds	r3, #1
 8003546:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800354a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800354e:	2b0f      	cmp	r3, #15
 8003550:	d9ea      	bls.n	8003528 <vumetro+0x241c>
	}
	break;
 8003552:	e11d      	b.n	8003790 <vumetro+0x2684>
case 7:
	Set_Pixel(0+numled,0,76,153);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	b2d8      	uxtb	r0, r3
 8003558:	2399      	movs	r3, #153	; 0x99
 800355a:	224c      	movs	r2, #76	; 0x4c
 800355c:	2100      	movs	r1, #0
 800355e:	f7fd fca7 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	3301      	adds	r3, #1
 8003568:	b2d8      	uxtb	r0, r3
 800356a:	2399      	movs	r3, #153	; 0x99
 800356c:	2299      	movs	r2, #153	; 0x99
 800356e:	2100      	movs	r1, #0
 8003570:	f7fd fc9e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	3302      	adds	r3, #2
 800357a:	b2d8      	uxtb	r0, r3
 800357c:	23cc      	movs	r3, #204	; 0xcc
 800357e:	2200      	movs	r2, #0
 8003580:	2166      	movs	r1, #102	; 0x66
 8003582:	f7fd fc95 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	3303      	adds	r3, #3
 800358c:	b2d8      	uxtb	r0, r3
 800358e:	2300      	movs	r3, #0
 8003590:	2200      	movs	r2, #0
 8003592:	21cc      	movs	r1, #204	; 0xcc
 8003594:	f7fd fc8c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	3304      	adds	r3, #4
 800359e:	b2d8      	uxtb	r0, r3
 80035a0:	2300      	movs	r3, #0
 80035a2:	2200      	movs	r2, #0
 80035a4:	21cc      	movs	r1, #204	; 0xcc
 80035a6:	f7fd fc83 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	3305      	adds	r3, #5
 80035b0:	b2d8      	uxtb	r0, r3
 80035b2:	2333      	movs	r3, #51	; 0x33
 80035b4:	22ff      	movs	r2, #255	; 0xff
 80035b6:	21ff      	movs	r1, #255	; 0xff
 80035b8:	f7fd fc7a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3306      	adds	r3, #6
 80035c2:	b2d8      	uxtb	r0, r3
 80035c4:	2300      	movs	r3, #0
 80035c6:	22cc      	movs	r2, #204	; 0xcc
 80035c8:	2100      	movs	r1, #0
 80035ca:	f7fd fc71 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	3307      	adds	r3, #7
 80035d4:	b2d8      	uxtb	r0, r3
 80035d6:	2300      	movs	r3, #0
 80035d8:	2200      	movs	r2, #0
 80035da:	2100      	movs	r1, #0
 80035dc:	f7fd fc68 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	3308      	adds	r3, #8
 80035e6:	b2d8      	uxtb	r0, r3
 80035e8:	2399      	movs	r3, #153	; 0x99
 80035ea:	224c      	movs	r2, #76	; 0x4c
 80035ec:	2100      	movs	r1, #0
 80035ee:	f7fd fc5f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	3309      	adds	r3, #9
 80035f8:	b2d8      	uxtb	r0, r3
 80035fa:	2399      	movs	r3, #153	; 0x99
 80035fc:	2299      	movs	r2, #153	; 0x99
 80035fe:	2100      	movs	r1, #0
 8003600:	f7fd fc56 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	330a      	adds	r3, #10
 800360a:	b2d8      	uxtb	r0, r3
 800360c:	23cc      	movs	r3, #204	; 0xcc
 800360e:	2200      	movs	r2, #0
 8003610:	2166      	movs	r1, #102	; 0x66
 8003612:	f7fd fc4d 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	330b      	adds	r3, #11
 800361c:	b2d8      	uxtb	r0, r3
 800361e:	2300      	movs	r3, #0
 8003620:	2200      	movs	r2, #0
 8003622:	21cc      	movs	r1, #204	; 0xcc
 8003624:	f7fd fc44 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	330c      	adds	r3, #12
 800362e:	b2d8      	uxtb	r0, r3
 8003630:	2300      	movs	r3, #0
 8003632:	2200      	movs	r2, #0
 8003634:	21cc      	movs	r1, #204	; 0xcc
 8003636:	f7fd fc3b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	330d      	adds	r3, #13
 8003640:	b2d8      	uxtb	r0, r3
 8003642:	2333      	movs	r3, #51	; 0x33
 8003644:	22ff      	movs	r2, #255	; 0xff
 8003646:	21ff      	movs	r1, #255	; 0xff
 8003648:	f7fd fc32 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	330e      	adds	r3, #14
 8003652:	b2d8      	uxtb	r0, r3
 8003654:	2300      	movs	r3, #0
 8003656:	22cc      	movs	r2, #204	; 0xcc
 8003658:	2100      	movs	r1, #0
 800365a:	f7fd fc29 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	330f      	adds	r3, #15
 8003664:	b2d8      	uxtb	r0, r3
 8003666:	2300      	movs	r3, #0
 8003668:	2200      	movs	r2, #0
 800366a:	2100      	movs	r1, #0
 800366c:	f7fd fc20 	bl	8000eb0 <Set_Pixel>
	break;
 8003670:	e08e      	b.n	8003790 <vumetro+0x2684>
case 8:
	Set_Pixel(0+numled,0,76,153);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	b2d8      	uxtb	r0, r3
 8003676:	2399      	movs	r3, #153	; 0x99
 8003678:	224c      	movs	r2, #76	; 0x4c
 800367a:	2100      	movs	r1, #0
 800367c:	f7fd fc18 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	3301      	adds	r3, #1
 8003686:	b2d8      	uxtb	r0, r3
 8003688:	2399      	movs	r3, #153	; 0x99
 800368a:	2299      	movs	r2, #153	; 0x99
 800368c:	2100      	movs	r1, #0
 800368e:	f7fd fc0f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	3302      	adds	r3, #2
 8003698:	b2d8      	uxtb	r0, r3
 800369a:	23cc      	movs	r3, #204	; 0xcc
 800369c:	2200      	movs	r2, #0
 800369e:	2166      	movs	r1, #102	; 0x66
 80036a0:	f7fd fc06 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	3303      	adds	r3, #3
 80036aa:	b2d8      	uxtb	r0, r3
 80036ac:	2300      	movs	r3, #0
 80036ae:	2200      	movs	r2, #0
 80036b0:	21cc      	movs	r1, #204	; 0xcc
 80036b2:	f7fd fbfd 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	3304      	adds	r3, #4
 80036bc:	b2d8      	uxtb	r0, r3
 80036be:	2300      	movs	r3, #0
 80036c0:	2200      	movs	r2, #0
 80036c2:	21cc      	movs	r1, #204	; 0xcc
 80036c4:	f7fd fbf4 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	3305      	adds	r3, #5
 80036ce:	b2d8      	uxtb	r0, r3
 80036d0:	2333      	movs	r3, #51	; 0x33
 80036d2:	22ff      	movs	r2, #255	; 0xff
 80036d4:	21ff      	movs	r1, #255	; 0xff
 80036d6:	f7fd fbeb 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	3306      	adds	r3, #6
 80036e0:	b2d8      	uxtb	r0, r3
 80036e2:	2300      	movs	r3, #0
 80036e4:	22cc      	movs	r2, #204	; 0xcc
 80036e6:	2100      	movs	r1, #0
 80036e8:	f7fd fbe2 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	3307      	adds	r3, #7
 80036f2:	b2d8      	uxtb	r0, r3
 80036f4:	2300      	movs	r3, #0
 80036f6:	22cc      	movs	r2, #204	; 0xcc
 80036f8:	2100      	movs	r1, #0
 80036fa:	f7fd fbd9 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	3308      	adds	r3, #8
 8003704:	b2d8      	uxtb	r0, r3
 8003706:	2399      	movs	r3, #153	; 0x99
 8003708:	224c      	movs	r2, #76	; 0x4c
 800370a:	2100      	movs	r1, #0
 800370c:	f7fd fbd0 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	3309      	adds	r3, #9
 8003716:	b2d8      	uxtb	r0, r3
 8003718:	2399      	movs	r3, #153	; 0x99
 800371a:	2299      	movs	r2, #153	; 0x99
 800371c:	2100      	movs	r1, #0
 800371e:	f7fd fbc7 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	330a      	adds	r3, #10
 8003728:	b2d8      	uxtb	r0, r3
 800372a:	23cc      	movs	r3, #204	; 0xcc
 800372c:	2200      	movs	r2, #0
 800372e:	2166      	movs	r1, #102	; 0x66
 8003730:	f7fd fbbe 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	330b      	adds	r3, #11
 800373a:	b2d8      	uxtb	r0, r3
 800373c:	2300      	movs	r3, #0
 800373e:	2200      	movs	r2, #0
 8003740:	21cc      	movs	r1, #204	; 0xcc
 8003742:	f7fd fbb5 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	330c      	adds	r3, #12
 800374c:	b2d8      	uxtb	r0, r3
 800374e:	2300      	movs	r3, #0
 8003750:	2200      	movs	r2, #0
 8003752:	21cc      	movs	r1, #204	; 0xcc
 8003754:	f7fd fbac 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	330d      	adds	r3, #13
 800375e:	b2d8      	uxtb	r0, r3
 8003760:	2333      	movs	r3, #51	; 0x33
 8003762:	22ff      	movs	r2, #255	; 0xff
 8003764:	21ff      	movs	r1, #255	; 0xff
 8003766:	f7fd fba3 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	330e      	adds	r3, #14
 8003770:	b2d8      	uxtb	r0, r3
 8003772:	2300      	movs	r3, #0
 8003774:	22cc      	movs	r2, #204	; 0xcc
 8003776:	2100      	movs	r1, #0
 8003778:	f7fd fb9a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	330f      	adds	r3, #15
 8003782:	b2d8      	uxtb	r0, r3
 8003784:	2300      	movs	r3, #0
 8003786:	22cc      	movs	r2, #204	; 0xcc
 8003788:	2100      	movs	r1, #0
 800378a:	f7fd fb91 	bl	8000eb0 <Set_Pixel>
	break;
 800378e:	bf00      	nop
}

numled=80;
 8003790:	2350      	movs	r3, #80	; 0x50
 8003792:	60fb      	str	r3, [r7, #12]
switch(banda6){
 8003794:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8003798:	3b01      	subs	r3, #1
 800379a:	2b07      	cmp	r3, #7
 800379c:	f200 83d2 	bhi.w	8003f44 <vumetro+0x2e38>
 80037a0:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <vumetro+0x269c>)
 80037a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a6:	bf00      	nop
 80037a8:	080037c9 	.word	0x080037c9
 80037ac:	0800384f 	.word	0x0800384f
 80037b0:	080038f9 	.word	0x080038f9
 80037b4:	080039c7 	.word	0x080039c7
 80037b8:	08003ab9 	.word	0x08003ab9
 80037bc:	08003bcf 	.word	0x08003bcf
 80037c0:	08003d09 	.word	0x08003d09
 80037c4:	08003e27 	.word	0x08003e27
case 1:
	Set_Pixel(0+numled,76,0,153);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	b2d8      	uxtb	r0, r3
 80037cc:	2399      	movs	r3, #153	; 0x99
 80037ce:	2200      	movs	r2, #0
 80037d0:	214c      	movs	r1, #76	; 0x4c
 80037d2:	f7fd fb6d 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 80037d6:	2301      	movs	r3, #1
 80037d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80037dc:	e010      	b.n	8003800 <vumetro+0x26f4>
		Set_Pixel(j+numled,0,0,0);
 80037de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	b2d8      	uxtb	r0, r3
 80037ec:	2300      	movs	r3, #0
 80037ee:	2200      	movs	r2, #0
 80037f0:	2100      	movs	r1, #0
 80037f2:	f7fd fb5d 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 80037f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80037fa:	3301      	adds	r3, #1
 80037fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003800:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003804:	2b07      	cmp	r3, #7
 8003806:	d9ea      	bls.n	80037de <vumetro+0x26d2>
	}
	Set_Pixel(8+numled,76,0,153);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	3308      	adds	r3, #8
 800380e:	b2d8      	uxtb	r0, r3
 8003810:	2399      	movs	r3, #153	; 0x99
 8003812:	2200      	movs	r2, #0
 8003814:	214c      	movs	r1, #76	; 0x4c
 8003816:	f7fd fb4b 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 800381a:	2309      	movs	r3, #9
 800381c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8003820:	e010      	b.n	8003844 <vumetro+0x2738>
		Set_Pixel(j+numled,0,0,0);
 8003822:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003826:	b2da      	uxtb	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	4413      	add	r3, r2
 800382e:	b2d8      	uxtb	r0, r3
 8003830:	2300      	movs	r3, #0
 8003832:	2200      	movs	r2, #0
 8003834:	2100      	movs	r1, #0
 8003836:	f7fd fb3b 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 800383a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800383e:	3301      	adds	r3, #1
 8003840:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8003844:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003848:	2b0f      	cmp	r3, #15
 800384a:	d9ea      	bls.n	8003822 <vumetro+0x2716>
	}
	break;
 800384c:	e37a      	b.n	8003f44 <vumetro+0x2e38>
case 2:
	Set_Pixel(0+numled,0,76,153);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	b2d8      	uxtb	r0, r3
 8003852:	2399      	movs	r3, #153	; 0x99
 8003854:	224c      	movs	r2, #76	; 0x4c
 8003856:	2100      	movs	r1, #0
 8003858:	f7fd fb2a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	3301      	adds	r3, #1
 8003862:	b2d8      	uxtb	r0, r3
 8003864:	2399      	movs	r3, #153	; 0x99
 8003866:	2299      	movs	r2, #153	; 0x99
 8003868:	2100      	movs	r1, #0
 800386a:	f7fd fb21 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 800386e:	2302      	movs	r3, #2
 8003870:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003874:	e010      	b.n	8003898 <vumetro+0x278c>
		Set_Pixel(j+numled,0,0,0);
 8003876:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800387a:	b2da      	uxtb	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	4413      	add	r3, r2
 8003882:	b2d8      	uxtb	r0, r3
 8003884:	2300      	movs	r3, #0
 8003886:	2200      	movs	r2, #0
 8003888:	2100      	movs	r1, #0
 800388a:	f7fd fb11 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 800388e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003892:	3301      	adds	r3, #1
 8003894:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003898:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800389c:	2b07      	cmp	r3, #7
 800389e:	d9ea      	bls.n	8003876 <vumetro+0x276a>
	}
	Set_Pixel(8+numled,0,76,153);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	3308      	adds	r3, #8
 80038a6:	b2d8      	uxtb	r0, r3
 80038a8:	2399      	movs	r3, #153	; 0x99
 80038aa:	224c      	movs	r2, #76	; 0x4c
 80038ac:	2100      	movs	r1, #0
 80038ae:	f7fd faff 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	3309      	adds	r3, #9
 80038b8:	b2d8      	uxtb	r0, r3
 80038ba:	2399      	movs	r3, #153	; 0x99
 80038bc:	2299      	movs	r2, #153	; 0x99
 80038be:	2100      	movs	r1, #0
 80038c0:	f7fd faf6 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 80038c4:	230a      	movs	r3, #10
 80038c6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80038ca:	e010      	b.n	80038ee <vumetro+0x27e2>
		Set_Pixel(j+numled,0,0,0);
 80038cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	b2d8      	uxtb	r0, r3
 80038da:	2300      	movs	r3, #0
 80038dc:	2200      	movs	r2, #0
 80038de:	2100      	movs	r1, #0
 80038e0:	f7fd fae6 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 80038e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038e8:	3301      	adds	r3, #1
 80038ea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80038ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038f2:	2b0f      	cmp	r3, #15
 80038f4:	d9ea      	bls.n	80038cc <vumetro+0x27c0>
	}
	break;
 80038f6:	e325      	b.n	8003f44 <vumetro+0x2e38>

case 3:
	Set_Pixel(0+numled,0,76,153);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	b2d8      	uxtb	r0, r3
 80038fc:	2399      	movs	r3, #153	; 0x99
 80038fe:	224c      	movs	r2, #76	; 0x4c
 8003900:	2100      	movs	r1, #0
 8003902:	f7fd fad5 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	3301      	adds	r3, #1
 800390c:	b2d8      	uxtb	r0, r3
 800390e:	2399      	movs	r3, #153	; 0x99
 8003910:	2299      	movs	r2, #153	; 0x99
 8003912:	2100      	movs	r1, #0
 8003914:	f7fd facc 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	b2db      	uxtb	r3, r3
 800391c:	3302      	adds	r3, #2
 800391e:	b2d8      	uxtb	r0, r3
 8003920:	23cc      	movs	r3, #204	; 0xcc
 8003922:	2200      	movs	r2, #0
 8003924:	2166      	movs	r1, #102	; 0x66
 8003926:	f7fd fac3 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 800392a:	2303      	movs	r3, #3
 800392c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003930:	e010      	b.n	8003954 <vumetro+0x2848>
		Set_Pixel(j+numled,0,0,0);
 8003932:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003936:	b2da      	uxtb	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	4413      	add	r3, r2
 800393e:	b2d8      	uxtb	r0, r3
 8003940:	2300      	movs	r3, #0
 8003942:	2200      	movs	r2, #0
 8003944:	2100      	movs	r1, #0
 8003946:	f7fd fab3 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 800394a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800394e:	3301      	adds	r3, #1
 8003950:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003954:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003958:	2b07      	cmp	r3, #7
 800395a:	d9ea      	bls.n	8003932 <vumetro+0x2826>
	}
	Set_Pixel(8+numled,0,76,153);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	b2db      	uxtb	r3, r3
 8003960:	3308      	adds	r3, #8
 8003962:	b2d8      	uxtb	r0, r3
 8003964:	2399      	movs	r3, #153	; 0x99
 8003966:	224c      	movs	r2, #76	; 0x4c
 8003968:	2100      	movs	r1, #0
 800396a:	f7fd faa1 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	3309      	adds	r3, #9
 8003974:	b2d8      	uxtb	r0, r3
 8003976:	2399      	movs	r3, #153	; 0x99
 8003978:	2299      	movs	r2, #153	; 0x99
 800397a:	2100      	movs	r1, #0
 800397c:	f7fd fa98 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	330a      	adds	r3, #10
 8003986:	b2d8      	uxtb	r0, r3
 8003988:	23cc      	movs	r3, #204	; 0xcc
 800398a:	2200      	movs	r2, #0
 800398c:	2166      	movs	r1, #102	; 0x66
 800398e:	f7fd fa8f 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8003992:	230b      	movs	r3, #11
 8003994:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003998:	e010      	b.n	80039bc <vumetro+0x28b0>
		Set_Pixel(j+numled,0,0,0);
 800399a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	b2d8      	uxtb	r0, r3
 80039a8:	2300      	movs	r3, #0
 80039aa:	2200      	movs	r2, #0
 80039ac:	2100      	movs	r1, #0
 80039ae:	f7fd fa7f 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 80039b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80039b6:	3301      	adds	r3, #1
 80039b8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80039bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80039c0:	2b0f      	cmp	r3, #15
 80039c2:	d9ea      	bls.n	800399a <vumetro+0x288e>
	}
	break;
 80039c4:	e2be      	b.n	8003f44 <vumetro+0x2e38>
case 4:
	Set_Pixel(0+numled,0,76,153);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	b2d8      	uxtb	r0, r3
 80039ca:	2399      	movs	r3, #153	; 0x99
 80039cc:	224c      	movs	r2, #76	; 0x4c
 80039ce:	2100      	movs	r1, #0
 80039d0:	f7fd fa6e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	3301      	adds	r3, #1
 80039da:	b2d8      	uxtb	r0, r3
 80039dc:	2399      	movs	r3, #153	; 0x99
 80039de:	2299      	movs	r2, #153	; 0x99
 80039e0:	2100      	movs	r1, #0
 80039e2:	f7fd fa65 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	3302      	adds	r3, #2
 80039ec:	b2d8      	uxtb	r0, r3
 80039ee:	23cc      	movs	r3, #204	; 0xcc
 80039f0:	2200      	movs	r2, #0
 80039f2:	2166      	movs	r1, #102	; 0x66
 80039f4:	f7fd fa5c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	3303      	adds	r3, #3
 80039fe:	b2d8      	uxtb	r0, r3
 8003a00:	2300      	movs	r3, #0
 8003a02:	2200      	movs	r2, #0
 8003a04:	21cc      	movs	r1, #204	; 0xcc
 8003a06:	f7fd fa53 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8003a0a:	2304      	movs	r3, #4
 8003a0c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003a10:	e010      	b.n	8003a34 <vumetro+0x2928>
		Set_Pixel(j+numled,0,0,0);
 8003a12:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	b2d8      	uxtb	r0, r3
 8003a20:	2300      	movs	r3, #0
 8003a22:	2200      	movs	r2, #0
 8003a24:	2100      	movs	r1, #0
 8003a26:	f7fd fa43 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8003a2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a2e:	3301      	adds	r3, #1
 8003a30:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003a34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a38:	2b07      	cmp	r3, #7
 8003a3a:	d9ea      	bls.n	8003a12 <vumetro+0x2906>
	}
	Set_Pixel(8+numled,0,76,153);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	3308      	adds	r3, #8
 8003a42:	b2d8      	uxtb	r0, r3
 8003a44:	2399      	movs	r3, #153	; 0x99
 8003a46:	224c      	movs	r2, #76	; 0x4c
 8003a48:	2100      	movs	r1, #0
 8003a4a:	f7fd fa31 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	3309      	adds	r3, #9
 8003a54:	b2d8      	uxtb	r0, r3
 8003a56:	2399      	movs	r3, #153	; 0x99
 8003a58:	2299      	movs	r2, #153	; 0x99
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	f7fd fa28 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	330a      	adds	r3, #10
 8003a66:	b2d8      	uxtb	r0, r3
 8003a68:	23cc      	movs	r3, #204	; 0xcc
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2166      	movs	r1, #102	; 0x66
 8003a6e:	f7fd fa1f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	330b      	adds	r3, #11
 8003a78:	b2d8      	uxtb	r0, r3
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	21cc      	movs	r1, #204	; 0xcc
 8003a80:	f7fd fa16 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8003a84:	230c      	movs	r3, #12
 8003a86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003a8a:	e010      	b.n	8003aae <vumetro+0x29a2>
		Set_Pixel(j+numled,0,0,0);
 8003a8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	4413      	add	r3, r2
 8003a98:	b2d8      	uxtb	r0, r3
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	f7fd fa06 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8003aa4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003aae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003ab2:	2b0f      	cmp	r3, #15
 8003ab4:	d9ea      	bls.n	8003a8c <vumetro+0x2980>
	}
	break;
 8003ab6:	e245      	b.n	8003f44 <vumetro+0x2e38>
case 5:
	Set_Pixel(0+numled,0,76,153);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	b2d8      	uxtb	r0, r3
 8003abc:	2399      	movs	r3, #153	; 0x99
 8003abe:	224c      	movs	r2, #76	; 0x4c
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	f7fd f9f5 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	b2d8      	uxtb	r0, r3
 8003ace:	2399      	movs	r3, #153	; 0x99
 8003ad0:	2299      	movs	r2, #153	; 0x99
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	f7fd f9ec 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	3302      	adds	r3, #2
 8003ade:	b2d8      	uxtb	r0, r3
 8003ae0:	23cc      	movs	r3, #204	; 0xcc
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2166      	movs	r1, #102	; 0x66
 8003ae6:	f7fd f9e3 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	3303      	adds	r3, #3
 8003af0:	b2d8      	uxtb	r0, r3
 8003af2:	2300      	movs	r3, #0
 8003af4:	2200      	movs	r2, #0
 8003af6:	21cc      	movs	r1, #204	; 0xcc
 8003af8:	f7fd f9da 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	3304      	adds	r3, #4
 8003b02:	b2d8      	uxtb	r0, r3
 8003b04:	2300      	movs	r3, #0
 8003b06:	2200      	movs	r2, #0
 8003b08:	21cc      	movs	r1, #204	; 0xcc
 8003b0a:	f7fd f9d1 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8003b0e:	2305      	movs	r3, #5
 8003b10:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003b14:	e010      	b.n	8003b38 <vumetro+0x2a2c>
		Set_Pixel(j+numled,0,0,0);
 8003b16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	4413      	add	r3, r2
 8003b22:	b2d8      	uxtb	r0, r3
 8003b24:	2300      	movs	r3, #0
 8003b26:	2200      	movs	r2, #0
 8003b28:	2100      	movs	r1, #0
 8003b2a:	f7fd f9c1 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8003b2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003b32:	3301      	adds	r3, #1
 8003b34:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003b38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003b3c:	2b07      	cmp	r3, #7
 8003b3e:	d9ea      	bls.n	8003b16 <vumetro+0x2a0a>
	}
	Set_Pixel(8+numled,0,76,153);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	3308      	adds	r3, #8
 8003b46:	b2d8      	uxtb	r0, r3
 8003b48:	2399      	movs	r3, #153	; 0x99
 8003b4a:	224c      	movs	r2, #76	; 0x4c
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	f7fd f9af 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	3309      	adds	r3, #9
 8003b58:	b2d8      	uxtb	r0, r3
 8003b5a:	2399      	movs	r3, #153	; 0x99
 8003b5c:	2299      	movs	r2, #153	; 0x99
 8003b5e:	2100      	movs	r1, #0
 8003b60:	f7fd f9a6 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	330a      	adds	r3, #10
 8003b6a:	b2d8      	uxtb	r0, r3
 8003b6c:	23cc      	movs	r3, #204	; 0xcc
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2166      	movs	r1, #102	; 0x66
 8003b72:	f7fd f99d 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	330b      	adds	r3, #11
 8003b7c:	b2d8      	uxtb	r0, r3
 8003b7e:	2300      	movs	r3, #0
 8003b80:	2200      	movs	r2, #0
 8003b82:	21cc      	movs	r1, #204	; 0xcc
 8003b84:	f7fd f994 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	330c      	adds	r3, #12
 8003b8e:	b2d8      	uxtb	r0, r3
 8003b90:	2300      	movs	r3, #0
 8003b92:	2200      	movs	r2, #0
 8003b94:	21cc      	movs	r1, #204	; 0xcc
 8003b96:	f7fd f98b 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8003b9a:	230d      	movs	r3, #13
 8003b9c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003ba0:	e010      	b.n	8003bc4 <vumetro+0x2ab8>
		Set_Pixel(j+numled,0,0,0);
 8003ba2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	4413      	add	r3, r2
 8003bae:	b2d8      	uxtb	r0, r3
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	f7fd f97b 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8003bba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003bc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003bc8:	2b0f      	cmp	r3, #15
 8003bca:	d9ea      	bls.n	8003ba2 <vumetro+0x2a96>
	}
	break;
 8003bcc:	e1ba      	b.n	8003f44 <vumetro+0x2e38>
case 6:
	Set_Pixel(0+numled,0,76,153);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	b2d8      	uxtb	r0, r3
 8003bd2:	2399      	movs	r3, #153	; 0x99
 8003bd4:	224c      	movs	r2, #76	; 0x4c
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	f7fd f96a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	3301      	adds	r3, #1
 8003be2:	b2d8      	uxtb	r0, r3
 8003be4:	2399      	movs	r3, #153	; 0x99
 8003be6:	2299      	movs	r2, #153	; 0x99
 8003be8:	2100      	movs	r1, #0
 8003bea:	f7fd f961 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	3302      	adds	r3, #2
 8003bf4:	b2d8      	uxtb	r0, r3
 8003bf6:	23cc      	movs	r3, #204	; 0xcc
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2166      	movs	r1, #102	; 0x66
 8003bfc:	f7fd f958 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	3303      	adds	r3, #3
 8003c06:	b2d8      	uxtb	r0, r3
 8003c08:	2300      	movs	r3, #0
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	21cc      	movs	r1, #204	; 0xcc
 8003c0e:	f7fd f94f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	3304      	adds	r3, #4
 8003c18:	b2d8      	uxtb	r0, r3
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	21cc      	movs	r1, #204	; 0xcc
 8003c20:	f7fd f946 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	3305      	adds	r3, #5
 8003c2a:	b2d8      	uxtb	r0, r3
 8003c2c:	2333      	movs	r3, #51	; 0x33
 8003c2e:	22ff      	movs	r2, #255	; 0xff
 8003c30:	21ff      	movs	r1, #255	; 0xff
 8003c32:	f7fd f93d 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8003c36:	2306      	movs	r3, #6
 8003c38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003c3c:	e010      	b.n	8003c60 <vumetro+0x2b54>
		Set_Pixel(j+numled,0,0,0);
 8003c3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	4413      	add	r3, r2
 8003c4a:	b2d8      	uxtb	r0, r3
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2100      	movs	r1, #0
 8003c52:	f7fd f92d 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8003c56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003c60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c64:	2b07      	cmp	r3, #7
 8003c66:	d9ea      	bls.n	8003c3e <vumetro+0x2b32>
	}
	Set_Pixel(8+numled,0,76,153);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	b2d8      	uxtb	r0, r3
 8003c70:	2399      	movs	r3, #153	; 0x99
 8003c72:	224c      	movs	r2, #76	; 0x4c
 8003c74:	2100      	movs	r1, #0
 8003c76:	f7fd f91b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	3309      	adds	r3, #9
 8003c80:	b2d8      	uxtb	r0, r3
 8003c82:	2399      	movs	r3, #153	; 0x99
 8003c84:	2299      	movs	r2, #153	; 0x99
 8003c86:	2100      	movs	r1, #0
 8003c88:	f7fd f912 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	330a      	adds	r3, #10
 8003c92:	b2d8      	uxtb	r0, r3
 8003c94:	23cc      	movs	r3, #204	; 0xcc
 8003c96:	2200      	movs	r2, #0
 8003c98:	2166      	movs	r1, #102	; 0x66
 8003c9a:	f7fd f909 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	330b      	adds	r3, #11
 8003ca4:	b2d8      	uxtb	r0, r3
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	2200      	movs	r2, #0
 8003caa:	21cc      	movs	r1, #204	; 0xcc
 8003cac:	f7fd f900 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	330c      	adds	r3, #12
 8003cb6:	b2d8      	uxtb	r0, r3
 8003cb8:	2300      	movs	r3, #0
 8003cba:	2200      	movs	r2, #0
 8003cbc:	21cc      	movs	r1, #204	; 0xcc
 8003cbe:	f7fd f8f7 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	330d      	adds	r3, #13
 8003cc8:	b2d8      	uxtb	r0, r3
 8003cca:	2333      	movs	r3, #51	; 0x33
 8003ccc:	22ff      	movs	r2, #255	; 0xff
 8003cce:	21ff      	movs	r1, #255	; 0xff
 8003cd0:	f7fd f8ee 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8003cd4:	230e      	movs	r3, #14
 8003cd6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003cda:	e010      	b.n	8003cfe <vumetro+0x2bf2>
		Set_Pixel(j+numled,0,0,0);
 8003cdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	b2d8      	uxtb	r0, r3
 8003cea:	2300      	movs	r3, #0
 8003cec:	2200      	movs	r2, #0
 8003cee:	2100      	movs	r1, #0
 8003cf0:	f7fd f8de 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8003cf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003cfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d02:	2b0f      	cmp	r3, #15
 8003d04:	d9ea      	bls.n	8003cdc <vumetro+0x2bd0>
	}
	break;
 8003d06:	e11d      	b.n	8003f44 <vumetro+0x2e38>
case 7:
	Set_Pixel(0+numled,0,76,153);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	b2d8      	uxtb	r0, r3
 8003d0c:	2399      	movs	r3, #153	; 0x99
 8003d0e:	224c      	movs	r2, #76	; 0x4c
 8003d10:	2100      	movs	r1, #0
 8003d12:	f7fd f8cd 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	b2d8      	uxtb	r0, r3
 8003d1e:	2399      	movs	r3, #153	; 0x99
 8003d20:	2299      	movs	r2, #153	; 0x99
 8003d22:	2100      	movs	r1, #0
 8003d24:	f7fd f8c4 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	b2d8      	uxtb	r0, r3
 8003d30:	23cc      	movs	r3, #204	; 0xcc
 8003d32:	2200      	movs	r2, #0
 8003d34:	2166      	movs	r1, #102	; 0x66
 8003d36:	f7fd f8bb 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	3303      	adds	r3, #3
 8003d40:	b2d8      	uxtb	r0, r3
 8003d42:	2300      	movs	r3, #0
 8003d44:	2200      	movs	r2, #0
 8003d46:	21cc      	movs	r1, #204	; 0xcc
 8003d48:	f7fd f8b2 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	3304      	adds	r3, #4
 8003d52:	b2d8      	uxtb	r0, r3
 8003d54:	2300      	movs	r3, #0
 8003d56:	2200      	movs	r2, #0
 8003d58:	21cc      	movs	r1, #204	; 0xcc
 8003d5a:	f7fd f8a9 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	3305      	adds	r3, #5
 8003d64:	b2d8      	uxtb	r0, r3
 8003d66:	2333      	movs	r3, #51	; 0x33
 8003d68:	22ff      	movs	r2, #255	; 0xff
 8003d6a:	21ff      	movs	r1, #255	; 0xff
 8003d6c:	f7fd f8a0 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	3306      	adds	r3, #6
 8003d76:	b2d8      	uxtb	r0, r3
 8003d78:	2300      	movs	r3, #0
 8003d7a:	22cc      	movs	r2, #204	; 0xcc
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	f7fd f897 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	3307      	adds	r3, #7
 8003d88:	b2d8      	uxtb	r0, r3
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2100      	movs	r1, #0
 8003d90:	f7fd f88e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	3308      	adds	r3, #8
 8003d9a:	b2d8      	uxtb	r0, r3
 8003d9c:	2399      	movs	r3, #153	; 0x99
 8003d9e:	224c      	movs	r2, #76	; 0x4c
 8003da0:	2100      	movs	r1, #0
 8003da2:	f7fd f885 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	3309      	adds	r3, #9
 8003dac:	b2d8      	uxtb	r0, r3
 8003dae:	2399      	movs	r3, #153	; 0x99
 8003db0:	2299      	movs	r2, #153	; 0x99
 8003db2:	2100      	movs	r1, #0
 8003db4:	f7fd f87c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	330a      	adds	r3, #10
 8003dbe:	b2d8      	uxtb	r0, r3
 8003dc0:	23cc      	movs	r3, #204	; 0xcc
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2166      	movs	r1, #102	; 0x66
 8003dc6:	f7fd f873 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	330b      	adds	r3, #11
 8003dd0:	b2d8      	uxtb	r0, r3
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	21cc      	movs	r1, #204	; 0xcc
 8003dd8:	f7fd f86a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	330c      	adds	r3, #12
 8003de2:	b2d8      	uxtb	r0, r3
 8003de4:	2300      	movs	r3, #0
 8003de6:	2200      	movs	r2, #0
 8003de8:	21cc      	movs	r1, #204	; 0xcc
 8003dea:	f7fd f861 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	330d      	adds	r3, #13
 8003df4:	b2d8      	uxtb	r0, r3
 8003df6:	2333      	movs	r3, #51	; 0x33
 8003df8:	22ff      	movs	r2, #255	; 0xff
 8003dfa:	21ff      	movs	r1, #255	; 0xff
 8003dfc:	f7fd f858 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	330e      	adds	r3, #14
 8003e06:	b2d8      	uxtb	r0, r3
 8003e08:	2300      	movs	r3, #0
 8003e0a:	22cc      	movs	r2, #204	; 0xcc
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	f7fd f84f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	330f      	adds	r3, #15
 8003e18:	b2d8      	uxtb	r0, r3
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2100      	movs	r1, #0
 8003e20:	f7fd f846 	bl	8000eb0 <Set_Pixel>
	break;
 8003e24:	e08e      	b.n	8003f44 <vumetro+0x2e38>
case 8:
	Set_Pixel(0+numled,0,76,153);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	b2d8      	uxtb	r0, r3
 8003e2a:	2399      	movs	r3, #153	; 0x99
 8003e2c:	224c      	movs	r2, #76	; 0x4c
 8003e2e:	2100      	movs	r1, #0
 8003e30:	f7fd f83e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	3301      	adds	r3, #1
 8003e3a:	b2d8      	uxtb	r0, r3
 8003e3c:	2399      	movs	r3, #153	; 0x99
 8003e3e:	2299      	movs	r2, #153	; 0x99
 8003e40:	2100      	movs	r1, #0
 8003e42:	f7fd f835 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	3302      	adds	r3, #2
 8003e4c:	b2d8      	uxtb	r0, r3
 8003e4e:	23cc      	movs	r3, #204	; 0xcc
 8003e50:	2200      	movs	r2, #0
 8003e52:	2166      	movs	r1, #102	; 0x66
 8003e54:	f7fd f82c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	3303      	adds	r3, #3
 8003e5e:	b2d8      	uxtb	r0, r3
 8003e60:	2300      	movs	r3, #0
 8003e62:	2200      	movs	r2, #0
 8003e64:	21cc      	movs	r1, #204	; 0xcc
 8003e66:	f7fd f823 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	3304      	adds	r3, #4
 8003e70:	b2d8      	uxtb	r0, r3
 8003e72:	2300      	movs	r3, #0
 8003e74:	2200      	movs	r2, #0
 8003e76:	21cc      	movs	r1, #204	; 0xcc
 8003e78:	f7fd f81a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	3305      	adds	r3, #5
 8003e82:	b2d8      	uxtb	r0, r3
 8003e84:	2333      	movs	r3, #51	; 0x33
 8003e86:	22ff      	movs	r2, #255	; 0xff
 8003e88:	21ff      	movs	r1, #255	; 0xff
 8003e8a:	f7fd f811 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	3306      	adds	r3, #6
 8003e94:	b2d8      	uxtb	r0, r3
 8003e96:	2300      	movs	r3, #0
 8003e98:	22cc      	movs	r2, #204	; 0xcc
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	f7fd f808 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	3307      	adds	r3, #7
 8003ea6:	b2d8      	uxtb	r0, r3
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	22cc      	movs	r2, #204	; 0xcc
 8003eac:	2100      	movs	r1, #0
 8003eae:	f7fc ffff 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	b2d8      	uxtb	r0, r3
 8003eba:	2399      	movs	r3, #153	; 0x99
 8003ebc:	224c      	movs	r2, #76	; 0x4c
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	f7fc fff6 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	3309      	adds	r3, #9
 8003eca:	b2d8      	uxtb	r0, r3
 8003ecc:	2399      	movs	r3, #153	; 0x99
 8003ece:	2299      	movs	r2, #153	; 0x99
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	f7fc ffed 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	330a      	adds	r3, #10
 8003edc:	b2d8      	uxtb	r0, r3
 8003ede:	23cc      	movs	r3, #204	; 0xcc
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2166      	movs	r1, #102	; 0x66
 8003ee4:	f7fc ffe4 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	330b      	adds	r3, #11
 8003eee:	b2d8      	uxtb	r0, r3
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	21cc      	movs	r1, #204	; 0xcc
 8003ef6:	f7fc ffdb 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	330c      	adds	r3, #12
 8003f00:	b2d8      	uxtb	r0, r3
 8003f02:	2300      	movs	r3, #0
 8003f04:	2200      	movs	r2, #0
 8003f06:	21cc      	movs	r1, #204	; 0xcc
 8003f08:	f7fc ffd2 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	330d      	adds	r3, #13
 8003f12:	b2d8      	uxtb	r0, r3
 8003f14:	2333      	movs	r3, #51	; 0x33
 8003f16:	22ff      	movs	r2, #255	; 0xff
 8003f18:	21ff      	movs	r1, #255	; 0xff
 8003f1a:	f7fc ffc9 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	330e      	adds	r3, #14
 8003f24:	b2d8      	uxtb	r0, r3
 8003f26:	2300      	movs	r3, #0
 8003f28:	22cc      	movs	r2, #204	; 0xcc
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	f7fc ffc0 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	330f      	adds	r3, #15
 8003f36:	b2d8      	uxtb	r0, r3
 8003f38:	2300      	movs	r3, #0
 8003f3a:	22cc      	movs	r2, #204	; 0xcc
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	f7fc ffb7 	bl	8000eb0 <Set_Pixel>
	break;
 8003f42:	bf00      	nop
}

numled=96;
 8003f44:	2360      	movs	r3, #96	; 0x60
 8003f46:	60fb      	str	r3, [r7, #12]
switch(banda7){
 8003f48:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	2b07      	cmp	r3, #7
 8003f50:	f200 8396 	bhi.w	8004680 <vumetro+0x3574>
 8003f54:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <vumetro+0x2e50>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08003f7d 	.word	0x08003f7d
 8003f60:	08003fef 	.word	0x08003fef
 8003f64:	08004085 	.word	0x08004085
 8003f68:	0800413f 	.word	0x0800413f
 8003f6c:	0800421d 	.word	0x0800421d
 8003f70:	0800431f 	.word	0x0800431f
 8003f74:	08004445 	.word	0x08004445
 8003f78:	08004563 	.word	0x08004563
case 1:
	Set_Pixel(0+numled,76,0,153);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	b2d8      	uxtb	r0, r3
 8003f80:	2399      	movs	r3, #153	; 0x99
 8003f82:	2200      	movs	r2, #0
 8003f84:	214c      	movs	r1, #76	; 0x4c
 8003f86:	f7fc ff93 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003f8e:	e00d      	b.n	8003fac <vumetro+0x2ea0>
		Set_Pixel(j+numled,0,0,0);
 8003f90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	4413      	add	r3, r2
 8003f9a:	b2d8      	uxtb	r0, r3
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	f7fc ff85 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8003fa6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003fa8:	3301      	adds	r3, #1
 8003faa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003fac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003fae:	2b07      	cmp	r3, #7
 8003fb0:	d9ee      	bls.n	8003f90 <vumetro+0x2e84>
	}
	Set_Pixel(8+numled,76,0,153);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	b2d8      	uxtb	r0, r3
 8003fba:	2399      	movs	r3, #153	; 0x99
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	214c      	movs	r1, #76	; 0x4c
 8003fc0:	f7fc ff76 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8003fc4:	2309      	movs	r3, #9
 8003fc6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003fc8:	e00d      	b.n	8003fe6 <vumetro+0x2eda>
		Set_Pixel(j+numled,0,0,0);
 8003fca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	b2d8      	uxtb	r0, r3
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2100      	movs	r1, #0
 8003fdc:	f7fc ff68 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8003fe0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003fe6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003fe8:	2b0f      	cmp	r3, #15
 8003fea:	d9ee      	bls.n	8003fca <vumetro+0x2ebe>
	}
	break;
 8003fec:	e348      	b.n	8004680 <vumetro+0x3574>
case 2:
	Set_Pixel(0+numled,0,76,153);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	b2d8      	uxtb	r0, r3
 8003ff2:	2399      	movs	r3, #153	; 0x99
 8003ff4:	224c      	movs	r2, #76	; 0x4c
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	f7fc ff5a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	3301      	adds	r3, #1
 8004002:	b2d8      	uxtb	r0, r3
 8004004:	2399      	movs	r3, #153	; 0x99
 8004006:	2299      	movs	r2, #153	; 0x99
 8004008:	2100      	movs	r1, #0
 800400a:	f7fc ff51 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 800400e:	2302      	movs	r3, #2
 8004010:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004012:	e00d      	b.n	8004030 <vumetro+0x2f24>
		Set_Pixel(j+numled,0,0,0);
 8004014:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004016:	b2da      	uxtb	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	b2db      	uxtb	r3, r3
 800401c:	4413      	add	r3, r2
 800401e:	b2d8      	uxtb	r0, r3
 8004020:	2300      	movs	r3, #0
 8004022:	2200      	movs	r2, #0
 8004024:	2100      	movs	r1, #0
 8004026:	f7fc ff43 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 800402a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800402c:	3301      	adds	r3, #1
 800402e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004030:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004032:	2b07      	cmp	r3, #7
 8004034:	d9ee      	bls.n	8004014 <vumetro+0x2f08>
	}
	Set_Pixel(8+numled,0,76,153);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	3308      	adds	r3, #8
 800403c:	b2d8      	uxtb	r0, r3
 800403e:	2399      	movs	r3, #153	; 0x99
 8004040:	224c      	movs	r2, #76	; 0x4c
 8004042:	2100      	movs	r1, #0
 8004044:	f7fc ff34 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	3309      	adds	r3, #9
 800404e:	b2d8      	uxtb	r0, r3
 8004050:	2399      	movs	r3, #153	; 0x99
 8004052:	2299      	movs	r2, #153	; 0x99
 8004054:	2100      	movs	r1, #0
 8004056:	f7fc ff2b 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 800405a:	230a      	movs	r3, #10
 800405c:	873b      	strh	r3, [r7, #56]	; 0x38
 800405e:	e00d      	b.n	800407c <vumetro+0x2f70>
		Set_Pixel(j+numled,0,0,0);
 8004060:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004062:	b2da      	uxtb	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	4413      	add	r3, r2
 800406a:	b2d8      	uxtb	r0, r3
 800406c:	2300      	movs	r3, #0
 800406e:	2200      	movs	r2, #0
 8004070:	2100      	movs	r1, #0
 8004072:	f7fc ff1d 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8004076:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004078:	3301      	adds	r3, #1
 800407a:	873b      	strh	r3, [r7, #56]	; 0x38
 800407c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800407e:	2b0f      	cmp	r3, #15
 8004080:	d9ee      	bls.n	8004060 <vumetro+0x2f54>
	}
	break;
 8004082:	e2fd      	b.n	8004680 <vumetro+0x3574>

case 3:
	Set_Pixel(0+numled,0,76,153);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	b2d8      	uxtb	r0, r3
 8004088:	2399      	movs	r3, #153	; 0x99
 800408a:	224c      	movs	r2, #76	; 0x4c
 800408c:	2100      	movs	r1, #0
 800408e:	f7fc ff0f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	3301      	adds	r3, #1
 8004098:	b2d8      	uxtb	r0, r3
 800409a:	2399      	movs	r3, #153	; 0x99
 800409c:	2299      	movs	r2, #153	; 0x99
 800409e:	2100      	movs	r1, #0
 80040a0:	f7fc ff06 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	3302      	adds	r3, #2
 80040aa:	b2d8      	uxtb	r0, r3
 80040ac:	23cc      	movs	r3, #204	; 0xcc
 80040ae:	2200      	movs	r2, #0
 80040b0:	2166      	movs	r1, #102	; 0x66
 80040b2:	f7fc fefd 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 80040b6:	2303      	movs	r3, #3
 80040b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80040ba:	e00d      	b.n	80040d8 <vumetro+0x2fcc>
		Set_Pixel(j+numled,0,0,0);
 80040bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	4413      	add	r3, r2
 80040c6:	b2d8      	uxtb	r0, r3
 80040c8:	2300      	movs	r3, #0
 80040ca:	2200      	movs	r2, #0
 80040cc:	2100      	movs	r1, #0
 80040ce:	f7fc feef 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 80040d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040d4:	3301      	adds	r3, #1
 80040d6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80040d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040da:	2b07      	cmp	r3, #7
 80040dc:	d9ee      	bls.n	80040bc <vumetro+0x2fb0>
	}
	Set_Pixel(8+numled,0,76,153);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	3308      	adds	r3, #8
 80040e4:	b2d8      	uxtb	r0, r3
 80040e6:	2399      	movs	r3, #153	; 0x99
 80040e8:	224c      	movs	r2, #76	; 0x4c
 80040ea:	2100      	movs	r1, #0
 80040ec:	f7fc fee0 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	3309      	adds	r3, #9
 80040f6:	b2d8      	uxtb	r0, r3
 80040f8:	2399      	movs	r3, #153	; 0x99
 80040fa:	2299      	movs	r2, #153	; 0x99
 80040fc:	2100      	movs	r1, #0
 80040fe:	f7fc fed7 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	330a      	adds	r3, #10
 8004108:	b2d8      	uxtb	r0, r3
 800410a:	23cc      	movs	r3, #204	; 0xcc
 800410c:	2200      	movs	r2, #0
 800410e:	2166      	movs	r1, #102	; 0x66
 8004110:	f7fc fece 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8004114:	230b      	movs	r3, #11
 8004116:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004118:	e00d      	b.n	8004136 <vumetro+0x302a>
		Set_Pixel(j+numled,0,0,0);
 800411a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800411c:	b2da      	uxtb	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	4413      	add	r3, r2
 8004124:	b2d8      	uxtb	r0, r3
 8004126:	2300      	movs	r3, #0
 8004128:	2200      	movs	r2, #0
 800412a:	2100      	movs	r1, #0
 800412c:	f7fc fec0 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8004130:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004132:	3301      	adds	r3, #1
 8004134:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004136:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004138:	2b0f      	cmp	r3, #15
 800413a:	d9ee      	bls.n	800411a <vumetro+0x300e>
	}
	break;
 800413c:	e2a0      	b.n	8004680 <vumetro+0x3574>
case 4:
	Set_Pixel(0+numled,0,76,153);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	b2d8      	uxtb	r0, r3
 8004142:	2399      	movs	r3, #153	; 0x99
 8004144:	224c      	movs	r2, #76	; 0x4c
 8004146:	2100      	movs	r1, #0
 8004148:	f7fc feb2 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	3301      	adds	r3, #1
 8004152:	b2d8      	uxtb	r0, r3
 8004154:	2399      	movs	r3, #153	; 0x99
 8004156:	2299      	movs	r2, #153	; 0x99
 8004158:	2100      	movs	r1, #0
 800415a:	f7fc fea9 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	3302      	adds	r3, #2
 8004164:	b2d8      	uxtb	r0, r3
 8004166:	23cc      	movs	r3, #204	; 0xcc
 8004168:	2200      	movs	r2, #0
 800416a:	2166      	movs	r1, #102	; 0x66
 800416c:	f7fc fea0 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	3303      	adds	r3, #3
 8004176:	b2d8      	uxtb	r0, r3
 8004178:	2300      	movs	r3, #0
 800417a:	2200      	movs	r2, #0
 800417c:	21cc      	movs	r1, #204	; 0xcc
 800417e:	f7fc fe97 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8004182:	2304      	movs	r3, #4
 8004184:	867b      	strh	r3, [r7, #50]	; 0x32
 8004186:	e00d      	b.n	80041a4 <vumetro+0x3098>
		Set_Pixel(j+numled,0,0,0);
 8004188:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800418a:	b2da      	uxtb	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	4413      	add	r3, r2
 8004192:	b2d8      	uxtb	r0, r3
 8004194:	2300      	movs	r3, #0
 8004196:	2200      	movs	r2, #0
 8004198:	2100      	movs	r1, #0
 800419a:	f7fc fe89 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 800419e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80041a0:	3301      	adds	r3, #1
 80041a2:	867b      	strh	r3, [r7, #50]	; 0x32
 80041a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80041a6:	2b07      	cmp	r3, #7
 80041a8:	d9ee      	bls.n	8004188 <vumetro+0x307c>
	}
	Set_Pixel(8+numled,0,76,153);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	3308      	adds	r3, #8
 80041b0:	b2d8      	uxtb	r0, r3
 80041b2:	2399      	movs	r3, #153	; 0x99
 80041b4:	224c      	movs	r2, #76	; 0x4c
 80041b6:	2100      	movs	r1, #0
 80041b8:	f7fc fe7a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	3309      	adds	r3, #9
 80041c2:	b2d8      	uxtb	r0, r3
 80041c4:	2399      	movs	r3, #153	; 0x99
 80041c6:	2299      	movs	r2, #153	; 0x99
 80041c8:	2100      	movs	r1, #0
 80041ca:	f7fc fe71 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	330a      	adds	r3, #10
 80041d4:	b2d8      	uxtb	r0, r3
 80041d6:	23cc      	movs	r3, #204	; 0xcc
 80041d8:	2200      	movs	r2, #0
 80041da:	2166      	movs	r1, #102	; 0x66
 80041dc:	f7fc fe68 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	330b      	adds	r3, #11
 80041e6:	b2d8      	uxtb	r0, r3
 80041e8:	2300      	movs	r3, #0
 80041ea:	2200      	movs	r2, #0
 80041ec:	21cc      	movs	r1, #204	; 0xcc
 80041ee:	f7fc fe5f 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 80041f2:	230c      	movs	r3, #12
 80041f4:	863b      	strh	r3, [r7, #48]	; 0x30
 80041f6:	e00d      	b.n	8004214 <vumetro+0x3108>
		Set_Pixel(j+numled,0,0,0);
 80041f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	4413      	add	r3, r2
 8004202:	b2d8      	uxtb	r0, r3
 8004204:	2300      	movs	r3, #0
 8004206:	2200      	movs	r2, #0
 8004208:	2100      	movs	r1, #0
 800420a:	f7fc fe51 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 800420e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004210:	3301      	adds	r3, #1
 8004212:	863b      	strh	r3, [r7, #48]	; 0x30
 8004214:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004216:	2b0f      	cmp	r3, #15
 8004218:	d9ee      	bls.n	80041f8 <vumetro+0x30ec>
	}
	break;
 800421a:	e231      	b.n	8004680 <vumetro+0x3574>
case 5:
	Set_Pixel(0+numled,0,76,153);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	b2d8      	uxtb	r0, r3
 8004220:	2399      	movs	r3, #153	; 0x99
 8004222:	224c      	movs	r2, #76	; 0x4c
 8004224:	2100      	movs	r1, #0
 8004226:	f7fc fe43 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	3301      	adds	r3, #1
 8004230:	b2d8      	uxtb	r0, r3
 8004232:	2399      	movs	r3, #153	; 0x99
 8004234:	2299      	movs	r2, #153	; 0x99
 8004236:	2100      	movs	r1, #0
 8004238:	f7fc fe3a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	3302      	adds	r3, #2
 8004242:	b2d8      	uxtb	r0, r3
 8004244:	23cc      	movs	r3, #204	; 0xcc
 8004246:	2200      	movs	r2, #0
 8004248:	2166      	movs	r1, #102	; 0x66
 800424a:	f7fc fe31 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	3303      	adds	r3, #3
 8004254:	b2d8      	uxtb	r0, r3
 8004256:	2300      	movs	r3, #0
 8004258:	2200      	movs	r2, #0
 800425a:	21cc      	movs	r1, #204	; 0xcc
 800425c:	f7fc fe28 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	3304      	adds	r3, #4
 8004266:	b2d8      	uxtb	r0, r3
 8004268:	2300      	movs	r3, #0
 800426a:	2200      	movs	r2, #0
 800426c:	21cc      	movs	r1, #204	; 0xcc
 800426e:	f7fc fe1f 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8004272:	2305      	movs	r3, #5
 8004274:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004276:	e00d      	b.n	8004294 <vumetro+0x3188>
		Set_Pixel(j+numled,0,0,0);
 8004278:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800427a:	b2da      	uxtb	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	b2db      	uxtb	r3, r3
 8004280:	4413      	add	r3, r2
 8004282:	b2d8      	uxtb	r0, r3
 8004284:	2300      	movs	r3, #0
 8004286:	2200      	movs	r2, #0
 8004288:	2100      	movs	r1, #0
 800428a:	f7fc fe11 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 800428e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004290:	3301      	adds	r3, #1
 8004292:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004294:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004296:	2b07      	cmp	r3, #7
 8004298:	d9ee      	bls.n	8004278 <vumetro+0x316c>
	}
	Set_Pixel(8+numled,0,76,153);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	3308      	adds	r3, #8
 80042a0:	b2d8      	uxtb	r0, r3
 80042a2:	2399      	movs	r3, #153	; 0x99
 80042a4:	224c      	movs	r2, #76	; 0x4c
 80042a6:	2100      	movs	r1, #0
 80042a8:	f7fc fe02 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	3309      	adds	r3, #9
 80042b2:	b2d8      	uxtb	r0, r3
 80042b4:	2399      	movs	r3, #153	; 0x99
 80042b6:	2299      	movs	r2, #153	; 0x99
 80042b8:	2100      	movs	r1, #0
 80042ba:	f7fc fdf9 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	330a      	adds	r3, #10
 80042c4:	b2d8      	uxtb	r0, r3
 80042c6:	23cc      	movs	r3, #204	; 0xcc
 80042c8:	2200      	movs	r2, #0
 80042ca:	2166      	movs	r1, #102	; 0x66
 80042cc:	f7fc fdf0 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	330b      	adds	r3, #11
 80042d6:	b2d8      	uxtb	r0, r3
 80042d8:	2300      	movs	r3, #0
 80042da:	2200      	movs	r2, #0
 80042dc:	21cc      	movs	r1, #204	; 0xcc
 80042de:	f7fc fde7 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	330c      	adds	r3, #12
 80042e8:	b2d8      	uxtb	r0, r3
 80042ea:	2300      	movs	r3, #0
 80042ec:	2200      	movs	r2, #0
 80042ee:	21cc      	movs	r1, #204	; 0xcc
 80042f0:	f7fc fdde 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 80042f4:	230d      	movs	r3, #13
 80042f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80042f8:	e00d      	b.n	8004316 <vumetro+0x320a>
		Set_Pixel(j+numled,0,0,0);
 80042fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	4413      	add	r3, r2
 8004304:	b2d8      	uxtb	r0, r3
 8004306:	2300      	movs	r3, #0
 8004308:	2200      	movs	r2, #0
 800430a:	2100      	movs	r1, #0
 800430c:	f7fc fdd0 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8004310:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004312:	3301      	adds	r3, #1
 8004314:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004316:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004318:	2b0f      	cmp	r3, #15
 800431a:	d9ee      	bls.n	80042fa <vumetro+0x31ee>
	}
	break;
 800431c:	e1b0      	b.n	8004680 <vumetro+0x3574>
case 6:
	Set_Pixel(0+numled,0,76,153);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	b2d8      	uxtb	r0, r3
 8004322:	2399      	movs	r3, #153	; 0x99
 8004324:	224c      	movs	r2, #76	; 0x4c
 8004326:	2100      	movs	r1, #0
 8004328:	f7fc fdc2 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	3301      	adds	r3, #1
 8004332:	b2d8      	uxtb	r0, r3
 8004334:	2399      	movs	r3, #153	; 0x99
 8004336:	2299      	movs	r2, #153	; 0x99
 8004338:	2100      	movs	r1, #0
 800433a:	f7fc fdb9 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	3302      	adds	r3, #2
 8004344:	b2d8      	uxtb	r0, r3
 8004346:	23cc      	movs	r3, #204	; 0xcc
 8004348:	2200      	movs	r2, #0
 800434a:	2166      	movs	r1, #102	; 0x66
 800434c:	f7fc fdb0 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	3303      	adds	r3, #3
 8004356:	b2d8      	uxtb	r0, r3
 8004358:	2300      	movs	r3, #0
 800435a:	2200      	movs	r2, #0
 800435c:	21cc      	movs	r1, #204	; 0xcc
 800435e:	f7fc fda7 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	3304      	adds	r3, #4
 8004368:	b2d8      	uxtb	r0, r3
 800436a:	2300      	movs	r3, #0
 800436c:	2200      	movs	r2, #0
 800436e:	21cc      	movs	r1, #204	; 0xcc
 8004370:	f7fc fd9e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	3305      	adds	r3, #5
 800437a:	b2d8      	uxtb	r0, r3
 800437c:	2333      	movs	r3, #51	; 0x33
 800437e:	22ff      	movs	r2, #255	; 0xff
 8004380:	21ff      	movs	r1, #255	; 0xff
 8004382:	f7fc fd95 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8004386:	2306      	movs	r3, #6
 8004388:	857b      	strh	r3, [r7, #42]	; 0x2a
 800438a:	e00d      	b.n	80043a8 <vumetro+0x329c>
		Set_Pixel(j+numled,0,0,0);
 800438c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800438e:	b2da      	uxtb	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	4413      	add	r3, r2
 8004396:	b2d8      	uxtb	r0, r3
 8004398:	2300      	movs	r3, #0
 800439a:	2200      	movs	r2, #0
 800439c:	2100      	movs	r1, #0
 800439e:	f7fc fd87 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 80043a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80043a4:	3301      	adds	r3, #1
 80043a6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80043a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80043aa:	2b07      	cmp	r3, #7
 80043ac:	d9ee      	bls.n	800438c <vumetro+0x3280>
	}
	Set_Pixel(8+numled,0,76,153);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	3308      	adds	r3, #8
 80043b4:	b2d8      	uxtb	r0, r3
 80043b6:	2399      	movs	r3, #153	; 0x99
 80043b8:	224c      	movs	r2, #76	; 0x4c
 80043ba:	2100      	movs	r1, #0
 80043bc:	f7fc fd78 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	3309      	adds	r3, #9
 80043c6:	b2d8      	uxtb	r0, r3
 80043c8:	2399      	movs	r3, #153	; 0x99
 80043ca:	2299      	movs	r2, #153	; 0x99
 80043cc:	2100      	movs	r1, #0
 80043ce:	f7fc fd6f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	330a      	adds	r3, #10
 80043d8:	b2d8      	uxtb	r0, r3
 80043da:	23cc      	movs	r3, #204	; 0xcc
 80043dc:	2200      	movs	r2, #0
 80043de:	2166      	movs	r1, #102	; 0x66
 80043e0:	f7fc fd66 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	330b      	adds	r3, #11
 80043ea:	b2d8      	uxtb	r0, r3
 80043ec:	2300      	movs	r3, #0
 80043ee:	2200      	movs	r2, #0
 80043f0:	21cc      	movs	r1, #204	; 0xcc
 80043f2:	f7fc fd5d 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	330c      	adds	r3, #12
 80043fc:	b2d8      	uxtb	r0, r3
 80043fe:	2300      	movs	r3, #0
 8004400:	2200      	movs	r2, #0
 8004402:	21cc      	movs	r1, #204	; 0xcc
 8004404:	f7fc fd54 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	330d      	adds	r3, #13
 800440e:	b2d8      	uxtb	r0, r3
 8004410:	2333      	movs	r3, #51	; 0x33
 8004412:	22ff      	movs	r2, #255	; 0xff
 8004414:	21ff      	movs	r1, #255	; 0xff
 8004416:	f7fc fd4b 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 800441a:	230e      	movs	r3, #14
 800441c:	853b      	strh	r3, [r7, #40]	; 0x28
 800441e:	e00d      	b.n	800443c <vumetro+0x3330>
		Set_Pixel(j+numled,0,0,0);
 8004420:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004422:	b2da      	uxtb	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	4413      	add	r3, r2
 800442a:	b2d8      	uxtb	r0, r3
 800442c:	2300      	movs	r3, #0
 800442e:	2200      	movs	r2, #0
 8004430:	2100      	movs	r1, #0
 8004432:	f7fc fd3d 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8004436:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004438:	3301      	adds	r3, #1
 800443a:	853b      	strh	r3, [r7, #40]	; 0x28
 800443c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800443e:	2b0f      	cmp	r3, #15
 8004440:	d9ee      	bls.n	8004420 <vumetro+0x3314>
	}
	break;
 8004442:	e11d      	b.n	8004680 <vumetro+0x3574>
case 7:
	Set_Pixel(0+numled,0,76,153);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	b2d8      	uxtb	r0, r3
 8004448:	2399      	movs	r3, #153	; 0x99
 800444a:	224c      	movs	r2, #76	; 0x4c
 800444c:	2100      	movs	r1, #0
 800444e:	f7fc fd2f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	3301      	adds	r3, #1
 8004458:	b2d8      	uxtb	r0, r3
 800445a:	2399      	movs	r3, #153	; 0x99
 800445c:	2299      	movs	r2, #153	; 0x99
 800445e:	2100      	movs	r1, #0
 8004460:	f7fc fd26 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	3302      	adds	r3, #2
 800446a:	b2d8      	uxtb	r0, r3
 800446c:	23cc      	movs	r3, #204	; 0xcc
 800446e:	2200      	movs	r2, #0
 8004470:	2166      	movs	r1, #102	; 0x66
 8004472:	f7fc fd1d 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	3303      	adds	r3, #3
 800447c:	b2d8      	uxtb	r0, r3
 800447e:	2300      	movs	r3, #0
 8004480:	2200      	movs	r2, #0
 8004482:	21cc      	movs	r1, #204	; 0xcc
 8004484:	f7fc fd14 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	3304      	adds	r3, #4
 800448e:	b2d8      	uxtb	r0, r3
 8004490:	2300      	movs	r3, #0
 8004492:	2200      	movs	r2, #0
 8004494:	21cc      	movs	r1, #204	; 0xcc
 8004496:	f7fc fd0b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	3305      	adds	r3, #5
 80044a0:	b2d8      	uxtb	r0, r3
 80044a2:	2333      	movs	r3, #51	; 0x33
 80044a4:	22ff      	movs	r2, #255	; 0xff
 80044a6:	21ff      	movs	r1, #255	; 0xff
 80044a8:	f7fc fd02 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	3306      	adds	r3, #6
 80044b2:	b2d8      	uxtb	r0, r3
 80044b4:	2300      	movs	r3, #0
 80044b6:	22cc      	movs	r2, #204	; 0xcc
 80044b8:	2100      	movs	r1, #0
 80044ba:	f7fc fcf9 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	3307      	adds	r3, #7
 80044c4:	b2d8      	uxtb	r0, r3
 80044c6:	2300      	movs	r3, #0
 80044c8:	2200      	movs	r2, #0
 80044ca:	2100      	movs	r1, #0
 80044cc:	f7fc fcf0 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	3308      	adds	r3, #8
 80044d6:	b2d8      	uxtb	r0, r3
 80044d8:	2399      	movs	r3, #153	; 0x99
 80044da:	224c      	movs	r2, #76	; 0x4c
 80044dc:	2100      	movs	r1, #0
 80044de:	f7fc fce7 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	3309      	adds	r3, #9
 80044e8:	b2d8      	uxtb	r0, r3
 80044ea:	2399      	movs	r3, #153	; 0x99
 80044ec:	2299      	movs	r2, #153	; 0x99
 80044ee:	2100      	movs	r1, #0
 80044f0:	f7fc fcde 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	330a      	adds	r3, #10
 80044fa:	b2d8      	uxtb	r0, r3
 80044fc:	23cc      	movs	r3, #204	; 0xcc
 80044fe:	2200      	movs	r2, #0
 8004500:	2166      	movs	r1, #102	; 0x66
 8004502:	f7fc fcd5 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	330b      	adds	r3, #11
 800450c:	b2d8      	uxtb	r0, r3
 800450e:	2300      	movs	r3, #0
 8004510:	2200      	movs	r2, #0
 8004512:	21cc      	movs	r1, #204	; 0xcc
 8004514:	f7fc fccc 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	330c      	adds	r3, #12
 800451e:	b2d8      	uxtb	r0, r3
 8004520:	2300      	movs	r3, #0
 8004522:	2200      	movs	r2, #0
 8004524:	21cc      	movs	r1, #204	; 0xcc
 8004526:	f7fc fcc3 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	330d      	adds	r3, #13
 8004530:	b2d8      	uxtb	r0, r3
 8004532:	2333      	movs	r3, #51	; 0x33
 8004534:	22ff      	movs	r2, #255	; 0xff
 8004536:	21ff      	movs	r1, #255	; 0xff
 8004538:	f7fc fcba 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	330e      	adds	r3, #14
 8004542:	b2d8      	uxtb	r0, r3
 8004544:	2300      	movs	r3, #0
 8004546:	22cc      	movs	r2, #204	; 0xcc
 8004548:	2100      	movs	r1, #0
 800454a:	f7fc fcb1 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	330f      	adds	r3, #15
 8004554:	b2d8      	uxtb	r0, r3
 8004556:	2300      	movs	r3, #0
 8004558:	2200      	movs	r2, #0
 800455a:	2100      	movs	r1, #0
 800455c:	f7fc fca8 	bl	8000eb0 <Set_Pixel>
	break;
 8004560:	e08e      	b.n	8004680 <vumetro+0x3574>
case 8:
	Set_Pixel(0+numled,0,76,153);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	b2d8      	uxtb	r0, r3
 8004566:	2399      	movs	r3, #153	; 0x99
 8004568:	224c      	movs	r2, #76	; 0x4c
 800456a:	2100      	movs	r1, #0
 800456c:	f7fc fca0 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	3301      	adds	r3, #1
 8004576:	b2d8      	uxtb	r0, r3
 8004578:	2399      	movs	r3, #153	; 0x99
 800457a:	2299      	movs	r2, #153	; 0x99
 800457c:	2100      	movs	r1, #0
 800457e:	f7fc fc97 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	3302      	adds	r3, #2
 8004588:	b2d8      	uxtb	r0, r3
 800458a:	23cc      	movs	r3, #204	; 0xcc
 800458c:	2200      	movs	r2, #0
 800458e:	2166      	movs	r1, #102	; 0x66
 8004590:	f7fc fc8e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	b2db      	uxtb	r3, r3
 8004598:	3303      	adds	r3, #3
 800459a:	b2d8      	uxtb	r0, r3
 800459c:	2300      	movs	r3, #0
 800459e:	2200      	movs	r2, #0
 80045a0:	21cc      	movs	r1, #204	; 0xcc
 80045a2:	f7fc fc85 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	3304      	adds	r3, #4
 80045ac:	b2d8      	uxtb	r0, r3
 80045ae:	2300      	movs	r3, #0
 80045b0:	2200      	movs	r2, #0
 80045b2:	21cc      	movs	r1, #204	; 0xcc
 80045b4:	f7fc fc7c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	3305      	adds	r3, #5
 80045be:	b2d8      	uxtb	r0, r3
 80045c0:	2333      	movs	r3, #51	; 0x33
 80045c2:	22ff      	movs	r2, #255	; 0xff
 80045c4:	21ff      	movs	r1, #255	; 0xff
 80045c6:	f7fc fc73 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	3306      	adds	r3, #6
 80045d0:	b2d8      	uxtb	r0, r3
 80045d2:	2300      	movs	r3, #0
 80045d4:	22cc      	movs	r2, #204	; 0xcc
 80045d6:	2100      	movs	r1, #0
 80045d8:	f7fc fc6a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	3307      	adds	r3, #7
 80045e2:	b2d8      	uxtb	r0, r3
 80045e4:	2300      	movs	r3, #0
 80045e6:	22cc      	movs	r2, #204	; 0xcc
 80045e8:	2100      	movs	r1, #0
 80045ea:	f7fc fc61 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	3308      	adds	r3, #8
 80045f4:	b2d8      	uxtb	r0, r3
 80045f6:	2399      	movs	r3, #153	; 0x99
 80045f8:	224c      	movs	r2, #76	; 0x4c
 80045fa:	2100      	movs	r1, #0
 80045fc:	f7fc fc58 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	3309      	adds	r3, #9
 8004606:	b2d8      	uxtb	r0, r3
 8004608:	2399      	movs	r3, #153	; 0x99
 800460a:	2299      	movs	r2, #153	; 0x99
 800460c:	2100      	movs	r1, #0
 800460e:	f7fc fc4f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	330a      	adds	r3, #10
 8004618:	b2d8      	uxtb	r0, r3
 800461a:	23cc      	movs	r3, #204	; 0xcc
 800461c:	2200      	movs	r2, #0
 800461e:	2166      	movs	r1, #102	; 0x66
 8004620:	f7fc fc46 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	330b      	adds	r3, #11
 800462a:	b2d8      	uxtb	r0, r3
 800462c:	2300      	movs	r3, #0
 800462e:	2200      	movs	r2, #0
 8004630:	21cc      	movs	r1, #204	; 0xcc
 8004632:	f7fc fc3d 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	330c      	adds	r3, #12
 800463c:	b2d8      	uxtb	r0, r3
 800463e:	2300      	movs	r3, #0
 8004640:	2200      	movs	r2, #0
 8004642:	21cc      	movs	r1, #204	; 0xcc
 8004644:	f7fc fc34 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	330d      	adds	r3, #13
 800464e:	b2d8      	uxtb	r0, r3
 8004650:	2333      	movs	r3, #51	; 0x33
 8004652:	22ff      	movs	r2, #255	; 0xff
 8004654:	21ff      	movs	r1, #255	; 0xff
 8004656:	f7fc fc2b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	330e      	adds	r3, #14
 8004660:	b2d8      	uxtb	r0, r3
 8004662:	2300      	movs	r3, #0
 8004664:	22cc      	movs	r2, #204	; 0xcc
 8004666:	2100      	movs	r1, #0
 8004668:	f7fc fc22 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	330f      	adds	r3, #15
 8004672:	b2d8      	uxtb	r0, r3
 8004674:	2300      	movs	r3, #0
 8004676:	22cc      	movs	r2, #204	; 0xcc
 8004678:	2100      	movs	r1, #0
 800467a:	f7fc fc19 	bl	8000eb0 <Set_Pixel>
	break;
 800467e:	bf00      	nop
}

numled=112;
 8004680:	2370      	movs	r3, #112	; 0x70
 8004682:	60fb      	str	r3, [r7, #12]
switch(banda8){
 8004684:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8004688:	3b01      	subs	r3, #1
 800468a:	2b07      	cmp	r3, #7
 800468c:	f200 8396 	bhi.w	8004dbc <vumetro+0x3cb0>
 8004690:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <vumetro+0x358c>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	080046b9 	.word	0x080046b9
 800469c:	0800472b 	.word	0x0800472b
 80046a0:	080047c1 	.word	0x080047c1
 80046a4:	0800487b 	.word	0x0800487b
 80046a8:	08004959 	.word	0x08004959
 80046ac:	08004a5b 	.word	0x08004a5b
 80046b0:	08004b81 	.word	0x08004b81
 80046b4:	08004c9f 	.word	0x08004c9f
case 1:
	Set_Pixel(0+numled,76,0,153);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	b2d8      	uxtb	r0, r3
 80046bc:	2399      	movs	r3, #153	; 0x99
 80046be:	2200      	movs	r2, #0
 80046c0:	214c      	movs	r1, #76	; 0x4c
 80046c2:	f7fc fbf5 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 80046c6:	2301      	movs	r3, #1
 80046c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80046ca:	e00d      	b.n	80046e8 <vumetro+0x35dc>
		Set_Pixel(j+numled,0,0,0);
 80046cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	4413      	add	r3, r2
 80046d6:	b2d8      	uxtb	r0, r3
 80046d8:	2300      	movs	r3, #0
 80046da:	2200      	movs	r2, #0
 80046dc:	2100      	movs	r1, #0
 80046de:	f7fc fbe7 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 80046e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046e4:	3301      	adds	r3, #1
 80046e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80046e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046ea:	2b07      	cmp	r3, #7
 80046ec:	d9ee      	bls.n	80046cc <vumetro+0x35c0>
	}
	Set_Pixel(8+numled,76,0,153);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	3308      	adds	r3, #8
 80046f4:	b2d8      	uxtb	r0, r3
 80046f6:	2399      	movs	r3, #153	; 0x99
 80046f8:	2200      	movs	r2, #0
 80046fa:	214c      	movs	r1, #76	; 0x4c
 80046fc:	f7fc fbd8 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8004700:	2309      	movs	r3, #9
 8004702:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004704:	e00d      	b.n	8004722 <vumetro+0x3616>
		Set_Pixel(j+numled,0,0,0);
 8004706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004708:	b2da      	uxtb	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	4413      	add	r3, r2
 8004710:	b2d8      	uxtb	r0, r3
 8004712:	2300      	movs	r3, #0
 8004714:	2200      	movs	r2, #0
 8004716:	2100      	movs	r1, #0
 8004718:	f7fc fbca 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 800471c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800471e:	3301      	adds	r3, #1
 8004720:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004722:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004724:	2b0f      	cmp	r3, #15
 8004726:	d9ee      	bls.n	8004706 <vumetro+0x35fa>
	}
	break;
 8004728:	e348      	b.n	8004dbc <vumetro+0x3cb0>
case 2:
	Set_Pixel(0+numled,0,76,153);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	b2d8      	uxtb	r0, r3
 800472e:	2399      	movs	r3, #153	; 0x99
 8004730:	224c      	movs	r2, #76	; 0x4c
 8004732:	2100      	movs	r1, #0
 8004734:	f7fc fbbc 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	3301      	adds	r3, #1
 800473e:	b2d8      	uxtb	r0, r3
 8004740:	2399      	movs	r3, #153	; 0x99
 8004742:	2299      	movs	r2, #153	; 0x99
 8004744:	2100      	movs	r1, #0
 8004746:	f7fc fbb3 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 800474a:	2302      	movs	r3, #2
 800474c:	847b      	strh	r3, [r7, #34]	; 0x22
 800474e:	e00d      	b.n	800476c <vumetro+0x3660>
		Set_Pixel(j+numled,0,0,0);
 8004750:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004752:	b2da      	uxtb	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	4413      	add	r3, r2
 800475a:	b2d8      	uxtb	r0, r3
 800475c:	2300      	movs	r3, #0
 800475e:	2200      	movs	r2, #0
 8004760:	2100      	movs	r1, #0
 8004762:	f7fc fba5 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8004766:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004768:	3301      	adds	r3, #1
 800476a:	847b      	strh	r3, [r7, #34]	; 0x22
 800476c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800476e:	2b07      	cmp	r3, #7
 8004770:	d9ee      	bls.n	8004750 <vumetro+0x3644>
	}
	Set_Pixel(8+numled,0,76,153);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	3308      	adds	r3, #8
 8004778:	b2d8      	uxtb	r0, r3
 800477a:	2399      	movs	r3, #153	; 0x99
 800477c:	224c      	movs	r2, #76	; 0x4c
 800477e:	2100      	movs	r1, #0
 8004780:	f7fc fb96 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	3309      	adds	r3, #9
 800478a:	b2d8      	uxtb	r0, r3
 800478c:	2399      	movs	r3, #153	; 0x99
 800478e:	2299      	movs	r2, #153	; 0x99
 8004790:	2100      	movs	r1, #0
 8004792:	f7fc fb8d 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8004796:	230a      	movs	r3, #10
 8004798:	843b      	strh	r3, [r7, #32]
 800479a:	e00d      	b.n	80047b8 <vumetro+0x36ac>
		Set_Pixel(j+numled,0,0,0);
 800479c:	8c3b      	ldrh	r3, [r7, #32]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	4413      	add	r3, r2
 80047a6:	b2d8      	uxtb	r0, r3
 80047a8:	2300      	movs	r3, #0
 80047aa:	2200      	movs	r2, #0
 80047ac:	2100      	movs	r1, #0
 80047ae:	f7fc fb7f 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 80047b2:	8c3b      	ldrh	r3, [r7, #32]
 80047b4:	3301      	adds	r3, #1
 80047b6:	843b      	strh	r3, [r7, #32]
 80047b8:	8c3b      	ldrh	r3, [r7, #32]
 80047ba:	2b0f      	cmp	r3, #15
 80047bc:	d9ee      	bls.n	800479c <vumetro+0x3690>
	}
	break;
 80047be:	e2fd      	b.n	8004dbc <vumetro+0x3cb0>

case 3:
	Set_Pixel(0+numled,0,76,153);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	b2d8      	uxtb	r0, r3
 80047c4:	2399      	movs	r3, #153	; 0x99
 80047c6:	224c      	movs	r2, #76	; 0x4c
 80047c8:	2100      	movs	r1, #0
 80047ca:	f7fc fb71 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	3301      	adds	r3, #1
 80047d4:	b2d8      	uxtb	r0, r3
 80047d6:	2399      	movs	r3, #153	; 0x99
 80047d8:	2299      	movs	r2, #153	; 0x99
 80047da:	2100      	movs	r1, #0
 80047dc:	f7fc fb68 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	3302      	adds	r3, #2
 80047e6:	b2d8      	uxtb	r0, r3
 80047e8:	23cc      	movs	r3, #204	; 0xcc
 80047ea:	2200      	movs	r2, #0
 80047ec:	2166      	movs	r1, #102	; 0x66
 80047ee:	f7fc fb5f 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 80047f2:	2303      	movs	r3, #3
 80047f4:	83fb      	strh	r3, [r7, #30]
 80047f6:	e00d      	b.n	8004814 <vumetro+0x3708>
		Set_Pixel(j+numled,0,0,0);
 80047f8:	8bfb      	ldrh	r3, [r7, #30]
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	4413      	add	r3, r2
 8004802:	b2d8      	uxtb	r0, r3
 8004804:	2300      	movs	r3, #0
 8004806:	2200      	movs	r2, #0
 8004808:	2100      	movs	r1, #0
 800480a:	f7fc fb51 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 800480e:	8bfb      	ldrh	r3, [r7, #30]
 8004810:	3301      	adds	r3, #1
 8004812:	83fb      	strh	r3, [r7, #30]
 8004814:	8bfb      	ldrh	r3, [r7, #30]
 8004816:	2b07      	cmp	r3, #7
 8004818:	d9ee      	bls.n	80047f8 <vumetro+0x36ec>
	}
	Set_Pixel(8+numled,0,76,153);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	3308      	adds	r3, #8
 8004820:	b2d8      	uxtb	r0, r3
 8004822:	2399      	movs	r3, #153	; 0x99
 8004824:	224c      	movs	r2, #76	; 0x4c
 8004826:	2100      	movs	r1, #0
 8004828:	f7fc fb42 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	b2db      	uxtb	r3, r3
 8004830:	3309      	adds	r3, #9
 8004832:	b2d8      	uxtb	r0, r3
 8004834:	2399      	movs	r3, #153	; 0x99
 8004836:	2299      	movs	r2, #153	; 0x99
 8004838:	2100      	movs	r1, #0
 800483a:	f7fc fb39 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	330a      	adds	r3, #10
 8004844:	b2d8      	uxtb	r0, r3
 8004846:	23cc      	movs	r3, #204	; 0xcc
 8004848:	2200      	movs	r2, #0
 800484a:	2166      	movs	r1, #102	; 0x66
 800484c:	f7fc fb30 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8004850:	230b      	movs	r3, #11
 8004852:	83bb      	strh	r3, [r7, #28]
 8004854:	e00d      	b.n	8004872 <vumetro+0x3766>
		Set_Pixel(j+numled,0,0,0);
 8004856:	8bbb      	ldrh	r3, [r7, #28]
 8004858:	b2da      	uxtb	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	4413      	add	r3, r2
 8004860:	b2d8      	uxtb	r0, r3
 8004862:	2300      	movs	r3, #0
 8004864:	2200      	movs	r2, #0
 8004866:	2100      	movs	r1, #0
 8004868:	f7fc fb22 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 800486c:	8bbb      	ldrh	r3, [r7, #28]
 800486e:	3301      	adds	r3, #1
 8004870:	83bb      	strh	r3, [r7, #28]
 8004872:	8bbb      	ldrh	r3, [r7, #28]
 8004874:	2b0f      	cmp	r3, #15
 8004876:	d9ee      	bls.n	8004856 <vumetro+0x374a>
	}
	break;
 8004878:	e2a0      	b.n	8004dbc <vumetro+0x3cb0>
case 4:
	Set_Pixel(0+numled,0,76,153);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	b2d8      	uxtb	r0, r3
 800487e:	2399      	movs	r3, #153	; 0x99
 8004880:	224c      	movs	r2, #76	; 0x4c
 8004882:	2100      	movs	r1, #0
 8004884:	f7fc fb14 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	b2db      	uxtb	r3, r3
 800488c:	3301      	adds	r3, #1
 800488e:	b2d8      	uxtb	r0, r3
 8004890:	2399      	movs	r3, #153	; 0x99
 8004892:	2299      	movs	r2, #153	; 0x99
 8004894:	2100      	movs	r1, #0
 8004896:	f7fc fb0b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	3302      	adds	r3, #2
 80048a0:	b2d8      	uxtb	r0, r3
 80048a2:	23cc      	movs	r3, #204	; 0xcc
 80048a4:	2200      	movs	r2, #0
 80048a6:	2166      	movs	r1, #102	; 0x66
 80048a8:	f7fc fb02 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	3303      	adds	r3, #3
 80048b2:	b2d8      	uxtb	r0, r3
 80048b4:	2300      	movs	r3, #0
 80048b6:	2200      	movs	r2, #0
 80048b8:	21cc      	movs	r1, #204	; 0xcc
 80048ba:	f7fc faf9 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 80048be:	2304      	movs	r3, #4
 80048c0:	837b      	strh	r3, [r7, #26]
 80048c2:	e00d      	b.n	80048e0 <vumetro+0x37d4>
		Set_Pixel(j+numled,0,0,0);
 80048c4:	8b7b      	ldrh	r3, [r7, #26]
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	4413      	add	r3, r2
 80048ce:	b2d8      	uxtb	r0, r3
 80048d0:	2300      	movs	r3, #0
 80048d2:	2200      	movs	r2, #0
 80048d4:	2100      	movs	r1, #0
 80048d6:	f7fc faeb 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 80048da:	8b7b      	ldrh	r3, [r7, #26]
 80048dc:	3301      	adds	r3, #1
 80048de:	837b      	strh	r3, [r7, #26]
 80048e0:	8b7b      	ldrh	r3, [r7, #26]
 80048e2:	2b07      	cmp	r3, #7
 80048e4:	d9ee      	bls.n	80048c4 <vumetro+0x37b8>
	}
	Set_Pixel(8+numled,0,76,153);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	3308      	adds	r3, #8
 80048ec:	b2d8      	uxtb	r0, r3
 80048ee:	2399      	movs	r3, #153	; 0x99
 80048f0:	224c      	movs	r2, #76	; 0x4c
 80048f2:	2100      	movs	r1, #0
 80048f4:	f7fc fadc 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	3309      	adds	r3, #9
 80048fe:	b2d8      	uxtb	r0, r3
 8004900:	2399      	movs	r3, #153	; 0x99
 8004902:	2299      	movs	r2, #153	; 0x99
 8004904:	2100      	movs	r1, #0
 8004906:	f7fc fad3 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	330a      	adds	r3, #10
 8004910:	b2d8      	uxtb	r0, r3
 8004912:	23cc      	movs	r3, #204	; 0xcc
 8004914:	2200      	movs	r2, #0
 8004916:	2166      	movs	r1, #102	; 0x66
 8004918:	f7fc faca 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	330b      	adds	r3, #11
 8004922:	b2d8      	uxtb	r0, r3
 8004924:	2300      	movs	r3, #0
 8004926:	2200      	movs	r2, #0
 8004928:	21cc      	movs	r1, #204	; 0xcc
 800492a:	f7fc fac1 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 800492e:	230c      	movs	r3, #12
 8004930:	833b      	strh	r3, [r7, #24]
 8004932:	e00d      	b.n	8004950 <vumetro+0x3844>
		Set_Pixel(j+numled,0,0,0);
 8004934:	8b3b      	ldrh	r3, [r7, #24]
 8004936:	b2da      	uxtb	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	4413      	add	r3, r2
 800493e:	b2d8      	uxtb	r0, r3
 8004940:	2300      	movs	r3, #0
 8004942:	2200      	movs	r2, #0
 8004944:	2100      	movs	r1, #0
 8004946:	f7fc fab3 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 800494a:	8b3b      	ldrh	r3, [r7, #24]
 800494c:	3301      	adds	r3, #1
 800494e:	833b      	strh	r3, [r7, #24]
 8004950:	8b3b      	ldrh	r3, [r7, #24]
 8004952:	2b0f      	cmp	r3, #15
 8004954:	d9ee      	bls.n	8004934 <vumetro+0x3828>
	}
	break;
 8004956:	e231      	b.n	8004dbc <vumetro+0x3cb0>
case 5:
	Set_Pixel(0+numled,0,76,153);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	b2d8      	uxtb	r0, r3
 800495c:	2399      	movs	r3, #153	; 0x99
 800495e:	224c      	movs	r2, #76	; 0x4c
 8004960:	2100      	movs	r1, #0
 8004962:	f7fc faa5 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	3301      	adds	r3, #1
 800496c:	b2d8      	uxtb	r0, r3
 800496e:	2399      	movs	r3, #153	; 0x99
 8004970:	2299      	movs	r2, #153	; 0x99
 8004972:	2100      	movs	r1, #0
 8004974:	f7fc fa9c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	b2db      	uxtb	r3, r3
 800497c:	3302      	adds	r3, #2
 800497e:	b2d8      	uxtb	r0, r3
 8004980:	23cc      	movs	r3, #204	; 0xcc
 8004982:	2200      	movs	r2, #0
 8004984:	2166      	movs	r1, #102	; 0x66
 8004986:	f7fc fa93 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	b2db      	uxtb	r3, r3
 800498e:	3303      	adds	r3, #3
 8004990:	b2d8      	uxtb	r0, r3
 8004992:	2300      	movs	r3, #0
 8004994:	2200      	movs	r2, #0
 8004996:	21cc      	movs	r1, #204	; 0xcc
 8004998:	f7fc fa8a 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	3304      	adds	r3, #4
 80049a2:	b2d8      	uxtb	r0, r3
 80049a4:	2300      	movs	r3, #0
 80049a6:	2200      	movs	r2, #0
 80049a8:	21cc      	movs	r1, #204	; 0xcc
 80049aa:	f7fc fa81 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 80049ae:	2305      	movs	r3, #5
 80049b0:	82fb      	strh	r3, [r7, #22]
 80049b2:	e00d      	b.n	80049d0 <vumetro+0x38c4>
		Set_Pixel(j+numled,0,0,0);
 80049b4:	8afb      	ldrh	r3, [r7, #22]
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	4413      	add	r3, r2
 80049be:	b2d8      	uxtb	r0, r3
 80049c0:	2300      	movs	r3, #0
 80049c2:	2200      	movs	r2, #0
 80049c4:	2100      	movs	r1, #0
 80049c6:	f7fc fa73 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 80049ca:	8afb      	ldrh	r3, [r7, #22]
 80049cc:	3301      	adds	r3, #1
 80049ce:	82fb      	strh	r3, [r7, #22]
 80049d0:	8afb      	ldrh	r3, [r7, #22]
 80049d2:	2b07      	cmp	r3, #7
 80049d4:	d9ee      	bls.n	80049b4 <vumetro+0x38a8>
	}
	Set_Pixel(8+numled,0,76,153);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	3308      	adds	r3, #8
 80049dc:	b2d8      	uxtb	r0, r3
 80049de:	2399      	movs	r3, #153	; 0x99
 80049e0:	224c      	movs	r2, #76	; 0x4c
 80049e2:	2100      	movs	r1, #0
 80049e4:	f7fc fa64 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	3309      	adds	r3, #9
 80049ee:	b2d8      	uxtb	r0, r3
 80049f0:	2399      	movs	r3, #153	; 0x99
 80049f2:	2299      	movs	r2, #153	; 0x99
 80049f4:	2100      	movs	r1, #0
 80049f6:	f7fc fa5b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	330a      	adds	r3, #10
 8004a00:	b2d8      	uxtb	r0, r3
 8004a02:	23cc      	movs	r3, #204	; 0xcc
 8004a04:	2200      	movs	r2, #0
 8004a06:	2166      	movs	r1, #102	; 0x66
 8004a08:	f7fc fa52 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	330b      	adds	r3, #11
 8004a12:	b2d8      	uxtb	r0, r3
 8004a14:	2300      	movs	r3, #0
 8004a16:	2200      	movs	r2, #0
 8004a18:	21cc      	movs	r1, #204	; 0xcc
 8004a1a:	f7fc fa49 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	330c      	adds	r3, #12
 8004a24:	b2d8      	uxtb	r0, r3
 8004a26:	2300      	movs	r3, #0
 8004a28:	2200      	movs	r2, #0
 8004a2a:	21cc      	movs	r1, #204	; 0xcc
 8004a2c:	f7fc fa40 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8004a30:	230d      	movs	r3, #13
 8004a32:	82bb      	strh	r3, [r7, #20]
 8004a34:	e00d      	b.n	8004a52 <vumetro+0x3946>
		Set_Pixel(j+numled,0,0,0);
 8004a36:	8abb      	ldrh	r3, [r7, #20]
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	4413      	add	r3, r2
 8004a40:	b2d8      	uxtb	r0, r3
 8004a42:	2300      	movs	r3, #0
 8004a44:	2200      	movs	r2, #0
 8004a46:	2100      	movs	r1, #0
 8004a48:	f7fc fa32 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8004a4c:	8abb      	ldrh	r3, [r7, #20]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	82bb      	strh	r3, [r7, #20]
 8004a52:	8abb      	ldrh	r3, [r7, #20]
 8004a54:	2b0f      	cmp	r3, #15
 8004a56:	d9ee      	bls.n	8004a36 <vumetro+0x392a>
	}
	break;
 8004a58:	e1b0      	b.n	8004dbc <vumetro+0x3cb0>
case 6:
	Set_Pixel(0+numled,0,76,153);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	b2d8      	uxtb	r0, r3
 8004a5e:	2399      	movs	r3, #153	; 0x99
 8004a60:	224c      	movs	r2, #76	; 0x4c
 8004a62:	2100      	movs	r1, #0
 8004a64:	f7fc fa24 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	b2d8      	uxtb	r0, r3
 8004a70:	2399      	movs	r3, #153	; 0x99
 8004a72:	2299      	movs	r2, #153	; 0x99
 8004a74:	2100      	movs	r1, #0
 8004a76:	f7fc fa1b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	3302      	adds	r3, #2
 8004a80:	b2d8      	uxtb	r0, r3
 8004a82:	23cc      	movs	r3, #204	; 0xcc
 8004a84:	2200      	movs	r2, #0
 8004a86:	2166      	movs	r1, #102	; 0x66
 8004a88:	f7fc fa12 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	3303      	adds	r3, #3
 8004a92:	b2d8      	uxtb	r0, r3
 8004a94:	2300      	movs	r3, #0
 8004a96:	2200      	movs	r2, #0
 8004a98:	21cc      	movs	r1, #204	; 0xcc
 8004a9a:	f7fc fa09 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	b2d8      	uxtb	r0, r3
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	21cc      	movs	r1, #204	; 0xcc
 8004aac:	f7fc fa00 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	3305      	adds	r3, #5
 8004ab6:	b2d8      	uxtb	r0, r3
 8004ab8:	2333      	movs	r3, #51	; 0x33
 8004aba:	22ff      	movs	r2, #255	; 0xff
 8004abc:	21ff      	movs	r1, #255	; 0xff
 8004abe:	f7fc f9f7 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8004ac2:	2306      	movs	r3, #6
 8004ac4:	827b      	strh	r3, [r7, #18]
 8004ac6:	e00d      	b.n	8004ae4 <vumetro+0x39d8>
		Set_Pixel(j+numled,0,0,0);
 8004ac8:	8a7b      	ldrh	r3, [r7, #18]
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	b2d8      	uxtb	r0, r3
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2100      	movs	r1, #0
 8004ada:	f7fc f9e9 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8004ade:	8a7b      	ldrh	r3, [r7, #18]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	827b      	strh	r3, [r7, #18]
 8004ae4:	8a7b      	ldrh	r3, [r7, #18]
 8004ae6:	2b07      	cmp	r3, #7
 8004ae8:	d9ee      	bls.n	8004ac8 <vumetro+0x39bc>
	}
	Set_Pixel(8+numled,0,76,153);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	3308      	adds	r3, #8
 8004af0:	b2d8      	uxtb	r0, r3
 8004af2:	2399      	movs	r3, #153	; 0x99
 8004af4:	224c      	movs	r2, #76	; 0x4c
 8004af6:	2100      	movs	r1, #0
 8004af8:	f7fc f9da 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	3309      	adds	r3, #9
 8004b02:	b2d8      	uxtb	r0, r3
 8004b04:	2399      	movs	r3, #153	; 0x99
 8004b06:	2299      	movs	r2, #153	; 0x99
 8004b08:	2100      	movs	r1, #0
 8004b0a:	f7fc f9d1 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	330a      	adds	r3, #10
 8004b14:	b2d8      	uxtb	r0, r3
 8004b16:	23cc      	movs	r3, #204	; 0xcc
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2166      	movs	r1, #102	; 0x66
 8004b1c:	f7fc f9c8 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	330b      	adds	r3, #11
 8004b26:	b2d8      	uxtb	r0, r3
 8004b28:	2300      	movs	r3, #0
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	21cc      	movs	r1, #204	; 0xcc
 8004b2e:	f7fc f9bf 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	330c      	adds	r3, #12
 8004b38:	b2d8      	uxtb	r0, r3
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	21cc      	movs	r1, #204	; 0xcc
 8004b40:	f7fc f9b6 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	330d      	adds	r3, #13
 8004b4a:	b2d8      	uxtb	r0, r3
 8004b4c:	2333      	movs	r3, #51	; 0x33
 8004b4e:	22ff      	movs	r2, #255	; 0xff
 8004b50:	21ff      	movs	r1, #255	; 0xff
 8004b52:	f7fc f9ad 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8004b56:	230e      	movs	r3, #14
 8004b58:	823b      	strh	r3, [r7, #16]
 8004b5a:	e00d      	b.n	8004b78 <vumetro+0x3a6c>
		Set_Pixel(j+numled,0,0,0);
 8004b5c:	8a3b      	ldrh	r3, [r7, #16]
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	4413      	add	r3, r2
 8004b66:	b2d8      	uxtb	r0, r3
 8004b68:	2300      	movs	r3, #0
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	f7fc f99f 	bl	8000eb0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8004b72:	8a3b      	ldrh	r3, [r7, #16]
 8004b74:	3301      	adds	r3, #1
 8004b76:	823b      	strh	r3, [r7, #16]
 8004b78:	8a3b      	ldrh	r3, [r7, #16]
 8004b7a:	2b0f      	cmp	r3, #15
 8004b7c:	d9ee      	bls.n	8004b5c <vumetro+0x3a50>
	}
	break;
 8004b7e:	e11d      	b.n	8004dbc <vumetro+0x3cb0>
case 7:
	Set_Pixel(0+numled,0,76,153);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	b2d8      	uxtb	r0, r3
 8004b84:	2399      	movs	r3, #153	; 0x99
 8004b86:	224c      	movs	r2, #76	; 0x4c
 8004b88:	2100      	movs	r1, #0
 8004b8a:	f7fc f991 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	3301      	adds	r3, #1
 8004b94:	b2d8      	uxtb	r0, r3
 8004b96:	2399      	movs	r3, #153	; 0x99
 8004b98:	2299      	movs	r2, #153	; 0x99
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	f7fc f988 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	3302      	adds	r3, #2
 8004ba6:	b2d8      	uxtb	r0, r3
 8004ba8:	23cc      	movs	r3, #204	; 0xcc
 8004baa:	2200      	movs	r2, #0
 8004bac:	2166      	movs	r1, #102	; 0x66
 8004bae:	f7fc f97f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	3303      	adds	r3, #3
 8004bb8:	b2d8      	uxtb	r0, r3
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	21cc      	movs	r1, #204	; 0xcc
 8004bc0:	f7fc f976 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	3304      	adds	r3, #4
 8004bca:	b2d8      	uxtb	r0, r3
 8004bcc:	2300      	movs	r3, #0
 8004bce:	2200      	movs	r2, #0
 8004bd0:	21cc      	movs	r1, #204	; 0xcc
 8004bd2:	f7fc f96d 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	3305      	adds	r3, #5
 8004bdc:	b2d8      	uxtb	r0, r3
 8004bde:	2333      	movs	r3, #51	; 0x33
 8004be0:	22ff      	movs	r2, #255	; 0xff
 8004be2:	21ff      	movs	r1, #255	; 0xff
 8004be4:	f7fc f964 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	3306      	adds	r3, #6
 8004bee:	b2d8      	uxtb	r0, r3
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	22cc      	movs	r2, #204	; 0xcc
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	f7fc f95b 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	3307      	adds	r3, #7
 8004c00:	b2d8      	uxtb	r0, r3
 8004c02:	2300      	movs	r3, #0
 8004c04:	2200      	movs	r2, #0
 8004c06:	2100      	movs	r1, #0
 8004c08:	f7fc f952 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	3308      	adds	r3, #8
 8004c12:	b2d8      	uxtb	r0, r3
 8004c14:	2399      	movs	r3, #153	; 0x99
 8004c16:	224c      	movs	r2, #76	; 0x4c
 8004c18:	2100      	movs	r1, #0
 8004c1a:	f7fc f949 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	3309      	adds	r3, #9
 8004c24:	b2d8      	uxtb	r0, r3
 8004c26:	2399      	movs	r3, #153	; 0x99
 8004c28:	2299      	movs	r2, #153	; 0x99
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	f7fc f940 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	330a      	adds	r3, #10
 8004c36:	b2d8      	uxtb	r0, r3
 8004c38:	23cc      	movs	r3, #204	; 0xcc
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2166      	movs	r1, #102	; 0x66
 8004c3e:	f7fc f937 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	330b      	adds	r3, #11
 8004c48:	b2d8      	uxtb	r0, r3
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	21cc      	movs	r1, #204	; 0xcc
 8004c50:	f7fc f92e 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	330c      	adds	r3, #12
 8004c5a:	b2d8      	uxtb	r0, r3
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	2200      	movs	r2, #0
 8004c60:	21cc      	movs	r1, #204	; 0xcc
 8004c62:	f7fc f925 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	330d      	adds	r3, #13
 8004c6c:	b2d8      	uxtb	r0, r3
 8004c6e:	2333      	movs	r3, #51	; 0x33
 8004c70:	22ff      	movs	r2, #255	; 0xff
 8004c72:	21ff      	movs	r1, #255	; 0xff
 8004c74:	f7fc f91c 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	330e      	adds	r3, #14
 8004c7e:	b2d8      	uxtb	r0, r3
 8004c80:	2300      	movs	r3, #0
 8004c82:	22cc      	movs	r2, #204	; 0xcc
 8004c84:	2100      	movs	r1, #0
 8004c86:	f7fc f913 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	330f      	adds	r3, #15
 8004c90:	b2d8      	uxtb	r0, r3
 8004c92:	2300      	movs	r3, #0
 8004c94:	2200      	movs	r2, #0
 8004c96:	2100      	movs	r1, #0
 8004c98:	f7fc f90a 	bl	8000eb0 <Set_Pixel>
	break;
 8004c9c:	e08e      	b.n	8004dbc <vumetro+0x3cb0>
case 8:
	Set_Pixel(0+numled,0,76,153);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	b2d8      	uxtb	r0, r3
 8004ca2:	2399      	movs	r3, #153	; 0x99
 8004ca4:	224c      	movs	r2, #76	; 0x4c
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	f7fc f902 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	b2d8      	uxtb	r0, r3
 8004cb4:	2399      	movs	r3, #153	; 0x99
 8004cb6:	2299      	movs	r2, #153	; 0x99
 8004cb8:	2100      	movs	r1, #0
 8004cba:	f7fc f8f9 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	3302      	adds	r3, #2
 8004cc4:	b2d8      	uxtb	r0, r3
 8004cc6:	23cc      	movs	r3, #204	; 0xcc
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2166      	movs	r1, #102	; 0x66
 8004ccc:	f7fc f8f0 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	3303      	adds	r3, #3
 8004cd6:	b2d8      	uxtb	r0, r3
 8004cd8:	2300      	movs	r3, #0
 8004cda:	2200      	movs	r2, #0
 8004cdc:	21cc      	movs	r1, #204	; 0xcc
 8004cde:	f7fc f8e7 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	b2d8      	uxtb	r0, r3
 8004cea:	2300      	movs	r3, #0
 8004cec:	2200      	movs	r2, #0
 8004cee:	21cc      	movs	r1, #204	; 0xcc
 8004cf0:	f7fc f8de 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	3305      	adds	r3, #5
 8004cfa:	b2d8      	uxtb	r0, r3
 8004cfc:	2333      	movs	r3, #51	; 0x33
 8004cfe:	22ff      	movs	r2, #255	; 0xff
 8004d00:	21ff      	movs	r1, #255	; 0xff
 8004d02:	f7fc f8d5 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	3306      	adds	r3, #6
 8004d0c:	b2d8      	uxtb	r0, r3
 8004d0e:	2300      	movs	r3, #0
 8004d10:	22cc      	movs	r2, #204	; 0xcc
 8004d12:	2100      	movs	r1, #0
 8004d14:	f7fc f8cc 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	3307      	adds	r3, #7
 8004d1e:	b2d8      	uxtb	r0, r3
 8004d20:	2300      	movs	r3, #0
 8004d22:	22cc      	movs	r2, #204	; 0xcc
 8004d24:	2100      	movs	r1, #0
 8004d26:	f7fc f8c3 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	3308      	adds	r3, #8
 8004d30:	b2d8      	uxtb	r0, r3
 8004d32:	2399      	movs	r3, #153	; 0x99
 8004d34:	224c      	movs	r2, #76	; 0x4c
 8004d36:	2100      	movs	r1, #0
 8004d38:	f7fc f8ba 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	3309      	adds	r3, #9
 8004d42:	b2d8      	uxtb	r0, r3
 8004d44:	2399      	movs	r3, #153	; 0x99
 8004d46:	2299      	movs	r2, #153	; 0x99
 8004d48:	2100      	movs	r1, #0
 8004d4a:	f7fc f8b1 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	330a      	adds	r3, #10
 8004d54:	b2d8      	uxtb	r0, r3
 8004d56:	23cc      	movs	r3, #204	; 0xcc
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2166      	movs	r1, #102	; 0x66
 8004d5c:	f7fc f8a8 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	330b      	adds	r3, #11
 8004d66:	b2d8      	uxtb	r0, r3
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	21cc      	movs	r1, #204	; 0xcc
 8004d6e:	f7fc f89f 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	330c      	adds	r3, #12
 8004d78:	b2d8      	uxtb	r0, r3
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	21cc      	movs	r1, #204	; 0xcc
 8004d80:	f7fc f896 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	330d      	adds	r3, #13
 8004d8a:	b2d8      	uxtb	r0, r3
 8004d8c:	2333      	movs	r3, #51	; 0x33
 8004d8e:	22ff      	movs	r2, #255	; 0xff
 8004d90:	21ff      	movs	r1, #255	; 0xff
 8004d92:	f7fc f88d 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	330e      	adds	r3, #14
 8004d9c:	b2d8      	uxtb	r0, r3
 8004d9e:	2300      	movs	r3, #0
 8004da0:	22cc      	movs	r2, #204	; 0xcc
 8004da2:	2100      	movs	r1, #0
 8004da4:	f7fc f884 	bl	8000eb0 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	330f      	adds	r3, #15
 8004dae:	b2d8      	uxtb	r0, r3
 8004db0:	2300      	movs	r3, #0
 8004db2:	22cc      	movs	r2, #204	; 0xcc
 8004db4:	2100      	movs	r1, #0
 8004db6:	f7fc f87b 	bl	8000eb0 <Set_Pixel>
	break;
 8004dba:	bf00      	nop
}

}
 8004dbc:	bf00      	nop
 8004dbe:	37d4      	adds	r7, #212	; 0xd4
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd90      	pop	{r4, r7, pc}

08004dc4 <HAL_TIM_PeriodElapsedCallback>:
	  if(Step >= 300) {Step=0;; return 0x03; }
	  else Step++;
	  return 0x01;
	}
	uint8_t caso=0;
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af04      	add	r7, sp, #16
 8004dca:	6078      	str	r0, [r7, #4]

		switch(caso)
 8004dcc:	4b69      	ldr	r3, [pc, #420]	; (8004f74 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b06      	cmp	r3, #6
 8004dd2:	f200 80b9 	bhi.w	8004f48 <HAL_TIM_PeriodElapsedCallback+0x184>
 8004dd6:	a201      	add	r2, pc, #4	; (adr r2, 8004ddc <HAL_TIM_PeriodElapsedCallback+0x18>)
 8004dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ddc:	08004df9 	.word	0x08004df9
 8004de0:	08004e29 	.word	0x08004e29
 8004de4:	08004e59 	.word	0x08004e59
 8004de8:	08004e89 	.word	0x08004e89
 8004dec:	08004eb9 	.word	0x08004eb9
 8004df0:	08004ee9 	.word	0x08004ee9
 8004df4:	08004f19 	.word	0x08004f19
		{
		case 0:	vumetro(2,2,2,2,2,2,2,2);
 8004df8:	2302      	movs	r3, #2
 8004dfa:	9303      	str	r3, [sp, #12]
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	9302      	str	r3, [sp, #8]
 8004e00:	2302      	movs	r3, #2
 8004e02:	9301      	str	r3, [sp, #4]
 8004e04:	2302      	movs	r3, #2
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	2302      	movs	r3, #2
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	2102      	movs	r1, #2
 8004e0e:	2002      	movs	r0, #2
 8004e10:	f7fc f97c 	bl	800110c <vumetro>
		Set_Brillo(brillo);
 8004e14:	4b58      	ldr	r3, [pc, #352]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8004e16:	edd3 7a00 	vldr	s15, [r3]
 8004e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e1e:	f7fc f877 	bl	8000f10 <Set_Brillo>
		Enviar_datos();
 8004e22:	f7fc f901 	bl	8001028 <Enviar_datos>
		break;
 8004e26:	e08f      	b.n	8004f48 <HAL_TIM_PeriodElapsedCallback+0x184>
		case 1: vumetro(3,3,3,3,3,3,3,3);
 8004e28:	2303      	movs	r3, #3
 8004e2a:	9303      	str	r3, [sp, #12]
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	9302      	str	r3, [sp, #8]
 8004e30:	2303      	movs	r3, #3
 8004e32:	9301      	str	r3, [sp, #4]
 8004e34:	2303      	movs	r3, #3
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	2303      	movs	r3, #3
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	2103      	movs	r1, #3
 8004e3e:	2003      	movs	r0, #3
 8004e40:	f7fc f964 	bl	800110c <vumetro>
		Set_Brillo(brillo);
 8004e44:	4b4c      	ldr	r3, [pc, #304]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8004e46:	edd3 7a00 	vldr	s15, [r3]
 8004e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e4e:	f7fc f85f 	bl	8000f10 <Set_Brillo>
		Enviar_datos();
 8004e52:	f7fc f8e9 	bl	8001028 <Enviar_datos>
		break;
 8004e56:	e077      	b.n	8004f48 <HAL_TIM_PeriodElapsedCallback+0x184>
		case 2:
		vumetro(4,4,4,4,4,4,4,4);
 8004e58:	2304      	movs	r3, #4
 8004e5a:	9303      	str	r3, [sp, #12]
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	9302      	str	r3, [sp, #8]
 8004e60:	2304      	movs	r3, #4
 8004e62:	9301      	str	r3, [sp, #4]
 8004e64:	2304      	movs	r3, #4
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	2304      	movs	r3, #4
 8004e6a:	2204      	movs	r2, #4
 8004e6c:	2104      	movs	r1, #4
 8004e6e:	2004      	movs	r0, #4
 8004e70:	f7fc f94c 	bl	800110c <vumetro>
		Set_Brillo(brillo);
 8004e74:	4b40      	ldr	r3, [pc, #256]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8004e76:	edd3 7a00 	vldr	s15, [r3]
 8004e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e7e:	f7fc f847 	bl	8000f10 <Set_Brillo>
		Enviar_datos();
 8004e82:	f7fc f8d1 	bl	8001028 <Enviar_datos>
		break;
 8004e86:	e05f      	b.n	8004f48 <HAL_TIM_PeriodElapsedCallback+0x184>
		case 3:	vumetro(5,5,5,5,5,5,5,5);
 8004e88:	2305      	movs	r3, #5
 8004e8a:	9303      	str	r3, [sp, #12]
 8004e8c:	2305      	movs	r3, #5
 8004e8e:	9302      	str	r3, [sp, #8]
 8004e90:	2305      	movs	r3, #5
 8004e92:	9301      	str	r3, [sp, #4]
 8004e94:	2305      	movs	r3, #5
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	2305      	movs	r3, #5
 8004e9a:	2205      	movs	r2, #5
 8004e9c:	2105      	movs	r1, #5
 8004e9e:	2005      	movs	r0, #5
 8004ea0:	f7fc f934 	bl	800110c <vumetro>
		Set_Brillo(brillo);
 8004ea4:	4b34      	ldr	r3, [pc, #208]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8004ea6:	edd3 7a00 	vldr	s15, [r3]
 8004eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8004eae:	f7fc f82f 	bl	8000f10 <Set_Brillo>
		Enviar_datos();
 8004eb2:	f7fc f8b9 	bl	8001028 <Enviar_datos>
		break;
 8004eb6:	e047      	b.n	8004f48 <HAL_TIM_PeriodElapsedCallback+0x184>
		case 4:	vumetro(6,6,6,6,6,6,6,6);
 8004eb8:	2306      	movs	r3, #6
 8004eba:	9303      	str	r3, [sp, #12]
 8004ebc:	2306      	movs	r3, #6
 8004ebe:	9302      	str	r3, [sp, #8]
 8004ec0:	2306      	movs	r3, #6
 8004ec2:	9301      	str	r3, [sp, #4]
 8004ec4:	2306      	movs	r3, #6
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	2306      	movs	r3, #6
 8004eca:	2206      	movs	r2, #6
 8004ecc:	2106      	movs	r1, #6
 8004ece:	2006      	movs	r0, #6
 8004ed0:	f7fc f91c 	bl	800110c <vumetro>
		Set_Brillo(brillo);
 8004ed4:	4b28      	ldr	r3, [pc, #160]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8004ed6:	edd3 7a00 	vldr	s15, [r3]
 8004eda:	eeb0 0a67 	vmov.f32	s0, s15
 8004ede:	f7fc f817 	bl	8000f10 <Set_Brillo>
		Enviar_datos();
 8004ee2:	f7fc f8a1 	bl	8001028 <Enviar_datos>
		break;
 8004ee6:	e02f      	b.n	8004f48 <HAL_TIM_PeriodElapsedCallback+0x184>
		case 5:	vumetro(7,7,7,7,7,7,7,7);
 8004ee8:	2307      	movs	r3, #7
 8004eea:	9303      	str	r3, [sp, #12]
 8004eec:	2307      	movs	r3, #7
 8004eee:	9302      	str	r3, [sp, #8]
 8004ef0:	2307      	movs	r3, #7
 8004ef2:	9301      	str	r3, [sp, #4]
 8004ef4:	2307      	movs	r3, #7
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	2307      	movs	r3, #7
 8004efa:	2207      	movs	r2, #7
 8004efc:	2107      	movs	r1, #7
 8004efe:	2007      	movs	r0, #7
 8004f00:	f7fc f904 	bl	800110c <vumetro>
		Set_Brillo(brillo);
 8004f04:	4b1c      	ldr	r3, [pc, #112]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8004f06:	edd3 7a00 	vldr	s15, [r3]
 8004f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f0e:	f7fb ffff 	bl	8000f10 <Set_Brillo>
		Enviar_datos();
 8004f12:	f7fc f889 	bl	8001028 <Enviar_datos>
		break;
 8004f16:	e017      	b.n	8004f48 <HAL_TIM_PeriodElapsedCallback+0x184>
		case 6: vumetro(8,8,8,8,8,8,8,8);
 8004f18:	2308      	movs	r3, #8
 8004f1a:	9303      	str	r3, [sp, #12]
 8004f1c:	2308      	movs	r3, #8
 8004f1e:	9302      	str	r3, [sp, #8]
 8004f20:	2308      	movs	r3, #8
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	2308      	movs	r3, #8
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	2308      	movs	r3, #8
 8004f2a:	2208      	movs	r2, #8
 8004f2c:	2108      	movs	r1, #8
 8004f2e:	2008      	movs	r0, #8
 8004f30:	f7fc f8ec 	bl	800110c <vumetro>
		Set_Brillo(brillo);
 8004f34:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8004f36:	edd3 7a00 	vldr	s15, [r3]
 8004f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f3e:	f7fb ffe7 	bl	8000f10 <Set_Brillo>
		Enviar_datos();
 8004f42:	f7fc f871 	bl	8001028 <Enviar_datos>
		break;
 8004f46:	bf00      	nop

		}
		caso = (caso+1)%7;
 8004f48:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8004f50:	fb83 1302 	smull	r1, r3, r3, r2
 8004f54:	4413      	add	r3, r2
 8004f56:	1099      	asrs	r1, r3, #2
 8004f58:	17d3      	asrs	r3, r2, #31
 8004f5a:	1ac9      	subs	r1, r1, r3
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	1a5b      	subs	r3, r3, r1
 8004f62:	1ad1      	subs	r1, r2, r3
 8004f64:	b2ca      	uxtb	r2, r1
 8004f66:	4b03      	ldr	r3, [pc, #12]	; (8004f74 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8004f68:	701a      	strb	r2, [r3, #0]

	}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20001d80 	.word	0x20001d80
 8004f78:	20000000 	.word	0x20000000
 8004f7c:	92492493 	.word	0x92492493

08004f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f84:	f000 fb54 	bl	8005630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f88:	f000 f80e 	bl	8004fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f8c:	f000 f958 	bl	8005240 <MX_GPIO_Init>
  MX_DMA_Init();
 8004f90:	f000 f936 	bl	8005200 <MX_DMA_Init>
  MX_TIM3_Init();
 8004f94:	f000 f870 	bl	8005078 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004f98:	f000 f8bc 	bl	8005114 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8004f9c:	4801      	ldr	r0, [pc, #4]	; (8004fa4 <main+0x24>)
 8004f9e:	f001 fe8d 	bl	8006cbc <HAL_TIM_Base_Start_IT>
	 }
	 HAL_Delay(20);
	 }
*/

while(1)
 8004fa2:	e7fe      	b.n	8004fa2 <main+0x22>
 8004fa4:	2000002c 	.word	0x2000002c

08004fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b094      	sub	sp, #80	; 0x50
 8004fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004fae:	f107 0320 	add.w	r3, r7, #32
 8004fb2:	2230      	movs	r2, #48	; 0x30
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f002 ffd8 	bl	8007f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004fbc:	f107 030c 	add.w	r3, r7, #12
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	605a      	str	r2, [r3, #4]
 8004fc6:	609a      	str	r2, [r3, #8]
 8004fc8:	60da      	str	r2, [r3, #12]
 8004fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60bb      	str	r3, [r7, #8]
 8004fd0:	4b27      	ldr	r3, [pc, #156]	; (8005070 <SystemClock_Config+0xc8>)
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	4a26      	ldr	r2, [pc, #152]	; (8005070 <SystemClock_Config+0xc8>)
 8004fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fda:	6413      	str	r3, [r2, #64]	; 0x40
 8004fdc:	4b24      	ldr	r3, [pc, #144]	; (8005070 <SystemClock_Config+0xc8>)
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fe8:	2300      	movs	r3, #0
 8004fea:	607b      	str	r3, [r7, #4]
 8004fec:	4b21      	ldr	r3, [pc, #132]	; (8005074 <SystemClock_Config+0xcc>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a20      	ldr	r2, [pc, #128]	; (8005074 <SystemClock_Config+0xcc>)
 8004ff2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	4b1e      	ldr	r3, [pc, #120]	; (8005074 <SystemClock_Config+0xcc>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005000:	607b      	str	r3, [r7, #4]
 8005002:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005004:	2301      	movs	r3, #1
 8005006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800500e:	2302      	movs	r3, #2
 8005010:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005016:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005018:	2304      	movs	r3, #4
 800501a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800501c:	23c0      	movs	r3, #192	; 0xc0
 800501e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005020:	2304      	movs	r3, #4
 8005022:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005024:	2308      	movs	r3, #8
 8005026:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005028:	f107 0320 	add.w	r3, r7, #32
 800502c:	4618      	mov	r0, r3
 800502e:	f001 f991 	bl	8006354 <HAL_RCC_OscConfig>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005038:	f000 f994 	bl	8005364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800503c:	230f      	movs	r3, #15
 800503e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005040:	2302      	movs	r3, #2
 8005042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800504c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005052:	f107 030c 	add.w	r3, r7, #12
 8005056:	2103      	movs	r1, #3
 8005058:	4618      	mov	r0, r3
 800505a:	f001 fbf3 	bl	8006844 <HAL_RCC_ClockConfig>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005064:	f000 f97e 	bl	8005364 <Error_Handler>
  }
}
 8005068:	bf00      	nop
 800506a:	3750      	adds	r7, #80	; 0x50
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40023800 	.word	0x40023800
 8005074:	40007000 	.word	0x40007000

08005078 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800507e:	f107 0308 	add.w	r3, r7, #8
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	605a      	str	r2, [r3, #4]
 8005088:	609a      	str	r2, [r3, #8]
 800508a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800508c:	463b      	mov	r3, r7
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005094:	4b1d      	ldr	r3, [pc, #116]	; (800510c <MX_TIM3_Init+0x94>)
 8005096:	4a1e      	ldr	r2, [pc, #120]	; (8005110 <MX_TIM3_Init+0x98>)
 8005098:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000;
 800509a:	4b1c      	ldr	r3, [pc, #112]	; (800510c <MX_TIM3_Init+0x94>)
 800509c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80050a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050a2:	4b1a      	ldr	r3, [pc, #104]	; (800510c <MX_TIM3_Init+0x94>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 332-1;
 80050a8:	4b18      	ldr	r3, [pc, #96]	; (800510c <MX_TIM3_Init+0x94>)
 80050aa:	f240 124b 	movw	r2, #331	; 0x14b
 80050ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050b0:	4b16      	ldr	r3, [pc, #88]	; (800510c <MX_TIM3_Init+0x94>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050b6:	4b15      	ldr	r3, [pc, #84]	; (800510c <MX_TIM3_Init+0x94>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80050bc:	4813      	ldr	r0, [pc, #76]	; (800510c <MX_TIM3_Init+0x94>)
 80050be:	f001 fdad 	bl	8006c1c <HAL_TIM_Base_Init>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80050c8:	f000 f94c 	bl	8005364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80050d2:	f107 0308 	add.w	r3, r7, #8
 80050d6:	4619      	mov	r1, r3
 80050d8:	480c      	ldr	r0, [pc, #48]	; (800510c <MX_TIM3_Init+0x94>)
 80050da:	f002 fa25 	bl	8007528 <HAL_TIM_ConfigClockSource>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80050e4:	f000 f93e 	bl	8005364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050e8:	2300      	movs	r3, #0
 80050ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050ec:	2300      	movs	r3, #0
 80050ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80050f0:	463b      	mov	r3, r7
 80050f2:	4619      	mov	r1, r3
 80050f4:	4805      	ldr	r0, [pc, #20]	; (800510c <MX_TIM3_Init+0x94>)
 80050f6:	f002 feb7 	bl	8007e68 <HAL_TIMEx_MasterConfigSynchronization>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005100:	f000 f930 	bl	8005364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005104:	bf00      	nop
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	2000002c 	.word	0x2000002c
 8005110:	40000400 	.word	0x40000400

08005114 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08e      	sub	sp, #56	; 0x38
 8005118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800511a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	605a      	str	r2, [r3, #4]
 8005124:	609a      	str	r2, [r3, #8]
 8005126:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005128:	f107 0320 	add.w	r3, r7, #32
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005132:	1d3b      	adds	r3, r7, #4
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	609a      	str	r2, [r3, #8]
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	611a      	str	r2, [r3, #16]
 8005140:	615a      	str	r2, [r3, #20]
 8005142:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005144:	4b2c      	ldr	r3, [pc, #176]	; (80051f8 <MX_TIM4_Init+0xe4>)
 8005146:	4a2d      	ldr	r2, [pc, #180]	; (80051fc <MX_TIM4_Init+0xe8>)
 8005148:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800514a:	4b2b      	ldr	r3, [pc, #172]	; (80051f8 <MX_TIM4_Init+0xe4>)
 800514c:	2200      	movs	r2, #0
 800514e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005150:	4b29      	ldr	r3, [pc, #164]	; (80051f8 <MX_TIM4_Init+0xe4>)
 8005152:	2200      	movs	r2, #0
 8005154:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 120-1;
 8005156:	4b28      	ldr	r3, [pc, #160]	; (80051f8 <MX_TIM4_Init+0xe4>)
 8005158:	2277      	movs	r2, #119	; 0x77
 800515a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800515c:	4b26      	ldr	r3, [pc, #152]	; (80051f8 <MX_TIM4_Init+0xe4>)
 800515e:	2200      	movs	r2, #0
 8005160:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005162:	4b25      	ldr	r3, [pc, #148]	; (80051f8 <MX_TIM4_Init+0xe4>)
 8005164:	2200      	movs	r2, #0
 8005166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005168:	4823      	ldr	r0, [pc, #140]	; (80051f8 <MX_TIM4_Init+0xe4>)
 800516a:	f001 fd57 	bl	8006c1c <HAL_TIM_Base_Init>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8005174:	f000 f8f6 	bl	8005364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800517c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800517e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005182:	4619      	mov	r1, r3
 8005184:	481c      	ldr	r0, [pc, #112]	; (80051f8 <MX_TIM4_Init+0xe4>)
 8005186:	f002 f9cf 	bl	8007528 <HAL_TIM_ConfigClockSource>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8005190:	f000 f8e8 	bl	8005364 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005194:	4818      	ldr	r0, [pc, #96]	; (80051f8 <MX_TIM4_Init+0xe4>)
 8005196:	f001 fdf3 	bl	8006d80 <HAL_TIM_PWM_Init>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80051a0:	f000 f8e0 	bl	8005364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051a4:	2300      	movs	r3, #0
 80051a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051a8:	2300      	movs	r3, #0
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80051ac:	f107 0320 	add.w	r3, r7, #32
 80051b0:	4619      	mov	r1, r3
 80051b2:	4811      	ldr	r0, [pc, #68]	; (80051f8 <MX_TIM4_Init+0xe4>)
 80051b4:	f002 fe58 	bl	8007e68 <HAL_TIMEx_MasterConfigSynchronization>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80051be:	f000 f8d1 	bl	8005364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051c2:	2360      	movs	r3, #96	; 0x60
 80051c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80051d2:	1d3b      	adds	r3, r7, #4
 80051d4:	2204      	movs	r2, #4
 80051d6:	4619      	mov	r1, r3
 80051d8:	4807      	ldr	r0, [pc, #28]	; (80051f8 <MX_TIM4_Init+0xe4>)
 80051da:	f002 f8e3 	bl	80073a4 <HAL_TIM_PWM_ConfigChannel>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80051e4:	f000 f8be 	bl	8005364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80051e8:	4803      	ldr	r0, [pc, #12]	; (80051f8 <MX_TIM4_Init+0xe4>)
 80051ea:	f000 f963 	bl	80054b4 <HAL_TIM_MspPostInit>

}
 80051ee:	bf00      	nop
 80051f0:	3738      	adds	r7, #56	; 0x38
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20000074 	.word	0x20000074
 80051fc:	40000800 	.word	0x40000800

08005200 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005206:	2300      	movs	r3, #0
 8005208:	607b      	str	r3, [r7, #4]
 800520a:	4b0c      	ldr	r3, [pc, #48]	; (800523c <MX_DMA_Init+0x3c>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	4a0b      	ldr	r2, [pc, #44]	; (800523c <MX_DMA_Init+0x3c>)
 8005210:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005214:	6313      	str	r3, [r2, #48]	; 0x30
 8005216:	4b09      	ldr	r3, [pc, #36]	; (800523c <MX_DMA_Init+0x3c>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8005222:	2200      	movs	r2, #0
 8005224:	2100      	movs	r1, #0
 8005226:	200e      	movs	r0, #14
 8005228:	f000 fb4f 	bl	80058ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800522c:	200e      	movs	r0, #14
 800522e:	f000 fb68 	bl	8005902 <HAL_NVIC_EnableIRQ>

}
 8005232:	bf00      	nop
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40023800 	.word	0x40023800

08005240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	; 0x28
 8005244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005246:	f107 0314 	add.w	r3, r7, #20
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	605a      	str	r2, [r3, #4]
 8005250:	609a      	str	r2, [r3, #8]
 8005252:	60da      	str	r2, [r3, #12]
 8005254:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005256:	2300      	movs	r3, #0
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	4b3e      	ldr	r3, [pc, #248]	; (8005354 <MX_GPIO_Init+0x114>)
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	4a3d      	ldr	r2, [pc, #244]	; (8005354 <MX_GPIO_Init+0x114>)
 8005260:	f043 0304 	orr.w	r3, r3, #4
 8005264:	6313      	str	r3, [r2, #48]	; 0x30
 8005266:	4b3b      	ldr	r3, [pc, #236]	; (8005354 <MX_GPIO_Init+0x114>)
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	4b37      	ldr	r3, [pc, #220]	; (8005354 <MX_GPIO_Init+0x114>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	4a36      	ldr	r2, [pc, #216]	; (8005354 <MX_GPIO_Init+0x114>)
 800527c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005280:	6313      	str	r3, [r2, #48]	; 0x30
 8005282:	4b34      	ldr	r3, [pc, #208]	; (8005354 <MX_GPIO_Init+0x114>)
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800528e:	2300      	movs	r3, #0
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	4b30      	ldr	r3, [pc, #192]	; (8005354 <MX_GPIO_Init+0x114>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	4a2f      	ldr	r2, [pc, #188]	; (8005354 <MX_GPIO_Init+0x114>)
 8005298:	f043 0301 	orr.w	r3, r3, #1
 800529c:	6313      	str	r3, [r2, #48]	; 0x30
 800529e:	4b2d      	ldr	r3, [pc, #180]	; (8005354 <MX_GPIO_Init+0x114>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	60bb      	str	r3, [r7, #8]
 80052a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80052aa:	2300      	movs	r3, #0
 80052ac:	607b      	str	r3, [r7, #4]
 80052ae:	4b29      	ldr	r3, [pc, #164]	; (8005354 <MX_GPIO_Init+0x114>)
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	4a28      	ldr	r2, [pc, #160]	; (8005354 <MX_GPIO_Init+0x114>)
 80052b4:	f043 0308 	orr.w	r3, r3, #8
 80052b8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ba:	4b26      	ldr	r3, [pc, #152]	; (8005354 <MX_GPIO_Init+0x114>)
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	607b      	str	r3, [r7, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80052c6:	2300      	movs	r3, #0
 80052c8:	603b      	str	r3, [r7, #0]
 80052ca:	4b22      	ldr	r3, [pc, #136]	; (8005354 <MX_GPIO_Init+0x114>)
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	4a21      	ldr	r2, [pc, #132]	; (8005354 <MX_GPIO_Init+0x114>)
 80052d0:	f043 0302 	orr.w	r3, r3, #2
 80052d4:	6313      	str	r3, [r2, #48]	; 0x30
 80052d6:	4b1f      	ldr	r3, [pc, #124]	; (8005354 <MX_GPIO_Init+0x114>)
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	603b      	str	r3, [r7, #0]
 80052e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80052e2:	2201      	movs	r2, #1
 80052e4:	2101      	movs	r1, #1
 80052e6:	481c      	ldr	r0, [pc, #112]	; (8005358 <MX_GPIO_Init+0x118>)
 80052e8:	f001 f81a 	bl	8006320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80052ec:	2200      	movs	r2, #0
 80052ee:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80052f2:	481a      	ldr	r0, [pc, #104]	; (800535c <MX_GPIO_Init+0x11c>)
 80052f4:	f001 f814 	bl	8006320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80052f8:	2301      	movs	r3, #1
 80052fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052fc:	2301      	movs	r3, #1
 80052fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005300:	2300      	movs	r3, #0
 8005302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005304:	2300      	movs	r3, #0
 8005306:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005308:	f107 0314 	add.w	r3, r7, #20
 800530c:	4619      	mov	r1, r3
 800530e:	4812      	ldr	r0, [pc, #72]	; (8005358 <MX_GPIO_Init+0x118>)
 8005310:	f000 fe82 	bl	8006018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005314:	2301      	movs	r3, #1
 8005316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8005318:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800531c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005322:	f107 0314 	add.w	r3, r7, #20
 8005326:	4619      	mov	r1, r3
 8005328:	480d      	ldr	r0, [pc, #52]	; (8005360 <MX_GPIO_Init+0x120>)
 800532a:	f000 fe75 	bl	8006018 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800532e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005334:	2301      	movs	r3, #1
 8005336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005338:	2300      	movs	r3, #0
 800533a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800533c:	2300      	movs	r3, #0
 800533e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005340:	f107 0314 	add.w	r3, r7, #20
 8005344:	4619      	mov	r1, r3
 8005346:	4805      	ldr	r0, [pc, #20]	; (800535c <MX_GPIO_Init+0x11c>)
 8005348:	f000 fe66 	bl	8006018 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800534c:	bf00      	nop
 800534e:	3728      	adds	r7, #40	; 0x28
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40023800 	.word	0x40023800
 8005358:	40020800 	.word	0x40020800
 800535c:	40020c00 	.word	0x40020c00
 8005360:	40020000 	.word	0x40020000

08005364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005368:	b672      	cpsid	i
}
 800536a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800536c:	e7fe      	b.n	800536c <Error_Handler+0x8>
	...

08005370 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005376:	2300      	movs	r3, #0
 8005378:	607b      	str	r3, [r7, #4]
 800537a:	4b10      	ldr	r3, [pc, #64]	; (80053bc <HAL_MspInit+0x4c>)
 800537c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537e:	4a0f      	ldr	r2, [pc, #60]	; (80053bc <HAL_MspInit+0x4c>)
 8005380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005384:	6453      	str	r3, [r2, #68]	; 0x44
 8005386:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <HAL_MspInit+0x4c>)
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800538e:	607b      	str	r3, [r7, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005392:	2300      	movs	r3, #0
 8005394:	603b      	str	r3, [r7, #0]
 8005396:	4b09      	ldr	r3, [pc, #36]	; (80053bc <HAL_MspInit+0x4c>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	4a08      	ldr	r2, [pc, #32]	; (80053bc <HAL_MspInit+0x4c>)
 800539c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a0:	6413      	str	r3, [r2, #64]	; 0x40
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <HAL_MspInit+0x4c>)
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053aa:	603b      	str	r3, [r7, #0]
 80053ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80053ae:	2007      	movs	r0, #7
 80053b0:	f000 fa80 	bl	80058b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40023800 	.word	0x40023800

080053c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a34      	ldr	r2, [pc, #208]	; (80054a0 <HAL_TIM_Base_MspInit+0xe0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d116      	bne.n	8005400 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	4b33      	ldr	r3, [pc, #204]	; (80054a4 <HAL_TIM_Base_MspInit+0xe4>)
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	4a32      	ldr	r2, [pc, #200]	; (80054a4 <HAL_TIM_Base_MspInit+0xe4>)
 80053dc:	f043 0302 	orr.w	r3, r3, #2
 80053e0:	6413      	str	r3, [r2, #64]	; 0x40
 80053e2:	4b30      	ldr	r3, [pc, #192]	; (80054a4 <HAL_TIM_Base_MspInit+0xe4>)
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80053ee:	2200      	movs	r2, #0
 80053f0:	2100      	movs	r1, #0
 80053f2:	201d      	movs	r0, #29
 80053f4:	f000 fa69 	bl	80058ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80053f8:	201d      	movs	r0, #29
 80053fa:	f000 fa82 	bl	8005902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80053fe:	e04b      	b.n	8005498 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM4)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a28      	ldr	r2, [pc, #160]	; (80054a8 <HAL_TIM_Base_MspInit+0xe8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d146      	bne.n	8005498 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800540a:	2300      	movs	r3, #0
 800540c:	60bb      	str	r3, [r7, #8]
 800540e:	4b25      	ldr	r3, [pc, #148]	; (80054a4 <HAL_TIM_Base_MspInit+0xe4>)
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	4a24      	ldr	r2, [pc, #144]	; (80054a4 <HAL_TIM_Base_MspInit+0xe4>)
 8005414:	f043 0304 	orr.w	r3, r3, #4
 8005418:	6413      	str	r3, [r2, #64]	; 0x40
 800541a:	4b22      	ldr	r3, [pc, #136]	; (80054a4 <HAL_TIM_Base_MspInit+0xe4>)
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	60bb      	str	r3, [r7, #8]
 8005424:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8005426:	4b21      	ldr	r3, [pc, #132]	; (80054ac <HAL_TIM_Base_MspInit+0xec>)
 8005428:	4a21      	ldr	r2, [pc, #132]	; (80054b0 <HAL_TIM_Base_MspInit+0xf0>)
 800542a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 800542c:	4b1f      	ldr	r3, [pc, #124]	; (80054ac <HAL_TIM_Base_MspInit+0xec>)
 800542e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005432:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005434:	4b1d      	ldr	r3, [pc, #116]	; (80054ac <HAL_TIM_Base_MspInit+0xec>)
 8005436:	2240      	movs	r2, #64	; 0x40
 8005438:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800543a:	4b1c      	ldr	r3, [pc, #112]	; (80054ac <HAL_TIM_Base_MspInit+0xec>)
 800543c:	2200      	movs	r2, #0
 800543e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8005440:	4b1a      	ldr	r3, [pc, #104]	; (80054ac <HAL_TIM_Base_MspInit+0xec>)
 8005442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005446:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005448:	4b18      	ldr	r3, [pc, #96]	; (80054ac <HAL_TIM_Base_MspInit+0xec>)
 800544a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800544e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005450:	4b16      	ldr	r3, [pc, #88]	; (80054ac <HAL_TIM_Base_MspInit+0xec>)
 8005452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005456:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 8005458:	4b14      	ldr	r3, [pc, #80]	; (80054ac <HAL_TIM_Base_MspInit+0xec>)
 800545a:	2200      	movs	r2, #0
 800545c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800545e:	4b13      	ldr	r3, [pc, #76]	; (80054ac <HAL_TIM_Base_MspInit+0xec>)
 8005460:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005464:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005466:	4b11      	ldr	r3, [pc, #68]	; (80054ac <HAL_TIM_Base_MspInit+0xec>)
 8005468:	2200      	movs	r2, #0
 800546a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 800546c:	480f      	ldr	r0, [pc, #60]	; (80054ac <HAL_TIM_Base_MspInit+0xec>)
 800546e:	f000 fa63 	bl	8005938 <HAL_DMA_Init>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <HAL_TIM_Base_MspInit+0xbc>
      Error_Handler();
 8005478:	f7ff ff74 	bl	8005364 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a0b      	ldr	r2, [pc, #44]	; (80054ac <HAL_TIM_Base_MspInit+0xec>)
 8005480:	629a      	str	r2, [r3, #40]	; 0x28
 8005482:	4a0a      	ldr	r2, [pc, #40]	; (80054ac <HAL_TIM_Base_MspInit+0xec>)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005488:	2200      	movs	r2, #0
 800548a:	2100      	movs	r1, #0
 800548c:	201e      	movs	r0, #30
 800548e:	f000 fa1c 	bl	80058ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005492:	201e      	movs	r0, #30
 8005494:	f000 fa35 	bl	8005902 <HAL_NVIC_EnableIRQ>
}
 8005498:	bf00      	nop
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40023800 	.word	0x40023800
 80054a8:	40000800 	.word	0x40000800
 80054ac:	200000bc 	.word	0x200000bc
 80054b0:	40026058 	.word	0x40026058

080054b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054bc:	f107 030c 	add.w	r3, r7, #12
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	605a      	str	r2, [r3, #4]
 80054c6:	609a      	str	r2, [r3, #8]
 80054c8:	60da      	str	r2, [r3, #12]
 80054ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a12      	ldr	r2, [pc, #72]	; (800551c <HAL_TIM_MspPostInit+0x68>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d11d      	bne.n	8005512 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054d6:	2300      	movs	r3, #0
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	4b11      	ldr	r3, [pc, #68]	; (8005520 <HAL_TIM_MspPostInit+0x6c>)
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	4a10      	ldr	r2, [pc, #64]	; (8005520 <HAL_TIM_MspPostInit+0x6c>)
 80054e0:	f043 0302 	orr.w	r3, r3, #2
 80054e4:	6313      	str	r3, [r2, #48]	; 0x30
 80054e6:	4b0e      	ldr	r3, [pc, #56]	; (8005520 <HAL_TIM_MspPostInit+0x6c>)
 80054e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	60bb      	str	r3, [r7, #8]
 80054f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80054f2:	2380      	movs	r3, #128	; 0x80
 80054f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f6:	2302      	movs	r3, #2
 80054f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054fe:	2300      	movs	r3, #0
 8005500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005502:	2302      	movs	r3, #2
 8005504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005506:	f107 030c 	add.w	r3, r7, #12
 800550a:	4619      	mov	r1, r3
 800550c:	4805      	ldr	r0, [pc, #20]	; (8005524 <HAL_TIM_MspPostInit+0x70>)
 800550e:	f000 fd83 	bl	8006018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005512:	bf00      	nop
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40000800 	.word	0x40000800
 8005520:	40023800 	.word	0x40023800
 8005524:	40020400 	.word	0x40020400

08005528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800552c:	e7fe      	b.n	800552c <NMI_Handler+0x4>

0800552e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800552e:	b480      	push	{r7}
 8005530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005532:	e7fe      	b.n	8005532 <HardFault_Handler+0x4>

08005534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005538:	e7fe      	b.n	8005538 <MemManage_Handler+0x4>

0800553a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800553a:	b480      	push	{r7}
 800553c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800553e:	e7fe      	b.n	800553e <BusFault_Handler+0x4>

08005540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005544:	e7fe      	b.n	8005544 <UsageFault_Handler+0x4>

08005546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005546:	b480      	push	{r7}
 8005548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800554a:	bf00      	nop
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005558:	bf00      	nop
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005562:	b480      	push	{r7}
 8005564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005566:	bf00      	nop
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005574:	f000 f8ae 	bl	80056d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005578:	bf00      	nop
 800557a:	bd80      	pop	{r7, pc}

0800557c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8005580:	4802      	ldr	r0, [pc, #8]	; (800558c <DMA1_Stream3_IRQHandler+0x10>)
 8005582:	f000 fadf 	bl	8005b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005586:	bf00      	nop
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	200000bc 	.word	0x200000bc

08005590 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005594:	4802      	ldr	r0, [pc, #8]	; (80055a0 <TIM3_IRQHandler+0x10>)
 8005596:	f001 fdfd 	bl	8007194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800559a:	bf00      	nop
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	2000002c 	.word	0x2000002c

080055a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80055a8:	4802      	ldr	r0, [pc, #8]	; (80055b4 <TIM4_IRQHandler+0x10>)
 80055aa:	f001 fdf3 	bl	8007194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80055ae:	bf00      	nop
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20000074 	.word	0x20000074

080055b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055bc:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <SystemInit+0x20>)
 80055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c2:	4a05      	ldr	r2, [pc, #20]	; (80055d8 <SystemInit+0x20>)
 80055c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055cc:	bf00      	nop
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	e000ed00 	.word	0xe000ed00

080055dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80055dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005614 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80055e0:	480d      	ldr	r0, [pc, #52]	; (8005618 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80055e2:	490e      	ldr	r1, [pc, #56]	; (800561c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80055e4:	4a0e      	ldr	r2, [pc, #56]	; (8005620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80055e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055e8:	e002      	b.n	80055f0 <LoopCopyDataInit>

080055ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055ee:	3304      	adds	r3, #4

080055f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055f4:	d3f9      	bcc.n	80055ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055f6:	4a0b      	ldr	r2, [pc, #44]	; (8005624 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80055f8:	4c0b      	ldr	r4, [pc, #44]	; (8005628 <LoopFillZerobss+0x26>)
  movs r3, #0
 80055fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055fc:	e001      	b.n	8005602 <LoopFillZerobss>

080055fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005600:	3204      	adds	r2, #4

08005602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005604:	d3fb      	bcc.n	80055fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005606:	f7ff ffd7 	bl	80055b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800560a:	f002 fcb7 	bl	8007f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800560e:	f7ff fcb7 	bl	8004f80 <main>
  bx  lr    
 8005612:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800561c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8005620:	08009320 	.word	0x08009320
  ldr r2, =_sbss
 8005624:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8005628:	20001d88 	.word	0x20001d88

0800562c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800562c:	e7fe      	b.n	800562c <ADC_IRQHandler>
	...

08005630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005634:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <HAL_Init+0x40>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a0d      	ldr	r2, [pc, #52]	; (8005670 <HAL_Init+0x40>)
 800563a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800563e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <HAL_Init+0x40>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a0a      	ldr	r2, [pc, #40]	; (8005670 <HAL_Init+0x40>)
 8005646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800564a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800564c:	4b08      	ldr	r3, [pc, #32]	; (8005670 <HAL_Init+0x40>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a07      	ldr	r2, [pc, #28]	; (8005670 <HAL_Init+0x40>)
 8005652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005658:	2003      	movs	r0, #3
 800565a:	f000 f92b 	bl	80058b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800565e:	2000      	movs	r0, #0
 8005660:	f000 f808 	bl	8005674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005664:	f7ff fe84 	bl	8005370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40023c00 	.word	0x40023c00

08005674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800567c:	4b12      	ldr	r3, [pc, #72]	; (80056c8 <HAL_InitTick+0x54>)
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	4b12      	ldr	r3, [pc, #72]	; (80056cc <HAL_InitTick+0x58>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	4619      	mov	r1, r3
 8005686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800568a:	fbb3 f3f1 	udiv	r3, r3, r1
 800568e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005692:	4618      	mov	r0, r3
 8005694:	f000 f943 	bl	800591e <HAL_SYSTICK_Config>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e00e      	b.n	80056c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b0f      	cmp	r3, #15
 80056a6:	d80a      	bhi.n	80056be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056a8:	2200      	movs	r2, #0
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	f04f 30ff 	mov.w	r0, #4294967295
 80056b0:	f000 f90b 	bl	80058ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80056b4:	4a06      	ldr	r2, [pc, #24]	; (80056d0 <HAL_InitTick+0x5c>)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e000      	b.n	80056c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	20000004 	.word	0x20000004
 80056cc:	2000000c 	.word	0x2000000c
 80056d0:	20000008 	.word	0x20000008

080056d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056d8:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <HAL_IncTick+0x20>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <HAL_IncTick+0x24>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4413      	add	r3, r2
 80056e4:	4a04      	ldr	r2, [pc, #16]	; (80056f8 <HAL_IncTick+0x24>)
 80056e6:	6013      	str	r3, [r2, #0]
}
 80056e8:	bf00      	nop
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	2000000c 	.word	0x2000000c
 80056f8:	20001d84 	.word	0x20001d84

080056fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
  return uwTick;
 8005700:	4b03      	ldr	r3, [pc, #12]	; (8005710 <HAL_GetTick+0x14>)
 8005702:	681b      	ldr	r3, [r3, #0]
}
 8005704:	4618      	mov	r0, r3
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	20001d84 	.word	0x20001d84

08005714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005724:	4b0c      	ldr	r3, [pc, #48]	; (8005758 <__NVIC_SetPriorityGrouping+0x44>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005730:	4013      	ands	r3, r2
 8005732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800573c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005746:	4a04      	ldr	r2, [pc, #16]	; (8005758 <__NVIC_SetPriorityGrouping+0x44>)
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	60d3      	str	r3, [r2, #12]
}
 800574c:	bf00      	nop
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	e000ed00 	.word	0xe000ed00

0800575c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005760:	4b04      	ldr	r3, [pc, #16]	; (8005774 <__NVIC_GetPriorityGrouping+0x18>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	0a1b      	lsrs	r3, r3, #8
 8005766:	f003 0307 	and.w	r3, r3, #7
}
 800576a:	4618      	mov	r0, r3
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	e000ed00 	.word	0xe000ed00

08005778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	4603      	mov	r3, r0
 8005780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005786:	2b00      	cmp	r3, #0
 8005788:	db0b      	blt.n	80057a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	f003 021f 	and.w	r2, r3, #31
 8005790:	4907      	ldr	r1, [pc, #28]	; (80057b0 <__NVIC_EnableIRQ+0x38>)
 8005792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	2001      	movs	r0, #1
 800579a:	fa00 f202 	lsl.w	r2, r0, r2
 800579e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	e000e100 	.word	0xe000e100

080057b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	4603      	mov	r3, r0
 80057bc:	6039      	str	r1, [r7, #0]
 80057be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	db0a      	blt.n	80057de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	490c      	ldr	r1, [pc, #48]	; (8005800 <__NVIC_SetPriority+0x4c>)
 80057ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d2:	0112      	lsls	r2, r2, #4
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	440b      	add	r3, r1
 80057d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057dc:	e00a      	b.n	80057f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	4908      	ldr	r1, [pc, #32]	; (8005804 <__NVIC_SetPriority+0x50>)
 80057e4:	79fb      	ldrb	r3, [r7, #7]
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	3b04      	subs	r3, #4
 80057ec:	0112      	lsls	r2, r2, #4
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	440b      	add	r3, r1
 80057f2:	761a      	strb	r2, [r3, #24]
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	e000e100 	.word	0xe000e100
 8005804:	e000ed00 	.word	0xe000ed00

08005808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005808:	b480      	push	{r7}
 800580a:	b089      	sub	sp, #36	; 0x24
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f1c3 0307 	rsb	r3, r3, #7
 8005822:	2b04      	cmp	r3, #4
 8005824:	bf28      	it	cs
 8005826:	2304      	movcs	r3, #4
 8005828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	3304      	adds	r3, #4
 800582e:	2b06      	cmp	r3, #6
 8005830:	d902      	bls.n	8005838 <NVIC_EncodePriority+0x30>
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	3b03      	subs	r3, #3
 8005836:	e000      	b.n	800583a <NVIC_EncodePriority+0x32>
 8005838:	2300      	movs	r3, #0
 800583a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800583c:	f04f 32ff 	mov.w	r2, #4294967295
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	43da      	mvns	r2, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	401a      	ands	r2, r3
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005850:	f04f 31ff 	mov.w	r1, #4294967295
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	fa01 f303 	lsl.w	r3, r1, r3
 800585a:	43d9      	mvns	r1, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005860:	4313      	orrs	r3, r2
         );
}
 8005862:	4618      	mov	r0, r3
 8005864:	3724      	adds	r7, #36	; 0x24
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
	...

08005870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3b01      	subs	r3, #1
 800587c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005880:	d301      	bcc.n	8005886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005882:	2301      	movs	r3, #1
 8005884:	e00f      	b.n	80058a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005886:	4a0a      	ldr	r2, [pc, #40]	; (80058b0 <SysTick_Config+0x40>)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3b01      	subs	r3, #1
 800588c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800588e:	210f      	movs	r1, #15
 8005890:	f04f 30ff 	mov.w	r0, #4294967295
 8005894:	f7ff ff8e 	bl	80057b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005898:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <SysTick_Config+0x40>)
 800589a:	2200      	movs	r2, #0
 800589c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800589e:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <SysTick_Config+0x40>)
 80058a0:	2207      	movs	r2, #7
 80058a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	e000e010 	.word	0xe000e010

080058b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff ff29 	bl	8005714 <__NVIC_SetPriorityGrouping>
}
 80058c2:	bf00      	nop
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b086      	sub	sp, #24
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	4603      	mov	r3, r0
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
 80058d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058dc:	f7ff ff3e 	bl	800575c <__NVIC_GetPriorityGrouping>
 80058e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	6978      	ldr	r0, [r7, #20]
 80058e8:	f7ff ff8e 	bl	8005808 <NVIC_EncodePriority>
 80058ec:	4602      	mov	r2, r0
 80058ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058f2:	4611      	mov	r1, r2
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff ff5d 	bl	80057b4 <__NVIC_SetPriority>
}
 80058fa:	bf00      	nop
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b082      	sub	sp, #8
 8005906:	af00      	add	r7, sp, #0
 8005908:	4603      	mov	r3, r0
 800590a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800590c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff ff31 	bl	8005778 <__NVIC_EnableIRQ>
}
 8005916:	bf00      	nop
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff ffa2 	bl	8005870 <SysTick_Config>
 800592c:	4603      	mov	r3, r0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005944:	f7ff feda 	bl	80056fc <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e099      	b.n	8005a88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0201 	bic.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005974:	e00f      	b.n	8005996 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005976:	f7ff fec1 	bl	80056fc <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b05      	cmp	r3, #5
 8005982:	d908      	bls.n	8005996 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2203      	movs	r2, #3
 800598e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e078      	b.n	8005a88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e8      	bne.n	8005976 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4b38      	ldr	r3, [pc, #224]	; (8005a90 <HAL_DMA_Init+0x158>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d107      	bne.n	8005a00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	4313      	orrs	r3, r2
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f023 0307 	bic.w	r3, r3, #7
 8005a16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d117      	bne.n	8005a5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00e      	beq.n	8005a5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fa6f 	bl	8005f20 <DMA_CheckFifoParam>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d008      	beq.n	8005a5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2240      	movs	r2, #64	; 0x40
 8005a4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a56:	2301      	movs	r3, #1
 8005a58:	e016      	b.n	8005a88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fa26 	bl	8005eb4 <DMA_CalcBaseAndBitshift>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a70:	223f      	movs	r2, #63	; 0x3f
 8005a72:	409a      	lsls	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	f010803f 	.word	0xf010803f

08005a94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aaa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d101      	bne.n	8005aba <HAL_DMA_Start_IT+0x26>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e040      	b.n	8005b3c <HAL_DMA_Start_IT+0xa8>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d12f      	bne.n	8005b2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 f9b8 	bl	8005e58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aec:	223f      	movs	r2, #63	; 0x3f
 8005aee:	409a      	lsls	r2, r3
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0216 	orr.w	r2, r2, #22
 8005b02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d007      	beq.n	8005b1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0208 	orr.w	r2, r2, #8
 8005b1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	e005      	b.n	8005b3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b36:	2302      	movs	r3, #2
 8005b38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b50:	4b8e      	ldr	r3, [pc, #568]	; (8005d8c <HAL_DMA_IRQHandler+0x248>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a8e      	ldr	r2, [pc, #568]	; (8005d90 <HAL_DMA_IRQHandler+0x24c>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	0a9b      	lsrs	r3, r3, #10
 8005b5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b6e:	2208      	movs	r2, #8
 8005b70:	409a      	lsls	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4013      	ands	r3, r2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d01a      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d013      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0204 	bic.w	r2, r2, #4
 8005b96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	409a      	lsls	r2, r3
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba8:	f043 0201 	orr.w	r2, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	409a      	lsls	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d012      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00b      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	409a      	lsls	r2, r3
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bde:	f043 0202 	orr.w	r2, r3, #2
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bea:	2204      	movs	r2, #4
 8005bec:	409a      	lsls	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d012      	beq.n	8005c1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00b      	beq.n	8005c1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c08:	2204      	movs	r2, #4
 8005c0a:	409a      	lsls	r2, r3
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c14:	f043 0204 	orr.w	r2, r3, #4
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c20:	2210      	movs	r2, #16
 8005c22:	409a      	lsls	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4013      	ands	r3, r2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d043      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0308 	and.w	r3, r3, #8
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d03c      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3e:	2210      	movs	r2, #16
 8005c40:	409a      	lsls	r2, r3
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d018      	beq.n	8005c86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d108      	bne.n	8005c74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d024      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	4798      	blx	r3
 8005c72:	e01f      	b.n	8005cb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01b      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	4798      	blx	r3
 8005c84:	e016      	b.n	8005cb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d107      	bne.n	8005ca4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0208 	bic.w	r2, r2, #8
 8005ca2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb8:	2220      	movs	r2, #32
 8005cba:	409a      	lsls	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 808f 	beq.w	8005de4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 8087 	beq.w	8005de4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cda:	2220      	movs	r2, #32
 8005cdc:	409a      	lsls	r2, r3
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b05      	cmp	r3, #5
 8005cec:	d136      	bne.n	8005d5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0216 	bic.w	r2, r2, #22
 8005cfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	695a      	ldr	r2, [r3, #20]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d103      	bne.n	8005d1e <HAL_DMA_IRQHandler+0x1da>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d007      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0208 	bic.w	r2, r2, #8
 8005d2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d32:	223f      	movs	r2, #63	; 0x3f
 8005d34:	409a      	lsls	r2, r3
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d07e      	beq.n	8005e50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	4798      	blx	r3
        }
        return;
 8005d5a:	e079      	b.n	8005e50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d01d      	beq.n	8005da6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10d      	bne.n	8005d94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d031      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	4798      	blx	r3
 8005d88:	e02c      	b.n	8005de4 <HAL_DMA_IRQHandler+0x2a0>
 8005d8a:	bf00      	nop
 8005d8c:	20000004 	.word	0x20000004
 8005d90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d023      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	4798      	blx	r3
 8005da4:	e01e      	b.n	8005de4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10f      	bne.n	8005dd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0210 	bic.w	r2, r2, #16
 8005dc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d032      	beq.n	8005e52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d022      	beq.n	8005e3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2205      	movs	r2, #5
 8005dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0201 	bic.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	3301      	adds	r3, #1
 8005e14:	60bb      	str	r3, [r7, #8]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d307      	bcc.n	8005e2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f2      	bne.n	8005e10 <HAL_DMA_IRQHandler+0x2cc>
 8005e2a:	e000      	b.n	8005e2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	4798      	blx	r3
 8005e4e:	e000      	b.n	8005e52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005e50:	bf00      	nop
    }
  }
}
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	2b40      	cmp	r3, #64	; 0x40
 8005e84:	d108      	bne.n	8005e98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e96:	e007      	b.n	8005ea8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	60da      	str	r2, [r3, #12]
}
 8005ea8:	bf00      	nop
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	3b10      	subs	r3, #16
 8005ec4:	4a14      	ldr	r2, [pc, #80]	; (8005f18 <DMA_CalcBaseAndBitshift+0x64>)
 8005ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eca:	091b      	lsrs	r3, r3, #4
 8005ecc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ece:	4a13      	ldr	r2, [pc, #76]	; (8005f1c <DMA_CalcBaseAndBitshift+0x68>)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d909      	bls.n	8005ef6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005eea:	f023 0303 	bic.w	r3, r3, #3
 8005eee:	1d1a      	adds	r2, r3, #4
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	659a      	str	r2, [r3, #88]	; 0x58
 8005ef4:	e007      	b.n	8005f06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	aaaaaaab 	.word	0xaaaaaaab
 8005f1c:	08009130 	.word	0x08009130

08005f20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d11f      	bne.n	8005f7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d856      	bhi.n	8005fee <DMA_CheckFifoParam+0xce>
 8005f40:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <DMA_CheckFifoParam+0x28>)
 8005f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f46:	bf00      	nop
 8005f48:	08005f59 	.word	0x08005f59
 8005f4c:	08005f6b 	.word	0x08005f6b
 8005f50:	08005f59 	.word	0x08005f59
 8005f54:	08005fef 	.word	0x08005fef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d046      	beq.n	8005ff2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f68:	e043      	b.n	8005ff2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f72:	d140      	bne.n	8005ff6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f78:	e03d      	b.n	8005ff6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f82:	d121      	bne.n	8005fc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d837      	bhi.n	8005ffa <DMA_CheckFifoParam+0xda>
 8005f8a:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <DMA_CheckFifoParam+0x70>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fa1 	.word	0x08005fa1
 8005f94:	08005fa7 	.word	0x08005fa7
 8005f98:	08005fa1 	.word	0x08005fa1
 8005f9c:	08005fb9 	.word	0x08005fb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa4:	e030      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005faa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d025      	beq.n	8005ffe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fb6:	e022      	b.n	8005ffe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fc0:	d11f      	bne.n	8006002 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005fc6:	e01c      	b.n	8006002 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d903      	bls.n	8005fd6 <DMA_CheckFifoParam+0xb6>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d003      	beq.n	8005fdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005fd4:	e018      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8005fda:	e015      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00e      	beq.n	8006006 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
      break;
 8005fec:	e00b      	b.n	8006006 <DMA_CheckFifoParam+0xe6>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e00a      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e008      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e006      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
      break;
 8005ffa:	bf00      	nop
 8005ffc:	e004      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
      break;
 8005ffe:	bf00      	nop
 8006000:	e002      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
      break;   
 8006002:	bf00      	nop
 8006004:	e000      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
      break;
 8006006:	bf00      	nop
    }
  } 
  
  return status; 
 8006008:	7bfb      	ldrb	r3, [r7, #15]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop

08006018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006018:	b480      	push	{r7}
 800601a:	b089      	sub	sp, #36	; 0x24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006022:	2300      	movs	r3, #0
 8006024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006026:	2300      	movs	r3, #0
 8006028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800602a:	2300      	movs	r3, #0
 800602c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800602e:	2300      	movs	r3, #0
 8006030:	61fb      	str	r3, [r7, #28]
 8006032:	e159      	b.n	80062e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006034:	2201      	movs	r2, #1
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	fa02 f303 	lsl.w	r3, r2, r3
 800603c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4013      	ands	r3, r2
 8006046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	429a      	cmp	r2, r3
 800604e:	f040 8148 	bne.w	80062e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	2b01      	cmp	r3, #1
 800605c:	d005      	beq.n	800606a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006066:	2b02      	cmp	r3, #2
 8006068:	d130      	bne.n	80060cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	2203      	movs	r2, #3
 8006076:	fa02 f303 	lsl.w	r3, r2, r3
 800607a:	43db      	mvns	r3, r3
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	4013      	ands	r3, r2
 8006080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	fa02 f303 	lsl.w	r3, r2, r3
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	4313      	orrs	r3, r2
 8006092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060a0:	2201      	movs	r2, #1
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	43db      	mvns	r3, r3
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	4013      	ands	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	091b      	lsrs	r3, r3, #4
 80060b6:	f003 0201 	and.w	r2, r3, #1
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f003 0303 	and.w	r3, r3, #3
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d017      	beq.n	8006108 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	2203      	movs	r2, #3
 80060e4:	fa02 f303 	lsl.w	r3, r2, r3
 80060e8:	43db      	mvns	r3, r3
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	4013      	ands	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4313      	orrs	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f003 0303 	and.w	r3, r3, #3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d123      	bne.n	800615c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	08da      	lsrs	r2, r3, #3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3208      	adds	r2, #8
 800611c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006120:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	220f      	movs	r2, #15
 800612c:	fa02 f303 	lsl.w	r3, r2, r3
 8006130:	43db      	mvns	r3, r3
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	4013      	ands	r3, r2
 8006136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4313      	orrs	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	08da      	lsrs	r2, r3, #3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3208      	adds	r2, #8
 8006156:	69b9      	ldr	r1, [r7, #24]
 8006158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	2203      	movs	r2, #3
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	43db      	mvns	r3, r3
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	4013      	ands	r3, r2
 8006172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f003 0203 	and.w	r2, r3, #3
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	4313      	orrs	r3, r2
 8006188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 80a2 	beq.w	80062e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800619e:	2300      	movs	r3, #0
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	4b57      	ldr	r3, [pc, #348]	; (8006300 <HAL_GPIO_Init+0x2e8>)
 80061a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a6:	4a56      	ldr	r2, [pc, #344]	; (8006300 <HAL_GPIO_Init+0x2e8>)
 80061a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061ac:	6453      	str	r3, [r2, #68]	; 0x44
 80061ae:	4b54      	ldr	r3, [pc, #336]	; (8006300 <HAL_GPIO_Init+0x2e8>)
 80061b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061ba:	4a52      	ldr	r2, [pc, #328]	; (8006304 <HAL_GPIO_Init+0x2ec>)
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	089b      	lsrs	r3, r3, #2
 80061c0:	3302      	adds	r3, #2
 80061c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	220f      	movs	r2, #15
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	43db      	mvns	r3, r3
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	4013      	ands	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a49      	ldr	r2, [pc, #292]	; (8006308 <HAL_GPIO_Init+0x2f0>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d019      	beq.n	800621a <HAL_GPIO_Init+0x202>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a48      	ldr	r2, [pc, #288]	; (800630c <HAL_GPIO_Init+0x2f4>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d013      	beq.n	8006216 <HAL_GPIO_Init+0x1fe>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a47      	ldr	r2, [pc, #284]	; (8006310 <HAL_GPIO_Init+0x2f8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d00d      	beq.n	8006212 <HAL_GPIO_Init+0x1fa>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a46      	ldr	r2, [pc, #280]	; (8006314 <HAL_GPIO_Init+0x2fc>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d007      	beq.n	800620e <HAL_GPIO_Init+0x1f6>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a45      	ldr	r2, [pc, #276]	; (8006318 <HAL_GPIO_Init+0x300>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d101      	bne.n	800620a <HAL_GPIO_Init+0x1f2>
 8006206:	2304      	movs	r3, #4
 8006208:	e008      	b.n	800621c <HAL_GPIO_Init+0x204>
 800620a:	2307      	movs	r3, #7
 800620c:	e006      	b.n	800621c <HAL_GPIO_Init+0x204>
 800620e:	2303      	movs	r3, #3
 8006210:	e004      	b.n	800621c <HAL_GPIO_Init+0x204>
 8006212:	2302      	movs	r3, #2
 8006214:	e002      	b.n	800621c <HAL_GPIO_Init+0x204>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <HAL_GPIO_Init+0x204>
 800621a:	2300      	movs	r3, #0
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	f002 0203 	and.w	r2, r2, #3
 8006222:	0092      	lsls	r2, r2, #2
 8006224:	4093      	lsls	r3, r2
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	4313      	orrs	r3, r2
 800622a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800622c:	4935      	ldr	r1, [pc, #212]	; (8006304 <HAL_GPIO_Init+0x2ec>)
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	089b      	lsrs	r3, r3, #2
 8006232:	3302      	adds	r3, #2
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800623a:	4b38      	ldr	r3, [pc, #224]	; (800631c <HAL_GPIO_Init+0x304>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	43db      	mvns	r3, r3
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	4013      	ands	r3, r2
 8006248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	4313      	orrs	r3, r2
 800625c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800625e:	4a2f      	ldr	r2, [pc, #188]	; (800631c <HAL_GPIO_Init+0x304>)
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006264:	4b2d      	ldr	r3, [pc, #180]	; (800631c <HAL_GPIO_Init+0x304>)
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	43db      	mvns	r3, r3
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	4013      	ands	r3, r2
 8006272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006288:	4a24      	ldr	r2, [pc, #144]	; (800631c <HAL_GPIO_Init+0x304>)
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800628e:	4b23      	ldr	r3, [pc, #140]	; (800631c <HAL_GPIO_Init+0x304>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	43db      	mvns	r3, r3
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	4013      	ands	r3, r2
 800629c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062b2:	4a1a      	ldr	r2, [pc, #104]	; (800631c <HAL_GPIO_Init+0x304>)
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062b8:	4b18      	ldr	r3, [pc, #96]	; (800631c <HAL_GPIO_Init+0x304>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	43db      	mvns	r3, r3
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	4013      	ands	r3, r2
 80062c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	4313      	orrs	r3, r2
 80062da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80062dc:	4a0f      	ldr	r2, [pc, #60]	; (800631c <HAL_GPIO_Init+0x304>)
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	3301      	adds	r3, #1
 80062e6:	61fb      	str	r3, [r7, #28]
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	2b0f      	cmp	r3, #15
 80062ec:	f67f aea2 	bls.w	8006034 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80062f0:	bf00      	nop
 80062f2:	bf00      	nop
 80062f4:	3724      	adds	r7, #36	; 0x24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40023800 	.word	0x40023800
 8006304:	40013800 	.word	0x40013800
 8006308:	40020000 	.word	0x40020000
 800630c:	40020400 	.word	0x40020400
 8006310:	40020800 	.word	0x40020800
 8006314:	40020c00 	.word	0x40020c00
 8006318:	40021000 	.word	0x40021000
 800631c:	40013c00 	.word	0x40013c00

08006320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	807b      	strh	r3, [r7, #2]
 800632c:	4613      	mov	r3, r2
 800632e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006330:	787b      	ldrb	r3, [r7, #1]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006336:	887a      	ldrh	r2, [r7, #2]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800633c:	e003      	b.n	8006346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800633e:	887b      	ldrh	r3, [r7, #2]
 8006340:	041a      	lsls	r2, r3, #16
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	619a      	str	r2, [r3, #24]
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
	...

08006354 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e267      	b.n	8006836 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d075      	beq.n	800645e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006372:	4b88      	ldr	r3, [pc, #544]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 030c 	and.w	r3, r3, #12
 800637a:	2b04      	cmp	r3, #4
 800637c:	d00c      	beq.n	8006398 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800637e:	4b85      	ldr	r3, [pc, #532]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006386:	2b08      	cmp	r3, #8
 8006388:	d112      	bne.n	80063b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800638a:	4b82      	ldr	r3, [pc, #520]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006396:	d10b      	bne.n	80063b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006398:	4b7e      	ldr	r3, [pc, #504]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d05b      	beq.n	800645c <HAL_RCC_OscConfig+0x108>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d157      	bne.n	800645c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e242      	b.n	8006836 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b8:	d106      	bne.n	80063c8 <HAL_RCC_OscConfig+0x74>
 80063ba:	4b76      	ldr	r3, [pc, #472]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a75      	ldr	r2, [pc, #468]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 80063c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	e01d      	b.n	8006404 <HAL_RCC_OscConfig+0xb0>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063d0:	d10c      	bne.n	80063ec <HAL_RCC_OscConfig+0x98>
 80063d2:	4b70      	ldr	r3, [pc, #448]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a6f      	ldr	r2, [pc, #444]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 80063d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	4b6d      	ldr	r3, [pc, #436]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a6c      	ldr	r2, [pc, #432]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 80063e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	e00b      	b.n	8006404 <HAL_RCC_OscConfig+0xb0>
 80063ec:	4b69      	ldr	r3, [pc, #420]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a68      	ldr	r2, [pc, #416]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 80063f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	4b66      	ldr	r3, [pc, #408]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a65      	ldr	r2, [pc, #404]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 80063fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d013      	beq.n	8006434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800640c:	f7ff f976 	bl	80056fc <HAL_GetTick>
 8006410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006414:	f7ff f972 	bl	80056fc <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b64      	cmp	r3, #100	; 0x64
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e207      	b.n	8006836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006426:	4b5b      	ldr	r3, [pc, #364]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0f0      	beq.n	8006414 <HAL_RCC_OscConfig+0xc0>
 8006432:	e014      	b.n	800645e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006434:	f7ff f962 	bl	80056fc <HAL_GetTick>
 8006438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800643c:	f7ff f95e 	bl	80056fc <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b64      	cmp	r3, #100	; 0x64
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e1f3      	b.n	8006836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800644e:	4b51      	ldr	r3, [pc, #324]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1f0      	bne.n	800643c <HAL_RCC_OscConfig+0xe8>
 800645a:	e000      	b.n	800645e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800645c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d063      	beq.n	8006532 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800646a:	4b4a      	ldr	r3, [pc, #296]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f003 030c 	and.w	r3, r3, #12
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00b      	beq.n	800648e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006476:	4b47      	ldr	r3, [pc, #284]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800647e:	2b08      	cmp	r3, #8
 8006480:	d11c      	bne.n	80064bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006482:	4b44      	ldr	r3, [pc, #272]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d116      	bne.n	80064bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800648e:	4b41      	ldr	r3, [pc, #260]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d005      	beq.n	80064a6 <HAL_RCC_OscConfig+0x152>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d001      	beq.n	80064a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e1c7      	b.n	8006836 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a6:	4b3b      	ldr	r3, [pc, #236]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	4937      	ldr	r1, [pc, #220]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ba:	e03a      	b.n	8006532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d020      	beq.n	8006506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064c4:	4b34      	ldr	r3, [pc, #208]	; (8006598 <HAL_RCC_OscConfig+0x244>)
 80064c6:	2201      	movs	r2, #1
 80064c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ca:	f7ff f917 	bl	80056fc <HAL_GetTick>
 80064ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d0:	e008      	b.n	80064e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064d2:	f7ff f913 	bl	80056fc <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e1a8      	b.n	8006836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e4:	4b2b      	ldr	r3, [pc, #172]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0f0      	beq.n	80064d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f0:	4b28      	ldr	r3, [pc, #160]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	4925      	ldr	r1, [pc, #148]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 8006500:	4313      	orrs	r3, r2
 8006502:	600b      	str	r3, [r1, #0]
 8006504:	e015      	b.n	8006532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006506:	4b24      	ldr	r3, [pc, #144]	; (8006598 <HAL_RCC_OscConfig+0x244>)
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650c:	f7ff f8f6 	bl	80056fc <HAL_GetTick>
 8006510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006512:	e008      	b.n	8006526 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006514:	f7ff f8f2 	bl	80056fc <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e187      	b.n	8006836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006526:	4b1b      	ldr	r3, [pc, #108]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1f0      	bne.n	8006514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d036      	beq.n	80065ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d016      	beq.n	8006574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006546:	4b15      	ldr	r3, [pc, #84]	; (800659c <HAL_RCC_OscConfig+0x248>)
 8006548:	2201      	movs	r2, #1
 800654a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800654c:	f7ff f8d6 	bl	80056fc <HAL_GetTick>
 8006550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006552:	e008      	b.n	8006566 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006554:	f7ff f8d2 	bl	80056fc <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b02      	cmp	r3, #2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e167      	b.n	8006836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006566:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <HAL_RCC_OscConfig+0x240>)
 8006568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0f0      	beq.n	8006554 <HAL_RCC_OscConfig+0x200>
 8006572:	e01b      	b.n	80065ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006574:	4b09      	ldr	r3, [pc, #36]	; (800659c <HAL_RCC_OscConfig+0x248>)
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800657a:	f7ff f8bf 	bl	80056fc <HAL_GetTick>
 800657e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006580:	e00e      	b.n	80065a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006582:	f7ff f8bb 	bl	80056fc <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	d907      	bls.n	80065a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e150      	b.n	8006836 <HAL_RCC_OscConfig+0x4e2>
 8006594:	40023800 	.word	0x40023800
 8006598:	42470000 	.word	0x42470000
 800659c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065a0:	4b88      	ldr	r3, [pc, #544]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 80065a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1ea      	bne.n	8006582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 8097 	beq.w	80066e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ba:	2300      	movs	r3, #0
 80065bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065be:	4b81      	ldr	r3, [pc, #516]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10f      	bne.n	80065ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ca:	2300      	movs	r3, #0
 80065cc:	60bb      	str	r3, [r7, #8]
 80065ce:	4b7d      	ldr	r3, [pc, #500]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	4a7c      	ldr	r2, [pc, #496]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 80065d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d8:	6413      	str	r3, [r2, #64]	; 0x40
 80065da:	4b7a      	ldr	r3, [pc, #488]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e2:	60bb      	str	r3, [r7, #8]
 80065e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065e6:	2301      	movs	r3, #1
 80065e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ea:	4b77      	ldr	r3, [pc, #476]	; (80067c8 <HAL_RCC_OscConfig+0x474>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d118      	bne.n	8006628 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065f6:	4b74      	ldr	r3, [pc, #464]	; (80067c8 <HAL_RCC_OscConfig+0x474>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a73      	ldr	r2, [pc, #460]	; (80067c8 <HAL_RCC_OscConfig+0x474>)
 80065fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006602:	f7ff f87b 	bl	80056fc <HAL_GetTick>
 8006606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006608:	e008      	b.n	800661c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800660a:	f7ff f877 	bl	80056fc <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d901      	bls.n	800661c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e10c      	b.n	8006836 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800661c:	4b6a      	ldr	r3, [pc, #424]	; (80067c8 <HAL_RCC_OscConfig+0x474>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006624:	2b00      	cmp	r3, #0
 8006626:	d0f0      	beq.n	800660a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d106      	bne.n	800663e <HAL_RCC_OscConfig+0x2ea>
 8006630:	4b64      	ldr	r3, [pc, #400]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 8006632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006634:	4a63      	ldr	r2, [pc, #396]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 8006636:	f043 0301 	orr.w	r3, r3, #1
 800663a:	6713      	str	r3, [r2, #112]	; 0x70
 800663c:	e01c      	b.n	8006678 <HAL_RCC_OscConfig+0x324>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b05      	cmp	r3, #5
 8006644:	d10c      	bne.n	8006660 <HAL_RCC_OscConfig+0x30c>
 8006646:	4b5f      	ldr	r3, [pc, #380]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 8006648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664a:	4a5e      	ldr	r2, [pc, #376]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 800664c:	f043 0304 	orr.w	r3, r3, #4
 8006650:	6713      	str	r3, [r2, #112]	; 0x70
 8006652:	4b5c      	ldr	r3, [pc, #368]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 8006654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006656:	4a5b      	ldr	r2, [pc, #364]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 8006658:	f043 0301 	orr.w	r3, r3, #1
 800665c:	6713      	str	r3, [r2, #112]	; 0x70
 800665e:	e00b      	b.n	8006678 <HAL_RCC_OscConfig+0x324>
 8006660:	4b58      	ldr	r3, [pc, #352]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 8006662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006664:	4a57      	ldr	r2, [pc, #348]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 8006666:	f023 0301 	bic.w	r3, r3, #1
 800666a:	6713      	str	r3, [r2, #112]	; 0x70
 800666c:	4b55      	ldr	r3, [pc, #340]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 800666e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006670:	4a54      	ldr	r2, [pc, #336]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 8006672:	f023 0304 	bic.w	r3, r3, #4
 8006676:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d015      	beq.n	80066ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006680:	f7ff f83c 	bl	80056fc <HAL_GetTick>
 8006684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006686:	e00a      	b.n	800669e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006688:	f7ff f838 	bl	80056fc <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	f241 3288 	movw	r2, #5000	; 0x1388
 8006696:	4293      	cmp	r3, r2
 8006698:	d901      	bls.n	800669e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e0cb      	b.n	8006836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800669e:	4b49      	ldr	r3, [pc, #292]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 80066a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0ee      	beq.n	8006688 <HAL_RCC_OscConfig+0x334>
 80066aa:	e014      	b.n	80066d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066ac:	f7ff f826 	bl	80056fc <HAL_GetTick>
 80066b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066b2:	e00a      	b.n	80066ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066b4:	f7ff f822 	bl	80056fc <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d901      	bls.n	80066ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e0b5      	b.n	8006836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ca:	4b3e      	ldr	r3, [pc, #248]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 80066cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1ee      	bne.n	80066b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d105      	bne.n	80066e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066dc:	4b39      	ldr	r3, [pc, #228]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 80066de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e0:	4a38      	ldr	r2, [pc, #224]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 80066e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 80a1 	beq.w	8006834 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066f2:	4b34      	ldr	r3, [pc, #208]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 030c 	and.w	r3, r3, #12
 80066fa:	2b08      	cmp	r3, #8
 80066fc:	d05c      	beq.n	80067b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d141      	bne.n	800678a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006706:	4b31      	ldr	r3, [pc, #196]	; (80067cc <HAL_RCC_OscConfig+0x478>)
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800670c:	f7fe fff6 	bl	80056fc <HAL_GetTick>
 8006710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006712:	e008      	b.n	8006726 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006714:	f7fe fff2 	bl	80056fc <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e087      	b.n	8006836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006726:	4b27      	ldr	r3, [pc, #156]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1f0      	bne.n	8006714 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	69da      	ldr	r2, [r3, #28]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	019b      	lsls	r3, r3, #6
 8006742:	431a      	orrs	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006748:	085b      	lsrs	r3, r3, #1
 800674a:	3b01      	subs	r3, #1
 800674c:	041b      	lsls	r3, r3, #16
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	061b      	lsls	r3, r3, #24
 8006756:	491b      	ldr	r1, [pc, #108]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 8006758:	4313      	orrs	r3, r2
 800675a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800675c:	4b1b      	ldr	r3, [pc, #108]	; (80067cc <HAL_RCC_OscConfig+0x478>)
 800675e:	2201      	movs	r2, #1
 8006760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006762:	f7fe ffcb 	bl	80056fc <HAL_GetTick>
 8006766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006768:	e008      	b.n	800677c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800676a:	f7fe ffc7 	bl	80056fc <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e05c      	b.n	8006836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800677c:	4b11      	ldr	r3, [pc, #68]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0f0      	beq.n	800676a <HAL_RCC_OscConfig+0x416>
 8006788:	e054      	b.n	8006834 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800678a:	4b10      	ldr	r3, [pc, #64]	; (80067cc <HAL_RCC_OscConfig+0x478>)
 800678c:	2200      	movs	r2, #0
 800678e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006790:	f7fe ffb4 	bl	80056fc <HAL_GetTick>
 8006794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006796:	e008      	b.n	80067aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006798:	f7fe ffb0 	bl	80056fc <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e045      	b.n	8006836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067aa:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <HAL_RCC_OscConfig+0x470>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1f0      	bne.n	8006798 <HAL_RCC_OscConfig+0x444>
 80067b6:	e03d      	b.n	8006834 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d107      	bne.n	80067d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e038      	b.n	8006836 <HAL_RCC_OscConfig+0x4e2>
 80067c4:	40023800 	.word	0x40023800
 80067c8:	40007000 	.word	0x40007000
 80067cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067d0:	4b1b      	ldr	r3, [pc, #108]	; (8006840 <HAL_RCC_OscConfig+0x4ec>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d028      	beq.n	8006830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d121      	bne.n	8006830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d11a      	bne.n	8006830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006800:	4013      	ands	r3, r2
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006808:	4293      	cmp	r3, r2
 800680a:	d111      	bne.n	8006830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006816:	085b      	lsrs	r3, r3, #1
 8006818:	3b01      	subs	r3, #1
 800681a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800681c:	429a      	cmp	r2, r3
 800681e:	d107      	bne.n	8006830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800682c:	429a      	cmp	r2, r3
 800682e:	d001      	beq.n	8006834 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	40023800 	.word	0x40023800

08006844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e0cc      	b.n	80069f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006858:	4b68      	ldr	r3, [pc, #416]	; (80069fc <HAL_RCC_ClockConfig+0x1b8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	429a      	cmp	r2, r3
 8006864:	d90c      	bls.n	8006880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006866:	4b65      	ldr	r3, [pc, #404]	; (80069fc <HAL_RCC_ClockConfig+0x1b8>)
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	b2d2      	uxtb	r2, r2
 800686c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800686e:	4b63      	ldr	r3, [pc, #396]	; (80069fc <HAL_RCC_ClockConfig+0x1b8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d001      	beq.n	8006880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e0b8      	b.n	80069f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b00      	cmp	r3, #0
 800688a:	d020      	beq.n	80068ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d005      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006898:	4b59      	ldr	r3, [pc, #356]	; (8006a00 <HAL_RCC_ClockConfig+0x1bc>)
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	4a58      	ldr	r2, [pc, #352]	; (8006a00 <HAL_RCC_ClockConfig+0x1bc>)
 800689e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068b0:	4b53      	ldr	r3, [pc, #332]	; (8006a00 <HAL_RCC_ClockConfig+0x1bc>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	4a52      	ldr	r2, [pc, #328]	; (8006a00 <HAL_RCC_ClockConfig+0x1bc>)
 80068b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068bc:	4b50      	ldr	r3, [pc, #320]	; (8006a00 <HAL_RCC_ClockConfig+0x1bc>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	494d      	ldr	r1, [pc, #308]	; (8006a00 <HAL_RCC_ClockConfig+0x1bc>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d044      	beq.n	8006964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d107      	bne.n	80068f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068e2:	4b47      	ldr	r3, [pc, #284]	; (8006a00 <HAL_RCC_ClockConfig+0x1bc>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d119      	bne.n	8006922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e07f      	b.n	80069f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d003      	beq.n	8006902 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d107      	bne.n	8006912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006902:	4b3f      	ldr	r3, [pc, #252]	; (8006a00 <HAL_RCC_ClockConfig+0x1bc>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e06f      	b.n	80069f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006912:	4b3b      	ldr	r3, [pc, #236]	; (8006a00 <HAL_RCC_ClockConfig+0x1bc>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e067      	b.n	80069f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006922:	4b37      	ldr	r3, [pc, #220]	; (8006a00 <HAL_RCC_ClockConfig+0x1bc>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f023 0203 	bic.w	r2, r3, #3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	4934      	ldr	r1, [pc, #208]	; (8006a00 <HAL_RCC_ClockConfig+0x1bc>)
 8006930:	4313      	orrs	r3, r2
 8006932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006934:	f7fe fee2 	bl	80056fc <HAL_GetTick>
 8006938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800693a:	e00a      	b.n	8006952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800693c:	f7fe fede 	bl	80056fc <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	f241 3288 	movw	r2, #5000	; 0x1388
 800694a:	4293      	cmp	r3, r2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e04f      	b.n	80069f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006952:	4b2b      	ldr	r3, [pc, #172]	; (8006a00 <HAL_RCC_ClockConfig+0x1bc>)
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 020c 	and.w	r2, r3, #12
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	429a      	cmp	r2, r3
 8006962:	d1eb      	bne.n	800693c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006964:	4b25      	ldr	r3, [pc, #148]	; (80069fc <HAL_RCC_ClockConfig+0x1b8>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	429a      	cmp	r2, r3
 8006970:	d20c      	bcs.n	800698c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006972:	4b22      	ldr	r3, [pc, #136]	; (80069fc <HAL_RCC_ClockConfig+0x1b8>)
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800697a:	4b20      	ldr	r3, [pc, #128]	; (80069fc <HAL_RCC_ClockConfig+0x1b8>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0307 	and.w	r3, r3, #7
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d001      	beq.n	800698c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e032      	b.n	80069f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006998:	4b19      	ldr	r3, [pc, #100]	; (8006a00 <HAL_RCC_ClockConfig+0x1bc>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	4916      	ldr	r1, [pc, #88]	; (8006a00 <HAL_RCC_ClockConfig+0x1bc>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0308 	and.w	r3, r3, #8
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d009      	beq.n	80069ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069b6:	4b12      	ldr	r3, [pc, #72]	; (8006a00 <HAL_RCC_ClockConfig+0x1bc>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	490e      	ldr	r1, [pc, #56]	; (8006a00 <HAL_RCC_ClockConfig+0x1bc>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069ca:	f000 f821 	bl	8006a10 <HAL_RCC_GetSysClockFreq>
 80069ce:	4602      	mov	r2, r0
 80069d0:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <HAL_RCC_ClockConfig+0x1bc>)
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	091b      	lsrs	r3, r3, #4
 80069d6:	f003 030f 	and.w	r3, r3, #15
 80069da:	490a      	ldr	r1, [pc, #40]	; (8006a04 <HAL_RCC_ClockConfig+0x1c0>)
 80069dc:	5ccb      	ldrb	r3, [r1, r3]
 80069de:	fa22 f303 	lsr.w	r3, r2, r3
 80069e2:	4a09      	ldr	r2, [pc, #36]	; (8006a08 <HAL_RCC_ClockConfig+0x1c4>)
 80069e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069e6:	4b09      	ldr	r3, [pc, #36]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe fe42 	bl	8005674 <HAL_InitTick>

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	40023c00 	.word	0x40023c00
 8006a00:	40023800 	.word	0x40023800
 8006a04:	08009120 	.word	0x08009120
 8006a08:	20000004 	.word	0x20000004
 8006a0c:	20000008 	.word	0x20000008

08006a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a14:	b094      	sub	sp, #80	; 0x50
 8006a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a20:	2300      	movs	r3, #0
 8006a22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a28:	4b79      	ldr	r3, [pc, #484]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f003 030c 	and.w	r3, r3, #12
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d00d      	beq.n	8006a50 <HAL_RCC_GetSysClockFreq+0x40>
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	f200 80e1 	bhi.w	8006bfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <HAL_RCC_GetSysClockFreq+0x34>
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d003      	beq.n	8006a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8006a42:	e0db      	b.n	8006bfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a44:	4b73      	ldr	r3, [pc, #460]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006a48:	e0db      	b.n	8006c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a4a:	4b73      	ldr	r3, [pc, #460]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a4e:	e0d8      	b.n	8006c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a50:	4b6f      	ldr	r3, [pc, #444]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a5a:	4b6d      	ldr	r3, [pc, #436]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d063      	beq.n	8006b2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a66:	4b6a      	ldr	r3, [pc, #424]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	099b      	lsrs	r3, r3, #6
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a78:	633b      	str	r3, [r7, #48]	; 0x30
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006a82:	4622      	mov	r2, r4
 8006a84:	462b      	mov	r3, r5
 8006a86:	f04f 0000 	mov.w	r0, #0
 8006a8a:	f04f 0100 	mov.w	r1, #0
 8006a8e:	0159      	lsls	r1, r3, #5
 8006a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a94:	0150      	lsls	r0, r2, #5
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	1a51      	subs	r1, r2, r1
 8006a9e:	6139      	str	r1, [r7, #16]
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	f04f 0300 	mov.w	r3, #0
 8006ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ab4:	4659      	mov	r1, fp
 8006ab6:	018b      	lsls	r3, r1, #6
 8006ab8:	4651      	mov	r1, sl
 8006aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006abe:	4651      	mov	r1, sl
 8006ac0:	018a      	lsls	r2, r1, #6
 8006ac2:	4651      	mov	r1, sl
 8006ac4:	ebb2 0801 	subs.w	r8, r2, r1
 8006ac8:	4659      	mov	r1, fp
 8006aca:	eb63 0901 	sbc.w	r9, r3, r1
 8006ace:	f04f 0200 	mov.w	r2, #0
 8006ad2:	f04f 0300 	mov.w	r3, #0
 8006ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ae2:	4690      	mov	r8, r2
 8006ae4:	4699      	mov	r9, r3
 8006ae6:	4623      	mov	r3, r4
 8006ae8:	eb18 0303 	adds.w	r3, r8, r3
 8006aec:	60bb      	str	r3, [r7, #8]
 8006aee:	462b      	mov	r3, r5
 8006af0:	eb49 0303 	adc.w	r3, r9, r3
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	f04f 0300 	mov.w	r3, #0
 8006afe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b02:	4629      	mov	r1, r5
 8006b04:	024b      	lsls	r3, r1, #9
 8006b06:	4621      	mov	r1, r4
 8006b08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	024a      	lsls	r2, r1, #9
 8006b10:	4610      	mov	r0, r2
 8006b12:	4619      	mov	r1, r3
 8006b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b16:	2200      	movs	r2, #0
 8006b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b20:	f7fa f848 	bl	8000bb4 <__aeabi_uldivmod>
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	4613      	mov	r3, r2
 8006b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b2c:	e058      	b.n	8006be0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b2e:	4b38      	ldr	r3, [pc, #224]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	099b      	lsrs	r3, r3, #6
 8006b34:	2200      	movs	r2, #0
 8006b36:	4618      	mov	r0, r3
 8006b38:	4611      	mov	r1, r2
 8006b3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b3e:	623b      	str	r3, [r7, #32]
 8006b40:	2300      	movs	r3, #0
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24
 8006b44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b48:	4642      	mov	r2, r8
 8006b4a:	464b      	mov	r3, r9
 8006b4c:	f04f 0000 	mov.w	r0, #0
 8006b50:	f04f 0100 	mov.w	r1, #0
 8006b54:	0159      	lsls	r1, r3, #5
 8006b56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b5a:	0150      	lsls	r0, r2, #5
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4641      	mov	r1, r8
 8006b62:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b66:	4649      	mov	r1, r9
 8006b68:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b6c:	f04f 0200 	mov.w	r2, #0
 8006b70:	f04f 0300 	mov.w	r3, #0
 8006b74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b80:	ebb2 040a 	subs.w	r4, r2, sl
 8006b84:	eb63 050b 	sbc.w	r5, r3, fp
 8006b88:	f04f 0200 	mov.w	r2, #0
 8006b8c:	f04f 0300 	mov.w	r3, #0
 8006b90:	00eb      	lsls	r3, r5, #3
 8006b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b96:	00e2      	lsls	r2, r4, #3
 8006b98:	4614      	mov	r4, r2
 8006b9a:	461d      	mov	r5, r3
 8006b9c:	4643      	mov	r3, r8
 8006b9e:	18e3      	adds	r3, r4, r3
 8006ba0:	603b      	str	r3, [r7, #0]
 8006ba2:	464b      	mov	r3, r9
 8006ba4:	eb45 0303 	adc.w	r3, r5, r3
 8006ba8:	607b      	str	r3, [r7, #4]
 8006baa:	f04f 0200 	mov.w	r2, #0
 8006bae:	f04f 0300 	mov.w	r3, #0
 8006bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	028b      	lsls	r3, r1, #10
 8006bba:	4621      	mov	r1, r4
 8006bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	028a      	lsls	r2, r1, #10
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bca:	2200      	movs	r2, #0
 8006bcc:	61bb      	str	r3, [r7, #24]
 8006bce:	61fa      	str	r2, [r7, #28]
 8006bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bd4:	f7f9 ffee 	bl	8000bb4 <__aeabi_uldivmod>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4613      	mov	r3, r2
 8006bde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006be0:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	0c1b      	lsrs	r3, r3, #16
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	3301      	adds	r3, #1
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006bf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006bfa:	e002      	b.n	8006c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bfc:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8006bfe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3750      	adds	r7, #80	; 0x50
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c0e:	bf00      	nop
 8006c10:	40023800 	.word	0x40023800
 8006c14:	00f42400 	.word	0x00f42400
 8006c18:	007a1200 	.word	0x007a1200

08006c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e041      	b.n	8006cb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fe fbbc 	bl	80053c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	f000 fe38 	bl	80078d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d001      	beq.n	8006cd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e044      	b.n	8006d5e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0201 	orr.w	r2, r2, #1
 8006cea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a1e      	ldr	r2, [pc, #120]	; (8006d6c <HAL_TIM_Base_Start_IT+0xb0>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d018      	beq.n	8006d28 <HAL_TIM_Base_Start_IT+0x6c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cfe:	d013      	beq.n	8006d28 <HAL_TIM_Base_Start_IT+0x6c>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a1a      	ldr	r2, [pc, #104]	; (8006d70 <HAL_TIM_Base_Start_IT+0xb4>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00e      	beq.n	8006d28 <HAL_TIM_Base_Start_IT+0x6c>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a19      	ldr	r2, [pc, #100]	; (8006d74 <HAL_TIM_Base_Start_IT+0xb8>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d009      	beq.n	8006d28 <HAL_TIM_Base_Start_IT+0x6c>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a17      	ldr	r2, [pc, #92]	; (8006d78 <HAL_TIM_Base_Start_IT+0xbc>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d004      	beq.n	8006d28 <HAL_TIM_Base_Start_IT+0x6c>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a16      	ldr	r2, [pc, #88]	; (8006d7c <HAL_TIM_Base_Start_IT+0xc0>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d111      	bne.n	8006d4c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2b06      	cmp	r3, #6
 8006d38:	d010      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f042 0201 	orr.w	r2, r2, #1
 8006d48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d4a:	e007      	b.n	8006d5c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0201 	orr.w	r2, r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	40010000 	.word	0x40010000
 8006d70:	40000400 	.word	0x40000400
 8006d74:	40000800 	.word	0x40000800
 8006d78:	40000c00 	.word	0x40000c00
 8006d7c:	40014000 	.word	0x40014000

08006d80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e041      	b.n	8006e16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d106      	bne.n	8006dac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f839 	bl	8006e1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3304      	adds	r3, #4
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	f000 fd86 	bl	80078d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
	...

08006e34 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d109      	bne.n	8006e60 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	bf0c      	ite	eq
 8006e58:	2301      	moveq	r3, #1
 8006e5a:	2300      	movne	r3, #0
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	e022      	b.n	8006ea6 <HAL_TIM_PWM_Start_DMA+0x72>
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d109      	bne.n	8006e7a <HAL_TIM_PWM_Start_DMA+0x46>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	bf0c      	ite	eq
 8006e72:	2301      	moveq	r3, #1
 8006e74:	2300      	movne	r3, #0
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	e015      	b.n	8006ea6 <HAL_TIM_PWM_Start_DMA+0x72>
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d109      	bne.n	8006e94 <HAL_TIM_PWM_Start_DMA+0x60>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	bf0c      	ite	eq
 8006e8c:	2301      	moveq	r3, #1
 8006e8e:	2300      	movne	r3, #0
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	e008      	b.n	8006ea6 <HAL_TIM_PWM_Start_DMA+0x72>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	bf0c      	ite	eq
 8006ea0:	2301      	moveq	r3, #1
 8006ea2:	2300      	movne	r3, #0
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006eaa:	2302      	movs	r3, #2
 8006eac:	e15d      	b.n	800716a <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d109      	bne.n	8006ec8 <HAL_TIM_PWM_Start_DMA+0x94>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	bf0c      	ite	eq
 8006ec0:	2301      	moveq	r3, #1
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	e022      	b.n	8006f0e <HAL_TIM_PWM_Start_DMA+0xda>
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d109      	bne.n	8006ee2 <HAL_TIM_PWM_Start_DMA+0xae>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	bf0c      	ite	eq
 8006eda:	2301      	moveq	r3, #1
 8006edc:	2300      	movne	r3, #0
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	e015      	b.n	8006f0e <HAL_TIM_PWM_Start_DMA+0xda>
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d109      	bne.n	8006efc <HAL_TIM_PWM_Start_DMA+0xc8>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	bf0c      	ite	eq
 8006ef4:	2301      	moveq	r3, #1
 8006ef6:	2300      	movne	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	e008      	b.n	8006f0e <HAL_TIM_PWM_Start_DMA+0xda>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	bf0c      	ite	eq
 8006f08:	2301      	moveq	r3, #1
 8006f0a:	2300      	movne	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d024      	beq.n	8006f5c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d104      	bne.n	8006f22 <HAL_TIM_PWM_Start_DMA+0xee>
 8006f18:	887b      	ldrh	r3, [r7, #2]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e123      	b.n	800716a <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d104      	bne.n	8006f32 <HAL_TIM_PWM_Start_DMA+0xfe>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f30:	e016      	b.n	8006f60 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d104      	bne.n	8006f42 <HAL_TIM_PWM_Start_DMA+0x10e>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f40:	e00e      	b.n	8006f60 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d104      	bne.n	8006f52 <HAL_TIM_PWM_Start_DMA+0x11e>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f50:	e006      	b.n	8006f60 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2202      	movs	r2, #2
 8006f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f5a:	e001      	b.n	8006f60 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e104      	b.n	800716a <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2b0c      	cmp	r3, #12
 8006f64:	f200 80ae 	bhi.w	80070c4 <HAL_TIM_PWM_Start_DMA+0x290>
 8006f68:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8006f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6e:	bf00      	nop
 8006f70:	08006fa5 	.word	0x08006fa5
 8006f74:	080070c5 	.word	0x080070c5
 8006f78:	080070c5 	.word	0x080070c5
 8006f7c:	080070c5 	.word	0x080070c5
 8006f80:	08006fed 	.word	0x08006fed
 8006f84:	080070c5 	.word	0x080070c5
 8006f88:	080070c5 	.word	0x080070c5
 8006f8c:	080070c5 	.word	0x080070c5
 8006f90:	08007035 	.word	0x08007035
 8006f94:	080070c5 	.word	0x080070c5
 8006f98:	080070c5 	.word	0x080070c5
 8006f9c:	080070c5 	.word	0x080070c5
 8006fa0:	0800707d 	.word	0x0800707d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa8:	4a72      	ldr	r2, [pc, #456]	; (8007174 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006faa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	4a71      	ldr	r2, [pc, #452]	; (8007178 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006fb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	4a70      	ldr	r2, [pc, #448]	; (800717c <HAL_TIM_PWM_Start_DMA+0x348>)
 8006fba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3334      	adds	r3, #52	; 0x34
 8006fc8:	461a      	mov	r2, r3
 8006fca:	887b      	ldrh	r3, [r7, #2]
 8006fcc:	f7fe fd62 	bl	8005a94 <HAL_DMA_Start_IT>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e0c7      	b.n	800716a <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fe8:	60da      	str	r2, [r3, #12]
      break;
 8006fea:	e06e      	b.n	80070ca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff0:	4a60      	ldr	r2, [pc, #384]	; (8007174 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006ff2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	4a5f      	ldr	r2, [pc, #380]	; (8007178 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006ffa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007000:	4a5e      	ldr	r2, [pc, #376]	; (800717c <HAL_TIM_PWM_Start_DMA+0x348>)
 8007002:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007008:	6879      	ldr	r1, [r7, #4]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3338      	adds	r3, #56	; 0x38
 8007010:	461a      	mov	r2, r3
 8007012:	887b      	ldrh	r3, [r7, #2]
 8007014:	f7fe fd3e 	bl	8005a94 <HAL_DMA_Start_IT>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e0a3      	b.n	800716a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007030:	60da      	str	r2, [r3, #12]
      break;
 8007032:	e04a      	b.n	80070ca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	4a4e      	ldr	r2, [pc, #312]	; (8007174 <HAL_TIM_PWM_Start_DMA+0x340>)
 800703a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	4a4d      	ldr	r2, [pc, #308]	; (8007178 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007042:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	4a4c      	ldr	r2, [pc, #304]	; (800717c <HAL_TIM_PWM_Start_DMA+0x348>)
 800704a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	333c      	adds	r3, #60	; 0x3c
 8007058:	461a      	mov	r2, r3
 800705a:	887b      	ldrh	r3, [r7, #2]
 800705c:	f7fe fd1a 	bl	8005a94 <HAL_DMA_Start_IT>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e07f      	b.n	800716a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007078:	60da      	str	r2, [r3, #12]
      break;
 800707a:	e026      	b.n	80070ca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	4a3c      	ldr	r2, [pc, #240]	; (8007174 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007082:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007088:	4a3b      	ldr	r2, [pc, #236]	; (8007178 <HAL_TIM_PWM_Start_DMA+0x344>)
 800708a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007090:	4a3a      	ldr	r2, [pc, #232]	; (800717c <HAL_TIM_PWM_Start_DMA+0x348>)
 8007092:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3340      	adds	r3, #64	; 0x40
 80070a0:	461a      	mov	r2, r3
 80070a2:	887b      	ldrh	r3, [r7, #2]
 80070a4:	f7fe fcf6 	bl	8005a94 <HAL_DMA_Start_IT>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e05b      	b.n	800716a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070c0:	60da      	str	r2, [r3, #12]
      break;
 80070c2:	e002      	b.n	80070ca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	75fb      	strb	r3, [r7, #23]
      break;
 80070c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d14b      	bne.n	8007168 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2201      	movs	r2, #1
 80070d6:	68b9      	ldr	r1, [r7, #8]
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 fe9f 	bl	8007e1c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a27      	ldr	r2, [pc, #156]	; (8007180 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d107      	bne.n	80070f8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a20      	ldr	r2, [pc, #128]	; (8007180 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d018      	beq.n	8007134 <HAL_TIM_PWM_Start_DMA+0x300>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710a:	d013      	beq.n	8007134 <HAL_TIM_PWM_Start_DMA+0x300>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a1c      	ldr	r2, [pc, #112]	; (8007184 <HAL_TIM_PWM_Start_DMA+0x350>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00e      	beq.n	8007134 <HAL_TIM_PWM_Start_DMA+0x300>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a1b      	ldr	r2, [pc, #108]	; (8007188 <HAL_TIM_PWM_Start_DMA+0x354>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d009      	beq.n	8007134 <HAL_TIM_PWM_Start_DMA+0x300>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a19      	ldr	r2, [pc, #100]	; (800718c <HAL_TIM_PWM_Start_DMA+0x358>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d004      	beq.n	8007134 <HAL_TIM_PWM_Start_DMA+0x300>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a18      	ldr	r2, [pc, #96]	; (8007190 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d111      	bne.n	8007158 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f003 0307 	and.w	r3, r3, #7
 800713e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	2b06      	cmp	r3, #6
 8007144:	d010      	beq.n	8007168 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f042 0201 	orr.w	r2, r2, #1
 8007154:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007156:	e007      	b.n	8007168 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0201 	orr.w	r2, r2, #1
 8007166:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007168:	7dfb      	ldrb	r3, [r7, #23]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	080077c1 	.word	0x080077c1
 8007178:	08007869 	.word	0x08007869
 800717c:	0800772f 	.word	0x0800772f
 8007180:	40010000 	.word	0x40010000
 8007184:	40000400 	.word	0x40000400
 8007188:	40000800 	.word	0x40000800
 800718c:	40000c00 	.word	0x40000c00
 8007190:	40014000 	.word	0x40014000

08007194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d122      	bne.n	80071f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d11b      	bne.n	80071f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f06f 0202 	mvn.w	r2, #2
 80071c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa77 	bl	80076ca <HAL_TIM_IC_CaptureCallback>
 80071dc:	e005      	b.n	80071ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa69 	bl	80076b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fa7a 	bl	80076de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	2b04      	cmp	r3, #4
 80071fc:	d122      	bne.n	8007244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b04      	cmp	r3, #4
 800720a:	d11b      	bne.n	8007244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f06f 0204 	mvn.w	r2, #4
 8007214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2202      	movs	r2, #2
 800721a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fa4d 	bl	80076ca <HAL_TIM_IC_CaptureCallback>
 8007230:	e005      	b.n	800723e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fa3f 	bl	80076b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fa50 	bl	80076de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b08      	cmp	r3, #8
 8007250:	d122      	bne.n	8007298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b08      	cmp	r3, #8
 800725e:	d11b      	bne.n	8007298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f06f 0208 	mvn.w	r2, #8
 8007268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2204      	movs	r2, #4
 800726e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fa23 	bl	80076ca <HAL_TIM_IC_CaptureCallback>
 8007284:	e005      	b.n	8007292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa15 	bl	80076b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fa26 	bl	80076de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	f003 0310 	and.w	r3, r3, #16
 80072a2:	2b10      	cmp	r3, #16
 80072a4:	d122      	bne.n	80072ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f003 0310 	and.w	r3, r3, #16
 80072b0:	2b10      	cmp	r3, #16
 80072b2:	d11b      	bne.n	80072ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f06f 0210 	mvn.w	r2, #16
 80072bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2208      	movs	r2, #8
 80072c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f9f9 	bl	80076ca <HAL_TIM_IC_CaptureCallback>
 80072d8:	e005      	b.n	80072e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f9eb 	bl	80076b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f9fc 	bl	80076de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d10e      	bne.n	8007318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b01      	cmp	r3, #1
 8007306:	d107      	bne.n	8007318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f06f 0201 	mvn.w	r2, #1
 8007310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7fd fd56 	bl	8004dc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007322:	2b80      	cmp	r3, #128	; 0x80
 8007324:	d10e      	bne.n	8007344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007330:	2b80      	cmp	r3, #128	; 0x80
 8007332:	d107      	bne.n	8007344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800733c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fe0a 	bl	8007f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734e:	2b40      	cmp	r3, #64	; 0x40
 8007350:	d10e      	bne.n	8007370 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735c:	2b40      	cmp	r3, #64	; 0x40
 800735e:	d107      	bne.n	8007370 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f9cb 	bl	8007706 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	f003 0320 	and.w	r3, r3, #32
 800737a:	2b20      	cmp	r3, #32
 800737c:	d10e      	bne.n	800739c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b20      	cmp	r3, #32
 800738a:	d107      	bne.n	800739c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f06f 0220 	mvn.w	r2, #32
 8007394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fdd4 	bl	8007f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800739c:	bf00      	nop
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d101      	bne.n	80073c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073be:	2302      	movs	r3, #2
 80073c0:	e0ae      	b.n	8007520 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b0c      	cmp	r3, #12
 80073ce:	f200 809f 	bhi.w	8007510 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	0800740d 	.word	0x0800740d
 80073dc:	08007511 	.word	0x08007511
 80073e0:	08007511 	.word	0x08007511
 80073e4:	08007511 	.word	0x08007511
 80073e8:	0800744d 	.word	0x0800744d
 80073ec:	08007511 	.word	0x08007511
 80073f0:	08007511 	.word	0x08007511
 80073f4:	08007511 	.word	0x08007511
 80073f8:	0800748f 	.word	0x0800748f
 80073fc:	08007511 	.word	0x08007511
 8007400:	08007511 	.word	0x08007511
 8007404:	08007511 	.word	0x08007511
 8007408:	080074cf 	.word	0x080074cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68b9      	ldr	r1, [r7, #8]
 8007412:	4618      	mov	r0, r3
 8007414:	f000 fadc 	bl	80079d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699a      	ldr	r2, [r3, #24]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0208 	orr.w	r2, r2, #8
 8007426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	699a      	ldr	r2, [r3, #24]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0204 	bic.w	r2, r2, #4
 8007436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6999      	ldr	r1, [r3, #24]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	691a      	ldr	r2, [r3, #16]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	619a      	str	r2, [r3, #24]
      break;
 800744a:	e064      	b.n	8007516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68b9      	ldr	r1, [r7, #8]
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fb22 	bl	8007a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6999      	ldr	r1, [r3, #24]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	021a      	lsls	r2, r3, #8
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	430a      	orrs	r2, r1
 800748a:	619a      	str	r2, [r3, #24]
      break;
 800748c:	e043      	b.n	8007516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fb6d 	bl	8007b74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69da      	ldr	r2, [r3, #28]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f042 0208 	orr.w	r2, r2, #8
 80074a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69da      	ldr	r2, [r3, #28]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0204 	bic.w	r2, r2, #4
 80074b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	69d9      	ldr	r1, [r3, #28]
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	61da      	str	r2, [r3, #28]
      break;
 80074cc:	e023      	b.n	8007516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fbb7 	bl	8007c48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69da      	ldr	r2, [r3, #28]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	69d9      	ldr	r1, [r3, #28]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	021a      	lsls	r2, r3, #8
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	61da      	str	r2, [r3, #28]
      break;
 800750e:	e002      	b.n	8007516 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	75fb      	strb	r3, [r7, #23]
      break;
 8007514:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800751e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <HAL_TIM_ConfigClockSource+0x1c>
 8007540:	2302      	movs	r3, #2
 8007542:	e0b4      	b.n	80076ae <HAL_TIM_ConfigClockSource+0x186>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800756a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800757c:	d03e      	beq.n	80075fc <HAL_TIM_ConfigClockSource+0xd4>
 800757e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007582:	f200 8087 	bhi.w	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 8007586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800758a:	f000 8086 	beq.w	800769a <HAL_TIM_ConfigClockSource+0x172>
 800758e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007592:	d87f      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 8007594:	2b70      	cmp	r3, #112	; 0x70
 8007596:	d01a      	beq.n	80075ce <HAL_TIM_ConfigClockSource+0xa6>
 8007598:	2b70      	cmp	r3, #112	; 0x70
 800759a:	d87b      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 800759c:	2b60      	cmp	r3, #96	; 0x60
 800759e:	d050      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x11a>
 80075a0:	2b60      	cmp	r3, #96	; 0x60
 80075a2:	d877      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075a4:	2b50      	cmp	r3, #80	; 0x50
 80075a6:	d03c      	beq.n	8007622 <HAL_TIM_ConfigClockSource+0xfa>
 80075a8:	2b50      	cmp	r3, #80	; 0x50
 80075aa:	d873      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	d058      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0x13a>
 80075b0:	2b40      	cmp	r3, #64	; 0x40
 80075b2:	d86f      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075b4:	2b30      	cmp	r3, #48	; 0x30
 80075b6:	d064      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075b8:	2b30      	cmp	r3, #48	; 0x30
 80075ba:	d86b      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d060      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075c0:	2b20      	cmp	r3, #32
 80075c2:	d867      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d05c      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075c8:	2b10      	cmp	r3, #16
 80075ca:	d05a      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075cc:	e062      	b.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	6899      	ldr	r1, [r3, #8]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	f000 fbfd 	bl	8007ddc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	609a      	str	r2, [r3, #8]
      break;
 80075fa:	e04f      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6818      	ldr	r0, [r3, #0]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	6899      	ldr	r1, [r3, #8]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f000 fbe6 	bl	8007ddc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800761e:	609a      	str	r2, [r3, #8]
      break;
 8007620:	e03c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6818      	ldr	r0, [r3, #0]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	6859      	ldr	r1, [r3, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	461a      	mov	r2, r3
 8007630:	f000 fb5a 	bl	8007ce8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2150      	movs	r1, #80	; 0x50
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fbb3 	bl	8007da6 <TIM_ITRx_SetConfig>
      break;
 8007640:	e02c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	6859      	ldr	r1, [r3, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	461a      	mov	r2, r3
 8007650:	f000 fb79 	bl	8007d46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2160      	movs	r1, #96	; 0x60
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fba3 	bl	8007da6 <TIM_ITRx_SetConfig>
      break;
 8007660:	e01c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6818      	ldr	r0, [r3, #0]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	6859      	ldr	r1, [r3, #4]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	461a      	mov	r2, r3
 8007670:	f000 fb3a 	bl	8007ce8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2140      	movs	r1, #64	; 0x40
 800767a:	4618      	mov	r0, r3
 800767c:	f000 fb93 	bl	8007da6 <TIM_ITRx_SetConfig>
      break;
 8007680:	e00c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4619      	mov	r1, r3
 800768c:	4610      	mov	r0, r2
 800768e:	f000 fb8a 	bl	8007da6 <TIM_ITRx_SetConfig>
      break;
 8007692:	e003      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
      break;
 8007698:	e000      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800769a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076be:	bf00      	nop
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007722:	bf00      	nop
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	429a      	cmp	r2, r3
 8007744:	d107      	bne.n	8007756 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2201      	movs	r2, #1
 800774a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007754:	e02a      	b.n	80077ac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	429a      	cmp	r2, r3
 800775e:	d107      	bne.n	8007770 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2202      	movs	r2, #2
 8007764:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800776e:	e01d      	b.n	80077ac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	429a      	cmp	r2, r3
 8007778:	d107      	bne.n	800778a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2204      	movs	r2, #4
 800777e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007788:	e010      	b.n	80077ac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	429a      	cmp	r2, r3
 8007792:	d107      	bne.n	80077a4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2208      	movs	r2, #8
 8007798:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077a2:	e003      	b.n	80077ac <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f7ff ffb4 	bl	800771a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	771a      	strb	r2, [r3, #28]
}
 80077b8:	bf00      	nop
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d10b      	bne.n	80077f0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2201      	movs	r2, #1
 80077dc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d136      	bne.n	8007854 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077ee:	e031      	b.n	8007854 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d10b      	bne.n	8007812 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2202      	movs	r2, #2
 80077fe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	69db      	ldr	r3, [r3, #28]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d125      	bne.n	8007854 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007810:	e020      	b.n	8007854 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	429a      	cmp	r2, r3
 800781a:	d10b      	bne.n	8007834 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2204      	movs	r2, #4
 8007820:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d114      	bne.n	8007854 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007832:	e00f      	b.n	8007854 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	429a      	cmp	r2, r3
 800783c:	d10a      	bne.n	8007854 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2208      	movs	r2, #8
 8007842:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d103      	bne.n	8007854 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f7ff ff42 	bl	80076de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	771a      	strb	r2, [r3, #28]
}
 8007860:	bf00      	nop
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007874:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	429a      	cmp	r2, r3
 800787e:	d103      	bne.n	8007888 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2201      	movs	r2, #1
 8007884:	771a      	strb	r2, [r3, #28]
 8007886:	e019      	b.n	80078bc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	429a      	cmp	r2, r3
 8007890:	d103      	bne.n	800789a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2202      	movs	r2, #2
 8007896:	771a      	strb	r2, [r3, #28]
 8007898:	e010      	b.n	80078bc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d103      	bne.n	80078ac <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2204      	movs	r2, #4
 80078a8:	771a      	strb	r2, [r3, #28]
 80078aa:	e007      	b.n	80078bc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d102      	bne.n	80078bc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2208      	movs	r2, #8
 80078ba:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f7ff ff18 	bl	80076f2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	771a      	strb	r2, [r3, #28]
}
 80078c8:	bf00      	nop
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a34      	ldr	r2, [pc, #208]	; (80079b4 <TIM_Base_SetConfig+0xe4>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d00f      	beq.n	8007908 <TIM_Base_SetConfig+0x38>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ee:	d00b      	beq.n	8007908 <TIM_Base_SetConfig+0x38>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a31      	ldr	r2, [pc, #196]	; (80079b8 <TIM_Base_SetConfig+0xe8>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d007      	beq.n	8007908 <TIM_Base_SetConfig+0x38>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a30      	ldr	r2, [pc, #192]	; (80079bc <TIM_Base_SetConfig+0xec>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d003      	beq.n	8007908 <TIM_Base_SetConfig+0x38>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a2f      	ldr	r2, [pc, #188]	; (80079c0 <TIM_Base_SetConfig+0xf0>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d108      	bne.n	800791a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a25      	ldr	r2, [pc, #148]	; (80079b4 <TIM_Base_SetConfig+0xe4>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d01b      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007928:	d017      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a22      	ldr	r2, [pc, #136]	; (80079b8 <TIM_Base_SetConfig+0xe8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d013      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a21      	ldr	r2, [pc, #132]	; (80079bc <TIM_Base_SetConfig+0xec>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00f      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a20      	ldr	r2, [pc, #128]	; (80079c0 <TIM_Base_SetConfig+0xf0>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d00b      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a1f      	ldr	r2, [pc, #124]	; (80079c4 <TIM_Base_SetConfig+0xf4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d007      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a1e      	ldr	r2, [pc, #120]	; (80079c8 <TIM_Base_SetConfig+0xf8>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d003      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a1d      	ldr	r2, [pc, #116]	; (80079cc <TIM_Base_SetConfig+0xfc>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d108      	bne.n	800796c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	4313      	orrs	r3, r2
 800796a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	4313      	orrs	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a08      	ldr	r2, [pc, #32]	; (80079b4 <TIM_Base_SetConfig+0xe4>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d103      	bne.n	80079a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	691a      	ldr	r2, [r3, #16]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	615a      	str	r2, [r3, #20]
}
 80079a6:	bf00      	nop
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	40010000 	.word	0x40010000
 80079b8:	40000400 	.word	0x40000400
 80079bc:	40000800 	.word	0x40000800
 80079c0:	40000c00 	.word	0x40000c00
 80079c4:	40014000 	.word	0x40014000
 80079c8:	40014400 	.word	0x40014400
 80079cc:	40014800 	.word	0x40014800

080079d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b087      	sub	sp, #28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	f023 0201 	bic.w	r2, r3, #1
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0303 	bic.w	r3, r3, #3
 8007a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f023 0302 	bic.w	r3, r3, #2
 8007a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a1c      	ldr	r2, [pc, #112]	; (8007a98 <TIM_OC1_SetConfig+0xc8>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d10c      	bne.n	8007a46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f023 0308 	bic.w	r3, r3, #8
 8007a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f023 0304 	bic.w	r3, r3, #4
 8007a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a13      	ldr	r2, [pc, #76]	; (8007a98 <TIM_OC1_SetConfig+0xc8>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d111      	bne.n	8007a72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	621a      	str	r2, [r3, #32]
}
 8007a8c:	bf00      	nop
 8007a8e:	371c      	adds	r7, #28
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	40010000 	.word	0x40010000

08007a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	f023 0210 	bic.w	r2, r3, #16
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	021b      	lsls	r3, r3, #8
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f023 0320 	bic.w	r3, r3, #32
 8007ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	011b      	lsls	r3, r3, #4
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a1e      	ldr	r2, [pc, #120]	; (8007b70 <TIM_OC2_SetConfig+0xd4>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d10d      	bne.n	8007b18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a15      	ldr	r2, [pc, #84]	; (8007b70 <TIM_OC2_SetConfig+0xd4>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d113      	bne.n	8007b48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	621a      	str	r2, [r3, #32]
}
 8007b62:	bf00      	nop
 8007b64:	371c      	adds	r7, #28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	40010000 	.word	0x40010000

08007b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0303 	bic.w	r3, r3, #3
 8007baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	021b      	lsls	r3, r3, #8
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a1d      	ldr	r2, [pc, #116]	; (8007c44 <TIM_OC3_SetConfig+0xd0>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d10d      	bne.n	8007bee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	021b      	lsls	r3, r3, #8
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a14      	ldr	r2, [pc, #80]	; (8007c44 <TIM_OC3_SetConfig+0xd0>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d113      	bne.n	8007c1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	011b      	lsls	r3, r3, #4
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	011b      	lsls	r3, r3, #4
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	621a      	str	r2, [r3, #32]
}
 8007c38:	bf00      	nop
 8007c3a:	371c      	adds	r7, #28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	40010000 	.word	0x40010000

08007c48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a1b      	ldr	r3, [r3, #32]
 8007c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	021b      	lsls	r3, r3, #8
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	031b      	lsls	r3, r3, #12
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a10      	ldr	r2, [pc, #64]	; (8007ce4 <TIM_OC4_SetConfig+0x9c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d109      	bne.n	8007cbc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	019b      	lsls	r3, r3, #6
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	621a      	str	r2, [r3, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	40010000 	.word	0x40010000

08007ce8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	f023 0201 	bic.w	r2, r3, #1
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	011b      	lsls	r3, r3, #4
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f023 030a 	bic.w	r3, r3, #10
 8007d24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	621a      	str	r2, [r3, #32]
}
 8007d3a:	bf00      	nop
 8007d3c:	371c      	adds	r7, #28
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b087      	sub	sp, #28
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	f023 0210 	bic.w	r2, r3, #16
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	031b      	lsls	r3, r3, #12
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	011b      	lsls	r3, r3, #4
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	621a      	str	r2, [r3, #32]
}
 8007d9a:	bf00      	nop
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b085      	sub	sp, #20
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	f043 0307 	orr.w	r3, r3, #7
 8007dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	609a      	str	r2, [r3, #8]
}
 8007dd0:	bf00      	nop
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007df6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	021a      	lsls	r2, r3, #8
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	609a      	str	r2, [r3, #8]
}
 8007e10:	bf00      	nop
 8007e12:	371c      	adds	r7, #28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f003 031f 	and.w	r3, r3, #31
 8007e2e:	2201      	movs	r2, #1
 8007e30:	fa02 f303 	lsl.w	r3, r2, r3
 8007e34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6a1a      	ldr	r2, [r3, #32]
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	43db      	mvns	r3, r3
 8007e3e:	401a      	ands	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6a1a      	ldr	r2, [r3, #32]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f003 031f 	and.w	r3, r3, #31
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	fa01 f303 	lsl.w	r3, r1, r3
 8007e54:	431a      	orrs	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	621a      	str	r2, [r3, #32]
}
 8007e5a:	bf00      	nop
 8007e5c:	371c      	adds	r7, #28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
	...

08007e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d101      	bne.n	8007e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	e050      	b.n	8007f22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a1c      	ldr	r2, [pc, #112]	; (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d018      	beq.n	8007ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ecc:	d013      	beq.n	8007ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a18      	ldr	r2, [pc, #96]	; (8007f34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d00e      	beq.n	8007ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a16      	ldr	r2, [pc, #88]	; (8007f38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d009      	beq.n	8007ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a15      	ldr	r2, [pc, #84]	; (8007f3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d004      	beq.n	8007ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a13      	ldr	r2, [pc, #76]	; (8007f40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d10c      	bne.n	8007f10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	40010000 	.word	0x40010000
 8007f34:	40000400 	.word	0x40000400
 8007f38:	40000800 	.word	0x40000800
 8007f3c:	40000c00 	.word	0x40000c00
 8007f40:	40014000 	.word	0x40014000

08007f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <memset>:
 8007f6c:	4402      	add	r2, r0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d100      	bne.n	8007f76 <memset+0xa>
 8007f74:	4770      	bx	lr
 8007f76:	f803 1b01 	strb.w	r1, [r3], #1
 8007f7a:	e7f9      	b.n	8007f70 <memset+0x4>

08007f7c <__libc_init_array>:
 8007f7c:	b570      	push	{r4, r5, r6, lr}
 8007f7e:	4d0d      	ldr	r5, [pc, #52]	; (8007fb4 <__libc_init_array+0x38>)
 8007f80:	4c0d      	ldr	r4, [pc, #52]	; (8007fb8 <__libc_init_array+0x3c>)
 8007f82:	1b64      	subs	r4, r4, r5
 8007f84:	10a4      	asrs	r4, r4, #2
 8007f86:	2600      	movs	r6, #0
 8007f88:	42a6      	cmp	r6, r4
 8007f8a:	d109      	bne.n	8007fa0 <__libc_init_array+0x24>
 8007f8c:	4d0b      	ldr	r5, [pc, #44]	; (8007fbc <__libc_init_array+0x40>)
 8007f8e:	4c0c      	ldr	r4, [pc, #48]	; (8007fc0 <__libc_init_array+0x44>)
 8007f90:	f001 f8ba 	bl	8009108 <_init>
 8007f94:	1b64      	subs	r4, r4, r5
 8007f96:	10a4      	asrs	r4, r4, #2
 8007f98:	2600      	movs	r6, #0
 8007f9a:	42a6      	cmp	r6, r4
 8007f9c:	d105      	bne.n	8007faa <__libc_init_array+0x2e>
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa4:	4798      	blx	r3
 8007fa6:	3601      	adds	r6, #1
 8007fa8:	e7ee      	b.n	8007f88 <__libc_init_array+0xc>
 8007faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fae:	4798      	blx	r3
 8007fb0:	3601      	adds	r6, #1
 8007fb2:	e7f2      	b.n	8007f9a <__libc_init_array+0x1e>
 8007fb4:	08009318 	.word	0x08009318
 8007fb8:	08009318 	.word	0x08009318
 8007fbc:	08009318 	.word	0x08009318
 8007fc0:	0800931c 	.word	0x0800931c
 8007fc4:	00000000 	.word	0x00000000

08007fc8 <tan>:
 8007fc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007fca:	ec53 2b10 	vmov	r2, r3, d0
 8007fce:	4816      	ldr	r0, [pc, #88]	; (8008028 <tan+0x60>)
 8007fd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007fd4:	4281      	cmp	r1, r0
 8007fd6:	dc07      	bgt.n	8007fe8 <tan+0x20>
 8007fd8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8008020 <tan+0x58>
 8007fdc:	2001      	movs	r0, #1
 8007fde:	b005      	add	sp, #20
 8007fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fe4:	f000 b824 	b.w	8008030 <__kernel_tan>
 8007fe8:	4810      	ldr	r0, [pc, #64]	; (800802c <tan+0x64>)
 8007fea:	4281      	cmp	r1, r0
 8007fec:	dd09      	ble.n	8008002 <tan+0x3a>
 8007fee:	ee10 0a10 	vmov	r0, s0
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	f7f8 f8f4 	bl	80001e0 <__aeabi_dsub>
 8007ff8:	ec41 0b10 	vmov	d0, r0, r1
 8007ffc:	b005      	add	sp, #20
 8007ffe:	f85d fb04 	ldr.w	pc, [sp], #4
 8008002:	4668      	mov	r0, sp
 8008004:	f000 fa20 	bl	8008448 <__ieee754_rem_pio2>
 8008008:	0040      	lsls	r0, r0, #1
 800800a:	f000 0002 	and.w	r0, r0, #2
 800800e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008012:	ed9d 0b00 	vldr	d0, [sp]
 8008016:	f1c0 0001 	rsb	r0, r0, #1
 800801a:	f000 f809 	bl	8008030 <__kernel_tan>
 800801e:	e7ed      	b.n	8007ffc <tan+0x34>
	...
 8008028:	3fe921fb 	.word	0x3fe921fb
 800802c:	7fefffff 	.word	0x7fefffff

08008030 <__kernel_tan>:
 8008030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	ed2d 8b06 	vpush	{d8-d10}
 8008038:	ec5b ab10 	vmov	sl, fp, d0
 800803c:	4be0      	ldr	r3, [pc, #896]	; (80083c0 <__kernel_tan+0x390>)
 800803e:	b083      	sub	sp, #12
 8008040:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8008044:	429f      	cmp	r7, r3
 8008046:	ec59 8b11 	vmov	r8, r9, d1
 800804a:	4606      	mov	r6, r0
 800804c:	f8cd b000 	str.w	fp, [sp]
 8008050:	dc61      	bgt.n	8008116 <__kernel_tan+0xe6>
 8008052:	ee10 0a10 	vmov	r0, s0
 8008056:	4659      	mov	r1, fp
 8008058:	f7f8 fd14 	bl	8000a84 <__aeabi_d2iz>
 800805c:	4605      	mov	r5, r0
 800805e:	2800      	cmp	r0, #0
 8008060:	f040 8083 	bne.w	800816a <__kernel_tan+0x13a>
 8008064:	1c73      	adds	r3, r6, #1
 8008066:	4652      	mov	r2, sl
 8008068:	4313      	orrs	r3, r2
 800806a:	433b      	orrs	r3, r7
 800806c:	d112      	bne.n	8008094 <__kernel_tan+0x64>
 800806e:	ec4b ab10 	vmov	d0, sl, fp
 8008072:	f000 fbef 	bl	8008854 <fabs>
 8008076:	49d3      	ldr	r1, [pc, #844]	; (80083c4 <__kernel_tan+0x394>)
 8008078:	ec53 2b10 	vmov	r2, r3, d0
 800807c:	2000      	movs	r0, #0
 800807e:	f7f8 fb91 	bl	80007a4 <__aeabi_ddiv>
 8008082:	4682      	mov	sl, r0
 8008084:	468b      	mov	fp, r1
 8008086:	ec4b ab10 	vmov	d0, sl, fp
 800808a:	b003      	add	sp, #12
 800808c:	ecbd 8b06 	vpop	{d8-d10}
 8008090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008094:	2e01      	cmp	r6, #1
 8008096:	d0f6      	beq.n	8008086 <__kernel_tan+0x56>
 8008098:	4642      	mov	r2, r8
 800809a:	464b      	mov	r3, r9
 800809c:	4650      	mov	r0, sl
 800809e:	4659      	mov	r1, fp
 80080a0:	f7f8 f8a0 	bl	80001e4 <__adddf3>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	460f      	mov	r7, r1
 80080aa:	2000      	movs	r0, #0
 80080ac:	49c6      	ldr	r1, [pc, #792]	; (80083c8 <__kernel_tan+0x398>)
 80080ae:	f7f8 fb79 	bl	80007a4 <__aeabi_ddiv>
 80080b2:	e9cd 0100 	strd	r0, r1, [sp]
 80080b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080ba:	462e      	mov	r6, r5
 80080bc:	4652      	mov	r2, sl
 80080be:	462c      	mov	r4, r5
 80080c0:	4630      	mov	r0, r6
 80080c2:	461d      	mov	r5, r3
 80080c4:	4639      	mov	r1, r7
 80080c6:	465b      	mov	r3, fp
 80080c8:	f7f8 f88a 	bl	80001e0 <__aeabi_dsub>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4640      	mov	r0, r8
 80080d2:	4649      	mov	r1, r9
 80080d4:	f7f8 f884 	bl	80001e0 <__aeabi_dsub>
 80080d8:	4632      	mov	r2, r6
 80080da:	462b      	mov	r3, r5
 80080dc:	f7f8 fa38 	bl	8000550 <__aeabi_dmul>
 80080e0:	4632      	mov	r2, r6
 80080e2:	4680      	mov	r8, r0
 80080e4:	4689      	mov	r9, r1
 80080e6:	462b      	mov	r3, r5
 80080e8:	4630      	mov	r0, r6
 80080ea:	4639      	mov	r1, r7
 80080ec:	f7f8 fa30 	bl	8000550 <__aeabi_dmul>
 80080f0:	4bb4      	ldr	r3, [pc, #720]	; (80083c4 <__kernel_tan+0x394>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	f7f8 f876 	bl	80001e4 <__adddf3>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	4640      	mov	r0, r8
 80080fe:	4649      	mov	r1, r9
 8008100:	f7f8 f870 	bl	80001e4 <__adddf3>
 8008104:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008108:	f7f8 fa22 	bl	8000550 <__aeabi_dmul>
 800810c:	4622      	mov	r2, r4
 800810e:	462b      	mov	r3, r5
 8008110:	f7f8 f868 	bl	80001e4 <__adddf3>
 8008114:	e7b5      	b.n	8008082 <__kernel_tan+0x52>
 8008116:	4bad      	ldr	r3, [pc, #692]	; (80083cc <__kernel_tan+0x39c>)
 8008118:	429f      	cmp	r7, r3
 800811a:	dd26      	ble.n	800816a <__kernel_tan+0x13a>
 800811c:	9b00      	ldr	r3, [sp, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	da09      	bge.n	8008136 <__kernel_tan+0x106>
 8008122:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008126:	469b      	mov	fp, r3
 8008128:	ee10 aa10 	vmov	sl, s0
 800812c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008130:	ee11 8a10 	vmov	r8, s2
 8008134:	4699      	mov	r9, r3
 8008136:	4652      	mov	r2, sl
 8008138:	465b      	mov	r3, fp
 800813a:	a183      	add	r1, pc, #524	; (adr r1, 8008348 <__kernel_tan+0x318>)
 800813c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008140:	f7f8 f84e 	bl	80001e0 <__aeabi_dsub>
 8008144:	4642      	mov	r2, r8
 8008146:	464b      	mov	r3, r9
 8008148:	4604      	mov	r4, r0
 800814a:	460d      	mov	r5, r1
 800814c:	a180      	add	r1, pc, #512	; (adr r1, 8008350 <__kernel_tan+0x320>)
 800814e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008152:	f7f8 f845 	bl	80001e0 <__aeabi_dsub>
 8008156:	4622      	mov	r2, r4
 8008158:	462b      	mov	r3, r5
 800815a:	f7f8 f843 	bl	80001e4 <__adddf3>
 800815e:	f04f 0800 	mov.w	r8, #0
 8008162:	4682      	mov	sl, r0
 8008164:	468b      	mov	fp, r1
 8008166:	f04f 0900 	mov.w	r9, #0
 800816a:	4652      	mov	r2, sl
 800816c:	465b      	mov	r3, fp
 800816e:	4650      	mov	r0, sl
 8008170:	4659      	mov	r1, fp
 8008172:	f7f8 f9ed 	bl	8000550 <__aeabi_dmul>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	ec43 2b18 	vmov	d8, r2, r3
 800817e:	f7f8 f9e7 	bl	8000550 <__aeabi_dmul>
 8008182:	ec53 2b18 	vmov	r2, r3, d8
 8008186:	4604      	mov	r4, r0
 8008188:	460d      	mov	r5, r1
 800818a:	4650      	mov	r0, sl
 800818c:	4659      	mov	r1, fp
 800818e:	f7f8 f9df 	bl	8000550 <__aeabi_dmul>
 8008192:	a371      	add	r3, pc, #452	; (adr r3, 8008358 <__kernel_tan+0x328>)
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	ec41 0b19 	vmov	d9, r0, r1
 800819c:	4620      	mov	r0, r4
 800819e:	4629      	mov	r1, r5
 80081a0:	f7f8 f9d6 	bl	8000550 <__aeabi_dmul>
 80081a4:	a36e      	add	r3, pc, #440	; (adr r3, 8008360 <__kernel_tan+0x330>)
 80081a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081aa:	f7f8 f81b 	bl	80001e4 <__adddf3>
 80081ae:	4622      	mov	r2, r4
 80081b0:	462b      	mov	r3, r5
 80081b2:	f7f8 f9cd 	bl	8000550 <__aeabi_dmul>
 80081b6:	a36c      	add	r3, pc, #432	; (adr r3, 8008368 <__kernel_tan+0x338>)
 80081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081bc:	f7f8 f812 	bl	80001e4 <__adddf3>
 80081c0:	4622      	mov	r2, r4
 80081c2:	462b      	mov	r3, r5
 80081c4:	f7f8 f9c4 	bl	8000550 <__aeabi_dmul>
 80081c8:	a369      	add	r3, pc, #420	; (adr r3, 8008370 <__kernel_tan+0x340>)
 80081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ce:	f7f8 f809 	bl	80001e4 <__adddf3>
 80081d2:	4622      	mov	r2, r4
 80081d4:	462b      	mov	r3, r5
 80081d6:	f7f8 f9bb 	bl	8000550 <__aeabi_dmul>
 80081da:	a367      	add	r3, pc, #412	; (adr r3, 8008378 <__kernel_tan+0x348>)
 80081dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e0:	f7f8 f800 	bl	80001e4 <__adddf3>
 80081e4:	4622      	mov	r2, r4
 80081e6:	462b      	mov	r3, r5
 80081e8:	f7f8 f9b2 	bl	8000550 <__aeabi_dmul>
 80081ec:	a364      	add	r3, pc, #400	; (adr r3, 8008380 <__kernel_tan+0x350>)
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	f7f7 fff7 	bl	80001e4 <__adddf3>
 80081f6:	ec53 2b18 	vmov	r2, r3, d8
 80081fa:	f7f8 f9a9 	bl	8000550 <__aeabi_dmul>
 80081fe:	a362      	add	r3, pc, #392	; (adr r3, 8008388 <__kernel_tan+0x358>)
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	ec41 0b1a 	vmov	d10, r0, r1
 8008208:	4620      	mov	r0, r4
 800820a:	4629      	mov	r1, r5
 800820c:	f7f8 f9a0 	bl	8000550 <__aeabi_dmul>
 8008210:	a35f      	add	r3, pc, #380	; (adr r3, 8008390 <__kernel_tan+0x360>)
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	f7f7 ffe5 	bl	80001e4 <__adddf3>
 800821a:	4622      	mov	r2, r4
 800821c:	462b      	mov	r3, r5
 800821e:	f7f8 f997 	bl	8000550 <__aeabi_dmul>
 8008222:	a35d      	add	r3, pc, #372	; (adr r3, 8008398 <__kernel_tan+0x368>)
 8008224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008228:	f7f7 ffdc 	bl	80001e4 <__adddf3>
 800822c:	4622      	mov	r2, r4
 800822e:	462b      	mov	r3, r5
 8008230:	f7f8 f98e 	bl	8000550 <__aeabi_dmul>
 8008234:	a35a      	add	r3, pc, #360	; (adr r3, 80083a0 <__kernel_tan+0x370>)
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	f7f7 ffd3 	bl	80001e4 <__adddf3>
 800823e:	4622      	mov	r2, r4
 8008240:	462b      	mov	r3, r5
 8008242:	f7f8 f985 	bl	8000550 <__aeabi_dmul>
 8008246:	a358      	add	r3, pc, #352	; (adr r3, 80083a8 <__kernel_tan+0x378>)
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	f7f7 ffca 	bl	80001e4 <__adddf3>
 8008250:	4622      	mov	r2, r4
 8008252:	462b      	mov	r3, r5
 8008254:	f7f8 f97c 	bl	8000550 <__aeabi_dmul>
 8008258:	a355      	add	r3, pc, #340	; (adr r3, 80083b0 <__kernel_tan+0x380>)
 800825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825e:	f7f7 ffc1 	bl	80001e4 <__adddf3>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	ec51 0b1a 	vmov	r0, r1, d10
 800826a:	f7f7 ffbb 	bl	80001e4 <__adddf3>
 800826e:	ec53 2b19 	vmov	r2, r3, d9
 8008272:	f7f8 f96d 	bl	8000550 <__aeabi_dmul>
 8008276:	4642      	mov	r2, r8
 8008278:	464b      	mov	r3, r9
 800827a:	f7f7 ffb3 	bl	80001e4 <__adddf3>
 800827e:	ec53 2b18 	vmov	r2, r3, d8
 8008282:	f7f8 f965 	bl	8000550 <__aeabi_dmul>
 8008286:	4642      	mov	r2, r8
 8008288:	464b      	mov	r3, r9
 800828a:	f7f7 ffab 	bl	80001e4 <__adddf3>
 800828e:	a34a      	add	r3, pc, #296	; (adr r3, 80083b8 <__kernel_tan+0x388>)
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	4604      	mov	r4, r0
 8008296:	460d      	mov	r5, r1
 8008298:	ec51 0b19 	vmov	r0, r1, d9
 800829c:	f7f8 f958 	bl	8000550 <__aeabi_dmul>
 80082a0:	4622      	mov	r2, r4
 80082a2:	462b      	mov	r3, r5
 80082a4:	f7f7 ff9e 	bl	80001e4 <__adddf3>
 80082a8:	460b      	mov	r3, r1
 80082aa:	ec41 0b18 	vmov	d8, r0, r1
 80082ae:	4602      	mov	r2, r0
 80082b0:	4659      	mov	r1, fp
 80082b2:	4650      	mov	r0, sl
 80082b4:	f7f7 ff96 	bl	80001e4 <__adddf3>
 80082b8:	4b44      	ldr	r3, [pc, #272]	; (80083cc <__kernel_tan+0x39c>)
 80082ba:	429f      	cmp	r7, r3
 80082bc:	4604      	mov	r4, r0
 80082be:	460d      	mov	r5, r1
 80082c0:	f340 8086 	ble.w	80083d0 <__kernel_tan+0x3a0>
 80082c4:	4630      	mov	r0, r6
 80082c6:	f7f8 f8d9 	bl	800047c <__aeabi_i2d>
 80082ca:	4622      	mov	r2, r4
 80082cc:	4680      	mov	r8, r0
 80082ce:	4689      	mov	r9, r1
 80082d0:	462b      	mov	r3, r5
 80082d2:	4620      	mov	r0, r4
 80082d4:	4629      	mov	r1, r5
 80082d6:	f7f8 f93b 	bl	8000550 <__aeabi_dmul>
 80082da:	4642      	mov	r2, r8
 80082dc:	4606      	mov	r6, r0
 80082de:	460f      	mov	r7, r1
 80082e0:	464b      	mov	r3, r9
 80082e2:	4620      	mov	r0, r4
 80082e4:	4629      	mov	r1, r5
 80082e6:	f7f7 ff7d 	bl	80001e4 <__adddf3>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	4630      	mov	r0, r6
 80082f0:	4639      	mov	r1, r7
 80082f2:	f7f8 fa57 	bl	80007a4 <__aeabi_ddiv>
 80082f6:	ec53 2b18 	vmov	r2, r3, d8
 80082fa:	f7f7 ff71 	bl	80001e0 <__aeabi_dsub>
 80082fe:	4602      	mov	r2, r0
 8008300:	460b      	mov	r3, r1
 8008302:	4650      	mov	r0, sl
 8008304:	4659      	mov	r1, fp
 8008306:	f7f7 ff6b 	bl	80001e0 <__aeabi_dsub>
 800830a:	4602      	mov	r2, r0
 800830c:	460b      	mov	r3, r1
 800830e:	f7f7 ff69 	bl	80001e4 <__adddf3>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	4640      	mov	r0, r8
 8008318:	4649      	mov	r1, r9
 800831a:	f7f7 ff61 	bl	80001e0 <__aeabi_dsub>
 800831e:	9b00      	ldr	r3, [sp, #0]
 8008320:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8008324:	f00a 0a02 	and.w	sl, sl, #2
 8008328:	4604      	mov	r4, r0
 800832a:	f1ca 0001 	rsb	r0, sl, #1
 800832e:	460d      	mov	r5, r1
 8008330:	f7f8 f8a4 	bl	800047c <__aeabi_i2d>
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	4620      	mov	r0, r4
 800833a:	4629      	mov	r1, r5
 800833c:	f7f8 f908 	bl	8000550 <__aeabi_dmul>
 8008340:	e69f      	b.n	8008082 <__kernel_tan+0x52>
 8008342:	bf00      	nop
 8008344:	f3af 8000 	nop.w
 8008348:	54442d18 	.word	0x54442d18
 800834c:	3fe921fb 	.word	0x3fe921fb
 8008350:	33145c07 	.word	0x33145c07
 8008354:	3c81a626 	.word	0x3c81a626
 8008358:	74bf7ad4 	.word	0x74bf7ad4
 800835c:	3efb2a70 	.word	0x3efb2a70
 8008360:	32f0a7e9 	.word	0x32f0a7e9
 8008364:	3f12b80f 	.word	0x3f12b80f
 8008368:	1a8d1068 	.word	0x1a8d1068
 800836c:	3f3026f7 	.word	0x3f3026f7
 8008370:	fee08315 	.word	0xfee08315
 8008374:	3f57dbc8 	.word	0x3f57dbc8
 8008378:	e96e8493 	.word	0xe96e8493
 800837c:	3f8226e3 	.word	0x3f8226e3
 8008380:	1bb341fe 	.word	0x1bb341fe
 8008384:	3faba1ba 	.word	0x3faba1ba
 8008388:	db605373 	.word	0xdb605373
 800838c:	bef375cb 	.word	0xbef375cb
 8008390:	a03792a6 	.word	0xa03792a6
 8008394:	3f147e88 	.word	0x3f147e88
 8008398:	f2f26501 	.word	0xf2f26501
 800839c:	3f4344d8 	.word	0x3f4344d8
 80083a0:	c9560328 	.word	0xc9560328
 80083a4:	3f6d6d22 	.word	0x3f6d6d22
 80083a8:	8406d637 	.word	0x8406d637
 80083ac:	3f9664f4 	.word	0x3f9664f4
 80083b0:	1110fe7a 	.word	0x1110fe7a
 80083b4:	3fc11111 	.word	0x3fc11111
 80083b8:	55555563 	.word	0x55555563
 80083bc:	3fd55555 	.word	0x3fd55555
 80083c0:	3e2fffff 	.word	0x3e2fffff
 80083c4:	3ff00000 	.word	0x3ff00000
 80083c8:	bff00000 	.word	0xbff00000
 80083cc:	3fe59427 	.word	0x3fe59427
 80083d0:	2e01      	cmp	r6, #1
 80083d2:	d02f      	beq.n	8008434 <__kernel_tan+0x404>
 80083d4:	460f      	mov	r7, r1
 80083d6:	4602      	mov	r2, r0
 80083d8:	460b      	mov	r3, r1
 80083da:	4689      	mov	r9, r1
 80083dc:	2000      	movs	r0, #0
 80083de:	4917      	ldr	r1, [pc, #92]	; (800843c <__kernel_tan+0x40c>)
 80083e0:	f7f8 f9e0 	bl	80007a4 <__aeabi_ddiv>
 80083e4:	2600      	movs	r6, #0
 80083e6:	e9cd 0100 	strd	r0, r1, [sp]
 80083ea:	4652      	mov	r2, sl
 80083ec:	465b      	mov	r3, fp
 80083ee:	4630      	mov	r0, r6
 80083f0:	4639      	mov	r1, r7
 80083f2:	f7f7 fef5 	bl	80001e0 <__aeabi_dsub>
 80083f6:	e9dd 4500 	ldrd	r4, r5, [sp]
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	ec51 0b18 	vmov	r0, r1, d8
 8008402:	f7f7 feed 	bl	80001e0 <__aeabi_dsub>
 8008406:	4632      	mov	r2, r6
 8008408:	462b      	mov	r3, r5
 800840a:	f7f8 f8a1 	bl	8000550 <__aeabi_dmul>
 800840e:	46b0      	mov	r8, r6
 8008410:	460f      	mov	r7, r1
 8008412:	4642      	mov	r2, r8
 8008414:	462b      	mov	r3, r5
 8008416:	4634      	mov	r4, r6
 8008418:	4649      	mov	r1, r9
 800841a:	4606      	mov	r6, r0
 800841c:	4640      	mov	r0, r8
 800841e:	f7f8 f897 	bl	8000550 <__aeabi_dmul>
 8008422:	4b07      	ldr	r3, [pc, #28]	; (8008440 <__kernel_tan+0x410>)
 8008424:	2200      	movs	r2, #0
 8008426:	f7f7 fedd 	bl	80001e4 <__adddf3>
 800842a:	4602      	mov	r2, r0
 800842c:	460b      	mov	r3, r1
 800842e:	4630      	mov	r0, r6
 8008430:	4639      	mov	r1, r7
 8008432:	e665      	b.n	8008100 <__kernel_tan+0xd0>
 8008434:	4682      	mov	sl, r0
 8008436:	468b      	mov	fp, r1
 8008438:	e625      	b.n	8008086 <__kernel_tan+0x56>
 800843a:	bf00      	nop
 800843c:	bff00000 	.word	0xbff00000
 8008440:	3ff00000 	.word	0x3ff00000
 8008444:	00000000 	.word	0x00000000

08008448 <__ieee754_rem_pio2>:
 8008448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844c:	ed2d 8b02 	vpush	{d8}
 8008450:	ec55 4b10 	vmov	r4, r5, d0
 8008454:	4bca      	ldr	r3, [pc, #808]	; (8008780 <__ieee754_rem_pio2+0x338>)
 8008456:	b08b      	sub	sp, #44	; 0x2c
 8008458:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800845c:	4598      	cmp	r8, r3
 800845e:	4682      	mov	sl, r0
 8008460:	9502      	str	r5, [sp, #8]
 8008462:	dc08      	bgt.n	8008476 <__ieee754_rem_pio2+0x2e>
 8008464:	2200      	movs	r2, #0
 8008466:	2300      	movs	r3, #0
 8008468:	ed80 0b00 	vstr	d0, [r0]
 800846c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008470:	f04f 0b00 	mov.w	fp, #0
 8008474:	e028      	b.n	80084c8 <__ieee754_rem_pio2+0x80>
 8008476:	4bc3      	ldr	r3, [pc, #780]	; (8008784 <__ieee754_rem_pio2+0x33c>)
 8008478:	4598      	cmp	r8, r3
 800847a:	dc78      	bgt.n	800856e <__ieee754_rem_pio2+0x126>
 800847c:	9b02      	ldr	r3, [sp, #8]
 800847e:	4ec2      	ldr	r6, [pc, #776]	; (8008788 <__ieee754_rem_pio2+0x340>)
 8008480:	2b00      	cmp	r3, #0
 8008482:	ee10 0a10 	vmov	r0, s0
 8008486:	a3b0      	add	r3, pc, #704	; (adr r3, 8008748 <__ieee754_rem_pio2+0x300>)
 8008488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848c:	4629      	mov	r1, r5
 800848e:	dd39      	ble.n	8008504 <__ieee754_rem_pio2+0xbc>
 8008490:	f7f7 fea6 	bl	80001e0 <__aeabi_dsub>
 8008494:	45b0      	cmp	r8, r6
 8008496:	4604      	mov	r4, r0
 8008498:	460d      	mov	r5, r1
 800849a:	d01b      	beq.n	80084d4 <__ieee754_rem_pio2+0x8c>
 800849c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008750 <__ieee754_rem_pio2+0x308>)
 800849e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a2:	f7f7 fe9d 	bl	80001e0 <__aeabi_dsub>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	e9ca 2300 	strd	r2, r3, [sl]
 80084ae:	4620      	mov	r0, r4
 80084b0:	4629      	mov	r1, r5
 80084b2:	f7f7 fe95 	bl	80001e0 <__aeabi_dsub>
 80084b6:	a3a6      	add	r3, pc, #664	; (adr r3, 8008750 <__ieee754_rem_pio2+0x308>)
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	f7f7 fe90 	bl	80001e0 <__aeabi_dsub>
 80084c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80084c4:	f04f 0b01 	mov.w	fp, #1
 80084c8:	4658      	mov	r0, fp
 80084ca:	b00b      	add	sp, #44	; 0x2c
 80084cc:	ecbd 8b02 	vpop	{d8}
 80084d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d4:	a3a0      	add	r3, pc, #640	; (adr r3, 8008758 <__ieee754_rem_pio2+0x310>)
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	f7f7 fe81 	bl	80001e0 <__aeabi_dsub>
 80084de:	a3a0      	add	r3, pc, #640	; (adr r3, 8008760 <__ieee754_rem_pio2+0x318>)
 80084e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e4:	4604      	mov	r4, r0
 80084e6:	460d      	mov	r5, r1
 80084e8:	f7f7 fe7a 	bl	80001e0 <__aeabi_dsub>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	e9ca 2300 	strd	r2, r3, [sl]
 80084f4:	4620      	mov	r0, r4
 80084f6:	4629      	mov	r1, r5
 80084f8:	f7f7 fe72 	bl	80001e0 <__aeabi_dsub>
 80084fc:	a398      	add	r3, pc, #608	; (adr r3, 8008760 <__ieee754_rem_pio2+0x318>)
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	e7db      	b.n	80084bc <__ieee754_rem_pio2+0x74>
 8008504:	f7f7 fe6e 	bl	80001e4 <__adddf3>
 8008508:	45b0      	cmp	r8, r6
 800850a:	4604      	mov	r4, r0
 800850c:	460d      	mov	r5, r1
 800850e:	d016      	beq.n	800853e <__ieee754_rem_pio2+0xf6>
 8008510:	a38f      	add	r3, pc, #572	; (adr r3, 8008750 <__ieee754_rem_pio2+0x308>)
 8008512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008516:	f7f7 fe65 	bl	80001e4 <__adddf3>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	e9ca 2300 	strd	r2, r3, [sl]
 8008522:	4620      	mov	r0, r4
 8008524:	4629      	mov	r1, r5
 8008526:	f7f7 fe5b 	bl	80001e0 <__aeabi_dsub>
 800852a:	a389      	add	r3, pc, #548	; (adr r3, 8008750 <__ieee754_rem_pio2+0x308>)
 800852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008530:	f7f7 fe58 	bl	80001e4 <__adddf3>
 8008534:	f04f 3bff 	mov.w	fp, #4294967295
 8008538:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800853c:	e7c4      	b.n	80084c8 <__ieee754_rem_pio2+0x80>
 800853e:	a386      	add	r3, pc, #536	; (adr r3, 8008758 <__ieee754_rem_pio2+0x310>)
 8008540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008544:	f7f7 fe4e 	bl	80001e4 <__adddf3>
 8008548:	a385      	add	r3, pc, #532	; (adr r3, 8008760 <__ieee754_rem_pio2+0x318>)
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	4604      	mov	r4, r0
 8008550:	460d      	mov	r5, r1
 8008552:	f7f7 fe47 	bl	80001e4 <__adddf3>
 8008556:	4602      	mov	r2, r0
 8008558:	460b      	mov	r3, r1
 800855a:	e9ca 2300 	strd	r2, r3, [sl]
 800855e:	4620      	mov	r0, r4
 8008560:	4629      	mov	r1, r5
 8008562:	f7f7 fe3d 	bl	80001e0 <__aeabi_dsub>
 8008566:	a37e      	add	r3, pc, #504	; (adr r3, 8008760 <__ieee754_rem_pio2+0x318>)
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	e7e0      	b.n	8008530 <__ieee754_rem_pio2+0xe8>
 800856e:	4b87      	ldr	r3, [pc, #540]	; (800878c <__ieee754_rem_pio2+0x344>)
 8008570:	4598      	cmp	r8, r3
 8008572:	f300 80d8 	bgt.w	8008726 <__ieee754_rem_pio2+0x2de>
 8008576:	f000 f96d 	bl	8008854 <fabs>
 800857a:	ec55 4b10 	vmov	r4, r5, d0
 800857e:	ee10 0a10 	vmov	r0, s0
 8008582:	a379      	add	r3, pc, #484	; (adr r3, 8008768 <__ieee754_rem_pio2+0x320>)
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	4629      	mov	r1, r5
 800858a:	f7f7 ffe1 	bl	8000550 <__aeabi_dmul>
 800858e:	4b80      	ldr	r3, [pc, #512]	; (8008790 <__ieee754_rem_pio2+0x348>)
 8008590:	2200      	movs	r2, #0
 8008592:	f7f7 fe27 	bl	80001e4 <__adddf3>
 8008596:	f7f8 fa75 	bl	8000a84 <__aeabi_d2iz>
 800859a:	4683      	mov	fp, r0
 800859c:	f7f7 ff6e 	bl	800047c <__aeabi_i2d>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	ec43 2b18 	vmov	d8, r2, r3
 80085a8:	a367      	add	r3, pc, #412	; (adr r3, 8008748 <__ieee754_rem_pio2+0x300>)
 80085aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ae:	f7f7 ffcf 	bl	8000550 <__aeabi_dmul>
 80085b2:	4602      	mov	r2, r0
 80085b4:	460b      	mov	r3, r1
 80085b6:	4620      	mov	r0, r4
 80085b8:	4629      	mov	r1, r5
 80085ba:	f7f7 fe11 	bl	80001e0 <__aeabi_dsub>
 80085be:	a364      	add	r3, pc, #400	; (adr r3, 8008750 <__ieee754_rem_pio2+0x308>)
 80085c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c4:	4606      	mov	r6, r0
 80085c6:	460f      	mov	r7, r1
 80085c8:	ec51 0b18 	vmov	r0, r1, d8
 80085cc:	f7f7 ffc0 	bl	8000550 <__aeabi_dmul>
 80085d0:	f1bb 0f1f 	cmp.w	fp, #31
 80085d4:	4604      	mov	r4, r0
 80085d6:	460d      	mov	r5, r1
 80085d8:	dc0d      	bgt.n	80085f6 <__ieee754_rem_pio2+0x1ae>
 80085da:	4b6e      	ldr	r3, [pc, #440]	; (8008794 <__ieee754_rem_pio2+0x34c>)
 80085dc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80085e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e4:	4543      	cmp	r3, r8
 80085e6:	d006      	beq.n	80085f6 <__ieee754_rem_pio2+0x1ae>
 80085e8:	4622      	mov	r2, r4
 80085ea:	462b      	mov	r3, r5
 80085ec:	4630      	mov	r0, r6
 80085ee:	4639      	mov	r1, r7
 80085f0:	f7f7 fdf6 	bl	80001e0 <__aeabi_dsub>
 80085f4:	e00e      	b.n	8008614 <__ieee754_rem_pio2+0x1cc>
 80085f6:	462b      	mov	r3, r5
 80085f8:	4622      	mov	r2, r4
 80085fa:	4630      	mov	r0, r6
 80085fc:	4639      	mov	r1, r7
 80085fe:	f7f7 fdef 	bl	80001e0 <__aeabi_dsub>
 8008602:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008606:	9303      	str	r3, [sp, #12]
 8008608:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800860c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008610:	2b10      	cmp	r3, #16
 8008612:	dc02      	bgt.n	800861a <__ieee754_rem_pio2+0x1d2>
 8008614:	e9ca 0100 	strd	r0, r1, [sl]
 8008618:	e039      	b.n	800868e <__ieee754_rem_pio2+0x246>
 800861a:	a34f      	add	r3, pc, #316	; (adr r3, 8008758 <__ieee754_rem_pio2+0x310>)
 800861c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008620:	ec51 0b18 	vmov	r0, r1, d8
 8008624:	f7f7 ff94 	bl	8000550 <__aeabi_dmul>
 8008628:	4604      	mov	r4, r0
 800862a:	460d      	mov	r5, r1
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4630      	mov	r0, r6
 8008632:	4639      	mov	r1, r7
 8008634:	f7f7 fdd4 	bl	80001e0 <__aeabi_dsub>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4680      	mov	r8, r0
 800863e:	4689      	mov	r9, r1
 8008640:	4630      	mov	r0, r6
 8008642:	4639      	mov	r1, r7
 8008644:	f7f7 fdcc 	bl	80001e0 <__aeabi_dsub>
 8008648:	4622      	mov	r2, r4
 800864a:	462b      	mov	r3, r5
 800864c:	f7f7 fdc8 	bl	80001e0 <__aeabi_dsub>
 8008650:	a343      	add	r3, pc, #268	; (adr r3, 8008760 <__ieee754_rem_pio2+0x318>)
 8008652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008656:	4604      	mov	r4, r0
 8008658:	460d      	mov	r5, r1
 800865a:	ec51 0b18 	vmov	r0, r1, d8
 800865e:	f7f7 ff77 	bl	8000550 <__aeabi_dmul>
 8008662:	4622      	mov	r2, r4
 8008664:	462b      	mov	r3, r5
 8008666:	f7f7 fdbb 	bl	80001e0 <__aeabi_dsub>
 800866a:	4602      	mov	r2, r0
 800866c:	460b      	mov	r3, r1
 800866e:	4604      	mov	r4, r0
 8008670:	460d      	mov	r5, r1
 8008672:	4640      	mov	r0, r8
 8008674:	4649      	mov	r1, r9
 8008676:	f7f7 fdb3 	bl	80001e0 <__aeabi_dsub>
 800867a:	9a03      	ldr	r2, [sp, #12]
 800867c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	2b31      	cmp	r3, #49	; 0x31
 8008684:	dc24      	bgt.n	80086d0 <__ieee754_rem_pio2+0x288>
 8008686:	e9ca 0100 	strd	r0, r1, [sl]
 800868a:	4646      	mov	r6, r8
 800868c:	464f      	mov	r7, r9
 800868e:	e9da 8900 	ldrd	r8, r9, [sl]
 8008692:	4630      	mov	r0, r6
 8008694:	4642      	mov	r2, r8
 8008696:	464b      	mov	r3, r9
 8008698:	4639      	mov	r1, r7
 800869a:	f7f7 fda1 	bl	80001e0 <__aeabi_dsub>
 800869e:	462b      	mov	r3, r5
 80086a0:	4622      	mov	r2, r4
 80086a2:	f7f7 fd9d 	bl	80001e0 <__aeabi_dsub>
 80086a6:	9b02      	ldr	r3, [sp, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80086ae:	f6bf af0b 	bge.w	80084c8 <__ieee754_rem_pio2+0x80>
 80086b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80086b6:	f8ca 3004 	str.w	r3, [sl, #4]
 80086ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086be:	f8ca 8000 	str.w	r8, [sl]
 80086c2:	f8ca 0008 	str.w	r0, [sl, #8]
 80086c6:	f8ca 300c 	str.w	r3, [sl, #12]
 80086ca:	f1cb 0b00 	rsb	fp, fp, #0
 80086ce:	e6fb      	b.n	80084c8 <__ieee754_rem_pio2+0x80>
 80086d0:	a327      	add	r3, pc, #156	; (adr r3, 8008770 <__ieee754_rem_pio2+0x328>)
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	ec51 0b18 	vmov	r0, r1, d8
 80086da:	f7f7 ff39 	bl	8000550 <__aeabi_dmul>
 80086de:	4604      	mov	r4, r0
 80086e0:	460d      	mov	r5, r1
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4640      	mov	r0, r8
 80086e8:	4649      	mov	r1, r9
 80086ea:	f7f7 fd79 	bl	80001e0 <__aeabi_dsub>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	4606      	mov	r6, r0
 80086f4:	460f      	mov	r7, r1
 80086f6:	4640      	mov	r0, r8
 80086f8:	4649      	mov	r1, r9
 80086fa:	f7f7 fd71 	bl	80001e0 <__aeabi_dsub>
 80086fe:	4622      	mov	r2, r4
 8008700:	462b      	mov	r3, r5
 8008702:	f7f7 fd6d 	bl	80001e0 <__aeabi_dsub>
 8008706:	a31c      	add	r3, pc, #112	; (adr r3, 8008778 <__ieee754_rem_pio2+0x330>)
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	4604      	mov	r4, r0
 800870e:	460d      	mov	r5, r1
 8008710:	ec51 0b18 	vmov	r0, r1, d8
 8008714:	f7f7 ff1c 	bl	8000550 <__aeabi_dmul>
 8008718:	4622      	mov	r2, r4
 800871a:	462b      	mov	r3, r5
 800871c:	f7f7 fd60 	bl	80001e0 <__aeabi_dsub>
 8008720:	4604      	mov	r4, r0
 8008722:	460d      	mov	r5, r1
 8008724:	e760      	b.n	80085e8 <__ieee754_rem_pio2+0x1a0>
 8008726:	4b1c      	ldr	r3, [pc, #112]	; (8008798 <__ieee754_rem_pio2+0x350>)
 8008728:	4598      	cmp	r8, r3
 800872a:	dd37      	ble.n	800879c <__ieee754_rem_pio2+0x354>
 800872c:	ee10 2a10 	vmov	r2, s0
 8008730:	462b      	mov	r3, r5
 8008732:	4620      	mov	r0, r4
 8008734:	4629      	mov	r1, r5
 8008736:	f7f7 fd53 	bl	80001e0 <__aeabi_dsub>
 800873a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800873e:	e9ca 0100 	strd	r0, r1, [sl]
 8008742:	e695      	b.n	8008470 <__ieee754_rem_pio2+0x28>
 8008744:	f3af 8000 	nop.w
 8008748:	54400000 	.word	0x54400000
 800874c:	3ff921fb 	.word	0x3ff921fb
 8008750:	1a626331 	.word	0x1a626331
 8008754:	3dd0b461 	.word	0x3dd0b461
 8008758:	1a600000 	.word	0x1a600000
 800875c:	3dd0b461 	.word	0x3dd0b461
 8008760:	2e037073 	.word	0x2e037073
 8008764:	3ba3198a 	.word	0x3ba3198a
 8008768:	6dc9c883 	.word	0x6dc9c883
 800876c:	3fe45f30 	.word	0x3fe45f30
 8008770:	2e000000 	.word	0x2e000000
 8008774:	3ba3198a 	.word	0x3ba3198a
 8008778:	252049c1 	.word	0x252049c1
 800877c:	397b839a 	.word	0x397b839a
 8008780:	3fe921fb 	.word	0x3fe921fb
 8008784:	4002d97b 	.word	0x4002d97b
 8008788:	3ff921fb 	.word	0x3ff921fb
 800878c:	413921fb 	.word	0x413921fb
 8008790:	3fe00000 	.word	0x3fe00000
 8008794:	08009138 	.word	0x08009138
 8008798:	7fefffff 	.word	0x7fefffff
 800879c:	ea4f 5628 	mov.w	r6, r8, asr #20
 80087a0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80087a4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80087a8:	4620      	mov	r0, r4
 80087aa:	460d      	mov	r5, r1
 80087ac:	f7f8 f96a 	bl	8000a84 <__aeabi_d2iz>
 80087b0:	f7f7 fe64 	bl	800047c <__aeabi_i2d>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4620      	mov	r0, r4
 80087ba:	4629      	mov	r1, r5
 80087bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80087c0:	f7f7 fd0e 	bl	80001e0 <__aeabi_dsub>
 80087c4:	4b21      	ldr	r3, [pc, #132]	; (800884c <__ieee754_rem_pio2+0x404>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	f7f7 fec2 	bl	8000550 <__aeabi_dmul>
 80087cc:	460d      	mov	r5, r1
 80087ce:	4604      	mov	r4, r0
 80087d0:	f7f8 f958 	bl	8000a84 <__aeabi_d2iz>
 80087d4:	f7f7 fe52 	bl	800047c <__aeabi_i2d>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4620      	mov	r0, r4
 80087de:	4629      	mov	r1, r5
 80087e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80087e4:	f7f7 fcfc 	bl	80001e0 <__aeabi_dsub>
 80087e8:	4b18      	ldr	r3, [pc, #96]	; (800884c <__ieee754_rem_pio2+0x404>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	f7f7 feb0 	bl	8000550 <__aeabi_dmul>
 80087f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80087f4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80087f8:	2703      	movs	r7, #3
 80087fa:	2400      	movs	r4, #0
 80087fc:	2500      	movs	r5, #0
 80087fe:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8008802:	4622      	mov	r2, r4
 8008804:	462b      	mov	r3, r5
 8008806:	46b9      	mov	r9, r7
 8008808:	3f01      	subs	r7, #1
 800880a:	f7f8 f909 	bl	8000a20 <__aeabi_dcmpeq>
 800880e:	2800      	cmp	r0, #0
 8008810:	d1f5      	bne.n	80087fe <__ieee754_rem_pio2+0x3b6>
 8008812:	4b0f      	ldr	r3, [pc, #60]	; (8008850 <__ieee754_rem_pio2+0x408>)
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	2302      	movs	r3, #2
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	4632      	mov	r2, r6
 800881c:	464b      	mov	r3, r9
 800881e:	4651      	mov	r1, sl
 8008820:	a804      	add	r0, sp, #16
 8008822:	f000 f821 	bl	8008868 <__kernel_rem_pio2>
 8008826:	9b02      	ldr	r3, [sp, #8]
 8008828:	2b00      	cmp	r3, #0
 800882a:	4683      	mov	fp, r0
 800882c:	f6bf ae4c 	bge.w	80084c8 <__ieee754_rem_pio2+0x80>
 8008830:	e9da 2100 	ldrd	r2, r1, [sl]
 8008834:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008838:	e9ca 2300 	strd	r2, r3, [sl]
 800883c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008840:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008844:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008848:	e73f      	b.n	80086ca <__ieee754_rem_pio2+0x282>
 800884a:	bf00      	nop
 800884c:	41700000 	.word	0x41700000
 8008850:	080091b8 	.word	0x080091b8

08008854 <fabs>:
 8008854:	ec51 0b10 	vmov	r0, r1, d0
 8008858:	ee10 2a10 	vmov	r2, s0
 800885c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008860:	ec43 2b10 	vmov	d0, r2, r3
 8008864:	4770      	bx	lr
	...

08008868 <__kernel_rem_pio2>:
 8008868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886c:	ed2d 8b02 	vpush	{d8}
 8008870:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008874:	f112 0f14 	cmn.w	r2, #20
 8008878:	9306      	str	r3, [sp, #24]
 800887a:	9104      	str	r1, [sp, #16]
 800887c:	4bc2      	ldr	r3, [pc, #776]	; (8008b88 <__kernel_rem_pio2+0x320>)
 800887e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008880:	9009      	str	r0, [sp, #36]	; 0x24
 8008882:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	9b06      	ldr	r3, [sp, #24]
 800888a:	f103 33ff 	add.w	r3, r3, #4294967295
 800888e:	bfa8      	it	ge
 8008890:	1ed4      	subge	r4, r2, #3
 8008892:	9305      	str	r3, [sp, #20]
 8008894:	bfb2      	itee	lt
 8008896:	2400      	movlt	r4, #0
 8008898:	2318      	movge	r3, #24
 800889a:	fb94 f4f3 	sdivge	r4, r4, r3
 800889e:	f06f 0317 	mvn.w	r3, #23
 80088a2:	fb04 3303 	mla	r3, r4, r3, r3
 80088a6:	eb03 0a02 	add.w	sl, r3, r2
 80088aa:	9b00      	ldr	r3, [sp, #0]
 80088ac:	9a05      	ldr	r2, [sp, #20]
 80088ae:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008b78 <__kernel_rem_pio2+0x310>
 80088b2:	eb03 0802 	add.w	r8, r3, r2
 80088b6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80088b8:	1aa7      	subs	r7, r4, r2
 80088ba:	ae20      	add	r6, sp, #128	; 0x80
 80088bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80088c0:	2500      	movs	r5, #0
 80088c2:	4545      	cmp	r5, r8
 80088c4:	dd13      	ble.n	80088ee <__kernel_rem_pio2+0x86>
 80088c6:	9b06      	ldr	r3, [sp, #24]
 80088c8:	aa20      	add	r2, sp, #128	; 0x80
 80088ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80088ce:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80088d2:	f04f 0800 	mov.w	r8, #0
 80088d6:	9b00      	ldr	r3, [sp, #0]
 80088d8:	4598      	cmp	r8, r3
 80088da:	dc31      	bgt.n	8008940 <__kernel_rem_pio2+0xd8>
 80088dc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008b78 <__kernel_rem_pio2+0x310>
 80088e0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80088e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80088e8:	462f      	mov	r7, r5
 80088ea:	2600      	movs	r6, #0
 80088ec:	e01b      	b.n	8008926 <__kernel_rem_pio2+0xbe>
 80088ee:	42ef      	cmn	r7, r5
 80088f0:	d407      	bmi.n	8008902 <__kernel_rem_pio2+0x9a>
 80088f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80088f6:	f7f7 fdc1 	bl	800047c <__aeabi_i2d>
 80088fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80088fe:	3501      	adds	r5, #1
 8008900:	e7df      	b.n	80088c2 <__kernel_rem_pio2+0x5a>
 8008902:	ec51 0b18 	vmov	r0, r1, d8
 8008906:	e7f8      	b.n	80088fa <__kernel_rem_pio2+0x92>
 8008908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800890c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008910:	f7f7 fe1e 	bl	8000550 <__aeabi_dmul>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800891c:	f7f7 fc62 	bl	80001e4 <__adddf3>
 8008920:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008924:	3601      	adds	r6, #1
 8008926:	9b05      	ldr	r3, [sp, #20]
 8008928:	429e      	cmp	r6, r3
 800892a:	f1a7 0708 	sub.w	r7, r7, #8
 800892e:	ddeb      	ble.n	8008908 <__kernel_rem_pio2+0xa0>
 8008930:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008934:	f108 0801 	add.w	r8, r8, #1
 8008938:	ecab 7b02 	vstmia	fp!, {d7}
 800893c:	3508      	adds	r5, #8
 800893e:	e7ca      	b.n	80088d6 <__kernel_rem_pio2+0x6e>
 8008940:	9b00      	ldr	r3, [sp, #0]
 8008942:	aa0c      	add	r2, sp, #48	; 0x30
 8008944:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008948:	930b      	str	r3, [sp, #44]	; 0x2c
 800894a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800894c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008950:	9c00      	ldr	r4, [sp, #0]
 8008952:	930a      	str	r3, [sp, #40]	; 0x28
 8008954:	00e3      	lsls	r3, r4, #3
 8008956:	9308      	str	r3, [sp, #32]
 8008958:	ab98      	add	r3, sp, #608	; 0x260
 800895a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800895e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008962:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008966:	ab70      	add	r3, sp, #448	; 0x1c0
 8008968:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800896c:	46c3      	mov	fp, r8
 800896e:	46a1      	mov	r9, r4
 8008970:	f1b9 0f00 	cmp.w	r9, #0
 8008974:	f1a5 0508 	sub.w	r5, r5, #8
 8008978:	dc77      	bgt.n	8008a6a <__kernel_rem_pio2+0x202>
 800897a:	ec47 6b10 	vmov	d0, r6, r7
 800897e:	4650      	mov	r0, sl
 8008980:	f000 fac2 	bl	8008f08 <scalbn>
 8008984:	ec57 6b10 	vmov	r6, r7, d0
 8008988:	2200      	movs	r2, #0
 800898a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800898e:	ee10 0a10 	vmov	r0, s0
 8008992:	4639      	mov	r1, r7
 8008994:	f7f7 fddc 	bl	8000550 <__aeabi_dmul>
 8008998:	ec41 0b10 	vmov	d0, r0, r1
 800899c:	f000 fb34 	bl	8009008 <floor>
 80089a0:	4b7a      	ldr	r3, [pc, #488]	; (8008b8c <__kernel_rem_pio2+0x324>)
 80089a2:	ec51 0b10 	vmov	r0, r1, d0
 80089a6:	2200      	movs	r2, #0
 80089a8:	f7f7 fdd2 	bl	8000550 <__aeabi_dmul>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	4630      	mov	r0, r6
 80089b2:	4639      	mov	r1, r7
 80089b4:	f7f7 fc14 	bl	80001e0 <__aeabi_dsub>
 80089b8:	460f      	mov	r7, r1
 80089ba:	4606      	mov	r6, r0
 80089bc:	f7f8 f862 	bl	8000a84 <__aeabi_d2iz>
 80089c0:	9002      	str	r0, [sp, #8]
 80089c2:	f7f7 fd5b 	bl	800047c <__aeabi_i2d>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	4630      	mov	r0, r6
 80089cc:	4639      	mov	r1, r7
 80089ce:	f7f7 fc07 	bl	80001e0 <__aeabi_dsub>
 80089d2:	f1ba 0f00 	cmp.w	sl, #0
 80089d6:	4606      	mov	r6, r0
 80089d8:	460f      	mov	r7, r1
 80089da:	dd6d      	ble.n	8008ab8 <__kernel_rem_pio2+0x250>
 80089dc:	1e61      	subs	r1, r4, #1
 80089de:	ab0c      	add	r3, sp, #48	; 0x30
 80089e0:	9d02      	ldr	r5, [sp, #8]
 80089e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80089e6:	f1ca 0018 	rsb	r0, sl, #24
 80089ea:	fa43 f200 	asr.w	r2, r3, r0
 80089ee:	4415      	add	r5, r2
 80089f0:	4082      	lsls	r2, r0
 80089f2:	1a9b      	subs	r3, r3, r2
 80089f4:	aa0c      	add	r2, sp, #48	; 0x30
 80089f6:	9502      	str	r5, [sp, #8]
 80089f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80089fc:	f1ca 0217 	rsb	r2, sl, #23
 8008a00:	fa43 fb02 	asr.w	fp, r3, r2
 8008a04:	f1bb 0f00 	cmp.w	fp, #0
 8008a08:	dd65      	ble.n	8008ad6 <__kernel_rem_pio2+0x26e>
 8008a0a:	9b02      	ldr	r3, [sp, #8]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	3301      	adds	r3, #1
 8008a10:	9302      	str	r3, [sp, #8]
 8008a12:	4615      	mov	r5, r2
 8008a14:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008a18:	4294      	cmp	r4, r2
 8008a1a:	f300 809f 	bgt.w	8008b5c <__kernel_rem_pio2+0x2f4>
 8008a1e:	f1ba 0f00 	cmp.w	sl, #0
 8008a22:	dd07      	ble.n	8008a34 <__kernel_rem_pio2+0x1cc>
 8008a24:	f1ba 0f01 	cmp.w	sl, #1
 8008a28:	f000 80c1 	beq.w	8008bae <__kernel_rem_pio2+0x346>
 8008a2c:	f1ba 0f02 	cmp.w	sl, #2
 8008a30:	f000 80c7 	beq.w	8008bc2 <__kernel_rem_pio2+0x35a>
 8008a34:	f1bb 0f02 	cmp.w	fp, #2
 8008a38:	d14d      	bne.n	8008ad6 <__kernel_rem_pio2+0x26e>
 8008a3a:	4632      	mov	r2, r6
 8008a3c:	463b      	mov	r3, r7
 8008a3e:	4954      	ldr	r1, [pc, #336]	; (8008b90 <__kernel_rem_pio2+0x328>)
 8008a40:	2000      	movs	r0, #0
 8008a42:	f7f7 fbcd 	bl	80001e0 <__aeabi_dsub>
 8008a46:	4606      	mov	r6, r0
 8008a48:	460f      	mov	r7, r1
 8008a4a:	2d00      	cmp	r5, #0
 8008a4c:	d043      	beq.n	8008ad6 <__kernel_rem_pio2+0x26e>
 8008a4e:	4650      	mov	r0, sl
 8008a50:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008b80 <__kernel_rem_pio2+0x318>
 8008a54:	f000 fa58 	bl	8008f08 <scalbn>
 8008a58:	4630      	mov	r0, r6
 8008a5a:	4639      	mov	r1, r7
 8008a5c:	ec53 2b10 	vmov	r2, r3, d0
 8008a60:	f7f7 fbbe 	bl	80001e0 <__aeabi_dsub>
 8008a64:	4606      	mov	r6, r0
 8008a66:	460f      	mov	r7, r1
 8008a68:	e035      	b.n	8008ad6 <__kernel_rem_pio2+0x26e>
 8008a6a:	4b4a      	ldr	r3, [pc, #296]	; (8008b94 <__kernel_rem_pio2+0x32c>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	4630      	mov	r0, r6
 8008a70:	4639      	mov	r1, r7
 8008a72:	f7f7 fd6d 	bl	8000550 <__aeabi_dmul>
 8008a76:	f7f8 f805 	bl	8000a84 <__aeabi_d2iz>
 8008a7a:	f7f7 fcff 	bl	800047c <__aeabi_i2d>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	460b      	mov	r3, r1
 8008a82:	ec43 2b18 	vmov	d8, r2, r3
 8008a86:	4b44      	ldr	r3, [pc, #272]	; (8008b98 <__kernel_rem_pio2+0x330>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f7f7 fd61 	bl	8000550 <__aeabi_dmul>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	460b      	mov	r3, r1
 8008a92:	4630      	mov	r0, r6
 8008a94:	4639      	mov	r1, r7
 8008a96:	f7f7 fba3 	bl	80001e0 <__aeabi_dsub>
 8008a9a:	f7f7 fff3 	bl	8000a84 <__aeabi_d2iz>
 8008a9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008aa2:	f84b 0b04 	str.w	r0, [fp], #4
 8008aa6:	ec51 0b18 	vmov	r0, r1, d8
 8008aaa:	f7f7 fb9b 	bl	80001e4 <__adddf3>
 8008aae:	f109 39ff 	add.w	r9, r9, #4294967295
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	460f      	mov	r7, r1
 8008ab6:	e75b      	b.n	8008970 <__kernel_rem_pio2+0x108>
 8008ab8:	d106      	bne.n	8008ac8 <__kernel_rem_pio2+0x260>
 8008aba:	1e63      	subs	r3, r4, #1
 8008abc:	aa0c      	add	r2, sp, #48	; 0x30
 8008abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ac2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8008ac6:	e79d      	b.n	8008a04 <__kernel_rem_pio2+0x19c>
 8008ac8:	4b34      	ldr	r3, [pc, #208]	; (8008b9c <__kernel_rem_pio2+0x334>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	f7f7 ffc6 	bl	8000a5c <__aeabi_dcmpge>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d140      	bne.n	8008b56 <__kernel_rem_pio2+0x2ee>
 8008ad4:	4683      	mov	fp, r0
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4630      	mov	r0, r6
 8008adc:	4639      	mov	r1, r7
 8008ade:	f7f7 ff9f 	bl	8000a20 <__aeabi_dcmpeq>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	f000 80c1 	beq.w	8008c6a <__kernel_rem_pio2+0x402>
 8008ae8:	1e65      	subs	r5, r4, #1
 8008aea:	462b      	mov	r3, r5
 8008aec:	2200      	movs	r2, #0
 8008aee:	9900      	ldr	r1, [sp, #0]
 8008af0:	428b      	cmp	r3, r1
 8008af2:	da6d      	bge.n	8008bd0 <__kernel_rem_pio2+0x368>
 8008af4:	2a00      	cmp	r2, #0
 8008af6:	f000 808a 	beq.w	8008c0e <__kernel_rem_pio2+0x3a6>
 8008afa:	ab0c      	add	r3, sp, #48	; 0x30
 8008afc:	f1aa 0a18 	sub.w	sl, sl, #24
 8008b00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 80ae 	beq.w	8008c66 <__kernel_rem_pio2+0x3fe>
 8008b0a:	4650      	mov	r0, sl
 8008b0c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008b80 <__kernel_rem_pio2+0x318>
 8008b10:	f000 f9fa 	bl	8008f08 <scalbn>
 8008b14:	1c6b      	adds	r3, r5, #1
 8008b16:	00da      	lsls	r2, r3, #3
 8008b18:	9205      	str	r2, [sp, #20]
 8008b1a:	ec57 6b10 	vmov	r6, r7, d0
 8008b1e:	aa70      	add	r2, sp, #448	; 0x1c0
 8008b20:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008b94 <__kernel_rem_pio2+0x32c>
 8008b24:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8008b28:	462c      	mov	r4, r5
 8008b2a:	f04f 0800 	mov.w	r8, #0
 8008b2e:	2c00      	cmp	r4, #0
 8008b30:	f280 80d4 	bge.w	8008cdc <__kernel_rem_pio2+0x474>
 8008b34:	462c      	mov	r4, r5
 8008b36:	2c00      	cmp	r4, #0
 8008b38:	f2c0 8102 	blt.w	8008d40 <__kernel_rem_pio2+0x4d8>
 8008b3c:	4b18      	ldr	r3, [pc, #96]	; (8008ba0 <__kernel_rem_pio2+0x338>)
 8008b3e:	461e      	mov	r6, r3
 8008b40:	ab70      	add	r3, sp, #448	; 0x1c0
 8008b42:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8008b46:	1b2b      	subs	r3, r5, r4
 8008b48:	f04f 0900 	mov.w	r9, #0
 8008b4c:	f04f 0a00 	mov.w	sl, #0
 8008b50:	2700      	movs	r7, #0
 8008b52:	9306      	str	r3, [sp, #24]
 8008b54:	e0e6      	b.n	8008d24 <__kernel_rem_pio2+0x4bc>
 8008b56:	f04f 0b02 	mov.w	fp, #2
 8008b5a:	e756      	b.n	8008a0a <__kernel_rem_pio2+0x1a2>
 8008b5c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b60:	bb05      	cbnz	r5, 8008ba4 <__kernel_rem_pio2+0x33c>
 8008b62:	b123      	cbz	r3, 8008b6e <__kernel_rem_pio2+0x306>
 8008b64:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008b68:	f8c8 3000 	str.w	r3, [r8]
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	3201      	adds	r2, #1
 8008b70:	f108 0804 	add.w	r8, r8, #4
 8008b74:	461d      	mov	r5, r3
 8008b76:	e74f      	b.n	8008a18 <__kernel_rem_pio2+0x1b0>
	...
 8008b84:	3ff00000 	.word	0x3ff00000
 8008b88:	08009300 	.word	0x08009300
 8008b8c:	40200000 	.word	0x40200000
 8008b90:	3ff00000 	.word	0x3ff00000
 8008b94:	3e700000 	.word	0x3e700000
 8008b98:	41700000 	.word	0x41700000
 8008b9c:	3fe00000 	.word	0x3fe00000
 8008ba0:	080092c0 	.word	0x080092c0
 8008ba4:	1acb      	subs	r3, r1, r3
 8008ba6:	f8c8 3000 	str.w	r3, [r8]
 8008baa:	462b      	mov	r3, r5
 8008bac:	e7df      	b.n	8008b6e <__kernel_rem_pio2+0x306>
 8008bae:	1e62      	subs	r2, r4, #1
 8008bb0:	ab0c      	add	r3, sp, #48	; 0x30
 8008bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008bba:	a90c      	add	r1, sp, #48	; 0x30
 8008bbc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008bc0:	e738      	b.n	8008a34 <__kernel_rem_pio2+0x1cc>
 8008bc2:	1e62      	subs	r2, r4, #1
 8008bc4:	ab0c      	add	r3, sp, #48	; 0x30
 8008bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bca:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008bce:	e7f4      	b.n	8008bba <__kernel_rem_pio2+0x352>
 8008bd0:	a90c      	add	r1, sp, #48	; 0x30
 8008bd2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	430a      	orrs	r2, r1
 8008bda:	e788      	b.n	8008aee <__kernel_rem_pio2+0x286>
 8008bdc:	3301      	adds	r3, #1
 8008bde:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008be2:	2900      	cmp	r1, #0
 8008be4:	d0fa      	beq.n	8008bdc <__kernel_rem_pio2+0x374>
 8008be6:	9a08      	ldr	r2, [sp, #32]
 8008be8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8008bec:	446a      	add	r2, sp
 8008bee:	3a98      	subs	r2, #152	; 0x98
 8008bf0:	9208      	str	r2, [sp, #32]
 8008bf2:	9a06      	ldr	r2, [sp, #24]
 8008bf4:	a920      	add	r1, sp, #128	; 0x80
 8008bf6:	18a2      	adds	r2, r4, r2
 8008bf8:	18e3      	adds	r3, r4, r3
 8008bfa:	f104 0801 	add.w	r8, r4, #1
 8008bfe:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008c02:	9302      	str	r3, [sp, #8]
 8008c04:	9b02      	ldr	r3, [sp, #8]
 8008c06:	4543      	cmp	r3, r8
 8008c08:	da04      	bge.n	8008c14 <__kernel_rem_pio2+0x3ac>
 8008c0a:	461c      	mov	r4, r3
 8008c0c:	e6a2      	b.n	8008954 <__kernel_rem_pio2+0xec>
 8008c0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c10:	2301      	movs	r3, #1
 8008c12:	e7e4      	b.n	8008bde <__kernel_rem_pio2+0x376>
 8008c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c16:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008c1a:	f7f7 fc2f 	bl	800047c <__aeabi_i2d>
 8008c1e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c24:	46ab      	mov	fp, r5
 8008c26:	461c      	mov	r4, r3
 8008c28:	f04f 0900 	mov.w	r9, #0
 8008c2c:	2600      	movs	r6, #0
 8008c2e:	2700      	movs	r7, #0
 8008c30:	9b05      	ldr	r3, [sp, #20]
 8008c32:	4599      	cmp	r9, r3
 8008c34:	dd06      	ble.n	8008c44 <__kernel_rem_pio2+0x3dc>
 8008c36:	9b08      	ldr	r3, [sp, #32]
 8008c38:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008c3c:	f108 0801 	add.w	r8, r8, #1
 8008c40:	9308      	str	r3, [sp, #32]
 8008c42:	e7df      	b.n	8008c04 <__kernel_rem_pio2+0x39c>
 8008c44:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008c48:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008c4c:	f7f7 fc80 	bl	8000550 <__aeabi_dmul>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	4630      	mov	r0, r6
 8008c56:	4639      	mov	r1, r7
 8008c58:	f7f7 fac4 	bl	80001e4 <__adddf3>
 8008c5c:	f109 0901 	add.w	r9, r9, #1
 8008c60:	4606      	mov	r6, r0
 8008c62:	460f      	mov	r7, r1
 8008c64:	e7e4      	b.n	8008c30 <__kernel_rem_pio2+0x3c8>
 8008c66:	3d01      	subs	r5, #1
 8008c68:	e747      	b.n	8008afa <__kernel_rem_pio2+0x292>
 8008c6a:	ec47 6b10 	vmov	d0, r6, r7
 8008c6e:	f1ca 0000 	rsb	r0, sl, #0
 8008c72:	f000 f949 	bl	8008f08 <scalbn>
 8008c76:	ec57 6b10 	vmov	r6, r7, d0
 8008c7a:	4ba0      	ldr	r3, [pc, #640]	; (8008efc <__kernel_rem_pio2+0x694>)
 8008c7c:	ee10 0a10 	vmov	r0, s0
 8008c80:	2200      	movs	r2, #0
 8008c82:	4639      	mov	r1, r7
 8008c84:	f7f7 feea 	bl	8000a5c <__aeabi_dcmpge>
 8008c88:	b1f8      	cbz	r0, 8008cca <__kernel_rem_pio2+0x462>
 8008c8a:	4b9d      	ldr	r3, [pc, #628]	; (8008f00 <__kernel_rem_pio2+0x698>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4630      	mov	r0, r6
 8008c90:	4639      	mov	r1, r7
 8008c92:	f7f7 fc5d 	bl	8000550 <__aeabi_dmul>
 8008c96:	f7f7 fef5 	bl	8000a84 <__aeabi_d2iz>
 8008c9a:	4680      	mov	r8, r0
 8008c9c:	f7f7 fbee 	bl	800047c <__aeabi_i2d>
 8008ca0:	4b96      	ldr	r3, [pc, #600]	; (8008efc <__kernel_rem_pio2+0x694>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f7f7 fc54 	bl	8000550 <__aeabi_dmul>
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4602      	mov	r2, r0
 8008cac:	4639      	mov	r1, r7
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f7f7 fa96 	bl	80001e0 <__aeabi_dsub>
 8008cb4:	f7f7 fee6 	bl	8000a84 <__aeabi_d2iz>
 8008cb8:	1c65      	adds	r5, r4, #1
 8008cba:	ab0c      	add	r3, sp, #48	; 0x30
 8008cbc:	f10a 0a18 	add.w	sl, sl, #24
 8008cc0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008cc4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008cc8:	e71f      	b.n	8008b0a <__kernel_rem_pio2+0x2a2>
 8008cca:	4630      	mov	r0, r6
 8008ccc:	4639      	mov	r1, r7
 8008cce:	f7f7 fed9 	bl	8000a84 <__aeabi_d2iz>
 8008cd2:	ab0c      	add	r3, sp, #48	; 0x30
 8008cd4:	4625      	mov	r5, r4
 8008cd6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008cda:	e716      	b.n	8008b0a <__kernel_rem_pio2+0x2a2>
 8008cdc:	ab0c      	add	r3, sp, #48	; 0x30
 8008cde:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008ce2:	f7f7 fbcb 	bl	800047c <__aeabi_i2d>
 8008ce6:	4632      	mov	r2, r6
 8008ce8:	463b      	mov	r3, r7
 8008cea:	f7f7 fc31 	bl	8000550 <__aeabi_dmul>
 8008cee:	4642      	mov	r2, r8
 8008cf0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008cf4:	464b      	mov	r3, r9
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	4639      	mov	r1, r7
 8008cfa:	f7f7 fc29 	bl	8000550 <__aeabi_dmul>
 8008cfe:	3c01      	subs	r4, #1
 8008d00:	4606      	mov	r6, r0
 8008d02:	460f      	mov	r7, r1
 8008d04:	e713      	b.n	8008b2e <__kernel_rem_pio2+0x2c6>
 8008d06:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8008d0a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8008d0e:	f7f7 fc1f 	bl	8000550 <__aeabi_dmul>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	4648      	mov	r0, r9
 8008d18:	4651      	mov	r1, sl
 8008d1a:	f7f7 fa63 	bl	80001e4 <__adddf3>
 8008d1e:	3701      	adds	r7, #1
 8008d20:	4681      	mov	r9, r0
 8008d22:	468a      	mov	sl, r1
 8008d24:	9b00      	ldr	r3, [sp, #0]
 8008d26:	429f      	cmp	r7, r3
 8008d28:	dc02      	bgt.n	8008d30 <__kernel_rem_pio2+0x4c8>
 8008d2a:	9b06      	ldr	r3, [sp, #24]
 8008d2c:	429f      	cmp	r7, r3
 8008d2e:	ddea      	ble.n	8008d06 <__kernel_rem_pio2+0x49e>
 8008d30:	9a06      	ldr	r2, [sp, #24]
 8008d32:	ab48      	add	r3, sp, #288	; 0x120
 8008d34:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008d38:	e9c6 9a00 	strd	r9, sl, [r6]
 8008d3c:	3c01      	subs	r4, #1
 8008d3e:	e6fa      	b.n	8008b36 <__kernel_rem_pio2+0x2ce>
 8008d40:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	dc0b      	bgt.n	8008d5e <__kernel_rem_pio2+0x4f6>
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	dc39      	bgt.n	8008dbe <__kernel_rem_pio2+0x556>
 8008d4a:	d05d      	beq.n	8008e08 <__kernel_rem_pio2+0x5a0>
 8008d4c:	9b02      	ldr	r3, [sp, #8]
 8008d4e:	f003 0007 	and.w	r0, r3, #7
 8008d52:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008d56:	ecbd 8b02 	vpop	{d8}
 8008d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d1f3      	bne.n	8008d4c <__kernel_rem_pio2+0x4e4>
 8008d64:	9b05      	ldr	r3, [sp, #20]
 8008d66:	9500      	str	r5, [sp, #0]
 8008d68:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008d6c:	eb0d 0403 	add.w	r4, sp, r3
 8008d70:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8008d74:	46a2      	mov	sl, r4
 8008d76:	9b00      	ldr	r3, [sp, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f1aa 0a08 	sub.w	sl, sl, #8
 8008d7e:	dc69      	bgt.n	8008e54 <__kernel_rem_pio2+0x5ec>
 8008d80:	46aa      	mov	sl, r5
 8008d82:	f1ba 0f01 	cmp.w	sl, #1
 8008d86:	f1a4 0408 	sub.w	r4, r4, #8
 8008d8a:	f300 8083 	bgt.w	8008e94 <__kernel_rem_pio2+0x62c>
 8008d8e:	9c05      	ldr	r4, [sp, #20]
 8008d90:	ab48      	add	r3, sp, #288	; 0x120
 8008d92:	441c      	add	r4, r3
 8008d94:	2000      	movs	r0, #0
 8008d96:	2100      	movs	r1, #0
 8008d98:	2d01      	cmp	r5, #1
 8008d9a:	f300 809a 	bgt.w	8008ed2 <__kernel_rem_pio2+0x66a>
 8008d9e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8008da2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008da6:	f1bb 0f00 	cmp.w	fp, #0
 8008daa:	f040 8098 	bne.w	8008ede <__kernel_rem_pio2+0x676>
 8008dae:	9b04      	ldr	r3, [sp, #16]
 8008db0:	e9c3 7800 	strd	r7, r8, [r3]
 8008db4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008db8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008dbc:	e7c6      	b.n	8008d4c <__kernel_rem_pio2+0x4e4>
 8008dbe:	9e05      	ldr	r6, [sp, #20]
 8008dc0:	ab48      	add	r3, sp, #288	; 0x120
 8008dc2:	441e      	add	r6, r3
 8008dc4:	462c      	mov	r4, r5
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	2100      	movs	r1, #0
 8008dca:	2c00      	cmp	r4, #0
 8008dcc:	da33      	bge.n	8008e36 <__kernel_rem_pio2+0x5ce>
 8008dce:	f1bb 0f00 	cmp.w	fp, #0
 8008dd2:	d036      	beq.n	8008e42 <__kernel_rem_pio2+0x5da>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dda:	9c04      	ldr	r4, [sp, #16]
 8008ddc:	e9c4 2300 	strd	r2, r3, [r4]
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008de8:	f7f7 f9fa 	bl	80001e0 <__aeabi_dsub>
 8008dec:	ae4a      	add	r6, sp, #296	; 0x128
 8008dee:	2401      	movs	r4, #1
 8008df0:	42a5      	cmp	r5, r4
 8008df2:	da29      	bge.n	8008e48 <__kernel_rem_pio2+0x5e0>
 8008df4:	f1bb 0f00 	cmp.w	fp, #0
 8008df8:	d002      	beq.n	8008e00 <__kernel_rem_pio2+0x598>
 8008dfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dfe:	4619      	mov	r1, r3
 8008e00:	9b04      	ldr	r3, [sp, #16]
 8008e02:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008e06:	e7a1      	b.n	8008d4c <__kernel_rem_pio2+0x4e4>
 8008e08:	9c05      	ldr	r4, [sp, #20]
 8008e0a:	ab48      	add	r3, sp, #288	; 0x120
 8008e0c:	441c      	add	r4, r3
 8008e0e:	2000      	movs	r0, #0
 8008e10:	2100      	movs	r1, #0
 8008e12:	2d00      	cmp	r5, #0
 8008e14:	da09      	bge.n	8008e2a <__kernel_rem_pio2+0x5c2>
 8008e16:	f1bb 0f00 	cmp.w	fp, #0
 8008e1a:	d002      	beq.n	8008e22 <__kernel_rem_pio2+0x5ba>
 8008e1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e20:	4619      	mov	r1, r3
 8008e22:	9b04      	ldr	r3, [sp, #16]
 8008e24:	e9c3 0100 	strd	r0, r1, [r3]
 8008e28:	e790      	b.n	8008d4c <__kernel_rem_pio2+0x4e4>
 8008e2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008e2e:	f7f7 f9d9 	bl	80001e4 <__adddf3>
 8008e32:	3d01      	subs	r5, #1
 8008e34:	e7ed      	b.n	8008e12 <__kernel_rem_pio2+0x5aa>
 8008e36:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008e3a:	f7f7 f9d3 	bl	80001e4 <__adddf3>
 8008e3e:	3c01      	subs	r4, #1
 8008e40:	e7c3      	b.n	8008dca <__kernel_rem_pio2+0x562>
 8008e42:	4602      	mov	r2, r0
 8008e44:	460b      	mov	r3, r1
 8008e46:	e7c8      	b.n	8008dda <__kernel_rem_pio2+0x572>
 8008e48:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008e4c:	f7f7 f9ca 	bl	80001e4 <__adddf3>
 8008e50:	3401      	adds	r4, #1
 8008e52:	e7cd      	b.n	8008df0 <__kernel_rem_pio2+0x588>
 8008e54:	e9da 8900 	ldrd	r8, r9, [sl]
 8008e58:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008e5c:	9b00      	ldr	r3, [sp, #0]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	4632      	mov	r2, r6
 8008e64:	463b      	mov	r3, r7
 8008e66:	4640      	mov	r0, r8
 8008e68:	4649      	mov	r1, r9
 8008e6a:	f7f7 f9bb 	bl	80001e4 <__adddf3>
 8008e6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	4640      	mov	r0, r8
 8008e78:	4649      	mov	r1, r9
 8008e7a:	f7f7 f9b1 	bl	80001e0 <__aeabi_dsub>
 8008e7e:	4632      	mov	r2, r6
 8008e80:	463b      	mov	r3, r7
 8008e82:	f7f7 f9af 	bl	80001e4 <__adddf3>
 8008e86:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008e8a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008e8e:	ed8a 7b00 	vstr	d7, [sl]
 8008e92:	e770      	b.n	8008d76 <__kernel_rem_pio2+0x50e>
 8008e94:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008e98:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008e9c:	4640      	mov	r0, r8
 8008e9e:	4632      	mov	r2, r6
 8008ea0:	463b      	mov	r3, r7
 8008ea2:	4649      	mov	r1, r9
 8008ea4:	f7f7 f99e 	bl	80001e4 <__adddf3>
 8008ea8:	e9cd 0100 	strd	r0, r1, [sp]
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	4649      	mov	r1, r9
 8008eb4:	f7f7 f994 	bl	80001e0 <__aeabi_dsub>
 8008eb8:	4632      	mov	r2, r6
 8008eba:	463b      	mov	r3, r7
 8008ebc:	f7f7 f992 	bl	80001e4 <__adddf3>
 8008ec0:	ed9d 7b00 	vldr	d7, [sp]
 8008ec4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008ec8:	ed84 7b00 	vstr	d7, [r4]
 8008ecc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ed0:	e757      	b.n	8008d82 <__kernel_rem_pio2+0x51a>
 8008ed2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008ed6:	f7f7 f985 	bl	80001e4 <__adddf3>
 8008eda:	3d01      	subs	r5, #1
 8008edc:	e75c      	b.n	8008d98 <__kernel_rem_pio2+0x530>
 8008ede:	9b04      	ldr	r3, [sp, #16]
 8008ee0:	9a04      	ldr	r2, [sp, #16]
 8008ee2:	601f      	str	r7, [r3, #0]
 8008ee4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008ee8:	605c      	str	r4, [r3, #4]
 8008eea:	609d      	str	r5, [r3, #8]
 8008eec:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008ef0:	60d3      	str	r3, [r2, #12]
 8008ef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ef6:	6110      	str	r0, [r2, #16]
 8008ef8:	6153      	str	r3, [r2, #20]
 8008efa:	e727      	b.n	8008d4c <__kernel_rem_pio2+0x4e4>
 8008efc:	41700000 	.word	0x41700000
 8008f00:	3e700000 	.word	0x3e700000
 8008f04:	00000000 	.word	0x00000000

08008f08 <scalbn>:
 8008f08:	b570      	push	{r4, r5, r6, lr}
 8008f0a:	ec55 4b10 	vmov	r4, r5, d0
 8008f0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008f12:	4606      	mov	r6, r0
 8008f14:	462b      	mov	r3, r5
 8008f16:	b999      	cbnz	r1, 8008f40 <scalbn+0x38>
 8008f18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008f1c:	4323      	orrs	r3, r4
 8008f1e:	d03f      	beq.n	8008fa0 <scalbn+0x98>
 8008f20:	4b35      	ldr	r3, [pc, #212]	; (8008ff8 <scalbn+0xf0>)
 8008f22:	4629      	mov	r1, r5
 8008f24:	ee10 0a10 	vmov	r0, s0
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f7f7 fb11 	bl	8000550 <__aeabi_dmul>
 8008f2e:	4b33      	ldr	r3, [pc, #204]	; (8008ffc <scalbn+0xf4>)
 8008f30:	429e      	cmp	r6, r3
 8008f32:	4604      	mov	r4, r0
 8008f34:	460d      	mov	r5, r1
 8008f36:	da10      	bge.n	8008f5a <scalbn+0x52>
 8008f38:	a327      	add	r3, pc, #156	; (adr r3, 8008fd8 <scalbn+0xd0>)
 8008f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3e:	e01f      	b.n	8008f80 <scalbn+0x78>
 8008f40:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008f44:	4291      	cmp	r1, r2
 8008f46:	d10c      	bne.n	8008f62 <scalbn+0x5a>
 8008f48:	ee10 2a10 	vmov	r2, s0
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	4629      	mov	r1, r5
 8008f50:	f7f7 f948 	bl	80001e4 <__adddf3>
 8008f54:	4604      	mov	r4, r0
 8008f56:	460d      	mov	r5, r1
 8008f58:	e022      	b.n	8008fa0 <scalbn+0x98>
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008f60:	3936      	subs	r1, #54	; 0x36
 8008f62:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008f66:	4296      	cmp	r6, r2
 8008f68:	dd0d      	ble.n	8008f86 <scalbn+0x7e>
 8008f6a:	2d00      	cmp	r5, #0
 8008f6c:	a11c      	add	r1, pc, #112	; (adr r1, 8008fe0 <scalbn+0xd8>)
 8008f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f72:	da02      	bge.n	8008f7a <scalbn+0x72>
 8008f74:	a11c      	add	r1, pc, #112	; (adr r1, 8008fe8 <scalbn+0xe0>)
 8008f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f7a:	a319      	add	r3, pc, #100	; (adr r3, 8008fe0 <scalbn+0xd8>)
 8008f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f80:	f7f7 fae6 	bl	8000550 <__aeabi_dmul>
 8008f84:	e7e6      	b.n	8008f54 <scalbn+0x4c>
 8008f86:	1872      	adds	r2, r6, r1
 8008f88:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008f8c:	428a      	cmp	r2, r1
 8008f8e:	dcec      	bgt.n	8008f6a <scalbn+0x62>
 8008f90:	2a00      	cmp	r2, #0
 8008f92:	dd08      	ble.n	8008fa6 <scalbn+0x9e>
 8008f94:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008fa0:	ec45 4b10 	vmov	d0, r4, r5
 8008fa4:	bd70      	pop	{r4, r5, r6, pc}
 8008fa6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008faa:	da08      	bge.n	8008fbe <scalbn+0xb6>
 8008fac:	2d00      	cmp	r5, #0
 8008fae:	a10a      	add	r1, pc, #40	; (adr r1, 8008fd8 <scalbn+0xd0>)
 8008fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fb4:	dac0      	bge.n	8008f38 <scalbn+0x30>
 8008fb6:	a10e      	add	r1, pc, #56	; (adr r1, 8008ff0 <scalbn+0xe8>)
 8008fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fbc:	e7bc      	b.n	8008f38 <scalbn+0x30>
 8008fbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008fc2:	3236      	adds	r2, #54	; 0x36
 8008fc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008fc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008fcc:	4620      	mov	r0, r4
 8008fce:	4b0c      	ldr	r3, [pc, #48]	; (8009000 <scalbn+0xf8>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	e7d5      	b.n	8008f80 <scalbn+0x78>
 8008fd4:	f3af 8000 	nop.w
 8008fd8:	c2f8f359 	.word	0xc2f8f359
 8008fdc:	01a56e1f 	.word	0x01a56e1f
 8008fe0:	8800759c 	.word	0x8800759c
 8008fe4:	7e37e43c 	.word	0x7e37e43c
 8008fe8:	8800759c 	.word	0x8800759c
 8008fec:	fe37e43c 	.word	0xfe37e43c
 8008ff0:	c2f8f359 	.word	0xc2f8f359
 8008ff4:	81a56e1f 	.word	0x81a56e1f
 8008ff8:	43500000 	.word	0x43500000
 8008ffc:	ffff3cb0 	.word	0xffff3cb0
 8009000:	3c900000 	.word	0x3c900000
 8009004:	00000000 	.word	0x00000000

08009008 <floor>:
 8009008:	ec51 0b10 	vmov	r0, r1, d0
 800900c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009014:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8009018:	2e13      	cmp	r6, #19
 800901a:	ee10 5a10 	vmov	r5, s0
 800901e:	ee10 8a10 	vmov	r8, s0
 8009022:	460c      	mov	r4, r1
 8009024:	dc31      	bgt.n	800908a <floor+0x82>
 8009026:	2e00      	cmp	r6, #0
 8009028:	da14      	bge.n	8009054 <floor+0x4c>
 800902a:	a333      	add	r3, pc, #204	; (adr r3, 80090f8 <floor+0xf0>)
 800902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009030:	f7f7 f8d8 	bl	80001e4 <__adddf3>
 8009034:	2200      	movs	r2, #0
 8009036:	2300      	movs	r3, #0
 8009038:	f7f7 fd1a 	bl	8000a70 <__aeabi_dcmpgt>
 800903c:	b138      	cbz	r0, 800904e <floor+0x46>
 800903e:	2c00      	cmp	r4, #0
 8009040:	da53      	bge.n	80090ea <floor+0xe2>
 8009042:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009046:	4325      	orrs	r5, r4
 8009048:	d052      	beq.n	80090f0 <floor+0xe8>
 800904a:	4c2d      	ldr	r4, [pc, #180]	; (8009100 <floor+0xf8>)
 800904c:	2500      	movs	r5, #0
 800904e:	4621      	mov	r1, r4
 8009050:	4628      	mov	r0, r5
 8009052:	e024      	b.n	800909e <floor+0x96>
 8009054:	4f2b      	ldr	r7, [pc, #172]	; (8009104 <floor+0xfc>)
 8009056:	4137      	asrs	r7, r6
 8009058:	ea01 0307 	and.w	r3, r1, r7
 800905c:	4303      	orrs	r3, r0
 800905e:	d01e      	beq.n	800909e <floor+0x96>
 8009060:	a325      	add	r3, pc, #148	; (adr r3, 80090f8 <floor+0xf0>)
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	f7f7 f8bd 	bl	80001e4 <__adddf3>
 800906a:	2200      	movs	r2, #0
 800906c:	2300      	movs	r3, #0
 800906e:	f7f7 fcff 	bl	8000a70 <__aeabi_dcmpgt>
 8009072:	2800      	cmp	r0, #0
 8009074:	d0eb      	beq.n	800904e <floor+0x46>
 8009076:	2c00      	cmp	r4, #0
 8009078:	bfbe      	ittt	lt
 800907a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800907e:	4133      	asrlt	r3, r6
 8009080:	18e4      	addlt	r4, r4, r3
 8009082:	ea24 0407 	bic.w	r4, r4, r7
 8009086:	2500      	movs	r5, #0
 8009088:	e7e1      	b.n	800904e <floor+0x46>
 800908a:	2e33      	cmp	r6, #51	; 0x33
 800908c:	dd0b      	ble.n	80090a6 <floor+0x9e>
 800908e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009092:	d104      	bne.n	800909e <floor+0x96>
 8009094:	ee10 2a10 	vmov	r2, s0
 8009098:	460b      	mov	r3, r1
 800909a:	f7f7 f8a3 	bl	80001e4 <__adddf3>
 800909e:	ec41 0b10 	vmov	d0, r0, r1
 80090a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80090aa:	f04f 37ff 	mov.w	r7, #4294967295
 80090ae:	40df      	lsrs	r7, r3
 80090b0:	4238      	tst	r0, r7
 80090b2:	d0f4      	beq.n	800909e <floor+0x96>
 80090b4:	a310      	add	r3, pc, #64	; (adr r3, 80090f8 <floor+0xf0>)
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f7f7 f893 	bl	80001e4 <__adddf3>
 80090be:	2200      	movs	r2, #0
 80090c0:	2300      	movs	r3, #0
 80090c2:	f7f7 fcd5 	bl	8000a70 <__aeabi_dcmpgt>
 80090c6:	2800      	cmp	r0, #0
 80090c8:	d0c1      	beq.n	800904e <floor+0x46>
 80090ca:	2c00      	cmp	r4, #0
 80090cc:	da0a      	bge.n	80090e4 <floor+0xdc>
 80090ce:	2e14      	cmp	r6, #20
 80090d0:	d101      	bne.n	80090d6 <floor+0xce>
 80090d2:	3401      	adds	r4, #1
 80090d4:	e006      	b.n	80090e4 <floor+0xdc>
 80090d6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80090da:	2301      	movs	r3, #1
 80090dc:	40b3      	lsls	r3, r6
 80090de:	441d      	add	r5, r3
 80090e0:	45a8      	cmp	r8, r5
 80090e2:	d8f6      	bhi.n	80090d2 <floor+0xca>
 80090e4:	ea25 0507 	bic.w	r5, r5, r7
 80090e8:	e7b1      	b.n	800904e <floor+0x46>
 80090ea:	2500      	movs	r5, #0
 80090ec:	462c      	mov	r4, r5
 80090ee:	e7ae      	b.n	800904e <floor+0x46>
 80090f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80090f4:	e7ab      	b.n	800904e <floor+0x46>
 80090f6:	bf00      	nop
 80090f8:	8800759c 	.word	0x8800759c
 80090fc:	7e37e43c 	.word	0x7e37e43c
 8009100:	bff00000 	.word	0xbff00000
 8009104:	000fffff 	.word	0x000fffff

08009108 <_init>:
 8009108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910a:	bf00      	nop
 800910c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800910e:	bc08      	pop	{r3}
 8009110:	469e      	mov	lr, r3
 8009112:	4770      	bx	lr

08009114 <_fini>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	bf00      	nop
 8009118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911a:	bc08      	pop	{r3}
 800911c:	469e      	mov	lr, r3
 800911e:	4770      	bx	lr
