
IIR_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008418  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080085b0  080085b0  000185b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087a0  080087a0  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  080087a0  080087a0  000187a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087a8  080087a8  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087a8  080087a8  000187a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087ac  080087ac  000187ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  080087b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000120c  200001c8  08008978  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013d4  08008978  000213d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e23e  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021ff  00000000  00000000  0002e4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  000306f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000931  00000000  00000000  00031308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017632  00000000  00000000  00031c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e789  00000000  00000000  0004926b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098da8  00000000  00000000  000579f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035cc  00000000  00000000  000f079c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f3d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000880  00000000  00000000  000f3dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  000f464b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001c8 	.word	0x200001c8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008598 	.word	0x08008598

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001cc 	.word	0x200001cc
 80001d4:	08008598 	.word	0x08008598

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b970 	b.w	8000eac <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9e08      	ldr	r6, [sp, #32]
 8000bea:	460d      	mov	r5, r1
 8000bec:	4604      	mov	r4, r0
 8000bee:	460f      	mov	r7, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14a      	bne.n	8000c8a <__udivmoddi4+0xa6>
 8000bf4:	428a      	cmp	r2, r1
 8000bf6:	4694      	mov	ip, r2
 8000bf8:	d965      	bls.n	8000cc6 <__udivmoddi4+0xe2>
 8000bfa:	fab2 f382 	clz	r3, r2
 8000bfe:	b143      	cbz	r3, 8000c12 <__udivmoddi4+0x2e>
 8000c00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c04:	f1c3 0220 	rsb	r2, r3, #32
 8000c08:	409f      	lsls	r7, r3
 8000c0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0e:	4317      	orrs	r7, r2
 8000c10:	409c      	lsls	r4, r3
 8000c12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c16:	fa1f f58c 	uxth.w	r5, ip
 8000c1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c1e:	0c22      	lsrs	r2, r4, #16
 8000c20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c28:	fb01 f005 	mul.w	r0, r1, r5
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	d90a      	bls.n	8000c46 <__udivmoddi4+0x62>
 8000c30:	eb1c 0202 	adds.w	r2, ip, r2
 8000c34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c38:	f080 811c 	bcs.w	8000e74 <__udivmoddi4+0x290>
 8000c3c:	4290      	cmp	r0, r2
 8000c3e:	f240 8119 	bls.w	8000e74 <__udivmoddi4+0x290>
 8000c42:	3902      	subs	r1, #2
 8000c44:	4462      	add	r2, ip
 8000c46:	1a12      	subs	r2, r2, r0
 8000c48:	b2a4      	uxth	r4, r4
 8000c4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c56:	fb00 f505 	mul.w	r5, r0, r5
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x90>
 8000c5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c62:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x294>
 8000c6a:	42a5      	cmp	r5, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x294>
 8000c70:	4464      	add	r4, ip
 8000c72:	3802      	subs	r0, #2
 8000c74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c78:	1b64      	subs	r4, r4, r5
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	b11e      	cbz	r6, 8000c86 <__udivmoddi4+0xa2>
 8000c7e:	40dc      	lsrs	r4, r3
 8000c80:	2300      	movs	r3, #0
 8000c82:	e9c6 4300 	strd	r4, r3, [r6]
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0xbc>
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	f000 80ed 	beq.w	8000e6e <__udivmoddi4+0x28a>
 8000c94:	2100      	movs	r1, #0
 8000c96:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca0:	fab3 f183 	clz	r1, r3
 8000ca4:	2900      	cmp	r1, #0
 8000ca6:	d149      	bne.n	8000d3c <__udivmoddi4+0x158>
 8000ca8:	42ab      	cmp	r3, r5
 8000caa:	d302      	bcc.n	8000cb2 <__udivmoddi4+0xce>
 8000cac:	4282      	cmp	r2, r0
 8000cae:	f200 80f8 	bhi.w	8000ea2 <__udivmoddi4+0x2be>
 8000cb2:	1a84      	subs	r4, r0, r2
 8000cb4:	eb65 0203 	sbc.w	r2, r5, r3
 8000cb8:	2001      	movs	r0, #1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d0e2      	beq.n	8000c86 <__udivmoddi4+0xa2>
 8000cc0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc4:	e7df      	b.n	8000c86 <__udivmoddi4+0xa2>
 8000cc6:	b902      	cbnz	r2, 8000cca <__udivmoddi4+0xe6>
 8000cc8:	deff      	udf	#255	; 0xff
 8000cca:	fab2 f382 	clz	r3, r2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f040 8090 	bne.w	8000df4 <__udivmoddi4+0x210>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	2101      	movs	r1, #1
 8000ce0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ce8:	0c22      	lsrs	r2, r4, #16
 8000cea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cee:	fb0e f005 	mul.w	r0, lr, r5
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x124>
 8000cf6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x122>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f200 80cb 	bhi.w	8000e9c <__udivmoddi4+0x2b8>
 8000d06:	4645      	mov	r5, r8
 8000d08:	1a12      	subs	r2, r2, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d10:	fb07 2210 	mls	r2, r7, r0, r2
 8000d14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d18:	fb0e fe00 	mul.w	lr, lr, r0
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x14e>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x14c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2c2>
 8000d30:	4610      	mov	r0, r2
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3a:	e79f      	b.n	8000c7c <__udivmoddi4+0x98>
 8000d3c:	f1c1 0720 	rsb	r7, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d52:	40fd      	lsrs	r5, r7
 8000d54:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d58:	4323      	orrs	r3, r4
 8000d5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	fb09 5518 	mls	r5, r9, r8, r5
 8000d66:	0c1c      	lsrs	r4, r3, #16
 8000d68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d6c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d70:	42a5      	cmp	r5, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b0>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2b4>
 8000d88:	42a5      	cmp	r5, r4
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2b4>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4464      	add	r4, ip
 8000d94:	1b64      	subs	r4, r4, r5
 8000d96:	b29d      	uxth	r5, r3
 8000d98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000da0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1da>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2ac>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2ac>
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	4464      	add	r4, ip
 8000dbe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc2:	fba3 9502 	umull	r9, r5, r3, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	42ac      	cmp	r4, r5
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46ae      	mov	lr, r5
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x29c>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x298>
 8000dd4:	b156      	cbz	r6, 8000dec <__udivmoddi4+0x208>
 8000dd6:	ebb0 0208 	subs.w	r2, r0, r8
 8000dda:	eb64 040e 	sbc.w	r4, r4, lr
 8000dde:	fa04 f707 	lsl.w	r7, r4, r7
 8000de2:	40ca      	lsrs	r2, r1
 8000de4:	40cc      	lsrs	r4, r1
 8000de6:	4317      	orrs	r7, r2
 8000de8:	e9c6 7400 	strd	r7, r4, [r6]
 8000dec:	4618      	mov	r0, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df4:	f1c3 0120 	rsb	r1, r3, #32
 8000df8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dfc:	fa20 f201 	lsr.w	r2, r0, r1
 8000e00:	fa25 f101 	lsr.w	r1, r5, r1
 8000e04:	409d      	lsls	r5, r3
 8000e06:	432a      	orrs	r2, r5
 8000e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0c:	fa1f fe8c 	uxth.w	lr, ip
 8000e10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e14:	fb07 1510 	mls	r5, r7, r0, r1
 8000e18:	0c11      	lsrs	r1, r2, #16
 8000e1a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e1e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e22:	428d      	cmp	r5, r1
 8000e24:	fa04 f403 	lsl.w	r4, r4, r3
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x258>
 8000e2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b0>
 8000e34:	428d      	cmp	r5, r1
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b0>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4461      	add	r1, ip
 8000e3c:	1b49      	subs	r1, r1, r5
 8000e3e:	b292      	uxth	r2, r2
 8000e40:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e44:	fb07 1115 	mls	r1, r7, r5, r1
 8000e48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e4c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e50:	4291      	cmp	r1, r2
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x282>
 8000e54:	eb1c 0202 	adds.w	r2, ip, r2
 8000e58:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2a8>
 8000e5e:	4291      	cmp	r1, r2
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2a8>
 8000e62:	3d02      	subs	r5, #2
 8000e64:	4462      	add	r2, ip
 8000e66:	1a52      	subs	r2, r2, r1
 8000e68:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0xfc>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e708      	b.n	8000c86 <__udivmoddi4+0xa2>
 8000e74:	4639      	mov	r1, r7
 8000e76:	e6e6      	b.n	8000c46 <__udivmoddi4+0x62>
 8000e78:	4610      	mov	r0, r2
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x90>
 8000e7c:	4548      	cmp	r0, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f0>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f0>
 8000e8c:	4645      	mov	r5, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x282>
 8000e90:	462b      	mov	r3, r5
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1da>
 8000e94:	4640      	mov	r0, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x258>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b0>
 8000e9c:	3d02      	subs	r5, #2
 8000e9e:	4462      	add	r2, ip
 8000ea0:	e732      	b.n	8000d08 <__udivmoddi4+0x124>
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e70a      	b.n	8000cbc <__udivmoddi4+0xd8>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x14e>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HAL_TIM_PWM_PulseFinishedCallback>:
float32_t estado7=1;
float32_t estado8=1;

volatile int flag_envio_datos = 0;
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
//No lo detenemos porque eso estaba dando un error pero dejamos la funcion
//HAL_TIM_PWM_Stop_DMA (&htim1, TIM_CHANNEL_1);
	flag_envio_datos = 1;
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]

}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000564 	.word	0x20000564

08000ed0 <Set_Pixel>:
uint8_t Datos_Pixel_F[Num_pixels][4];


//Me armo una funcion que setee cada LED por separado
void Set_Pixel(uint8_t n, uint8_t Verde, uint8_t Rojo, uint8_t Azul)
{
 8000ed0:	b490      	push	{r4, r7}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	4608      	mov	r0, r1
 8000eda:	4611      	mov	r1, r2
 8000edc:	461a      	mov	r2, r3
 8000ede:	4623      	mov	r3, r4
 8000ee0:	71fb      	strb	r3, [r7, #7]
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71bb      	strb	r3, [r7, #6]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	717b      	strb	r3, [r7, #5]
 8000eea:	4613      	mov	r3, r2
 8000eec:	713b      	strb	r3, [r7, #4]
	Datos_Pixel[n][0] = n;
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	490d      	ldr	r1, [pc, #52]	; (8000f28 <Set_Pixel+0x58>)
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	Datos_Pixel[n][1] = Verde;
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <Set_Pixel+0x58>)
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	79ba      	ldrb	r2, [r7, #6]
 8000f02:	705a      	strb	r2, [r3, #1]
	Datos_Pixel[n][2] = Rojo;
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <Set_Pixel+0x58>)
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	797a      	ldrb	r2, [r7, #5]
 8000f0e:	709a      	strb	r2, [r3, #2]
	Datos_Pixel[n][3] = Azul;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <Set_Pixel+0x58>)
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	793a      	ldrb	r2, [r7, #4]
 8000f1a:	70da      	strb	r2, [r3, #3]

}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc90      	pop	{r4, r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	200011cc 	.word	0x200011cc
 8000f2c:	00000000 	.word	0x00000000

08000f30 <Set_Brillo>:
//Me armo una funcion que controle el brillo
//float brillo=100; //La manejo en porcentaje
//encontre que es mejor manejarse con una funcion con curva suave. Uso la tangente

float brillo= 45;
void Set_Brillo(float brillo){
 8000f30:	b5b0      	push	{r4, r5, r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	ed87 0a01 	vstr	s0, [r7, #4]
	if(brillo>45) brillo = 45;
 8000f3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f3e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001030 <Set_Brillo+0x100>
 8000f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4a:	dd01      	ble.n	8000f50 <Set_Brillo+0x20>
 8000f4c:	4b39      	ldr	r3, [pc, #228]	; (8001034 <Set_Brillo+0x104>)
 8000f4e:	607b      	str	r3, [r7, #4]
	for(int i=0;i<Num_pixels;i++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	e05f      	b.n	8001016 <Set_Brillo+0xe6>
	{
		Datos_Pixel_F[i][0] = Datos_Pixel[i][0];
 8000f56:	4a38      	ldr	r2, [pc, #224]	; (8001038 <Set_Brillo+0x108>)
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000f5e:	4a37      	ldr	r2, [pc, #220]	; (800103c <Set_Brillo+0x10c>)
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for(int j=1;j<4;j++)
 8000f66:	2301      	movs	r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	e04e      	b.n	800100a <Set_Brillo+0xda>
		{
			float angulo = 90 - brillo;
 8000f6c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001040 <Set_Brillo+0x110>
 8000f70:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f78:	edc7 7a03 	vstr	s15, [r7, #12]
			angulo = angulo*3.14/180;
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f7ff fa8f 	bl	80004a0 <__aeabi_f2d>
 8000f82:	a329      	add	r3, pc, #164	; (adr r3, 8001028 <Set_Brillo+0xf8>)
 8000f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f88:	f7ff fae2 	bl	8000550 <__aeabi_dmul>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	f04f 0200 	mov.w	r2, #0
 8000f98:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <Set_Brillo+0x114>)
 8000f9a:	f7ff fc03 	bl	80007a4 <__aeabi_ddiv>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f7ff fdb5 	bl	8000b14 <__aeabi_d2f>
 8000faa:	4603      	mov	r3, r0
 8000fac:	60fb      	str	r3, [r7, #12]
			Datos_Pixel_F[i][j] = Datos_Pixel[i][j]/(tan(angulo));
 8000fae:	4a22      	ldr	r2, [pc, #136]	; (8001038 <Set_Brillo+0x108>)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	441a      	add	r2, r3
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fa5d 	bl	800047c <__aeabi_i2d>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	460d      	mov	r5, r1
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f7ff fa6a 	bl	80004a0 <__aeabi_f2d>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	ec43 2b10 	vmov	d0, r2, r3
 8000fd4:	f006 fa40 	bl	8007458 <tan>
 8000fd8:	ec53 2b10 	vmov	r2, r3, d0
 8000fdc:	4620      	mov	r0, r4
 8000fde:	4629      	mov	r1, r5
 8000fe0:	f7ff fbe0 	bl	80007a4 <__aeabi_ddiv>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f7ff fd72 	bl	8000ad4 <__aeabi_d2uiz>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	b2d9      	uxtb	r1, r3
 8000ff4:	4a11      	ldr	r2, [pc, #68]	; (800103c <Set_Brillo+0x10c>)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	441a      	add	r2, r3
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4413      	add	r3, r2
 8001000:	460a      	mov	r2, r1
 8001002:	701a      	strb	r2, [r3, #0]
		for(int j=1;j<4;j++)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	3301      	adds	r3, #1
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	2b03      	cmp	r3, #3
 800100e:	ddad      	ble.n	8000f6c <Set_Brillo+0x3c>
	for(int i=0;i<Num_pixels;i++)
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3301      	adds	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	2b3f      	cmp	r3, #63	; 0x3f
 800101a:	dd9c      	ble.n	8000f56 <Set_Brillo+0x26>
		}
	}


}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bdb0      	pop	{r4, r5, r7, pc}
 8001026:	bf00      	nop
 8001028:	51eb851f 	.word	0x51eb851f
 800102c:	40091eb8 	.word	0x40091eb8
 8001030:	42340000 	.word	0x42340000
 8001034:	42340000 	.word	0x42340000
 8001038:	200011cc 	.word	0x200011cc
 800103c:	200012cc 	.word	0x200012cc
 8001040:	42b40000 	.word	0x42b40000
 8001044:	40668000 	.word	0x40668000

08001048 <Enviar_datos>:

//Me armo una función que envíe los datos desde DMA a neopixeles

void Enviar_datos (void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
// Para el programa final trabajar a 24 fps
	//uint32_t datos;
	uint16_t Prueba_pwmDatos = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	80fb      	strh	r3, [r7, #6]
	datos datos;
	uint16_t index = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	82fb      	strh	r3, [r7, #22]


	for (int i = 0; i<Num_pixels; i++)
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	e038      	b.n	80010ce <Enviar_datos+0x86>
	{
		//si no funciona tambien deberia andar el codigo siguiente
		datos.Datos8[0]=Datos_Pixel_F[i][3];
 800105c:	4a30      	ldr	r2, [pc, #192]	; (8001120 <Enviar_datos+0xd8>)
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	78db      	ldrb	r3, [r3, #3]
 8001066:	703b      	strb	r3, [r7, #0]
		datos.Datos8[1]=Datos_Pixel_F[i][2];
 8001068:	4a2d      	ldr	r2, [pc, #180]	; (8001120 <Enviar_datos+0xd8>)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	789b      	ldrb	r3, [r3, #2]
 8001072:	707b      	strb	r3, [r7, #1]
		datos.Datos8[2]=Datos_Pixel_F[i][1];
 8001074:	4a2a      	ldr	r2, [pc, #168]	; (8001120 <Enviar_datos+0xd8>)
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	785b      	ldrb	r3, [r3, #1]
 800107e:	70bb      	strb	r3, [r7, #2]

		//datos = ((Datos_Pixel_F[i][1]<<16) | (Datos_Pixel_F[i][2]<<8)|(Datos_Pixel_F[i][3]));


		for (int i = 23; i>=0; i--)
 8001080:	2317      	movs	r3, #23
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e01d      	b.n	80010c2 <Enviar_datos+0x7a>
		{

			if (datos.Datos32&(1<<i) ) pwmDatos[index] = Neopixel_uno; //ver counter&(1<<j)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2101      	movs	r1, #1
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	fa01 f202 	lsl.w	r2, r1, r2
 8001090:	4013      	ands	r3, r2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d005      	beq.n	80010a2 <Enviar_datos+0x5a>
 8001096:	8afb      	ldrh	r3, [r7, #22]
 8001098:	4a22      	ldr	r2, [pc, #136]	; (8001124 <Enviar_datos+0xdc>)
 800109a:	214c      	movs	r1, #76	; 0x4c
 800109c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80010a0:	e004      	b.n	80010ac <Enviar_datos+0x64>
			else pwmDatos[index] = Neopixel_cero;
 80010a2:	8afb      	ldrh	r3, [r7, #22]
 80010a4:	4a1f      	ldr	r2, [pc, #124]	; (8001124 <Enviar_datos+0xdc>)
 80010a6:	2126      	movs	r1, #38	; 0x26
 80010a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			Prueba_pwmDatos = pwmDatos[index];
 80010ac:	8afb      	ldrh	r3, [r7, #22]
 80010ae:	4a1d      	ldr	r2, [pc, #116]	; (8001124 <Enviar_datos+0xdc>)
 80010b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b4:	80fb      	strh	r3, [r7, #6]
			index++;
 80010b6:	8afb      	ldrh	r3, [r7, #22]
 80010b8:	3301      	adds	r3, #1
 80010ba:	82fb      	strh	r3, [r7, #22]
		for (int i = 23; i>=0; i--)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3b01      	subs	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	dade      	bge.n	8001086 <Enviar_datos+0x3e>
	for (int i = 0; i<Num_pixels; i++)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	3301      	adds	r3, #1
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	2b3f      	cmp	r3, #63	; 0x3f
 80010d2:	ddc3      	ble.n	800105c <Enviar_datos+0x14>

		}

	}

	for (int i=0; i<50;i++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	e00f      	b.n	80010fa <Enviar_datos+0xb2>
	{
		pwmDatos[index] = 0;
 80010da:	8afb      	ldrh	r3, [r7, #22]
 80010dc:	4a11      	ldr	r2, [pc, #68]	; (8001124 <Enviar_datos+0xdc>)
 80010de:	2100      	movs	r1, #0
 80010e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		index++;
 80010e4:	8afb      	ldrh	r3, [r7, #22]
 80010e6:	3301      	adds	r3, #1
 80010e8:	82fb      	strh	r3, [r7, #22]
		Prueba_pwmDatos = pwmDatos[index];
 80010ea:	8afb      	ldrh	r3, [r7, #22]
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <Enviar_datos+0xdc>)
 80010ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f2:	80fb      	strh	r3, [r7, #6]
	for (int i=0; i<50;i++)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	3301      	adds	r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	2b31      	cmp	r3, #49	; 0x31
 80010fe:	ddec      	ble.n	80010da <Enviar_datos+0x92>
	}



	//Envio la informacion con esta funcion de la HAL
		if(HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,(uint32_t *)pwmDatos,index)!=HAL_OK)
 8001100:	8afb      	ldrh	r3, [r7, #22]
 8001102:	4a08      	ldr	r2, [pc, #32]	; (8001124 <Enviar_datos+0xdc>)
 8001104:	2100      	movs	r1, #0
 8001106:	4808      	ldr	r0, [pc, #32]	; (8001128 <Enviar_datos+0xe0>)
 8001108:	f004 ff2e 	bl	8005f68 <HAL_TIM_PWM_Start_DMA>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <Enviar_datos+0xce>
			{
			Error_Handler();
 8001112:	f002 fbc9 	bl	80038a8 <Error_Handler>
	/*
	Acordarse de cambiar la función de carga al TIM2 para PWM por DMA para hacerla por
	Interrupciones. De esa forma podemos procesar informacion durante los tiempo
	muertos de envio de datos. El HAL_TIM_PWM_Start_DMA dice que es no bloqueante
	*/
	}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200012cc 	.word	0x200012cc
 8001124:	20000568 	.word	0x20000568
 8001128:	2000022c 	.word	0x2000022c

0800112c <HAL_TIM_PeriodElapsedCallback>:
//la comento porque no va a tener sentido todavia si no estan todos los valores
//declarados. Es para la funcion final
//Toma un valor entero sin signo para la intensidad de las bandas
//void vumetro(uint8_t banda1,uint8_t banda2,uint8_t banda3,uint8_t banda4,uint8_t banda5,uint8_t banda6,uint8_t banda7,uint8_t banda8){
uint8_t caso =0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	switch(caso)
 8001134:	4b4c      	ldr	r3, [pc, #304]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b06      	cmp	r3, #6
 800113a:	f200 8081 	bhi.w	8001240 <HAL_TIM_PeriodElapsedCallback+0x114>
 800113e:	a201      	add	r2, pc, #4	; (adr r2, 8001144 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001144:	08001161 	.word	0x08001161
 8001148:	08001181 	.word	0x08001181
 800114c:	080011a1 	.word	0x080011a1
 8001150:	080011c1 	.word	0x080011c1
 8001154:	080011e1 	.word	0x080011e1
 8001158:	08001201 	.word	0x08001201
 800115c:	08001221 	.word	0x08001221
	{
	case 0:	vumetro(2,4,6,7);
 8001160:	2307      	movs	r3, #7
 8001162:	2206      	movs	r2, #6
 8001164:	2104      	movs	r1, #4
 8001166:	2002      	movs	r0, #2
 8001168:	f000 f884 	bl	8001274 <vumetro>
	Set_Brillo(brillo);
 800116c:	4b3f      	ldr	r3, [pc, #252]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x140>)
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	eeb0 0a67 	vmov.f32	s0, s15
 8001176:	f7ff fedb 	bl	8000f30 <Set_Brillo>
	Enviar_datos();
 800117a:	f7ff ff65 	bl	8001048 <Enviar_datos>
	break;
 800117e:	e05f      	b.n	8001240 <HAL_TIM_PeriodElapsedCallback+0x114>
	case 1: vumetro(1,3,5,8);
 8001180:	2308      	movs	r3, #8
 8001182:	2205      	movs	r2, #5
 8001184:	2103      	movs	r1, #3
 8001186:	2001      	movs	r0, #1
 8001188:	f000 f874 	bl	8001274 <vumetro>
	Set_Brillo(brillo);
 800118c:	4b37      	ldr	r3, [pc, #220]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x140>)
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	eeb0 0a67 	vmov.f32	s0, s15
 8001196:	f7ff fecb 	bl	8000f30 <Set_Brillo>
	Enviar_datos();
 800119a:	f7ff ff55 	bl	8001048 <Enviar_datos>
	break;
 800119e:	e04f      	b.n	8001240 <HAL_TIM_PeriodElapsedCallback+0x114>
	case 2:
	vumetro(1,5,1,5);
 80011a0:	2305      	movs	r3, #5
 80011a2:	2201      	movs	r2, #1
 80011a4:	2105      	movs	r1, #5
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 f864 	bl	8001274 <vumetro>
	Set_Brillo(brillo);
 80011ac:	4b2f      	ldr	r3, [pc, #188]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80011ae:	edd3 7a00 	vldr	s15, [r3]
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	f7ff febb 	bl	8000f30 <Set_Brillo>
	Enviar_datos();
 80011ba:	f7ff ff45 	bl	8001048 <Enviar_datos>
	break;
 80011be:	e03f      	b.n	8001240 <HAL_TIM_PeriodElapsedCallback+0x114>
	case 3:	vumetro(2,1,3,4);
 80011c0:	2304      	movs	r3, #4
 80011c2:	2203      	movs	r2, #3
 80011c4:	2101      	movs	r1, #1
 80011c6:	2002      	movs	r0, #2
 80011c8:	f000 f854 	bl	8001274 <vumetro>
	Set_Brillo(brillo);
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	eeb0 0a67 	vmov.f32	s0, s15
 80011d6:	f7ff feab 	bl	8000f30 <Set_Brillo>
	Enviar_datos();
 80011da:	f7ff ff35 	bl	8001048 <Enviar_datos>
	break;
 80011de:	e02f      	b.n	8001240 <HAL_TIM_PeriodElapsedCallback+0x114>
	case 4:	vumetro(8,7,6,2);
 80011e0:	2302      	movs	r3, #2
 80011e2:	2206      	movs	r2, #6
 80011e4:	2107      	movs	r1, #7
 80011e6:	2008      	movs	r0, #8
 80011e8:	f000 f844 	bl	8001274 <vumetro>
	Set_Brillo(brillo);
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	f7ff fe9b 	bl	8000f30 <Set_Brillo>
	Enviar_datos();
 80011fa:	f7ff ff25 	bl	8001048 <Enviar_datos>
	break;
 80011fe:	e01f      	b.n	8001240 <HAL_TIM_PeriodElapsedCallback+0x114>
	case 5:	vumetro(1,2,3,4);
 8001200:	2304      	movs	r3, #4
 8001202:	2203      	movs	r2, #3
 8001204:	2102      	movs	r1, #2
 8001206:	2001      	movs	r0, #1
 8001208:	f000 f834 	bl	8001274 <vumetro>
	Set_Brillo(brillo);
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x140>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	eeb0 0a67 	vmov.f32	s0, s15
 8001216:	f7ff fe8b 	bl	8000f30 <Set_Brillo>
	Enviar_datos();
 800121a:	f7ff ff15 	bl	8001048 <Enviar_datos>
	break;
 800121e:	e00f      	b.n	8001240 <HAL_TIM_PeriodElapsedCallback+0x114>
	case 6: vumetro(1,3,6,2);
 8001220:	2302      	movs	r3, #2
 8001222:	2206      	movs	r2, #6
 8001224:	2103      	movs	r1, #3
 8001226:	2001      	movs	r0, #1
 8001228:	f000 f824 	bl	8001274 <vumetro>
	Set_Brillo(brillo);
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x140>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	eeb0 0a67 	vmov.f32	s0, s15
 8001236:	f7ff fe7b 	bl	8000f30 <Set_Brillo>
	Enviar_datos();
 800123a:	f7ff ff05 	bl	8001048 <Enviar_datos>
	break;
 800123e:	bf00      	nop

	}
	caso = (caso+1)%6;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001248:	fb83 3102 	smull	r3, r1, r3, r2
 800124c:	17d3      	asrs	r3, r2, #31
 800124e:	1ac9      	subs	r1, r1, r3
 8001250:	460b      	mov	r3, r1
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	440b      	add	r3, r1
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	1ad1      	subs	r1, r2, r3
 800125a:	b2ca      	uxtb	r2, r1
 800125c:	4b02      	ldr	r3, [pc, #8]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800125e:	701a      	strb	r2, [r3, #0]
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200013cc 	.word	0x200013cc
 800126c:	200001b8 	.word	0x200001b8
 8001270:	2aaaaaab 	.word	0x2aaaaaab

08001274 <vumetro>:



void vumetro(uint8_t banda1,uint8_t banda2,uint8_t banda3,uint8_t banda4){
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b09d      	sub	sp, #116	; 0x74
 8001278:	af00      	add	r7, sp, #0
 800127a:	4604      	mov	r4, r0
 800127c:	4608      	mov	r0, r1
 800127e:	4611      	mov	r1, r2
 8001280:	461a      	mov	r2, r3
 8001282:	4623      	mov	r3, r4
 8001284:	71fb      	strb	r3, [r7, #7]
 8001286:	4603      	mov	r3, r0
 8001288:	71bb      	strb	r3, [r7, #6]
 800128a:	460b      	mov	r3, r1
 800128c:	717b      	strb	r3, [r7, #5]
 800128e:	4613      	mov	r3, r2
 8001290:	713b      	strb	r3, [r7, #4]
//Hay que tener en cuenta que cada banda del vumetro son dos de la matriz, pero
//por como se recorre una esta invertida
//colores: violeta, rosa, azul, dos verdes, amarillo, dos rojos
int numled=0;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]

switch(banda1){
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	3b01      	subs	r3, #1
 800129a:	2b06      	cmp	r3, #6
 800129c:	f200 8341 	bhi.w	8001922 <vumetro+0x6ae>
 80012a0:	a201      	add	r2, pc, #4	; (adr r2, 80012a8 <vumetro+0x34>)
 80012a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a6:	bf00      	nop
 80012a8:	080012c5 	.word	0x080012c5
 80012ac:	0800134b 	.word	0x0800134b
 80012b0:	080013f5 	.word	0x080013f5
 80012b4:	080014c3 	.word	0x080014c3
 80012b8:	080015b5 	.word	0x080015b5
 80012bc:	080016cb 	.word	0x080016cb
 80012c0:	08001805 	.word	0x08001805
case 1||0:
	Set_Pixel(0+numled,76,0,153);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	b2d8      	uxtb	r0, r3
 80012c8:	2399      	movs	r3, #153	; 0x99
 80012ca:	2200      	movs	r2, #0
 80012cc:	214c      	movs	r1, #76	; 0x4c
 80012ce:	f7ff fdff 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 80012d2:	2301      	movs	r3, #1
 80012d4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80012d8:	e010      	b.n	80012fc <vumetro+0x88>
		Set_Pixel(j+numled,0,0,0);
 80012da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4413      	add	r3, r2
 80012e6:	b2d8      	uxtb	r0, r3
 80012e8:	2300      	movs	r3, #0
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	f7ff fdef 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 80012f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80012f6:	3301      	adds	r3, #1
 80012f8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80012fc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001300:	2b07      	cmp	r3, #7
 8001302:	d9ea      	bls.n	80012da <vumetro+0x66>
	}
	Set_Pixel(8+numled,76,0,153);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	3308      	adds	r3, #8
 800130a:	b2d8      	uxtb	r0, r3
 800130c:	2399      	movs	r3, #153	; 0x99
 800130e:	2200      	movs	r2, #0
 8001310:	214c      	movs	r1, #76	; 0x4c
 8001312:	f7ff fddd 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8001316:	2309      	movs	r3, #9
 8001318:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800131c:	e010      	b.n	8001340 <vumetro+0xcc>
		Set_Pixel(j+numled,0,0,0);
 800131e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001322:	b2da      	uxtb	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	4413      	add	r3, r2
 800132a:	b2d8      	uxtb	r0, r3
 800132c:	2300      	movs	r3, #0
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	f7ff fdcd 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8001336:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800133a:	3301      	adds	r3, #1
 800133c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001340:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d9ea      	bls.n	800131e <vumetro+0xaa>
	}
	break;
 8001348:	e37a      	b.n	8001a40 <vumetro+0x7cc>
case 2:
	Set_Pixel(0+numled,0,76,153);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	b2d8      	uxtb	r0, r3
 800134e:	2399      	movs	r3, #153	; 0x99
 8001350:	224c      	movs	r2, #76	; 0x4c
 8001352:	2100      	movs	r1, #0
 8001354:	f7ff fdbc 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	3301      	adds	r3, #1
 800135e:	b2d8      	uxtb	r0, r3
 8001360:	2399      	movs	r3, #153	; 0x99
 8001362:	2299      	movs	r2, #153	; 0x99
 8001364:	2100      	movs	r1, #0
 8001366:	f7ff fdb3 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 800136a:	2302      	movs	r3, #2
 800136c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001370:	e010      	b.n	8001394 <vumetro+0x120>
		Set_Pixel(j+numled,0,0,0);
 8001372:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001376:	b2da      	uxtb	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	4413      	add	r3, r2
 800137e:	b2d8      	uxtb	r0, r3
 8001380:	2300      	movs	r3, #0
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	f7ff fda3 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 800138a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800138e:	3301      	adds	r3, #1
 8001390:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001394:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001398:	2b07      	cmp	r3, #7
 800139a:	d9ea      	bls.n	8001372 <vumetro+0xfe>
	}
	Set_Pixel(8+numled,0,76,153);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	3308      	adds	r3, #8
 80013a2:	b2d8      	uxtb	r0, r3
 80013a4:	2399      	movs	r3, #153	; 0x99
 80013a6:	224c      	movs	r2, #76	; 0x4c
 80013a8:	2100      	movs	r1, #0
 80013aa:	f7ff fd91 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	3309      	adds	r3, #9
 80013b4:	b2d8      	uxtb	r0, r3
 80013b6:	2399      	movs	r3, #153	; 0x99
 80013b8:	2299      	movs	r2, #153	; 0x99
 80013ba:	2100      	movs	r1, #0
 80013bc:	f7ff fd88 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 80013c0:	230a      	movs	r3, #10
 80013c2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80013c6:	e010      	b.n	80013ea <vumetro+0x176>
		Set_Pixel(j+numled,0,0,0);
 80013c8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	4413      	add	r3, r2
 80013d4:	b2d8      	uxtb	r0, r3
 80013d6:	2300      	movs	r3, #0
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	f7ff fd78 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 80013e0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80013e4:	3301      	adds	r3, #1
 80013e6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80013ea:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80013ee:	2b0f      	cmp	r3, #15
 80013f0:	d9ea      	bls.n	80013c8 <vumetro+0x154>
	}
	break;
 80013f2:	e325      	b.n	8001a40 <vumetro+0x7cc>

case 3:
	Set_Pixel(0+numled,0,76,153);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	b2d8      	uxtb	r0, r3
 80013f8:	2399      	movs	r3, #153	; 0x99
 80013fa:	224c      	movs	r2, #76	; 0x4c
 80013fc:	2100      	movs	r1, #0
 80013fe:	f7ff fd67 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	3301      	adds	r3, #1
 8001408:	b2d8      	uxtb	r0, r3
 800140a:	2399      	movs	r3, #153	; 0x99
 800140c:	2299      	movs	r2, #153	; 0x99
 800140e:	2100      	movs	r1, #0
 8001410:	f7ff fd5e 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	3302      	adds	r3, #2
 800141a:	b2d8      	uxtb	r0, r3
 800141c:	23cc      	movs	r3, #204	; 0xcc
 800141e:	2200      	movs	r2, #0
 8001420:	2166      	movs	r1, #102	; 0x66
 8001422:	f7ff fd55 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8001426:	2303      	movs	r3, #3
 8001428:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800142c:	e010      	b.n	8001450 <vumetro+0x1dc>
		Set_Pixel(j+numled,0,0,0);
 800142e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001432:	b2da      	uxtb	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	4413      	add	r3, r2
 800143a:	b2d8      	uxtb	r0, r3
 800143c:	2300      	movs	r3, #0
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	f7ff fd45 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8001446:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800144a:	3301      	adds	r3, #1
 800144c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001450:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001454:	2b07      	cmp	r3, #7
 8001456:	d9ea      	bls.n	800142e <vumetro+0x1ba>
	}
	Set_Pixel(8+numled,0,76,153);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	3308      	adds	r3, #8
 800145e:	b2d8      	uxtb	r0, r3
 8001460:	2399      	movs	r3, #153	; 0x99
 8001462:	224c      	movs	r2, #76	; 0x4c
 8001464:	2100      	movs	r1, #0
 8001466:	f7ff fd33 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	3309      	adds	r3, #9
 8001470:	b2d8      	uxtb	r0, r3
 8001472:	2399      	movs	r3, #153	; 0x99
 8001474:	2299      	movs	r2, #153	; 0x99
 8001476:	2100      	movs	r1, #0
 8001478:	f7ff fd2a 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	330a      	adds	r3, #10
 8001482:	b2d8      	uxtb	r0, r3
 8001484:	23cc      	movs	r3, #204	; 0xcc
 8001486:	2200      	movs	r2, #0
 8001488:	2166      	movs	r1, #102	; 0x66
 800148a:	f7ff fd21 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 800148e:	230b      	movs	r3, #11
 8001490:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001494:	e010      	b.n	80014b8 <vumetro+0x244>
		Set_Pixel(j+numled,0,0,0);
 8001496:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800149a:	b2da      	uxtb	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	4413      	add	r3, r2
 80014a2:	b2d8      	uxtb	r0, r3
 80014a4:	2300      	movs	r3, #0
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	f7ff fd11 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 80014ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80014b2:	3301      	adds	r3, #1
 80014b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80014b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80014bc:	2b0f      	cmp	r3, #15
 80014be:	d9ea      	bls.n	8001496 <vumetro+0x222>
	}
	break;
 80014c0:	e2be      	b.n	8001a40 <vumetro+0x7cc>
case 4:
	Set_Pixel(0+numled,0,76,153);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	b2d8      	uxtb	r0, r3
 80014c6:	2399      	movs	r3, #153	; 0x99
 80014c8:	224c      	movs	r2, #76	; 0x4c
 80014ca:	2100      	movs	r1, #0
 80014cc:	f7ff fd00 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	3301      	adds	r3, #1
 80014d6:	b2d8      	uxtb	r0, r3
 80014d8:	2399      	movs	r3, #153	; 0x99
 80014da:	2299      	movs	r2, #153	; 0x99
 80014dc:	2100      	movs	r1, #0
 80014de:	f7ff fcf7 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	3302      	adds	r3, #2
 80014e8:	b2d8      	uxtb	r0, r3
 80014ea:	23cc      	movs	r3, #204	; 0xcc
 80014ec:	2200      	movs	r2, #0
 80014ee:	2166      	movs	r1, #102	; 0x66
 80014f0:	f7ff fcee 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	3303      	adds	r3, #3
 80014fa:	b2d8      	uxtb	r0, r3
 80014fc:	2300      	movs	r3, #0
 80014fe:	2200      	movs	r2, #0
 8001500:	21cc      	movs	r1, #204	; 0xcc
 8001502:	f7ff fce5 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8001506:	2304      	movs	r3, #4
 8001508:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800150c:	e010      	b.n	8001530 <vumetro+0x2bc>
		Set_Pixel(j+numled,0,0,0);
 800150e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001512:	b2da      	uxtb	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	4413      	add	r3, r2
 800151a:	b2d8      	uxtb	r0, r3
 800151c:	2300      	movs	r3, #0
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	f7ff fcd5 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8001526:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800152a:	3301      	adds	r3, #1
 800152c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001530:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001534:	2b07      	cmp	r3, #7
 8001536:	d9ea      	bls.n	800150e <vumetro+0x29a>
	}
	Set_Pixel(8+numled,0,76,153);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	3308      	adds	r3, #8
 800153e:	b2d8      	uxtb	r0, r3
 8001540:	2399      	movs	r3, #153	; 0x99
 8001542:	224c      	movs	r2, #76	; 0x4c
 8001544:	2100      	movs	r1, #0
 8001546:	f7ff fcc3 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	3309      	adds	r3, #9
 8001550:	b2d8      	uxtb	r0, r3
 8001552:	2399      	movs	r3, #153	; 0x99
 8001554:	2299      	movs	r2, #153	; 0x99
 8001556:	2100      	movs	r1, #0
 8001558:	f7ff fcba 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	330a      	adds	r3, #10
 8001562:	b2d8      	uxtb	r0, r3
 8001564:	23cc      	movs	r3, #204	; 0xcc
 8001566:	2200      	movs	r2, #0
 8001568:	2166      	movs	r1, #102	; 0x66
 800156a:	f7ff fcb1 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	330b      	adds	r3, #11
 8001574:	b2d8      	uxtb	r0, r3
 8001576:	2300      	movs	r3, #0
 8001578:	2200      	movs	r2, #0
 800157a:	21cc      	movs	r1, #204	; 0xcc
 800157c:	f7ff fca8 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8001580:	230c      	movs	r3, #12
 8001582:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8001586:	e010      	b.n	80015aa <vumetro+0x336>
		Set_Pixel(j+numled,0,0,0);
 8001588:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800158c:	b2da      	uxtb	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	4413      	add	r3, r2
 8001594:	b2d8      	uxtb	r0, r3
 8001596:	2300      	movs	r3, #0
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	f7ff fc98 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 80015a0:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80015a4:	3301      	adds	r3, #1
 80015a6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 80015aa:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80015ae:	2b0f      	cmp	r3, #15
 80015b0:	d9ea      	bls.n	8001588 <vumetro+0x314>
	}
	break;
 80015b2:	e245      	b.n	8001a40 <vumetro+0x7cc>
case 5:
	Set_Pixel(0+numled,0,76,153);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	b2d8      	uxtb	r0, r3
 80015b8:	2399      	movs	r3, #153	; 0x99
 80015ba:	224c      	movs	r2, #76	; 0x4c
 80015bc:	2100      	movs	r1, #0
 80015be:	f7ff fc87 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	3301      	adds	r3, #1
 80015c8:	b2d8      	uxtb	r0, r3
 80015ca:	2399      	movs	r3, #153	; 0x99
 80015cc:	2299      	movs	r2, #153	; 0x99
 80015ce:	2100      	movs	r1, #0
 80015d0:	f7ff fc7e 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	3302      	adds	r3, #2
 80015da:	b2d8      	uxtb	r0, r3
 80015dc:	23cc      	movs	r3, #204	; 0xcc
 80015de:	2200      	movs	r2, #0
 80015e0:	2166      	movs	r1, #102	; 0x66
 80015e2:	f7ff fc75 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	3303      	adds	r3, #3
 80015ec:	b2d8      	uxtb	r0, r3
 80015ee:	2300      	movs	r3, #0
 80015f0:	2200      	movs	r2, #0
 80015f2:	21cc      	movs	r1, #204	; 0xcc
 80015f4:	f7ff fc6c 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	3304      	adds	r3, #4
 80015fe:	b2d8      	uxtb	r0, r3
 8001600:	2300      	movs	r3, #0
 8001602:	2200      	movs	r2, #0
 8001604:	21cc      	movs	r1, #204	; 0xcc
 8001606:	f7ff fc63 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 800160a:	2305      	movs	r3, #5
 800160c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001610:	e010      	b.n	8001634 <vumetro+0x3c0>
		Set_Pixel(j+numled,0,0,0);
 8001612:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001616:	b2da      	uxtb	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	4413      	add	r3, r2
 800161e:	b2d8      	uxtb	r0, r3
 8001620:	2300      	movs	r3, #0
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	f7ff fc53 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 800162a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800162e:	3301      	adds	r3, #1
 8001630:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001634:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001638:	2b07      	cmp	r3, #7
 800163a:	d9ea      	bls.n	8001612 <vumetro+0x39e>
	}
	Set_Pixel(8+numled,0,76,153);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	3308      	adds	r3, #8
 8001642:	b2d8      	uxtb	r0, r3
 8001644:	2399      	movs	r3, #153	; 0x99
 8001646:	224c      	movs	r2, #76	; 0x4c
 8001648:	2100      	movs	r1, #0
 800164a:	f7ff fc41 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	3309      	adds	r3, #9
 8001654:	b2d8      	uxtb	r0, r3
 8001656:	2399      	movs	r3, #153	; 0x99
 8001658:	2299      	movs	r2, #153	; 0x99
 800165a:	2100      	movs	r1, #0
 800165c:	f7ff fc38 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	330a      	adds	r3, #10
 8001666:	b2d8      	uxtb	r0, r3
 8001668:	23cc      	movs	r3, #204	; 0xcc
 800166a:	2200      	movs	r2, #0
 800166c:	2166      	movs	r1, #102	; 0x66
 800166e:	f7ff fc2f 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	330b      	adds	r3, #11
 8001678:	b2d8      	uxtb	r0, r3
 800167a:	2300      	movs	r3, #0
 800167c:	2200      	movs	r2, #0
 800167e:	21cc      	movs	r1, #204	; 0xcc
 8001680:	f7ff fc26 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	330c      	adds	r3, #12
 800168a:	b2d8      	uxtb	r0, r3
 800168c:	2300      	movs	r3, #0
 800168e:	2200      	movs	r2, #0
 8001690:	21cc      	movs	r1, #204	; 0xcc
 8001692:	f7ff fc1d 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8001696:	230d      	movs	r3, #13
 8001698:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800169c:	e010      	b.n	80016c0 <vumetro+0x44c>
		Set_Pixel(j+numled,0,0,0);
 800169e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	b2d8      	uxtb	r0, r3
 80016ac:	2300      	movs	r3, #0
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	f7ff fc0d 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 80016b6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80016ba:	3301      	adds	r3, #1
 80016bc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80016c0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d9ea      	bls.n	800169e <vumetro+0x42a>
	}
	break;
 80016c8:	e1ba      	b.n	8001a40 <vumetro+0x7cc>
case 6:
	Set_Pixel(0+numled,0,76,153);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	b2d8      	uxtb	r0, r3
 80016ce:	2399      	movs	r3, #153	; 0x99
 80016d0:	224c      	movs	r2, #76	; 0x4c
 80016d2:	2100      	movs	r1, #0
 80016d4:	f7ff fbfc 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	3301      	adds	r3, #1
 80016de:	b2d8      	uxtb	r0, r3
 80016e0:	2399      	movs	r3, #153	; 0x99
 80016e2:	2299      	movs	r2, #153	; 0x99
 80016e4:	2100      	movs	r1, #0
 80016e6:	f7ff fbf3 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	3302      	adds	r3, #2
 80016f0:	b2d8      	uxtb	r0, r3
 80016f2:	23cc      	movs	r3, #204	; 0xcc
 80016f4:	2200      	movs	r2, #0
 80016f6:	2166      	movs	r1, #102	; 0x66
 80016f8:	f7ff fbea 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	3303      	adds	r3, #3
 8001702:	b2d8      	uxtb	r0, r3
 8001704:	2300      	movs	r3, #0
 8001706:	2200      	movs	r2, #0
 8001708:	21cc      	movs	r1, #204	; 0xcc
 800170a:	f7ff fbe1 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	3304      	adds	r3, #4
 8001714:	b2d8      	uxtb	r0, r3
 8001716:	2300      	movs	r3, #0
 8001718:	2200      	movs	r2, #0
 800171a:	21cc      	movs	r1, #204	; 0xcc
 800171c:	f7ff fbd8 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	3305      	adds	r3, #5
 8001726:	b2d8      	uxtb	r0, r3
 8001728:	2333      	movs	r3, #51	; 0x33
 800172a:	22ff      	movs	r2, #255	; 0xff
 800172c:	21ff      	movs	r1, #255	; 0xff
 800172e:	f7ff fbcf 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8001732:	2306      	movs	r3, #6
 8001734:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8001738:	e010      	b.n	800175c <vumetro+0x4e8>
		Set_Pixel(j+numled,0,0,0);
 800173a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800173e:	b2da      	uxtb	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	4413      	add	r3, r2
 8001746:	b2d8      	uxtb	r0, r3
 8001748:	2300      	movs	r3, #0
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	f7ff fbbf 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8001752:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001756:	3301      	adds	r3, #1
 8001758:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800175c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001760:	2b07      	cmp	r3, #7
 8001762:	d9ea      	bls.n	800173a <vumetro+0x4c6>
	}
	Set_Pixel(8+numled,0,76,153);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	3308      	adds	r3, #8
 800176a:	b2d8      	uxtb	r0, r3
 800176c:	2399      	movs	r3, #153	; 0x99
 800176e:	224c      	movs	r2, #76	; 0x4c
 8001770:	2100      	movs	r1, #0
 8001772:	f7ff fbad 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	3309      	adds	r3, #9
 800177c:	b2d8      	uxtb	r0, r3
 800177e:	2399      	movs	r3, #153	; 0x99
 8001780:	2299      	movs	r2, #153	; 0x99
 8001782:	2100      	movs	r1, #0
 8001784:	f7ff fba4 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	330a      	adds	r3, #10
 800178e:	b2d8      	uxtb	r0, r3
 8001790:	23cc      	movs	r3, #204	; 0xcc
 8001792:	2200      	movs	r2, #0
 8001794:	2166      	movs	r1, #102	; 0x66
 8001796:	f7ff fb9b 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	330b      	adds	r3, #11
 80017a0:	b2d8      	uxtb	r0, r3
 80017a2:	2300      	movs	r3, #0
 80017a4:	2200      	movs	r2, #0
 80017a6:	21cc      	movs	r1, #204	; 0xcc
 80017a8:	f7ff fb92 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	330c      	adds	r3, #12
 80017b2:	b2d8      	uxtb	r0, r3
 80017b4:	2300      	movs	r3, #0
 80017b6:	2200      	movs	r2, #0
 80017b8:	21cc      	movs	r1, #204	; 0xcc
 80017ba:	f7ff fb89 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	330d      	adds	r3, #13
 80017c4:	b2d8      	uxtb	r0, r3
 80017c6:	2333      	movs	r3, #51	; 0x33
 80017c8:	22ff      	movs	r2, #255	; 0xff
 80017ca:	21ff      	movs	r1, #255	; 0xff
 80017cc:	f7ff fb80 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 80017d0:	230e      	movs	r3, #14
 80017d2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80017d6:	e010      	b.n	80017fa <vumetro+0x586>
		Set_Pixel(j+numled,0,0,0);
 80017d8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	b2d8      	uxtb	r0, r3
 80017e6:	2300      	movs	r3, #0
 80017e8:	2200      	movs	r2, #0
 80017ea:	2100      	movs	r1, #0
 80017ec:	f7ff fb70 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 80017f0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80017f4:	3301      	adds	r3, #1
 80017f6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80017fa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80017fe:	2b0f      	cmp	r3, #15
 8001800:	d9ea      	bls.n	80017d8 <vumetro+0x564>
	}
	break;
 8001802:	e11d      	b.n	8001a40 <vumetro+0x7cc>
case 7:
	Set_Pixel(0+numled,0,76,153);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	b2d8      	uxtb	r0, r3
 8001808:	2399      	movs	r3, #153	; 0x99
 800180a:	224c      	movs	r2, #76	; 0x4c
 800180c:	2100      	movs	r1, #0
 800180e:	f7ff fb5f 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	3301      	adds	r3, #1
 8001818:	b2d8      	uxtb	r0, r3
 800181a:	2399      	movs	r3, #153	; 0x99
 800181c:	2299      	movs	r2, #153	; 0x99
 800181e:	2100      	movs	r1, #0
 8001820:	f7ff fb56 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	3302      	adds	r3, #2
 800182a:	b2d8      	uxtb	r0, r3
 800182c:	23cc      	movs	r3, #204	; 0xcc
 800182e:	2200      	movs	r2, #0
 8001830:	2166      	movs	r1, #102	; 0x66
 8001832:	f7ff fb4d 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	3303      	adds	r3, #3
 800183c:	b2d8      	uxtb	r0, r3
 800183e:	2300      	movs	r3, #0
 8001840:	2200      	movs	r2, #0
 8001842:	21cc      	movs	r1, #204	; 0xcc
 8001844:	f7ff fb44 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	3304      	adds	r3, #4
 800184e:	b2d8      	uxtb	r0, r3
 8001850:	2300      	movs	r3, #0
 8001852:	2200      	movs	r2, #0
 8001854:	21cc      	movs	r1, #204	; 0xcc
 8001856:	f7ff fb3b 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	3305      	adds	r3, #5
 8001860:	b2d8      	uxtb	r0, r3
 8001862:	2333      	movs	r3, #51	; 0x33
 8001864:	22ff      	movs	r2, #255	; 0xff
 8001866:	21ff      	movs	r1, #255	; 0xff
 8001868:	f7ff fb32 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	3306      	adds	r3, #6
 8001872:	b2d8      	uxtb	r0, r3
 8001874:	2300      	movs	r3, #0
 8001876:	22cc      	movs	r2, #204	; 0xcc
 8001878:	2100      	movs	r1, #0
 800187a:	f7ff fb29 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	3307      	adds	r3, #7
 8001884:	b2d8      	uxtb	r0, r3
 8001886:	2300      	movs	r3, #0
 8001888:	2200      	movs	r2, #0
 800188a:	2100      	movs	r1, #0
 800188c:	f7ff fb20 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	3308      	adds	r3, #8
 8001896:	b2d8      	uxtb	r0, r3
 8001898:	2399      	movs	r3, #153	; 0x99
 800189a:	224c      	movs	r2, #76	; 0x4c
 800189c:	2100      	movs	r1, #0
 800189e:	f7ff fb17 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	3309      	adds	r3, #9
 80018a8:	b2d8      	uxtb	r0, r3
 80018aa:	2399      	movs	r3, #153	; 0x99
 80018ac:	2299      	movs	r2, #153	; 0x99
 80018ae:	2100      	movs	r1, #0
 80018b0:	f7ff fb0e 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	330a      	adds	r3, #10
 80018ba:	b2d8      	uxtb	r0, r3
 80018bc:	23cc      	movs	r3, #204	; 0xcc
 80018be:	2200      	movs	r2, #0
 80018c0:	2166      	movs	r1, #102	; 0x66
 80018c2:	f7ff fb05 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	330b      	adds	r3, #11
 80018cc:	b2d8      	uxtb	r0, r3
 80018ce:	2300      	movs	r3, #0
 80018d0:	2200      	movs	r2, #0
 80018d2:	21cc      	movs	r1, #204	; 0xcc
 80018d4:	f7ff fafc 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	330c      	adds	r3, #12
 80018de:	b2d8      	uxtb	r0, r3
 80018e0:	2300      	movs	r3, #0
 80018e2:	2200      	movs	r2, #0
 80018e4:	21cc      	movs	r1, #204	; 0xcc
 80018e6:	f7ff faf3 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	330d      	adds	r3, #13
 80018f0:	b2d8      	uxtb	r0, r3
 80018f2:	2333      	movs	r3, #51	; 0x33
 80018f4:	22ff      	movs	r2, #255	; 0xff
 80018f6:	21ff      	movs	r1, #255	; 0xff
 80018f8:	f7ff faea 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	330e      	adds	r3, #14
 8001902:	b2d8      	uxtb	r0, r3
 8001904:	2300      	movs	r3, #0
 8001906:	22cc      	movs	r2, #204	; 0xcc
 8001908:	2100      	movs	r1, #0
 800190a:	f7ff fae1 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	330f      	adds	r3, #15
 8001914:	b2d8      	uxtb	r0, r3
 8001916:	2300      	movs	r3, #0
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	f7ff fad8 	bl	8000ed0 <Set_Pixel>
	break;
 8001920:	e08e      	b.n	8001a40 <vumetro+0x7cc>
default:
	Set_Pixel(0+numled,0,76,153);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	b2d8      	uxtb	r0, r3
 8001926:	2399      	movs	r3, #153	; 0x99
 8001928:	224c      	movs	r2, #76	; 0x4c
 800192a:	2100      	movs	r1, #0
 800192c:	f7ff fad0 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	3301      	adds	r3, #1
 8001936:	b2d8      	uxtb	r0, r3
 8001938:	2399      	movs	r3, #153	; 0x99
 800193a:	2299      	movs	r2, #153	; 0x99
 800193c:	2100      	movs	r1, #0
 800193e:	f7ff fac7 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	3302      	adds	r3, #2
 8001948:	b2d8      	uxtb	r0, r3
 800194a:	23cc      	movs	r3, #204	; 0xcc
 800194c:	2200      	movs	r2, #0
 800194e:	2166      	movs	r1, #102	; 0x66
 8001950:	f7ff fabe 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	3303      	adds	r3, #3
 800195a:	b2d8      	uxtb	r0, r3
 800195c:	2300      	movs	r3, #0
 800195e:	2200      	movs	r2, #0
 8001960:	21cc      	movs	r1, #204	; 0xcc
 8001962:	f7ff fab5 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	3304      	adds	r3, #4
 800196c:	b2d8      	uxtb	r0, r3
 800196e:	2300      	movs	r3, #0
 8001970:	2200      	movs	r2, #0
 8001972:	21cc      	movs	r1, #204	; 0xcc
 8001974:	f7ff faac 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	3305      	adds	r3, #5
 800197e:	b2d8      	uxtb	r0, r3
 8001980:	2333      	movs	r3, #51	; 0x33
 8001982:	22ff      	movs	r2, #255	; 0xff
 8001984:	21ff      	movs	r1, #255	; 0xff
 8001986:	f7ff faa3 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	3306      	adds	r3, #6
 8001990:	b2d8      	uxtb	r0, r3
 8001992:	2300      	movs	r3, #0
 8001994:	22cc      	movs	r2, #204	; 0xcc
 8001996:	2100      	movs	r1, #0
 8001998:	f7ff fa9a 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	3307      	adds	r3, #7
 80019a2:	b2d8      	uxtb	r0, r3
 80019a4:	2300      	movs	r3, #0
 80019a6:	22cc      	movs	r2, #204	; 0xcc
 80019a8:	2100      	movs	r1, #0
 80019aa:	f7ff fa91 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	3308      	adds	r3, #8
 80019b4:	b2d8      	uxtb	r0, r3
 80019b6:	2399      	movs	r3, #153	; 0x99
 80019b8:	224c      	movs	r2, #76	; 0x4c
 80019ba:	2100      	movs	r1, #0
 80019bc:	f7ff fa88 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	3309      	adds	r3, #9
 80019c6:	b2d8      	uxtb	r0, r3
 80019c8:	2399      	movs	r3, #153	; 0x99
 80019ca:	2299      	movs	r2, #153	; 0x99
 80019cc:	2100      	movs	r1, #0
 80019ce:	f7ff fa7f 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	330a      	adds	r3, #10
 80019d8:	b2d8      	uxtb	r0, r3
 80019da:	23cc      	movs	r3, #204	; 0xcc
 80019dc:	2200      	movs	r2, #0
 80019de:	2166      	movs	r1, #102	; 0x66
 80019e0:	f7ff fa76 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	330b      	adds	r3, #11
 80019ea:	b2d8      	uxtb	r0, r3
 80019ec:	2300      	movs	r3, #0
 80019ee:	2200      	movs	r2, #0
 80019f0:	21cc      	movs	r1, #204	; 0xcc
 80019f2:	f7ff fa6d 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	330c      	adds	r3, #12
 80019fc:	b2d8      	uxtb	r0, r3
 80019fe:	2300      	movs	r3, #0
 8001a00:	2200      	movs	r2, #0
 8001a02:	21cc      	movs	r1, #204	; 0xcc
 8001a04:	f7ff fa64 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	330d      	adds	r3, #13
 8001a0e:	b2d8      	uxtb	r0, r3
 8001a10:	2333      	movs	r3, #51	; 0x33
 8001a12:	22ff      	movs	r2, #255	; 0xff
 8001a14:	21ff      	movs	r1, #255	; 0xff
 8001a16:	f7ff fa5b 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	330e      	adds	r3, #14
 8001a20:	b2d8      	uxtb	r0, r3
 8001a22:	2300      	movs	r3, #0
 8001a24:	22cc      	movs	r2, #204	; 0xcc
 8001a26:	2100      	movs	r1, #0
 8001a28:	f7ff fa52 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	330f      	adds	r3, #15
 8001a32:	b2d8      	uxtb	r0, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	22cc      	movs	r2, #204	; 0xcc
 8001a38:	2100      	movs	r1, #0
 8001a3a:	f7ff fa49 	bl	8000ed0 <Set_Pixel>
	break;
 8001a3e:	bf00      	nop
}

numled=16;
 8001a40:	2310      	movs	r3, #16
 8001a42:	60fb      	str	r3, [r7, #12]
switch(banda2){
 8001a44:	79bb      	ldrb	r3, [r7, #6]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	2b06      	cmp	r3, #6
 8001a4a:	f200 8340 	bhi.w	80020ce <vumetro+0xe5a>
 8001a4e:	a201      	add	r2, pc, #4	; (adr r2, 8001a54 <vumetro+0x7e0>)
 8001a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a54:	08001a71 	.word	0x08001a71
 8001a58:	08001af7 	.word	0x08001af7
 8001a5c:	08001ba1 	.word	0x08001ba1
 8001a60:	08001c6f 	.word	0x08001c6f
 8001a64:	08001d61 	.word	0x08001d61
 8001a68:	08001e77 	.word	0x08001e77
 8001a6c:	08001fb1 	.word	0x08001fb1
case 1||0:
	Set_Pixel(0+numled,76,0,153);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	b2d8      	uxtb	r0, r3
 8001a74:	2399      	movs	r3, #153	; 0x99
 8001a76:	2200      	movs	r2, #0
 8001a78:	214c      	movs	r1, #76	; 0x4c
 8001a7a:	f7ff fa29 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001a84:	e010      	b.n	8001aa8 <vumetro+0x834>
		Set_Pixel(j+numled,0,0,0);
 8001a86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	4413      	add	r3, r2
 8001a92:	b2d8      	uxtb	r0, r3
 8001a94:	2300      	movs	r3, #0
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	f7ff fa19 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8001a9e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001aa8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001aac:	2b07      	cmp	r3, #7
 8001aae:	d9ea      	bls.n	8001a86 <vumetro+0x812>
	}
	Set_Pixel(8+numled,76,0,153);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	3308      	adds	r3, #8
 8001ab6:	b2d8      	uxtb	r0, r3
 8001ab8:	2399      	movs	r3, #153	; 0x99
 8001aba:	2200      	movs	r2, #0
 8001abc:	214c      	movs	r1, #76	; 0x4c
 8001abe:	f7ff fa07 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8001ac2:	2309      	movs	r3, #9
 8001ac4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8001ac8:	e010      	b.n	8001aec <vumetro+0x878>
		Set_Pixel(j+numled,0,0,0);
 8001aca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b2d8      	uxtb	r0, r3
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	f7ff f9f7 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8001ae2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8001aec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001af0:	2b0f      	cmp	r3, #15
 8001af2:	d9ea      	bls.n	8001aca <vumetro+0x856>
	}
	break;
 8001af4:	e37a      	b.n	80021ec <vumetro+0xf78>
case 2:
	Set_Pixel(0+numled,0,76,153);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	b2d8      	uxtb	r0, r3
 8001afa:	2399      	movs	r3, #153	; 0x99
 8001afc:	224c      	movs	r2, #76	; 0x4c
 8001afe:	2100      	movs	r1, #0
 8001b00:	f7ff f9e6 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	b2d8      	uxtb	r0, r3
 8001b0c:	2399      	movs	r3, #153	; 0x99
 8001b0e:	2299      	movs	r2, #153	; 0x99
 8001b10:	2100      	movs	r1, #0
 8001b12:	f7ff f9dd 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8001b16:	2302      	movs	r3, #2
 8001b18:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001b1c:	e010      	b.n	8001b40 <vumetro+0x8cc>
		Set_Pixel(j+numled,0,0,0);
 8001b1e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	b2d8      	uxtb	r0, r3
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	f7ff f9cd 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8001b36:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001b40:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b44:	2b07      	cmp	r3, #7
 8001b46:	d9ea      	bls.n	8001b1e <vumetro+0x8aa>
	}
	Set_Pixel(8+numled,0,76,153);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	3308      	adds	r3, #8
 8001b4e:	b2d8      	uxtb	r0, r3
 8001b50:	2399      	movs	r3, #153	; 0x99
 8001b52:	224c      	movs	r2, #76	; 0x4c
 8001b54:	2100      	movs	r1, #0
 8001b56:	f7ff f9bb 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	3309      	adds	r3, #9
 8001b60:	b2d8      	uxtb	r0, r3
 8001b62:	2399      	movs	r3, #153	; 0x99
 8001b64:	2299      	movs	r2, #153	; 0x99
 8001b66:	2100      	movs	r1, #0
 8001b68:	f7ff f9b2 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8001b6c:	230a      	movs	r3, #10
 8001b6e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001b72:	e010      	b.n	8001b96 <vumetro+0x922>
		Set_Pixel(j+numled,0,0,0);
 8001b74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b2d8      	uxtb	r0, r3
 8001b82:	2300      	movs	r3, #0
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	f7ff f9a2 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8001b8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b90:	3301      	adds	r3, #1
 8001b92:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001b96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b9a:	2b0f      	cmp	r3, #15
 8001b9c:	d9ea      	bls.n	8001b74 <vumetro+0x900>
	}
	break;
 8001b9e:	e325      	b.n	80021ec <vumetro+0xf78>

case 3:
	Set_Pixel(0+numled,0,76,153);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	b2d8      	uxtb	r0, r3
 8001ba4:	2399      	movs	r3, #153	; 0x99
 8001ba6:	224c      	movs	r2, #76	; 0x4c
 8001ba8:	2100      	movs	r1, #0
 8001baa:	f7ff f991 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	b2d8      	uxtb	r0, r3
 8001bb6:	2399      	movs	r3, #153	; 0x99
 8001bb8:	2299      	movs	r2, #153	; 0x99
 8001bba:	2100      	movs	r1, #0
 8001bbc:	f7ff f988 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	b2d8      	uxtb	r0, r3
 8001bc8:	23cc      	movs	r3, #204	; 0xcc
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2166      	movs	r1, #102	; 0x66
 8001bce:	f7ff f97f 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001bd8:	e010      	b.n	8001bfc <vumetro+0x988>
		Set_Pixel(j+numled,0,0,0);
 8001bda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	4413      	add	r3, r2
 8001be6:	b2d8      	uxtb	r0, r3
 8001be8:	2300      	movs	r3, #0
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	f7ff f96f 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8001bf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001bfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c00:	2b07      	cmp	r3, #7
 8001c02:	d9ea      	bls.n	8001bda <vumetro+0x966>
	}
	Set_Pixel(8+numled,0,76,153);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	3308      	adds	r3, #8
 8001c0a:	b2d8      	uxtb	r0, r3
 8001c0c:	2399      	movs	r3, #153	; 0x99
 8001c0e:	224c      	movs	r2, #76	; 0x4c
 8001c10:	2100      	movs	r1, #0
 8001c12:	f7ff f95d 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	3309      	adds	r3, #9
 8001c1c:	b2d8      	uxtb	r0, r3
 8001c1e:	2399      	movs	r3, #153	; 0x99
 8001c20:	2299      	movs	r2, #153	; 0x99
 8001c22:	2100      	movs	r1, #0
 8001c24:	f7ff f954 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	330a      	adds	r3, #10
 8001c2e:	b2d8      	uxtb	r0, r3
 8001c30:	23cc      	movs	r3, #204	; 0xcc
 8001c32:	2200      	movs	r2, #0
 8001c34:	2166      	movs	r1, #102	; 0x66
 8001c36:	f7ff f94b 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8001c3a:	230b      	movs	r3, #11
 8001c3c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001c40:	e010      	b.n	8001c64 <vumetro+0x9f0>
		Set_Pixel(j+numled,0,0,0);
 8001c42:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	b2d8      	uxtb	r0, r3
 8001c50:	2300      	movs	r3, #0
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	f7ff f93b 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8001c5a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001c5e:	3301      	adds	r3, #1
 8001c60:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001c64:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d9ea      	bls.n	8001c42 <vumetro+0x9ce>
	}
	break;
 8001c6c:	e2be      	b.n	80021ec <vumetro+0xf78>
case 4:
	Set_Pixel(0+numled,0,76,153);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	b2d8      	uxtb	r0, r3
 8001c72:	2399      	movs	r3, #153	; 0x99
 8001c74:	224c      	movs	r2, #76	; 0x4c
 8001c76:	2100      	movs	r1, #0
 8001c78:	f7ff f92a 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	3301      	adds	r3, #1
 8001c82:	b2d8      	uxtb	r0, r3
 8001c84:	2399      	movs	r3, #153	; 0x99
 8001c86:	2299      	movs	r2, #153	; 0x99
 8001c88:	2100      	movs	r1, #0
 8001c8a:	f7ff f921 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	3302      	adds	r3, #2
 8001c94:	b2d8      	uxtb	r0, r3
 8001c96:	23cc      	movs	r3, #204	; 0xcc
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2166      	movs	r1, #102	; 0x66
 8001c9c:	f7ff f918 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	3303      	adds	r3, #3
 8001ca6:	b2d8      	uxtb	r0, r3
 8001ca8:	2300      	movs	r3, #0
 8001caa:	2200      	movs	r2, #0
 8001cac:	21cc      	movs	r1, #204	; 0xcc
 8001cae:	f7ff f90f 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001cb8:	e010      	b.n	8001cdc <vumetro+0xa68>
		Set_Pixel(j+numled,0,0,0);
 8001cba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	b2d8      	uxtb	r0, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	f7ff f8ff 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8001cd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001cdc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ce0:	2b07      	cmp	r3, #7
 8001ce2:	d9ea      	bls.n	8001cba <vumetro+0xa46>
	}
	Set_Pixel(8+numled,0,76,153);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	3308      	adds	r3, #8
 8001cea:	b2d8      	uxtb	r0, r3
 8001cec:	2399      	movs	r3, #153	; 0x99
 8001cee:	224c      	movs	r2, #76	; 0x4c
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	f7ff f8ed 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	3309      	adds	r3, #9
 8001cfc:	b2d8      	uxtb	r0, r3
 8001cfe:	2399      	movs	r3, #153	; 0x99
 8001d00:	2299      	movs	r2, #153	; 0x99
 8001d02:	2100      	movs	r1, #0
 8001d04:	f7ff f8e4 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	330a      	adds	r3, #10
 8001d0e:	b2d8      	uxtb	r0, r3
 8001d10:	23cc      	movs	r3, #204	; 0xcc
 8001d12:	2200      	movs	r2, #0
 8001d14:	2166      	movs	r1, #102	; 0x66
 8001d16:	f7ff f8db 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	330b      	adds	r3, #11
 8001d20:	b2d8      	uxtb	r0, r3
 8001d22:	2300      	movs	r3, #0
 8001d24:	2200      	movs	r2, #0
 8001d26:	21cc      	movs	r1, #204	; 0xcc
 8001d28:	f7ff f8d2 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8001d2c:	230c      	movs	r3, #12
 8001d2e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001d32:	e010      	b.n	8001d56 <vumetro+0xae2>
		Set_Pixel(j+numled,0,0,0);
 8001d34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	4413      	add	r3, r2
 8001d40:	b2d8      	uxtb	r0, r3
 8001d42:	2300      	movs	r3, #0
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	f7ff f8c2 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8001d4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001d50:	3301      	adds	r3, #1
 8001d52:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001d56:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001d5a:	2b0f      	cmp	r3, #15
 8001d5c:	d9ea      	bls.n	8001d34 <vumetro+0xac0>
	}
	break;
 8001d5e:	e245      	b.n	80021ec <vumetro+0xf78>
case 5:
	Set_Pixel(0+numled,0,76,153);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	b2d8      	uxtb	r0, r3
 8001d64:	2399      	movs	r3, #153	; 0x99
 8001d66:	224c      	movs	r2, #76	; 0x4c
 8001d68:	2100      	movs	r1, #0
 8001d6a:	f7ff f8b1 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	3301      	adds	r3, #1
 8001d74:	b2d8      	uxtb	r0, r3
 8001d76:	2399      	movs	r3, #153	; 0x99
 8001d78:	2299      	movs	r2, #153	; 0x99
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	f7ff f8a8 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	3302      	adds	r3, #2
 8001d86:	b2d8      	uxtb	r0, r3
 8001d88:	23cc      	movs	r3, #204	; 0xcc
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2166      	movs	r1, #102	; 0x66
 8001d8e:	f7ff f89f 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	3303      	adds	r3, #3
 8001d98:	b2d8      	uxtb	r0, r3
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	21cc      	movs	r1, #204	; 0xcc
 8001da0:	f7ff f896 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	3304      	adds	r3, #4
 8001daa:	b2d8      	uxtb	r0, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	2200      	movs	r2, #0
 8001db0:	21cc      	movs	r1, #204	; 0xcc
 8001db2:	f7ff f88d 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8001db6:	2305      	movs	r3, #5
 8001db8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001dbc:	e010      	b.n	8001de0 <vumetro+0xb6c>
		Set_Pixel(j+numled,0,0,0);
 8001dbe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	b2d8      	uxtb	r0, r3
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	f7ff f87d 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8001dd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001de0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001de4:	2b07      	cmp	r3, #7
 8001de6:	d9ea      	bls.n	8001dbe <vumetro+0xb4a>
	}
	Set_Pixel(8+numled,0,76,153);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	3308      	adds	r3, #8
 8001dee:	b2d8      	uxtb	r0, r3
 8001df0:	2399      	movs	r3, #153	; 0x99
 8001df2:	224c      	movs	r2, #76	; 0x4c
 8001df4:	2100      	movs	r1, #0
 8001df6:	f7ff f86b 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	3309      	adds	r3, #9
 8001e00:	b2d8      	uxtb	r0, r3
 8001e02:	2399      	movs	r3, #153	; 0x99
 8001e04:	2299      	movs	r2, #153	; 0x99
 8001e06:	2100      	movs	r1, #0
 8001e08:	f7ff f862 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	330a      	adds	r3, #10
 8001e12:	b2d8      	uxtb	r0, r3
 8001e14:	23cc      	movs	r3, #204	; 0xcc
 8001e16:	2200      	movs	r2, #0
 8001e18:	2166      	movs	r1, #102	; 0x66
 8001e1a:	f7ff f859 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	330b      	adds	r3, #11
 8001e24:	b2d8      	uxtb	r0, r3
 8001e26:	2300      	movs	r3, #0
 8001e28:	2200      	movs	r2, #0
 8001e2a:	21cc      	movs	r1, #204	; 0xcc
 8001e2c:	f7ff f850 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	330c      	adds	r3, #12
 8001e36:	b2d8      	uxtb	r0, r3
 8001e38:	2300      	movs	r3, #0
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	21cc      	movs	r1, #204	; 0xcc
 8001e3e:	f7ff f847 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8001e42:	230d      	movs	r3, #13
 8001e44:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001e48:	e010      	b.n	8001e6c <vumetro+0xbf8>
		Set_Pixel(j+numled,0,0,0);
 8001e4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	b2d8      	uxtb	r0, r3
 8001e58:	2300      	movs	r3, #0
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	f7ff f837 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8001e62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001e66:	3301      	adds	r3, #1
 8001e68:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001e6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001e70:	2b0f      	cmp	r3, #15
 8001e72:	d9ea      	bls.n	8001e4a <vumetro+0xbd6>
	}
	break;
 8001e74:	e1ba      	b.n	80021ec <vumetro+0xf78>
case 6:
	Set_Pixel(0+numled,0,76,153);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	b2d8      	uxtb	r0, r3
 8001e7a:	2399      	movs	r3, #153	; 0x99
 8001e7c:	224c      	movs	r2, #76	; 0x4c
 8001e7e:	2100      	movs	r1, #0
 8001e80:	f7ff f826 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	3301      	adds	r3, #1
 8001e8a:	b2d8      	uxtb	r0, r3
 8001e8c:	2399      	movs	r3, #153	; 0x99
 8001e8e:	2299      	movs	r2, #153	; 0x99
 8001e90:	2100      	movs	r1, #0
 8001e92:	f7ff f81d 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	b2d8      	uxtb	r0, r3
 8001e9e:	23cc      	movs	r3, #204	; 0xcc
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2166      	movs	r1, #102	; 0x66
 8001ea4:	f7ff f814 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	3303      	adds	r3, #3
 8001eae:	b2d8      	uxtb	r0, r3
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	21cc      	movs	r1, #204	; 0xcc
 8001eb6:	f7ff f80b 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	b2d8      	uxtb	r0, r3
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	21cc      	movs	r1, #204	; 0xcc
 8001ec8:	f7ff f802 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	3305      	adds	r3, #5
 8001ed2:	b2d8      	uxtb	r0, r3
 8001ed4:	2333      	movs	r3, #51	; 0x33
 8001ed6:	22ff      	movs	r2, #255	; 0xff
 8001ed8:	21ff      	movs	r1, #255	; 0xff
 8001eda:	f7fe fff9 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8001ede:	2306      	movs	r3, #6
 8001ee0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001ee4:	e010      	b.n	8001f08 <vumetro+0xc94>
		Set_Pixel(j+numled,0,0,0);
 8001ee6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b2d8      	uxtb	r0, r3
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	f7fe ffe9 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8001efe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001f02:	3301      	adds	r3, #1
 8001f04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001f08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001f0c:	2b07      	cmp	r3, #7
 8001f0e:	d9ea      	bls.n	8001ee6 <vumetro+0xc72>
	}
	Set_Pixel(8+numled,0,76,153);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	3308      	adds	r3, #8
 8001f16:	b2d8      	uxtb	r0, r3
 8001f18:	2399      	movs	r3, #153	; 0x99
 8001f1a:	224c      	movs	r2, #76	; 0x4c
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	f7fe ffd7 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	3309      	adds	r3, #9
 8001f28:	b2d8      	uxtb	r0, r3
 8001f2a:	2399      	movs	r3, #153	; 0x99
 8001f2c:	2299      	movs	r2, #153	; 0x99
 8001f2e:	2100      	movs	r1, #0
 8001f30:	f7fe ffce 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	330a      	adds	r3, #10
 8001f3a:	b2d8      	uxtb	r0, r3
 8001f3c:	23cc      	movs	r3, #204	; 0xcc
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2166      	movs	r1, #102	; 0x66
 8001f42:	f7fe ffc5 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	330b      	adds	r3, #11
 8001f4c:	b2d8      	uxtb	r0, r3
 8001f4e:	2300      	movs	r3, #0
 8001f50:	2200      	movs	r2, #0
 8001f52:	21cc      	movs	r1, #204	; 0xcc
 8001f54:	f7fe ffbc 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	330c      	adds	r3, #12
 8001f5e:	b2d8      	uxtb	r0, r3
 8001f60:	2300      	movs	r3, #0
 8001f62:	2200      	movs	r2, #0
 8001f64:	21cc      	movs	r1, #204	; 0xcc
 8001f66:	f7fe ffb3 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	330d      	adds	r3, #13
 8001f70:	b2d8      	uxtb	r0, r3
 8001f72:	2333      	movs	r3, #51	; 0x33
 8001f74:	22ff      	movs	r2, #255	; 0xff
 8001f76:	21ff      	movs	r1, #255	; 0xff
 8001f78:	f7fe ffaa 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8001f7c:	230e      	movs	r3, #14
 8001f7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8001f82:	e010      	b.n	8001fa6 <vumetro+0xd32>
		Set_Pixel(j+numled,0,0,0);
 8001f84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	b2d8      	uxtb	r0, r3
 8001f92:	2300      	movs	r3, #0
 8001f94:	2200      	movs	r2, #0
 8001f96:	2100      	movs	r1, #0
 8001f98:	f7fe ff9a 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8001f9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8001fa6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001faa:	2b0f      	cmp	r3, #15
 8001fac:	d9ea      	bls.n	8001f84 <vumetro+0xd10>
	}
	break;
 8001fae:	e11d      	b.n	80021ec <vumetro+0xf78>
case 7:
	Set_Pixel(0+numled,0,76,153);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	b2d8      	uxtb	r0, r3
 8001fb4:	2399      	movs	r3, #153	; 0x99
 8001fb6:	224c      	movs	r2, #76	; 0x4c
 8001fb8:	2100      	movs	r1, #0
 8001fba:	f7fe ff89 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	b2d8      	uxtb	r0, r3
 8001fc6:	2399      	movs	r3, #153	; 0x99
 8001fc8:	2299      	movs	r2, #153	; 0x99
 8001fca:	2100      	movs	r1, #0
 8001fcc:	f7fe ff80 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	b2d8      	uxtb	r0, r3
 8001fd8:	23cc      	movs	r3, #204	; 0xcc
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2166      	movs	r1, #102	; 0x66
 8001fde:	f7fe ff77 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	3303      	adds	r3, #3
 8001fe8:	b2d8      	uxtb	r0, r3
 8001fea:	2300      	movs	r3, #0
 8001fec:	2200      	movs	r2, #0
 8001fee:	21cc      	movs	r1, #204	; 0xcc
 8001ff0:	f7fe ff6e 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	b2d8      	uxtb	r0, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2200      	movs	r2, #0
 8002000:	21cc      	movs	r1, #204	; 0xcc
 8002002:	f7fe ff65 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	3305      	adds	r3, #5
 800200c:	b2d8      	uxtb	r0, r3
 800200e:	2333      	movs	r3, #51	; 0x33
 8002010:	22ff      	movs	r2, #255	; 0xff
 8002012:	21ff      	movs	r1, #255	; 0xff
 8002014:	f7fe ff5c 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	3306      	adds	r3, #6
 800201e:	b2d8      	uxtb	r0, r3
 8002020:	2300      	movs	r3, #0
 8002022:	22cc      	movs	r2, #204	; 0xcc
 8002024:	2100      	movs	r1, #0
 8002026:	f7fe ff53 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	3307      	adds	r3, #7
 8002030:	b2d8      	uxtb	r0, r3
 8002032:	2300      	movs	r3, #0
 8002034:	2200      	movs	r2, #0
 8002036:	2100      	movs	r1, #0
 8002038:	f7fe ff4a 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	3308      	adds	r3, #8
 8002042:	b2d8      	uxtb	r0, r3
 8002044:	2399      	movs	r3, #153	; 0x99
 8002046:	224c      	movs	r2, #76	; 0x4c
 8002048:	2100      	movs	r1, #0
 800204a:	f7fe ff41 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	3309      	adds	r3, #9
 8002054:	b2d8      	uxtb	r0, r3
 8002056:	2399      	movs	r3, #153	; 0x99
 8002058:	2299      	movs	r2, #153	; 0x99
 800205a:	2100      	movs	r1, #0
 800205c:	f7fe ff38 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	330a      	adds	r3, #10
 8002066:	b2d8      	uxtb	r0, r3
 8002068:	23cc      	movs	r3, #204	; 0xcc
 800206a:	2200      	movs	r2, #0
 800206c:	2166      	movs	r1, #102	; 0x66
 800206e:	f7fe ff2f 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	330b      	adds	r3, #11
 8002078:	b2d8      	uxtb	r0, r3
 800207a:	2300      	movs	r3, #0
 800207c:	2200      	movs	r2, #0
 800207e:	21cc      	movs	r1, #204	; 0xcc
 8002080:	f7fe ff26 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	330c      	adds	r3, #12
 800208a:	b2d8      	uxtb	r0, r3
 800208c:	2300      	movs	r3, #0
 800208e:	2200      	movs	r2, #0
 8002090:	21cc      	movs	r1, #204	; 0xcc
 8002092:	f7fe ff1d 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	330d      	adds	r3, #13
 800209c:	b2d8      	uxtb	r0, r3
 800209e:	2333      	movs	r3, #51	; 0x33
 80020a0:	22ff      	movs	r2, #255	; 0xff
 80020a2:	21ff      	movs	r1, #255	; 0xff
 80020a4:	f7fe ff14 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	330e      	adds	r3, #14
 80020ae:	b2d8      	uxtb	r0, r3
 80020b0:	2300      	movs	r3, #0
 80020b2:	22cc      	movs	r2, #204	; 0xcc
 80020b4:	2100      	movs	r1, #0
 80020b6:	f7fe ff0b 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	330f      	adds	r3, #15
 80020c0:	b2d8      	uxtb	r0, r3
 80020c2:	2300      	movs	r3, #0
 80020c4:	2200      	movs	r2, #0
 80020c6:	2100      	movs	r1, #0
 80020c8:	f7fe ff02 	bl	8000ed0 <Set_Pixel>
	break;
 80020cc:	e08e      	b.n	80021ec <vumetro+0xf78>
default:
	Set_Pixel(0+numled,0,76,153);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	b2d8      	uxtb	r0, r3
 80020d2:	2399      	movs	r3, #153	; 0x99
 80020d4:	224c      	movs	r2, #76	; 0x4c
 80020d6:	2100      	movs	r1, #0
 80020d8:	f7fe fefa 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	3301      	adds	r3, #1
 80020e2:	b2d8      	uxtb	r0, r3
 80020e4:	2399      	movs	r3, #153	; 0x99
 80020e6:	2299      	movs	r2, #153	; 0x99
 80020e8:	2100      	movs	r1, #0
 80020ea:	f7fe fef1 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	3302      	adds	r3, #2
 80020f4:	b2d8      	uxtb	r0, r3
 80020f6:	23cc      	movs	r3, #204	; 0xcc
 80020f8:	2200      	movs	r2, #0
 80020fa:	2166      	movs	r1, #102	; 0x66
 80020fc:	f7fe fee8 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	3303      	adds	r3, #3
 8002106:	b2d8      	uxtb	r0, r3
 8002108:	2300      	movs	r3, #0
 800210a:	2200      	movs	r2, #0
 800210c:	21cc      	movs	r1, #204	; 0xcc
 800210e:	f7fe fedf 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	3304      	adds	r3, #4
 8002118:	b2d8      	uxtb	r0, r3
 800211a:	2300      	movs	r3, #0
 800211c:	2200      	movs	r2, #0
 800211e:	21cc      	movs	r1, #204	; 0xcc
 8002120:	f7fe fed6 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	3305      	adds	r3, #5
 800212a:	b2d8      	uxtb	r0, r3
 800212c:	2333      	movs	r3, #51	; 0x33
 800212e:	22ff      	movs	r2, #255	; 0xff
 8002130:	21ff      	movs	r1, #255	; 0xff
 8002132:	f7fe fecd 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	3306      	adds	r3, #6
 800213c:	b2d8      	uxtb	r0, r3
 800213e:	2300      	movs	r3, #0
 8002140:	22cc      	movs	r2, #204	; 0xcc
 8002142:	2100      	movs	r1, #0
 8002144:	f7fe fec4 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	3307      	adds	r3, #7
 800214e:	b2d8      	uxtb	r0, r3
 8002150:	2300      	movs	r3, #0
 8002152:	22cc      	movs	r2, #204	; 0xcc
 8002154:	2100      	movs	r1, #0
 8002156:	f7fe febb 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	3308      	adds	r3, #8
 8002160:	b2d8      	uxtb	r0, r3
 8002162:	2399      	movs	r3, #153	; 0x99
 8002164:	224c      	movs	r2, #76	; 0x4c
 8002166:	2100      	movs	r1, #0
 8002168:	f7fe feb2 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3309      	adds	r3, #9
 8002172:	b2d8      	uxtb	r0, r3
 8002174:	2399      	movs	r3, #153	; 0x99
 8002176:	2299      	movs	r2, #153	; 0x99
 8002178:	2100      	movs	r1, #0
 800217a:	f7fe fea9 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	330a      	adds	r3, #10
 8002184:	b2d8      	uxtb	r0, r3
 8002186:	23cc      	movs	r3, #204	; 0xcc
 8002188:	2200      	movs	r2, #0
 800218a:	2166      	movs	r1, #102	; 0x66
 800218c:	f7fe fea0 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	330b      	adds	r3, #11
 8002196:	b2d8      	uxtb	r0, r3
 8002198:	2300      	movs	r3, #0
 800219a:	2200      	movs	r2, #0
 800219c:	21cc      	movs	r1, #204	; 0xcc
 800219e:	f7fe fe97 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	330c      	adds	r3, #12
 80021a8:	b2d8      	uxtb	r0, r3
 80021aa:	2300      	movs	r3, #0
 80021ac:	2200      	movs	r2, #0
 80021ae:	21cc      	movs	r1, #204	; 0xcc
 80021b0:	f7fe fe8e 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	330d      	adds	r3, #13
 80021ba:	b2d8      	uxtb	r0, r3
 80021bc:	2333      	movs	r3, #51	; 0x33
 80021be:	22ff      	movs	r2, #255	; 0xff
 80021c0:	21ff      	movs	r1, #255	; 0xff
 80021c2:	f7fe fe85 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	330e      	adds	r3, #14
 80021cc:	b2d8      	uxtb	r0, r3
 80021ce:	2300      	movs	r3, #0
 80021d0:	22cc      	movs	r2, #204	; 0xcc
 80021d2:	2100      	movs	r1, #0
 80021d4:	f7fe fe7c 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	330f      	adds	r3, #15
 80021de:	b2d8      	uxtb	r0, r3
 80021e0:	2300      	movs	r3, #0
 80021e2:	22cc      	movs	r2, #204	; 0xcc
 80021e4:	2100      	movs	r1, #0
 80021e6:	f7fe fe73 	bl	8000ed0 <Set_Pixel>
	break;
 80021ea:	bf00      	nop
}

numled=32;
 80021ec:	2320      	movs	r3, #32
 80021ee:	60fb      	str	r3, [r7, #12]
switch(banda3){
 80021f0:	797b      	ldrb	r3, [r7, #5]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	2b06      	cmp	r3, #6
 80021f6:	f200 8304 	bhi.w	8002802 <vumetro+0x158e>
 80021fa:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <vumetro+0xf8c>)
 80021fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002200:	0800221d 	.word	0x0800221d
 8002204:	0800228f 	.word	0x0800228f
 8002208:	08002325 	.word	0x08002325
 800220c:	080023df 	.word	0x080023df
 8002210:	080024bd 	.word	0x080024bd
 8002214:	080025bf 	.word	0x080025bf
 8002218:	080026e5 	.word	0x080026e5
case 1||0:
	Set_Pixel(0+numled,76,0,153);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	b2d8      	uxtb	r0, r3
 8002220:	2399      	movs	r3, #153	; 0x99
 8002222:	2200      	movs	r2, #0
 8002224:	214c      	movs	r1, #76	; 0x4c
 8002226:	f7fe fe53 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 800222a:	2301      	movs	r3, #1
 800222c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800222e:	e00d      	b.n	800224c <vumetro+0xfd8>
		Set_Pixel(j+numled,0,0,0);
 8002230:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002232:	b2da      	uxtb	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	4413      	add	r3, r2
 800223a:	b2d8      	uxtb	r0, r3
 800223c:	2300      	movs	r3, #0
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	f7fe fe45 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8002246:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002248:	3301      	adds	r3, #1
 800224a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800224c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800224e:	2b07      	cmp	r3, #7
 8002250:	d9ee      	bls.n	8002230 <vumetro+0xfbc>
	}
	Set_Pixel(8+numled,76,0,153);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	3308      	adds	r3, #8
 8002258:	b2d8      	uxtb	r0, r3
 800225a:	2399      	movs	r3, #153	; 0x99
 800225c:	2200      	movs	r2, #0
 800225e:	214c      	movs	r1, #76	; 0x4c
 8002260:	f7fe fe36 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8002264:	2309      	movs	r3, #9
 8002266:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002268:	e00d      	b.n	8002286 <vumetro+0x1012>
		Set_Pixel(j+numled,0,0,0);
 800226a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800226c:	b2da      	uxtb	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	4413      	add	r3, r2
 8002274:	b2d8      	uxtb	r0, r3
 8002276:	2300      	movs	r3, #0
 8002278:	2200      	movs	r2, #0
 800227a:	2100      	movs	r1, #0
 800227c:	f7fe fe28 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8002280:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002282:	3301      	adds	r3, #1
 8002284:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002286:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002288:	2b0f      	cmp	r3, #15
 800228a:	d9ee      	bls.n	800226a <vumetro+0xff6>
	}
	break;
 800228c:	e348      	b.n	8002920 <vumetro+0x16ac>
case 2:
	Set_Pixel(0+numled,0,76,153);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	b2d8      	uxtb	r0, r3
 8002292:	2399      	movs	r3, #153	; 0x99
 8002294:	224c      	movs	r2, #76	; 0x4c
 8002296:	2100      	movs	r1, #0
 8002298:	f7fe fe1a 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	3301      	adds	r3, #1
 80022a2:	b2d8      	uxtb	r0, r3
 80022a4:	2399      	movs	r3, #153	; 0x99
 80022a6:	2299      	movs	r2, #153	; 0x99
 80022a8:	2100      	movs	r1, #0
 80022aa:	f7fe fe11 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 80022ae:	2302      	movs	r3, #2
 80022b0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80022b2:	e00d      	b.n	80022d0 <vumetro+0x105c>
		Set_Pixel(j+numled,0,0,0);
 80022b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	4413      	add	r3, r2
 80022be:	b2d8      	uxtb	r0, r3
 80022c0:	2300      	movs	r3, #0
 80022c2:	2200      	movs	r2, #0
 80022c4:	2100      	movs	r1, #0
 80022c6:	f7fe fe03 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 80022ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80022cc:	3301      	adds	r3, #1
 80022ce:	877b      	strh	r3, [r7, #58]	; 0x3a
 80022d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80022d2:	2b07      	cmp	r3, #7
 80022d4:	d9ee      	bls.n	80022b4 <vumetro+0x1040>
	}
	Set_Pixel(8+numled,0,76,153);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	3308      	adds	r3, #8
 80022dc:	b2d8      	uxtb	r0, r3
 80022de:	2399      	movs	r3, #153	; 0x99
 80022e0:	224c      	movs	r2, #76	; 0x4c
 80022e2:	2100      	movs	r1, #0
 80022e4:	f7fe fdf4 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	3309      	adds	r3, #9
 80022ee:	b2d8      	uxtb	r0, r3
 80022f0:	2399      	movs	r3, #153	; 0x99
 80022f2:	2299      	movs	r2, #153	; 0x99
 80022f4:	2100      	movs	r1, #0
 80022f6:	f7fe fdeb 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 80022fa:	230a      	movs	r3, #10
 80022fc:	873b      	strh	r3, [r7, #56]	; 0x38
 80022fe:	e00d      	b.n	800231c <vumetro+0x10a8>
		Set_Pixel(j+numled,0,0,0);
 8002300:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002302:	b2da      	uxtb	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	4413      	add	r3, r2
 800230a:	b2d8      	uxtb	r0, r3
 800230c:	2300      	movs	r3, #0
 800230e:	2200      	movs	r2, #0
 8002310:	2100      	movs	r1, #0
 8002312:	f7fe fddd 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8002316:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002318:	3301      	adds	r3, #1
 800231a:	873b      	strh	r3, [r7, #56]	; 0x38
 800231c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800231e:	2b0f      	cmp	r3, #15
 8002320:	d9ee      	bls.n	8002300 <vumetro+0x108c>
	}
	break;
 8002322:	e2fd      	b.n	8002920 <vumetro+0x16ac>

case 3:
	Set_Pixel(0+numled,0,76,153);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	b2d8      	uxtb	r0, r3
 8002328:	2399      	movs	r3, #153	; 0x99
 800232a:	224c      	movs	r2, #76	; 0x4c
 800232c:	2100      	movs	r1, #0
 800232e:	f7fe fdcf 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	3301      	adds	r3, #1
 8002338:	b2d8      	uxtb	r0, r3
 800233a:	2399      	movs	r3, #153	; 0x99
 800233c:	2299      	movs	r2, #153	; 0x99
 800233e:	2100      	movs	r1, #0
 8002340:	f7fe fdc6 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3302      	adds	r3, #2
 800234a:	b2d8      	uxtb	r0, r3
 800234c:	23cc      	movs	r3, #204	; 0xcc
 800234e:	2200      	movs	r2, #0
 8002350:	2166      	movs	r1, #102	; 0x66
 8002352:	f7fe fdbd 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8002356:	2303      	movs	r3, #3
 8002358:	86fb      	strh	r3, [r7, #54]	; 0x36
 800235a:	e00d      	b.n	8002378 <vumetro+0x1104>
		Set_Pixel(j+numled,0,0,0);
 800235c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800235e:	b2da      	uxtb	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	4413      	add	r3, r2
 8002366:	b2d8      	uxtb	r0, r3
 8002368:	2300      	movs	r3, #0
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	f7fe fdaf 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8002372:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002374:	3301      	adds	r3, #1
 8002376:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002378:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800237a:	2b07      	cmp	r3, #7
 800237c:	d9ee      	bls.n	800235c <vumetro+0x10e8>
	}
	Set_Pixel(8+numled,0,76,153);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	3308      	adds	r3, #8
 8002384:	b2d8      	uxtb	r0, r3
 8002386:	2399      	movs	r3, #153	; 0x99
 8002388:	224c      	movs	r2, #76	; 0x4c
 800238a:	2100      	movs	r1, #0
 800238c:	f7fe fda0 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	3309      	adds	r3, #9
 8002396:	b2d8      	uxtb	r0, r3
 8002398:	2399      	movs	r3, #153	; 0x99
 800239a:	2299      	movs	r2, #153	; 0x99
 800239c:	2100      	movs	r1, #0
 800239e:	f7fe fd97 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	330a      	adds	r3, #10
 80023a8:	b2d8      	uxtb	r0, r3
 80023aa:	23cc      	movs	r3, #204	; 0xcc
 80023ac:	2200      	movs	r2, #0
 80023ae:	2166      	movs	r1, #102	; 0x66
 80023b0:	f7fe fd8e 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 80023b4:	230b      	movs	r3, #11
 80023b6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80023b8:	e00d      	b.n	80023d6 <vumetro+0x1162>
		Set_Pixel(j+numled,0,0,0);
 80023ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	b2d8      	uxtb	r0, r3
 80023c6:	2300      	movs	r3, #0
 80023c8:	2200      	movs	r2, #0
 80023ca:	2100      	movs	r1, #0
 80023cc:	f7fe fd80 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 80023d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80023d2:	3301      	adds	r3, #1
 80023d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80023d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80023d8:	2b0f      	cmp	r3, #15
 80023da:	d9ee      	bls.n	80023ba <vumetro+0x1146>
	}
	break;
 80023dc:	e2a0      	b.n	8002920 <vumetro+0x16ac>
case 4:
	Set_Pixel(0+numled,0,76,153);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	b2d8      	uxtb	r0, r3
 80023e2:	2399      	movs	r3, #153	; 0x99
 80023e4:	224c      	movs	r2, #76	; 0x4c
 80023e6:	2100      	movs	r1, #0
 80023e8:	f7fe fd72 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	b2d8      	uxtb	r0, r3
 80023f4:	2399      	movs	r3, #153	; 0x99
 80023f6:	2299      	movs	r2, #153	; 0x99
 80023f8:	2100      	movs	r1, #0
 80023fa:	f7fe fd69 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	3302      	adds	r3, #2
 8002404:	b2d8      	uxtb	r0, r3
 8002406:	23cc      	movs	r3, #204	; 0xcc
 8002408:	2200      	movs	r2, #0
 800240a:	2166      	movs	r1, #102	; 0x66
 800240c:	f7fe fd60 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	3303      	adds	r3, #3
 8002416:	b2d8      	uxtb	r0, r3
 8002418:	2300      	movs	r3, #0
 800241a:	2200      	movs	r2, #0
 800241c:	21cc      	movs	r1, #204	; 0xcc
 800241e:	f7fe fd57 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8002422:	2304      	movs	r3, #4
 8002424:	867b      	strh	r3, [r7, #50]	; 0x32
 8002426:	e00d      	b.n	8002444 <vumetro+0x11d0>
		Set_Pixel(j+numled,0,0,0);
 8002428:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800242a:	b2da      	uxtb	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	4413      	add	r3, r2
 8002432:	b2d8      	uxtb	r0, r3
 8002434:	2300      	movs	r3, #0
 8002436:	2200      	movs	r2, #0
 8002438:	2100      	movs	r1, #0
 800243a:	f7fe fd49 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 800243e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002440:	3301      	adds	r3, #1
 8002442:	867b      	strh	r3, [r7, #50]	; 0x32
 8002444:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002446:	2b07      	cmp	r3, #7
 8002448:	d9ee      	bls.n	8002428 <vumetro+0x11b4>
	}
	Set_Pixel(8+numled,0,76,153);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	3308      	adds	r3, #8
 8002450:	b2d8      	uxtb	r0, r3
 8002452:	2399      	movs	r3, #153	; 0x99
 8002454:	224c      	movs	r2, #76	; 0x4c
 8002456:	2100      	movs	r1, #0
 8002458:	f7fe fd3a 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	3309      	adds	r3, #9
 8002462:	b2d8      	uxtb	r0, r3
 8002464:	2399      	movs	r3, #153	; 0x99
 8002466:	2299      	movs	r2, #153	; 0x99
 8002468:	2100      	movs	r1, #0
 800246a:	f7fe fd31 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	330a      	adds	r3, #10
 8002474:	b2d8      	uxtb	r0, r3
 8002476:	23cc      	movs	r3, #204	; 0xcc
 8002478:	2200      	movs	r2, #0
 800247a:	2166      	movs	r1, #102	; 0x66
 800247c:	f7fe fd28 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	330b      	adds	r3, #11
 8002486:	b2d8      	uxtb	r0, r3
 8002488:	2300      	movs	r3, #0
 800248a:	2200      	movs	r2, #0
 800248c:	21cc      	movs	r1, #204	; 0xcc
 800248e:	f7fe fd1f 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8002492:	230c      	movs	r3, #12
 8002494:	863b      	strh	r3, [r7, #48]	; 0x30
 8002496:	e00d      	b.n	80024b4 <vumetro+0x1240>
		Set_Pixel(j+numled,0,0,0);
 8002498:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800249a:	b2da      	uxtb	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	b2d8      	uxtb	r0, r3
 80024a4:	2300      	movs	r3, #0
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	f7fe fd11 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 80024ae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80024b0:	3301      	adds	r3, #1
 80024b2:	863b      	strh	r3, [r7, #48]	; 0x30
 80024b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	d9ee      	bls.n	8002498 <vumetro+0x1224>
	}
	break;
 80024ba:	e231      	b.n	8002920 <vumetro+0x16ac>
case 5:
	Set_Pixel(0+numled,0,76,153);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	b2d8      	uxtb	r0, r3
 80024c0:	2399      	movs	r3, #153	; 0x99
 80024c2:	224c      	movs	r2, #76	; 0x4c
 80024c4:	2100      	movs	r1, #0
 80024c6:	f7fe fd03 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	3301      	adds	r3, #1
 80024d0:	b2d8      	uxtb	r0, r3
 80024d2:	2399      	movs	r3, #153	; 0x99
 80024d4:	2299      	movs	r2, #153	; 0x99
 80024d6:	2100      	movs	r1, #0
 80024d8:	f7fe fcfa 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	3302      	adds	r3, #2
 80024e2:	b2d8      	uxtb	r0, r3
 80024e4:	23cc      	movs	r3, #204	; 0xcc
 80024e6:	2200      	movs	r2, #0
 80024e8:	2166      	movs	r1, #102	; 0x66
 80024ea:	f7fe fcf1 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	3303      	adds	r3, #3
 80024f4:	b2d8      	uxtb	r0, r3
 80024f6:	2300      	movs	r3, #0
 80024f8:	2200      	movs	r2, #0
 80024fa:	21cc      	movs	r1, #204	; 0xcc
 80024fc:	f7fe fce8 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	3304      	adds	r3, #4
 8002506:	b2d8      	uxtb	r0, r3
 8002508:	2300      	movs	r3, #0
 800250a:	2200      	movs	r2, #0
 800250c:	21cc      	movs	r1, #204	; 0xcc
 800250e:	f7fe fcdf 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8002512:	2305      	movs	r3, #5
 8002514:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002516:	e00d      	b.n	8002534 <vumetro+0x12c0>
		Set_Pixel(j+numled,0,0,0);
 8002518:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800251a:	b2da      	uxtb	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	4413      	add	r3, r2
 8002522:	b2d8      	uxtb	r0, r3
 8002524:	2300      	movs	r3, #0
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	f7fe fcd1 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 800252e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002530:	3301      	adds	r3, #1
 8002532:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002534:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002536:	2b07      	cmp	r3, #7
 8002538:	d9ee      	bls.n	8002518 <vumetro+0x12a4>
	}
	Set_Pixel(8+numled,0,76,153);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	3308      	adds	r3, #8
 8002540:	b2d8      	uxtb	r0, r3
 8002542:	2399      	movs	r3, #153	; 0x99
 8002544:	224c      	movs	r2, #76	; 0x4c
 8002546:	2100      	movs	r1, #0
 8002548:	f7fe fcc2 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	3309      	adds	r3, #9
 8002552:	b2d8      	uxtb	r0, r3
 8002554:	2399      	movs	r3, #153	; 0x99
 8002556:	2299      	movs	r2, #153	; 0x99
 8002558:	2100      	movs	r1, #0
 800255a:	f7fe fcb9 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	330a      	adds	r3, #10
 8002564:	b2d8      	uxtb	r0, r3
 8002566:	23cc      	movs	r3, #204	; 0xcc
 8002568:	2200      	movs	r2, #0
 800256a:	2166      	movs	r1, #102	; 0x66
 800256c:	f7fe fcb0 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	330b      	adds	r3, #11
 8002576:	b2d8      	uxtb	r0, r3
 8002578:	2300      	movs	r3, #0
 800257a:	2200      	movs	r2, #0
 800257c:	21cc      	movs	r1, #204	; 0xcc
 800257e:	f7fe fca7 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	330c      	adds	r3, #12
 8002588:	b2d8      	uxtb	r0, r3
 800258a:	2300      	movs	r3, #0
 800258c:	2200      	movs	r2, #0
 800258e:	21cc      	movs	r1, #204	; 0xcc
 8002590:	f7fe fc9e 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8002594:	230d      	movs	r3, #13
 8002596:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002598:	e00d      	b.n	80025b6 <vumetro+0x1342>
		Set_Pixel(j+numled,0,0,0);
 800259a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800259c:	b2da      	uxtb	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	b2d8      	uxtb	r0, r3
 80025a6:	2300      	movs	r3, #0
 80025a8:	2200      	movs	r2, #0
 80025aa:	2100      	movs	r1, #0
 80025ac:	f7fe fc90 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 80025b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80025b2:	3301      	adds	r3, #1
 80025b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80025b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80025b8:	2b0f      	cmp	r3, #15
 80025ba:	d9ee      	bls.n	800259a <vumetro+0x1326>
	}
	break;
 80025bc:	e1b0      	b.n	8002920 <vumetro+0x16ac>
case 6:
	Set_Pixel(0+numled,0,76,153);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	b2d8      	uxtb	r0, r3
 80025c2:	2399      	movs	r3, #153	; 0x99
 80025c4:	224c      	movs	r2, #76	; 0x4c
 80025c6:	2100      	movs	r1, #0
 80025c8:	f7fe fc82 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	3301      	adds	r3, #1
 80025d2:	b2d8      	uxtb	r0, r3
 80025d4:	2399      	movs	r3, #153	; 0x99
 80025d6:	2299      	movs	r2, #153	; 0x99
 80025d8:	2100      	movs	r1, #0
 80025da:	f7fe fc79 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	3302      	adds	r3, #2
 80025e4:	b2d8      	uxtb	r0, r3
 80025e6:	23cc      	movs	r3, #204	; 0xcc
 80025e8:	2200      	movs	r2, #0
 80025ea:	2166      	movs	r1, #102	; 0x66
 80025ec:	f7fe fc70 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	3303      	adds	r3, #3
 80025f6:	b2d8      	uxtb	r0, r3
 80025f8:	2300      	movs	r3, #0
 80025fa:	2200      	movs	r2, #0
 80025fc:	21cc      	movs	r1, #204	; 0xcc
 80025fe:	f7fe fc67 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	3304      	adds	r3, #4
 8002608:	b2d8      	uxtb	r0, r3
 800260a:	2300      	movs	r3, #0
 800260c:	2200      	movs	r2, #0
 800260e:	21cc      	movs	r1, #204	; 0xcc
 8002610:	f7fe fc5e 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	3305      	adds	r3, #5
 800261a:	b2d8      	uxtb	r0, r3
 800261c:	2333      	movs	r3, #51	; 0x33
 800261e:	22ff      	movs	r2, #255	; 0xff
 8002620:	21ff      	movs	r1, #255	; 0xff
 8002622:	f7fe fc55 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8002626:	2306      	movs	r3, #6
 8002628:	857b      	strh	r3, [r7, #42]	; 0x2a
 800262a:	e00d      	b.n	8002648 <vumetro+0x13d4>
		Set_Pixel(j+numled,0,0,0);
 800262c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800262e:	b2da      	uxtb	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	4413      	add	r3, r2
 8002636:	b2d8      	uxtb	r0, r3
 8002638:	2300      	movs	r3, #0
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	f7fe fc47 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8002642:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002644:	3301      	adds	r3, #1
 8002646:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002648:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800264a:	2b07      	cmp	r3, #7
 800264c:	d9ee      	bls.n	800262c <vumetro+0x13b8>
	}
	Set_Pixel(8+numled,0,76,153);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	3308      	adds	r3, #8
 8002654:	b2d8      	uxtb	r0, r3
 8002656:	2399      	movs	r3, #153	; 0x99
 8002658:	224c      	movs	r2, #76	; 0x4c
 800265a:	2100      	movs	r1, #0
 800265c:	f7fe fc38 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	3309      	adds	r3, #9
 8002666:	b2d8      	uxtb	r0, r3
 8002668:	2399      	movs	r3, #153	; 0x99
 800266a:	2299      	movs	r2, #153	; 0x99
 800266c:	2100      	movs	r1, #0
 800266e:	f7fe fc2f 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	330a      	adds	r3, #10
 8002678:	b2d8      	uxtb	r0, r3
 800267a:	23cc      	movs	r3, #204	; 0xcc
 800267c:	2200      	movs	r2, #0
 800267e:	2166      	movs	r1, #102	; 0x66
 8002680:	f7fe fc26 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	330b      	adds	r3, #11
 800268a:	b2d8      	uxtb	r0, r3
 800268c:	2300      	movs	r3, #0
 800268e:	2200      	movs	r2, #0
 8002690:	21cc      	movs	r1, #204	; 0xcc
 8002692:	f7fe fc1d 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	330c      	adds	r3, #12
 800269c:	b2d8      	uxtb	r0, r3
 800269e:	2300      	movs	r3, #0
 80026a0:	2200      	movs	r2, #0
 80026a2:	21cc      	movs	r1, #204	; 0xcc
 80026a4:	f7fe fc14 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	330d      	adds	r3, #13
 80026ae:	b2d8      	uxtb	r0, r3
 80026b0:	2333      	movs	r3, #51	; 0x33
 80026b2:	22ff      	movs	r2, #255	; 0xff
 80026b4:	21ff      	movs	r1, #255	; 0xff
 80026b6:	f7fe fc0b 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 80026ba:	230e      	movs	r3, #14
 80026bc:	853b      	strh	r3, [r7, #40]	; 0x28
 80026be:	e00d      	b.n	80026dc <vumetro+0x1468>
		Set_Pixel(j+numled,0,0,0);
 80026c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	b2d8      	uxtb	r0, r3
 80026cc:	2300      	movs	r3, #0
 80026ce:	2200      	movs	r2, #0
 80026d0:	2100      	movs	r1, #0
 80026d2:	f7fe fbfd 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 80026d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026d8:	3301      	adds	r3, #1
 80026da:	853b      	strh	r3, [r7, #40]	; 0x28
 80026dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026de:	2b0f      	cmp	r3, #15
 80026e0:	d9ee      	bls.n	80026c0 <vumetro+0x144c>
	}
	break;
 80026e2:	e11d      	b.n	8002920 <vumetro+0x16ac>
case 7:
	Set_Pixel(0+numled,0,76,153);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	b2d8      	uxtb	r0, r3
 80026e8:	2399      	movs	r3, #153	; 0x99
 80026ea:	224c      	movs	r2, #76	; 0x4c
 80026ec:	2100      	movs	r1, #0
 80026ee:	f7fe fbef 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	3301      	adds	r3, #1
 80026f8:	b2d8      	uxtb	r0, r3
 80026fa:	2399      	movs	r3, #153	; 0x99
 80026fc:	2299      	movs	r2, #153	; 0x99
 80026fe:	2100      	movs	r1, #0
 8002700:	f7fe fbe6 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	3302      	adds	r3, #2
 800270a:	b2d8      	uxtb	r0, r3
 800270c:	23cc      	movs	r3, #204	; 0xcc
 800270e:	2200      	movs	r2, #0
 8002710:	2166      	movs	r1, #102	; 0x66
 8002712:	f7fe fbdd 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	3303      	adds	r3, #3
 800271c:	b2d8      	uxtb	r0, r3
 800271e:	2300      	movs	r3, #0
 8002720:	2200      	movs	r2, #0
 8002722:	21cc      	movs	r1, #204	; 0xcc
 8002724:	f7fe fbd4 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	3304      	adds	r3, #4
 800272e:	b2d8      	uxtb	r0, r3
 8002730:	2300      	movs	r3, #0
 8002732:	2200      	movs	r2, #0
 8002734:	21cc      	movs	r1, #204	; 0xcc
 8002736:	f7fe fbcb 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	3305      	adds	r3, #5
 8002740:	b2d8      	uxtb	r0, r3
 8002742:	2333      	movs	r3, #51	; 0x33
 8002744:	22ff      	movs	r2, #255	; 0xff
 8002746:	21ff      	movs	r1, #255	; 0xff
 8002748:	f7fe fbc2 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	3306      	adds	r3, #6
 8002752:	b2d8      	uxtb	r0, r3
 8002754:	2300      	movs	r3, #0
 8002756:	22cc      	movs	r2, #204	; 0xcc
 8002758:	2100      	movs	r1, #0
 800275a:	f7fe fbb9 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	3307      	adds	r3, #7
 8002764:	b2d8      	uxtb	r0, r3
 8002766:	2300      	movs	r3, #0
 8002768:	2200      	movs	r2, #0
 800276a:	2100      	movs	r1, #0
 800276c:	f7fe fbb0 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	3308      	adds	r3, #8
 8002776:	b2d8      	uxtb	r0, r3
 8002778:	2399      	movs	r3, #153	; 0x99
 800277a:	224c      	movs	r2, #76	; 0x4c
 800277c:	2100      	movs	r1, #0
 800277e:	f7fe fba7 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	3309      	adds	r3, #9
 8002788:	b2d8      	uxtb	r0, r3
 800278a:	2399      	movs	r3, #153	; 0x99
 800278c:	2299      	movs	r2, #153	; 0x99
 800278e:	2100      	movs	r1, #0
 8002790:	f7fe fb9e 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	330a      	adds	r3, #10
 800279a:	b2d8      	uxtb	r0, r3
 800279c:	23cc      	movs	r3, #204	; 0xcc
 800279e:	2200      	movs	r2, #0
 80027a0:	2166      	movs	r1, #102	; 0x66
 80027a2:	f7fe fb95 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	330b      	adds	r3, #11
 80027ac:	b2d8      	uxtb	r0, r3
 80027ae:	2300      	movs	r3, #0
 80027b0:	2200      	movs	r2, #0
 80027b2:	21cc      	movs	r1, #204	; 0xcc
 80027b4:	f7fe fb8c 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	330c      	adds	r3, #12
 80027be:	b2d8      	uxtb	r0, r3
 80027c0:	2300      	movs	r3, #0
 80027c2:	2200      	movs	r2, #0
 80027c4:	21cc      	movs	r1, #204	; 0xcc
 80027c6:	f7fe fb83 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	330d      	adds	r3, #13
 80027d0:	b2d8      	uxtb	r0, r3
 80027d2:	2333      	movs	r3, #51	; 0x33
 80027d4:	22ff      	movs	r2, #255	; 0xff
 80027d6:	21ff      	movs	r1, #255	; 0xff
 80027d8:	f7fe fb7a 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	330e      	adds	r3, #14
 80027e2:	b2d8      	uxtb	r0, r3
 80027e4:	2300      	movs	r3, #0
 80027e6:	22cc      	movs	r2, #204	; 0xcc
 80027e8:	2100      	movs	r1, #0
 80027ea:	f7fe fb71 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	330f      	adds	r3, #15
 80027f4:	b2d8      	uxtb	r0, r3
 80027f6:	2300      	movs	r3, #0
 80027f8:	2200      	movs	r2, #0
 80027fa:	2100      	movs	r1, #0
 80027fc:	f7fe fb68 	bl	8000ed0 <Set_Pixel>
	break;
 8002800:	e08e      	b.n	8002920 <vumetro+0x16ac>
default:
	Set_Pixel(0+numled,0,76,153);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	b2d8      	uxtb	r0, r3
 8002806:	2399      	movs	r3, #153	; 0x99
 8002808:	224c      	movs	r2, #76	; 0x4c
 800280a:	2100      	movs	r1, #0
 800280c:	f7fe fb60 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	3301      	adds	r3, #1
 8002816:	b2d8      	uxtb	r0, r3
 8002818:	2399      	movs	r3, #153	; 0x99
 800281a:	2299      	movs	r2, #153	; 0x99
 800281c:	2100      	movs	r1, #0
 800281e:	f7fe fb57 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	3302      	adds	r3, #2
 8002828:	b2d8      	uxtb	r0, r3
 800282a:	23cc      	movs	r3, #204	; 0xcc
 800282c:	2200      	movs	r2, #0
 800282e:	2166      	movs	r1, #102	; 0x66
 8002830:	f7fe fb4e 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	3303      	adds	r3, #3
 800283a:	b2d8      	uxtb	r0, r3
 800283c:	2300      	movs	r3, #0
 800283e:	2200      	movs	r2, #0
 8002840:	21cc      	movs	r1, #204	; 0xcc
 8002842:	f7fe fb45 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	3304      	adds	r3, #4
 800284c:	b2d8      	uxtb	r0, r3
 800284e:	2300      	movs	r3, #0
 8002850:	2200      	movs	r2, #0
 8002852:	21cc      	movs	r1, #204	; 0xcc
 8002854:	f7fe fb3c 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	3305      	adds	r3, #5
 800285e:	b2d8      	uxtb	r0, r3
 8002860:	2333      	movs	r3, #51	; 0x33
 8002862:	22ff      	movs	r2, #255	; 0xff
 8002864:	21ff      	movs	r1, #255	; 0xff
 8002866:	f7fe fb33 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	3306      	adds	r3, #6
 8002870:	b2d8      	uxtb	r0, r3
 8002872:	2300      	movs	r3, #0
 8002874:	22cc      	movs	r2, #204	; 0xcc
 8002876:	2100      	movs	r1, #0
 8002878:	f7fe fb2a 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	3307      	adds	r3, #7
 8002882:	b2d8      	uxtb	r0, r3
 8002884:	2300      	movs	r3, #0
 8002886:	22cc      	movs	r2, #204	; 0xcc
 8002888:	2100      	movs	r1, #0
 800288a:	f7fe fb21 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	3308      	adds	r3, #8
 8002894:	b2d8      	uxtb	r0, r3
 8002896:	2399      	movs	r3, #153	; 0x99
 8002898:	224c      	movs	r2, #76	; 0x4c
 800289a:	2100      	movs	r1, #0
 800289c:	f7fe fb18 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	3309      	adds	r3, #9
 80028a6:	b2d8      	uxtb	r0, r3
 80028a8:	2399      	movs	r3, #153	; 0x99
 80028aa:	2299      	movs	r2, #153	; 0x99
 80028ac:	2100      	movs	r1, #0
 80028ae:	f7fe fb0f 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	330a      	adds	r3, #10
 80028b8:	b2d8      	uxtb	r0, r3
 80028ba:	23cc      	movs	r3, #204	; 0xcc
 80028bc:	2200      	movs	r2, #0
 80028be:	2166      	movs	r1, #102	; 0x66
 80028c0:	f7fe fb06 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	330b      	adds	r3, #11
 80028ca:	b2d8      	uxtb	r0, r3
 80028cc:	2300      	movs	r3, #0
 80028ce:	2200      	movs	r2, #0
 80028d0:	21cc      	movs	r1, #204	; 0xcc
 80028d2:	f7fe fafd 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	330c      	adds	r3, #12
 80028dc:	b2d8      	uxtb	r0, r3
 80028de:	2300      	movs	r3, #0
 80028e0:	2200      	movs	r2, #0
 80028e2:	21cc      	movs	r1, #204	; 0xcc
 80028e4:	f7fe faf4 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	330d      	adds	r3, #13
 80028ee:	b2d8      	uxtb	r0, r3
 80028f0:	2333      	movs	r3, #51	; 0x33
 80028f2:	22ff      	movs	r2, #255	; 0xff
 80028f4:	21ff      	movs	r1, #255	; 0xff
 80028f6:	f7fe faeb 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	330e      	adds	r3, #14
 8002900:	b2d8      	uxtb	r0, r3
 8002902:	2300      	movs	r3, #0
 8002904:	22cc      	movs	r2, #204	; 0xcc
 8002906:	2100      	movs	r1, #0
 8002908:	f7fe fae2 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	b2db      	uxtb	r3, r3
 8002910:	330f      	adds	r3, #15
 8002912:	b2d8      	uxtb	r0, r3
 8002914:	2300      	movs	r3, #0
 8002916:	22cc      	movs	r2, #204	; 0xcc
 8002918:	2100      	movs	r1, #0
 800291a:	f7fe fad9 	bl	8000ed0 <Set_Pixel>
	break;
 800291e:	bf00      	nop
}

numled=48;
 8002920:	2330      	movs	r3, #48	; 0x30
 8002922:	60fb      	str	r3, [r7, #12]
switch(banda4){
 8002924:	793b      	ldrb	r3, [r7, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	2b06      	cmp	r3, #6
 800292a:	f200 8304 	bhi.w	8002f36 <vumetro+0x1cc2>
 800292e:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <vumetro+0x16c0>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	08002951 	.word	0x08002951
 8002938:	080029c3 	.word	0x080029c3
 800293c:	08002a59 	.word	0x08002a59
 8002940:	08002b13 	.word	0x08002b13
 8002944:	08002bf1 	.word	0x08002bf1
 8002948:	08002cf3 	.word	0x08002cf3
 800294c:	08002e19 	.word	0x08002e19
case 1||0:
	Set_Pixel(0+numled,76,0,153);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	b2d8      	uxtb	r0, r3
 8002954:	2399      	movs	r3, #153	; 0x99
 8002956:	2200      	movs	r2, #0
 8002958:	214c      	movs	r1, #76	; 0x4c
 800295a:	f7fe fab9 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 800295e:	2301      	movs	r3, #1
 8002960:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002962:	e00d      	b.n	8002980 <vumetro+0x170c>
		Set_Pixel(j+numled,0,0,0);
 8002964:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002966:	b2da      	uxtb	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	4413      	add	r3, r2
 800296e:	b2d8      	uxtb	r0, r3
 8002970:	2300      	movs	r3, #0
 8002972:	2200      	movs	r2, #0
 8002974:	2100      	movs	r1, #0
 8002976:	f7fe faab 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 800297a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800297c:	3301      	adds	r3, #1
 800297e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002980:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002982:	2b07      	cmp	r3, #7
 8002984:	d9ee      	bls.n	8002964 <vumetro+0x16f0>
	}
	Set_Pixel(8+numled,76,0,153);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	3308      	adds	r3, #8
 800298c:	b2d8      	uxtb	r0, r3
 800298e:	2399      	movs	r3, #153	; 0x99
 8002990:	2200      	movs	r2, #0
 8002992:	214c      	movs	r1, #76	; 0x4c
 8002994:	f7fe fa9c 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8002998:	2309      	movs	r3, #9
 800299a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800299c:	e00d      	b.n	80029ba <vumetro+0x1746>
		Set_Pixel(j+numled,0,0,0);
 800299e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	b2d8      	uxtb	r0, r3
 80029aa:	2300      	movs	r3, #0
 80029ac:	2200      	movs	r2, #0
 80029ae:	2100      	movs	r1, #0
 80029b0:	f7fe fa8e 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 80029b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029b6:	3301      	adds	r3, #1
 80029b8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80029ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029bc:	2b0f      	cmp	r3, #15
 80029be:	d9ee      	bls.n	800299e <vumetro+0x172a>
	}
	break;
 80029c0:	e348      	b.n	8003054 <vumetro+0x1de0>
case 2:
	Set_Pixel(0+numled,0,76,153);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	b2d8      	uxtb	r0, r3
 80029c6:	2399      	movs	r3, #153	; 0x99
 80029c8:	224c      	movs	r2, #76	; 0x4c
 80029ca:	2100      	movs	r1, #0
 80029cc:	f7fe fa80 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	b2d8      	uxtb	r0, r3
 80029d8:	2399      	movs	r3, #153	; 0x99
 80029da:	2299      	movs	r2, #153	; 0x99
 80029dc:	2100      	movs	r1, #0
 80029de:	f7fe fa77 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 80029e2:	2302      	movs	r3, #2
 80029e4:	847b      	strh	r3, [r7, #34]	; 0x22
 80029e6:	e00d      	b.n	8002a04 <vumetro+0x1790>
		Set_Pixel(j+numled,0,0,0);
 80029e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	b2d8      	uxtb	r0, r3
 80029f4:	2300      	movs	r3, #0
 80029f6:	2200      	movs	r2, #0
 80029f8:	2100      	movs	r1, #0
 80029fa:	f7fe fa69 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 80029fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a00:	3301      	adds	r3, #1
 8002a02:	847b      	strh	r3, [r7, #34]	; 0x22
 8002a04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a06:	2b07      	cmp	r3, #7
 8002a08:	d9ee      	bls.n	80029e8 <vumetro+0x1774>
	}
	Set_Pixel(8+numled,0,76,153);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	3308      	adds	r3, #8
 8002a10:	b2d8      	uxtb	r0, r3
 8002a12:	2399      	movs	r3, #153	; 0x99
 8002a14:	224c      	movs	r2, #76	; 0x4c
 8002a16:	2100      	movs	r1, #0
 8002a18:	f7fe fa5a 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	3309      	adds	r3, #9
 8002a22:	b2d8      	uxtb	r0, r3
 8002a24:	2399      	movs	r3, #153	; 0x99
 8002a26:	2299      	movs	r2, #153	; 0x99
 8002a28:	2100      	movs	r1, #0
 8002a2a:	f7fe fa51 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8002a2e:	230a      	movs	r3, #10
 8002a30:	843b      	strh	r3, [r7, #32]
 8002a32:	e00d      	b.n	8002a50 <vumetro+0x17dc>
		Set_Pixel(j+numled,0,0,0);
 8002a34:	8c3b      	ldrh	r3, [r7, #32]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	b2d8      	uxtb	r0, r3
 8002a40:	2300      	movs	r3, #0
 8002a42:	2200      	movs	r2, #0
 8002a44:	2100      	movs	r1, #0
 8002a46:	f7fe fa43 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8002a4a:	8c3b      	ldrh	r3, [r7, #32]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	843b      	strh	r3, [r7, #32]
 8002a50:	8c3b      	ldrh	r3, [r7, #32]
 8002a52:	2b0f      	cmp	r3, #15
 8002a54:	d9ee      	bls.n	8002a34 <vumetro+0x17c0>
	}
	break;
 8002a56:	e2fd      	b.n	8003054 <vumetro+0x1de0>

case 3:
	Set_Pixel(0+numled,0,76,153);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	b2d8      	uxtb	r0, r3
 8002a5c:	2399      	movs	r3, #153	; 0x99
 8002a5e:	224c      	movs	r2, #76	; 0x4c
 8002a60:	2100      	movs	r1, #0
 8002a62:	f7fe fa35 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	b2d8      	uxtb	r0, r3
 8002a6e:	2399      	movs	r3, #153	; 0x99
 8002a70:	2299      	movs	r2, #153	; 0x99
 8002a72:	2100      	movs	r1, #0
 8002a74:	f7fe fa2c 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	b2d8      	uxtb	r0, r3
 8002a80:	23cc      	movs	r3, #204	; 0xcc
 8002a82:	2200      	movs	r2, #0
 8002a84:	2166      	movs	r1, #102	; 0x66
 8002a86:	f7fe fa23 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	83fb      	strh	r3, [r7, #30]
 8002a8e:	e00d      	b.n	8002aac <vumetro+0x1838>
		Set_Pixel(j+numled,0,0,0);
 8002a90:	8bfb      	ldrh	r3, [r7, #30]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	b2d8      	uxtb	r0, r3
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	f7fe fa15 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8002aa6:	8bfb      	ldrh	r3, [r7, #30]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	83fb      	strh	r3, [r7, #30]
 8002aac:	8bfb      	ldrh	r3, [r7, #30]
 8002aae:	2b07      	cmp	r3, #7
 8002ab0:	d9ee      	bls.n	8002a90 <vumetro+0x181c>
	}
	Set_Pixel(8+numled,0,76,153);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	3308      	adds	r3, #8
 8002ab8:	b2d8      	uxtb	r0, r3
 8002aba:	2399      	movs	r3, #153	; 0x99
 8002abc:	224c      	movs	r2, #76	; 0x4c
 8002abe:	2100      	movs	r1, #0
 8002ac0:	f7fe fa06 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	3309      	adds	r3, #9
 8002aca:	b2d8      	uxtb	r0, r3
 8002acc:	2399      	movs	r3, #153	; 0x99
 8002ace:	2299      	movs	r2, #153	; 0x99
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	f7fe f9fd 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	330a      	adds	r3, #10
 8002adc:	b2d8      	uxtb	r0, r3
 8002ade:	23cc      	movs	r3, #204	; 0xcc
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2166      	movs	r1, #102	; 0x66
 8002ae4:	f7fe f9f4 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8002ae8:	230b      	movs	r3, #11
 8002aea:	83bb      	strh	r3, [r7, #28]
 8002aec:	e00d      	b.n	8002b0a <vumetro+0x1896>
		Set_Pixel(j+numled,0,0,0);
 8002aee:	8bbb      	ldrh	r3, [r7, #28]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	b2d8      	uxtb	r0, r3
 8002afa:	2300      	movs	r3, #0
 8002afc:	2200      	movs	r2, #0
 8002afe:	2100      	movs	r1, #0
 8002b00:	f7fe f9e6 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8002b04:	8bbb      	ldrh	r3, [r7, #28]
 8002b06:	3301      	adds	r3, #1
 8002b08:	83bb      	strh	r3, [r7, #28]
 8002b0a:	8bbb      	ldrh	r3, [r7, #28]
 8002b0c:	2b0f      	cmp	r3, #15
 8002b0e:	d9ee      	bls.n	8002aee <vumetro+0x187a>
	}
	break;
 8002b10:	e2a0      	b.n	8003054 <vumetro+0x1de0>
case 4:
	Set_Pixel(0+numled,0,76,153);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	b2d8      	uxtb	r0, r3
 8002b16:	2399      	movs	r3, #153	; 0x99
 8002b18:	224c      	movs	r2, #76	; 0x4c
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	f7fe f9d8 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	3301      	adds	r3, #1
 8002b26:	b2d8      	uxtb	r0, r3
 8002b28:	2399      	movs	r3, #153	; 0x99
 8002b2a:	2299      	movs	r2, #153	; 0x99
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	f7fe f9cf 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	3302      	adds	r3, #2
 8002b38:	b2d8      	uxtb	r0, r3
 8002b3a:	23cc      	movs	r3, #204	; 0xcc
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2166      	movs	r1, #102	; 0x66
 8002b40:	f7fe f9c6 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	3303      	adds	r3, #3
 8002b4a:	b2d8      	uxtb	r0, r3
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	2200      	movs	r2, #0
 8002b50:	21cc      	movs	r1, #204	; 0xcc
 8002b52:	f7fe f9bd 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8002b56:	2304      	movs	r3, #4
 8002b58:	837b      	strh	r3, [r7, #26]
 8002b5a:	e00d      	b.n	8002b78 <vumetro+0x1904>
		Set_Pixel(j+numled,0,0,0);
 8002b5c:	8b7b      	ldrh	r3, [r7, #26]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	b2d8      	uxtb	r0, r3
 8002b68:	2300      	movs	r3, #0
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	f7fe f9af 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8002b72:	8b7b      	ldrh	r3, [r7, #26]
 8002b74:	3301      	adds	r3, #1
 8002b76:	837b      	strh	r3, [r7, #26]
 8002b78:	8b7b      	ldrh	r3, [r7, #26]
 8002b7a:	2b07      	cmp	r3, #7
 8002b7c:	d9ee      	bls.n	8002b5c <vumetro+0x18e8>
	}
	Set_Pixel(8+numled,0,76,153);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3308      	adds	r3, #8
 8002b84:	b2d8      	uxtb	r0, r3
 8002b86:	2399      	movs	r3, #153	; 0x99
 8002b88:	224c      	movs	r2, #76	; 0x4c
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	f7fe f9a0 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	3309      	adds	r3, #9
 8002b96:	b2d8      	uxtb	r0, r3
 8002b98:	2399      	movs	r3, #153	; 0x99
 8002b9a:	2299      	movs	r2, #153	; 0x99
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	f7fe f997 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	330a      	adds	r3, #10
 8002ba8:	b2d8      	uxtb	r0, r3
 8002baa:	23cc      	movs	r3, #204	; 0xcc
 8002bac:	2200      	movs	r2, #0
 8002bae:	2166      	movs	r1, #102	; 0x66
 8002bb0:	f7fe f98e 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	330b      	adds	r3, #11
 8002bba:	b2d8      	uxtb	r0, r3
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	21cc      	movs	r1, #204	; 0xcc
 8002bc2:	f7fe f985 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8002bc6:	230c      	movs	r3, #12
 8002bc8:	833b      	strh	r3, [r7, #24]
 8002bca:	e00d      	b.n	8002be8 <vumetro+0x1974>
		Set_Pixel(j+numled,0,0,0);
 8002bcc:	8b3b      	ldrh	r3, [r7, #24]
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	b2d8      	uxtb	r0, r3
 8002bd8:	2300      	movs	r3, #0
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2100      	movs	r1, #0
 8002bde:	f7fe f977 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8002be2:	8b3b      	ldrh	r3, [r7, #24]
 8002be4:	3301      	adds	r3, #1
 8002be6:	833b      	strh	r3, [r7, #24]
 8002be8:	8b3b      	ldrh	r3, [r7, #24]
 8002bea:	2b0f      	cmp	r3, #15
 8002bec:	d9ee      	bls.n	8002bcc <vumetro+0x1958>
	}
	break;
 8002bee:	e231      	b.n	8003054 <vumetro+0x1de0>
case 5:
	Set_Pixel(0+numled,0,76,153);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	b2d8      	uxtb	r0, r3
 8002bf4:	2399      	movs	r3, #153	; 0x99
 8002bf6:	224c      	movs	r2, #76	; 0x4c
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	f7fe f969 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	3301      	adds	r3, #1
 8002c04:	b2d8      	uxtb	r0, r3
 8002c06:	2399      	movs	r3, #153	; 0x99
 8002c08:	2299      	movs	r2, #153	; 0x99
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	f7fe f960 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	3302      	adds	r3, #2
 8002c16:	b2d8      	uxtb	r0, r3
 8002c18:	23cc      	movs	r3, #204	; 0xcc
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2166      	movs	r1, #102	; 0x66
 8002c1e:	f7fe f957 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	3303      	adds	r3, #3
 8002c28:	b2d8      	uxtb	r0, r3
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	21cc      	movs	r1, #204	; 0xcc
 8002c30:	f7fe f94e 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	3304      	adds	r3, #4
 8002c3a:	b2d8      	uxtb	r0, r3
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	2200      	movs	r2, #0
 8002c40:	21cc      	movs	r1, #204	; 0xcc
 8002c42:	f7fe f945 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8002c46:	2305      	movs	r3, #5
 8002c48:	82fb      	strh	r3, [r7, #22]
 8002c4a:	e00d      	b.n	8002c68 <vumetro+0x19f4>
		Set_Pixel(j+numled,0,0,0);
 8002c4c:	8afb      	ldrh	r3, [r7, #22]
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	b2d8      	uxtb	r0, r3
 8002c58:	2300      	movs	r3, #0
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	f7fe f937 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8002c62:	8afb      	ldrh	r3, [r7, #22]
 8002c64:	3301      	adds	r3, #1
 8002c66:	82fb      	strh	r3, [r7, #22]
 8002c68:	8afb      	ldrh	r3, [r7, #22]
 8002c6a:	2b07      	cmp	r3, #7
 8002c6c:	d9ee      	bls.n	8002c4c <vumetro+0x19d8>
	}
	Set_Pixel(8+numled,0,76,153);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	3308      	adds	r3, #8
 8002c74:	b2d8      	uxtb	r0, r3
 8002c76:	2399      	movs	r3, #153	; 0x99
 8002c78:	224c      	movs	r2, #76	; 0x4c
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	f7fe f928 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	3309      	adds	r3, #9
 8002c86:	b2d8      	uxtb	r0, r3
 8002c88:	2399      	movs	r3, #153	; 0x99
 8002c8a:	2299      	movs	r2, #153	; 0x99
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	f7fe f91f 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	330a      	adds	r3, #10
 8002c98:	b2d8      	uxtb	r0, r3
 8002c9a:	23cc      	movs	r3, #204	; 0xcc
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2166      	movs	r1, #102	; 0x66
 8002ca0:	f7fe f916 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	330b      	adds	r3, #11
 8002caa:	b2d8      	uxtb	r0, r3
 8002cac:	2300      	movs	r3, #0
 8002cae:	2200      	movs	r2, #0
 8002cb0:	21cc      	movs	r1, #204	; 0xcc
 8002cb2:	f7fe f90d 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	330c      	adds	r3, #12
 8002cbc:	b2d8      	uxtb	r0, r3
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	21cc      	movs	r1, #204	; 0xcc
 8002cc4:	f7fe f904 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8002cc8:	230d      	movs	r3, #13
 8002cca:	82bb      	strh	r3, [r7, #20]
 8002ccc:	e00d      	b.n	8002cea <vumetro+0x1a76>
		Set_Pixel(j+numled,0,0,0);
 8002cce:	8abb      	ldrh	r3, [r7, #20]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	b2d8      	uxtb	r0, r3
 8002cda:	2300      	movs	r3, #0
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2100      	movs	r1, #0
 8002ce0:	f7fe f8f6 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8002ce4:	8abb      	ldrh	r3, [r7, #20]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	82bb      	strh	r3, [r7, #20]
 8002cea:	8abb      	ldrh	r3, [r7, #20]
 8002cec:	2b0f      	cmp	r3, #15
 8002cee:	d9ee      	bls.n	8002cce <vumetro+0x1a5a>
	}
	break;
 8002cf0:	e1b0      	b.n	8003054 <vumetro+0x1de0>
case 6:
	Set_Pixel(0+numled,0,76,153);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	b2d8      	uxtb	r0, r3
 8002cf6:	2399      	movs	r3, #153	; 0x99
 8002cf8:	224c      	movs	r2, #76	; 0x4c
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	f7fe f8e8 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	3301      	adds	r3, #1
 8002d06:	b2d8      	uxtb	r0, r3
 8002d08:	2399      	movs	r3, #153	; 0x99
 8002d0a:	2299      	movs	r2, #153	; 0x99
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	f7fe f8df 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	3302      	adds	r3, #2
 8002d18:	b2d8      	uxtb	r0, r3
 8002d1a:	23cc      	movs	r3, #204	; 0xcc
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2166      	movs	r1, #102	; 0x66
 8002d20:	f7fe f8d6 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	3303      	adds	r3, #3
 8002d2a:	b2d8      	uxtb	r0, r3
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2200      	movs	r2, #0
 8002d30:	21cc      	movs	r1, #204	; 0xcc
 8002d32:	f7fe f8cd 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	b2d8      	uxtb	r0, r3
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2200      	movs	r2, #0
 8002d42:	21cc      	movs	r1, #204	; 0xcc
 8002d44:	f7fe f8c4 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3305      	adds	r3, #5
 8002d4e:	b2d8      	uxtb	r0, r3
 8002d50:	2333      	movs	r3, #51	; 0x33
 8002d52:	22ff      	movs	r2, #255	; 0xff
 8002d54:	21ff      	movs	r1, #255	; 0xff
 8002d56:	f7fe f8bb 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8002d5a:	2306      	movs	r3, #6
 8002d5c:	827b      	strh	r3, [r7, #18]
 8002d5e:	e00d      	b.n	8002d7c <vumetro+0x1b08>
		Set_Pixel(j+numled,0,0,0);
 8002d60:	8a7b      	ldrh	r3, [r7, #18]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	b2d8      	uxtb	r0, r3
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2100      	movs	r1, #0
 8002d72:	f7fe f8ad 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8002d76:	8a7b      	ldrh	r3, [r7, #18]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	827b      	strh	r3, [r7, #18]
 8002d7c:	8a7b      	ldrh	r3, [r7, #18]
 8002d7e:	2b07      	cmp	r3, #7
 8002d80:	d9ee      	bls.n	8002d60 <vumetro+0x1aec>
	}
	Set_Pixel(8+numled,0,76,153);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	3308      	adds	r3, #8
 8002d88:	b2d8      	uxtb	r0, r3
 8002d8a:	2399      	movs	r3, #153	; 0x99
 8002d8c:	224c      	movs	r2, #76	; 0x4c
 8002d8e:	2100      	movs	r1, #0
 8002d90:	f7fe f89e 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	3309      	adds	r3, #9
 8002d9a:	b2d8      	uxtb	r0, r3
 8002d9c:	2399      	movs	r3, #153	; 0x99
 8002d9e:	2299      	movs	r2, #153	; 0x99
 8002da0:	2100      	movs	r1, #0
 8002da2:	f7fe f895 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	330a      	adds	r3, #10
 8002dac:	b2d8      	uxtb	r0, r3
 8002dae:	23cc      	movs	r3, #204	; 0xcc
 8002db0:	2200      	movs	r2, #0
 8002db2:	2166      	movs	r1, #102	; 0x66
 8002db4:	f7fe f88c 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	330b      	adds	r3, #11
 8002dbe:	b2d8      	uxtb	r0, r3
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	21cc      	movs	r1, #204	; 0xcc
 8002dc6:	f7fe f883 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	330c      	adds	r3, #12
 8002dd0:	b2d8      	uxtb	r0, r3
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	21cc      	movs	r1, #204	; 0xcc
 8002dd8:	f7fe f87a 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	330d      	adds	r3, #13
 8002de2:	b2d8      	uxtb	r0, r3
 8002de4:	2333      	movs	r3, #51	; 0x33
 8002de6:	22ff      	movs	r2, #255	; 0xff
 8002de8:	21ff      	movs	r1, #255	; 0xff
 8002dea:	f7fe f871 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8002dee:	230e      	movs	r3, #14
 8002df0:	823b      	strh	r3, [r7, #16]
 8002df2:	e00d      	b.n	8002e10 <vumetro+0x1b9c>
		Set_Pixel(j+numled,0,0,0);
 8002df4:	8a3b      	ldrh	r3, [r7, #16]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	b2d8      	uxtb	r0, r3
 8002e00:	2300      	movs	r3, #0
 8002e02:	2200      	movs	r2, #0
 8002e04:	2100      	movs	r1, #0
 8002e06:	f7fe f863 	bl	8000ed0 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8002e0a:	8a3b      	ldrh	r3, [r7, #16]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	823b      	strh	r3, [r7, #16]
 8002e10:	8a3b      	ldrh	r3, [r7, #16]
 8002e12:	2b0f      	cmp	r3, #15
 8002e14:	d9ee      	bls.n	8002df4 <vumetro+0x1b80>
	}
	break;
 8002e16:	e11d      	b.n	8003054 <vumetro+0x1de0>
case 7:
	Set_Pixel(0+numled,0,76,153);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	b2d8      	uxtb	r0, r3
 8002e1c:	2399      	movs	r3, #153	; 0x99
 8002e1e:	224c      	movs	r2, #76	; 0x4c
 8002e20:	2100      	movs	r1, #0
 8002e22:	f7fe f855 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	b2d8      	uxtb	r0, r3
 8002e2e:	2399      	movs	r3, #153	; 0x99
 8002e30:	2299      	movs	r2, #153	; 0x99
 8002e32:	2100      	movs	r1, #0
 8002e34:	f7fe f84c 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	b2d8      	uxtb	r0, r3
 8002e40:	23cc      	movs	r3, #204	; 0xcc
 8002e42:	2200      	movs	r2, #0
 8002e44:	2166      	movs	r1, #102	; 0x66
 8002e46:	f7fe f843 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	3303      	adds	r3, #3
 8002e50:	b2d8      	uxtb	r0, r3
 8002e52:	2300      	movs	r3, #0
 8002e54:	2200      	movs	r2, #0
 8002e56:	21cc      	movs	r1, #204	; 0xcc
 8002e58:	f7fe f83a 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	3304      	adds	r3, #4
 8002e62:	b2d8      	uxtb	r0, r3
 8002e64:	2300      	movs	r3, #0
 8002e66:	2200      	movs	r2, #0
 8002e68:	21cc      	movs	r1, #204	; 0xcc
 8002e6a:	f7fe f831 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	3305      	adds	r3, #5
 8002e74:	b2d8      	uxtb	r0, r3
 8002e76:	2333      	movs	r3, #51	; 0x33
 8002e78:	22ff      	movs	r2, #255	; 0xff
 8002e7a:	21ff      	movs	r1, #255	; 0xff
 8002e7c:	f7fe f828 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	3306      	adds	r3, #6
 8002e86:	b2d8      	uxtb	r0, r3
 8002e88:	2300      	movs	r3, #0
 8002e8a:	22cc      	movs	r2, #204	; 0xcc
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	f7fe f81f 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	3307      	adds	r3, #7
 8002e98:	b2d8      	uxtb	r0, r3
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	f7fe f816 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	3308      	adds	r3, #8
 8002eaa:	b2d8      	uxtb	r0, r3
 8002eac:	2399      	movs	r3, #153	; 0x99
 8002eae:	224c      	movs	r2, #76	; 0x4c
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	f7fe f80d 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	3309      	adds	r3, #9
 8002ebc:	b2d8      	uxtb	r0, r3
 8002ebe:	2399      	movs	r3, #153	; 0x99
 8002ec0:	2299      	movs	r2, #153	; 0x99
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	f7fe f804 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	330a      	adds	r3, #10
 8002ece:	b2d8      	uxtb	r0, r3
 8002ed0:	23cc      	movs	r3, #204	; 0xcc
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2166      	movs	r1, #102	; 0x66
 8002ed6:	f7fd fffb 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	330b      	adds	r3, #11
 8002ee0:	b2d8      	uxtb	r0, r3
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	21cc      	movs	r1, #204	; 0xcc
 8002ee8:	f7fd fff2 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	330c      	adds	r3, #12
 8002ef2:	b2d8      	uxtb	r0, r3
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	21cc      	movs	r1, #204	; 0xcc
 8002efa:	f7fd ffe9 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	330d      	adds	r3, #13
 8002f04:	b2d8      	uxtb	r0, r3
 8002f06:	2333      	movs	r3, #51	; 0x33
 8002f08:	22ff      	movs	r2, #255	; 0xff
 8002f0a:	21ff      	movs	r1, #255	; 0xff
 8002f0c:	f7fd ffe0 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	330e      	adds	r3, #14
 8002f16:	b2d8      	uxtb	r0, r3
 8002f18:	2300      	movs	r3, #0
 8002f1a:	22cc      	movs	r2, #204	; 0xcc
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	f7fd ffd7 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	330f      	adds	r3, #15
 8002f28:	b2d8      	uxtb	r0, r3
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2100      	movs	r1, #0
 8002f30:	f7fd ffce 	bl	8000ed0 <Set_Pixel>
	break;
 8002f34:	e08e      	b.n	8003054 <vumetro+0x1de0>
default:
	Set_Pixel(0+numled,0,76,153);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	b2d8      	uxtb	r0, r3
 8002f3a:	2399      	movs	r3, #153	; 0x99
 8002f3c:	224c      	movs	r2, #76	; 0x4c
 8002f3e:	2100      	movs	r1, #0
 8002f40:	f7fd ffc6 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	b2d8      	uxtb	r0, r3
 8002f4c:	2399      	movs	r3, #153	; 0x99
 8002f4e:	2299      	movs	r2, #153	; 0x99
 8002f50:	2100      	movs	r1, #0
 8002f52:	f7fd ffbd 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	b2d8      	uxtb	r0, r3
 8002f5e:	23cc      	movs	r3, #204	; 0xcc
 8002f60:	2200      	movs	r2, #0
 8002f62:	2166      	movs	r1, #102	; 0x66
 8002f64:	f7fd ffb4 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	3303      	adds	r3, #3
 8002f6e:	b2d8      	uxtb	r0, r3
 8002f70:	2300      	movs	r3, #0
 8002f72:	2200      	movs	r2, #0
 8002f74:	21cc      	movs	r1, #204	; 0xcc
 8002f76:	f7fd ffab 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	3304      	adds	r3, #4
 8002f80:	b2d8      	uxtb	r0, r3
 8002f82:	2300      	movs	r3, #0
 8002f84:	2200      	movs	r2, #0
 8002f86:	21cc      	movs	r1, #204	; 0xcc
 8002f88:	f7fd ffa2 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	3305      	adds	r3, #5
 8002f92:	b2d8      	uxtb	r0, r3
 8002f94:	2333      	movs	r3, #51	; 0x33
 8002f96:	22ff      	movs	r2, #255	; 0xff
 8002f98:	21ff      	movs	r1, #255	; 0xff
 8002f9a:	f7fd ff99 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	3306      	adds	r3, #6
 8002fa4:	b2d8      	uxtb	r0, r3
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	22cc      	movs	r2, #204	; 0xcc
 8002faa:	2100      	movs	r1, #0
 8002fac:	f7fd ff90 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	3307      	adds	r3, #7
 8002fb6:	b2d8      	uxtb	r0, r3
 8002fb8:	2300      	movs	r3, #0
 8002fba:	22cc      	movs	r2, #204	; 0xcc
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	f7fd ff87 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	3308      	adds	r3, #8
 8002fc8:	b2d8      	uxtb	r0, r3
 8002fca:	2399      	movs	r3, #153	; 0x99
 8002fcc:	224c      	movs	r2, #76	; 0x4c
 8002fce:	2100      	movs	r1, #0
 8002fd0:	f7fd ff7e 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	3309      	adds	r3, #9
 8002fda:	b2d8      	uxtb	r0, r3
 8002fdc:	2399      	movs	r3, #153	; 0x99
 8002fde:	2299      	movs	r2, #153	; 0x99
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	f7fd ff75 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	330a      	adds	r3, #10
 8002fec:	b2d8      	uxtb	r0, r3
 8002fee:	23cc      	movs	r3, #204	; 0xcc
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2166      	movs	r1, #102	; 0x66
 8002ff4:	f7fd ff6c 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	330b      	adds	r3, #11
 8002ffe:	b2d8      	uxtb	r0, r3
 8003000:	2300      	movs	r3, #0
 8003002:	2200      	movs	r2, #0
 8003004:	21cc      	movs	r1, #204	; 0xcc
 8003006:	f7fd ff63 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	330c      	adds	r3, #12
 8003010:	b2d8      	uxtb	r0, r3
 8003012:	2300      	movs	r3, #0
 8003014:	2200      	movs	r2, #0
 8003016:	21cc      	movs	r1, #204	; 0xcc
 8003018:	f7fd ff5a 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	330d      	adds	r3, #13
 8003022:	b2d8      	uxtb	r0, r3
 8003024:	2333      	movs	r3, #51	; 0x33
 8003026:	22ff      	movs	r2, #255	; 0xff
 8003028:	21ff      	movs	r1, #255	; 0xff
 800302a:	f7fd ff51 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	330e      	adds	r3, #14
 8003034:	b2d8      	uxtb	r0, r3
 8003036:	2300      	movs	r3, #0
 8003038:	22cc      	movs	r2, #204	; 0xcc
 800303a:	2100      	movs	r1, #0
 800303c:	f7fd ff48 	bl	8000ed0 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	330f      	adds	r3, #15
 8003046:	b2d8      	uxtb	r0, r3
 8003048:	2300      	movs	r3, #0
 800304a:	22cc      	movs	r2, #204	; 0xcc
 800304c:	2100      	movs	r1, #0
 800304e:	f7fd ff3f 	bl	8000ed0 <Set_Pixel>
	break;
 8003052:	bf00      	nop
	Set_Pixel(10+numled,255,255,51);
	Set_Pixel(9+numled,0,204,0);
	Set_Pixel(8+numled,0,204,0);
	break;
	*/
}
 8003054:	bf00      	nop
 8003056:	3774      	adds	r7, #116	; 0x74
 8003058:	46bd      	mov	sp, r7
 800305a:	bd90      	pop	{r4, r7, pc}

0800305c <HAL_ADC_ConvCpltCallback>:
	  return 0x01;
	}
*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
DATO_ADC = HAL_ADC_GetValue(&hadc1);
 8003064:	4837      	ldr	r0, [pc, #220]	; (8003144 <HAL_ADC_ConvCpltCallback+0xe8>)
 8003066:	f001 f873 	bl	8004150 <HAL_ADC_GetValue>
 800306a:	4603      	mov	r3, r0
 800306c:	b29a      	uxth	r2, r3
 800306e:	4b36      	ldr	r3, [pc, #216]	; (8003148 <HAL_ADC_ConvCpltCallback+0xec>)
 8003070:	801a      	strh	r2, [r3, #0]
//HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
HAL_GPIO_TogglePin(GPIOC,  GPIO_PIN_6);
 8003072:	2140      	movs	r1, #64	; 0x40
 8003074:	4835      	ldr	r0, [pc, #212]	; (800314c <HAL_ADC_ConvCpltCallback+0xf0>)
 8003076:	f002 f8e4 	bl	8005242 <HAL_GPIO_TogglePin>
//GPIOD->ODR = DATO_ADC;
iir_int = (float32_t)DATO_ADC;
 800307a:	4b33      	ldr	r3, [pc, #204]	; (8003148 <HAL_ADC_ConvCpltCallback+0xec>)
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003086:	4b32      	ldr	r3, [pc, #200]	; (8003150 <HAL_ADC_ConvCpltCallback+0xf4>)
 8003088:	edc3 7a00 	vstr	s15, [r3]
if(i<10)
 800308c:	4b31      	ldr	r3, [pc, #196]	; (8003154 <HAL_ADC_ConvCpltCallback+0xf8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b09      	cmp	r3, #9
 8003092:	dc08      	bgt.n	80030a6 <HAL_ADC_ConvCpltCallback+0x4a>
{GPIOD->ODR = 0;
 8003094:	4b30      	ldr	r3, [pc, #192]	; (8003158 <HAL_ADC_ConvCpltCallback+0xfc>)
 8003096:	2200      	movs	r2, #0
 8003098:	615a      	str	r2, [r3, #20]
i++;
 800309a:	4b2e      	ldr	r3, [pc, #184]	; (8003154 <HAL_ADC_ConvCpltCallback+0xf8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3301      	adds	r3, #1
 80030a0:	4a2c      	ldr	r2, [pc, #176]	; (8003154 <HAL_ADC_ConvCpltCallback+0xf8>)
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	e035      	b.n	8003112 <HAL_ADC_ConvCpltCallback+0xb6>
	}
else
{
arm_biquad_cascade_df1_f32(&S,&iir_int,&iir_out,1);
 80030a6:	2301      	movs	r3, #1
 80030a8:	4a2c      	ldr	r2, [pc, #176]	; (800315c <HAL_ADC_ConvCpltCallback+0x100>)
 80030aa:	4929      	ldr	r1, [pc, #164]	; (8003150 <HAL_ADC_ConvCpltCallback+0xf4>)
 80030ac:	482c      	ldr	r0, [pc, #176]	; (8003160 <HAL_ADC_ConvCpltCallback+0x104>)
 80030ae:	f004 f8a7 	bl	8007200 <arm_biquad_cascade_df1_f32>
//Para usar los filtros
arm_biquad_cascade_df1_f32(&S1,&iir_int,&iir_out1,1);
 80030b2:	2301      	movs	r3, #1
 80030b4:	4a2b      	ldr	r2, [pc, #172]	; (8003164 <HAL_ADC_ConvCpltCallback+0x108>)
 80030b6:	4926      	ldr	r1, [pc, #152]	; (8003150 <HAL_ADC_ConvCpltCallback+0xf4>)
 80030b8:	482b      	ldr	r0, [pc, #172]	; (8003168 <HAL_ADC_ConvCpltCallback+0x10c>)
 80030ba:	f004 f8a1 	bl	8007200 <arm_biquad_cascade_df1_f32>
arm_biquad_cascade_df1_f32(&S2,&iir_int,&iir_out2,1);
 80030be:	2301      	movs	r3, #1
 80030c0:	4a2a      	ldr	r2, [pc, #168]	; (800316c <HAL_ADC_ConvCpltCallback+0x110>)
 80030c2:	4923      	ldr	r1, [pc, #140]	; (8003150 <HAL_ADC_ConvCpltCallback+0xf4>)
 80030c4:	482a      	ldr	r0, [pc, #168]	; (8003170 <HAL_ADC_ConvCpltCallback+0x114>)
 80030c6:	f004 f89b 	bl	8007200 <arm_biquad_cascade_df1_f32>
arm_biquad_cascade_df1_f32(&S3,&iir_int,&iir_out3,1);
 80030ca:	2301      	movs	r3, #1
 80030cc:	4a29      	ldr	r2, [pc, #164]	; (8003174 <HAL_ADC_ConvCpltCallback+0x118>)
 80030ce:	4920      	ldr	r1, [pc, #128]	; (8003150 <HAL_ADC_ConvCpltCallback+0xf4>)
 80030d0:	4829      	ldr	r0, [pc, #164]	; (8003178 <HAL_ADC_ConvCpltCallback+0x11c>)
 80030d2:	f004 f895 	bl	8007200 <arm_biquad_cascade_df1_f32>
arm_biquad_cascade_df1_f32(&S4,&iir_int,&iir_out4,1);
 80030d6:	2301      	movs	r3, #1
 80030d8:	4a28      	ldr	r2, [pc, #160]	; (800317c <HAL_ADC_ConvCpltCallback+0x120>)
 80030da:	491d      	ldr	r1, [pc, #116]	; (8003150 <HAL_ADC_ConvCpltCallback+0xf4>)
 80030dc:	4828      	ldr	r0, [pc, #160]	; (8003180 <HAL_ADC_ConvCpltCallback+0x124>)
 80030de:	f004 f88f 	bl	8007200 <arm_biquad_cascade_df1_f32>
arm_biquad_cascade_df1_f32(&S5,&iir_int,&iir_out5,1);
 80030e2:	2301      	movs	r3, #1
 80030e4:	4a27      	ldr	r2, [pc, #156]	; (8003184 <HAL_ADC_ConvCpltCallback+0x128>)
 80030e6:	491a      	ldr	r1, [pc, #104]	; (8003150 <HAL_ADC_ConvCpltCallback+0xf4>)
 80030e8:	4827      	ldr	r0, [pc, #156]	; (8003188 <HAL_ADC_ConvCpltCallback+0x12c>)
 80030ea:	f004 f889 	bl	8007200 <arm_biquad_cascade_df1_f32>
arm_biquad_cascade_df1_f32(&S6,&iir_int,&iir_out6,1);
 80030ee:	2301      	movs	r3, #1
 80030f0:	4a26      	ldr	r2, [pc, #152]	; (800318c <HAL_ADC_ConvCpltCallback+0x130>)
 80030f2:	4917      	ldr	r1, [pc, #92]	; (8003150 <HAL_ADC_ConvCpltCallback+0xf4>)
 80030f4:	4826      	ldr	r0, [pc, #152]	; (8003190 <HAL_ADC_ConvCpltCallback+0x134>)
 80030f6:	f004 f883 	bl	8007200 <arm_biquad_cascade_df1_f32>
arm_biquad_cascade_df1_f32(&S7,&iir_int,&iir_out7,1);
 80030fa:	2301      	movs	r3, #1
 80030fc:	4a25      	ldr	r2, [pc, #148]	; (8003194 <HAL_ADC_ConvCpltCallback+0x138>)
 80030fe:	4914      	ldr	r1, [pc, #80]	; (8003150 <HAL_ADC_ConvCpltCallback+0xf4>)
 8003100:	4825      	ldr	r0, [pc, #148]	; (8003198 <HAL_ADC_ConvCpltCallback+0x13c>)
 8003102:	f004 f87d 	bl	8007200 <arm_biquad_cascade_df1_f32>
arm_biquad_cascade_df1_f32(&S8,&iir_int,&iir_out8,1);
 8003106:	2301      	movs	r3, #1
 8003108:	4a24      	ldr	r2, [pc, #144]	; (800319c <HAL_ADC_ConvCpltCallback+0x140>)
 800310a:	4911      	ldr	r1, [pc, #68]	; (8003150 <HAL_ADC_ConvCpltCallback+0xf4>)
 800310c:	4824      	ldr	r0, [pc, #144]	; (80031a0 <HAL_ADC_ConvCpltCallback+0x144>)
 800310e:	f004 f877 	bl	8007200 <arm_biquad_cascade_df1_f32>


}
DATO_DAC = (uint16_t)iir_out1;
 8003112:	4b14      	ldr	r3, [pc, #80]	; (8003164 <HAL_ADC_ConvCpltCallback+0x108>)
 8003114:	edd3 7a00 	vldr	s15, [r3]
 8003118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800311c:	ee17 3a90 	vmov	r3, s15
 8003120:	b29a      	uxth	r2, r3
 8003122:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <HAL_ADC_ConvCpltCallback+0x148>)
 8003124:	801a      	strh	r2, [r3, #0]
GPIOD->ODR = DATO_DAC;
 8003126:	4b1f      	ldr	r3, [pc, #124]	; (80031a4 <HAL_ADC_ConvCpltCallback+0x148>)
 8003128:	881a      	ldrh	r2, [r3, #0]
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_ADC_ConvCpltCallback+0xfc>)
 800312c:	615a      	str	r2, [r3, #20]
contador_adc++;
 800312e:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <HAL_ADC_ConvCpltCallback+0x14c>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	3301      	adds	r3, #1
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4b1c      	ldr	r3, [pc, #112]	; (80031a8 <HAL_ADC_ConvCpltCallback+0x14c>)
 8003138:	701a      	strb	r2, [r3, #0]

}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	200001e4 	.word	0x200001e4
 8003148:	20000364 	.word	0x20000364
 800314c:	40020800 	.word	0x40020800
 8003150:	2000037c 	.word	0x2000037c
 8003154:	20000368 	.word	0x20000368
 8003158:	40020c00 	.word	0x40020c00
 800315c:	20000380 	.word	0x20000380
 8003160:	20000384 	.word	0x20000384
 8003164:	200003b0 	.word	0x200003b0
 8003168:	200003b4 	.word	0x200003b4
 800316c:	200003e0 	.word	0x200003e0
 8003170:	200003e4 	.word	0x200003e4
 8003174:	20000410 	.word	0x20000410
 8003178:	20000414 	.word	0x20000414
 800317c:	20000440 	.word	0x20000440
 8003180:	20000444 	.word	0x20000444
 8003184:	20000480 	.word	0x20000480
 8003188:	20000484 	.word	0x20000484
 800318c:	200004d0 	.word	0x200004d0
 8003190:	200004d4 	.word	0x200004d4
 8003194:	20000520 	.word	0x20000520
 8003198:	20000524 	.word	0x20000524
 800319c:	20000550 	.word	0x20000550
 80031a0:	20000554 	.word	0x20000554
 80031a4:	20000366 	.word	0x20000366
 80031a8:	20000560 	.word	0x20000560

080031ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031b0:	f000 fd4a 	bl	8003c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031b4:	f000 f88a 	bl	80032cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031b8:	f000 fadc 	bl	8003774 <MX_GPIO_Init>
  MX_DMA_Init();
 80031bc:	f000 faba 	bl	8003734 <MX_DMA_Init>
  MX_ADC1_Init();
 80031c0:	f000 f8ee 	bl	80033a0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80031c4:	f000 f9de 	bl	8003584 <MX_TIM2_Init>
  MX_TIM1_Init();
 80031c8:	f000 f93c 	bl	8003444 <MX_TIM1_Init>
  MX_TIM3_Init();
 80031cc:	f000 fa64 	bl	8003698 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
arm_biquad_cascade_df1_init_f32(&S,Cascada,&iir_coeff[0],&iir_state[0]);
 80031d0:	4b20      	ldr	r3, [pc, #128]	; (8003254 <main+0xa8>)
 80031d2:	4a21      	ldr	r2, [pc, #132]	; (8003258 <main+0xac>)
 80031d4:	2101      	movs	r1, #1
 80031d6:	4821      	ldr	r0, [pc, #132]	; (800325c <main+0xb0>)
 80031d8:	f004 f806 	bl	80071e8 <arm_biquad_cascade_df1_init_f32>
  //Para inicializar los filtros

arm_biquad_cascade_df1_init_f32(&S1,2,&iir_coeff1[0],&iir_state1[0]);
 80031dc:	4b20      	ldr	r3, [pc, #128]	; (8003260 <main+0xb4>)
 80031de:	4a21      	ldr	r2, [pc, #132]	; (8003264 <main+0xb8>)
 80031e0:	2102      	movs	r1, #2
 80031e2:	4821      	ldr	r0, [pc, #132]	; (8003268 <main+0xbc>)
 80031e4:	f004 f800 	bl	80071e8 <arm_biquad_cascade_df1_init_f32>
arm_biquad_cascade_df1_init_f32(&S2,2,&iir_coeff2[0],&iir_state2[0]);
 80031e8:	4b20      	ldr	r3, [pc, #128]	; (800326c <main+0xc0>)
 80031ea:	4a21      	ldr	r2, [pc, #132]	; (8003270 <main+0xc4>)
 80031ec:	2102      	movs	r1, #2
 80031ee:	4821      	ldr	r0, [pc, #132]	; (8003274 <main+0xc8>)
 80031f0:	f003 fffa 	bl	80071e8 <arm_biquad_cascade_df1_init_f32>
arm_biquad_cascade_df1_init_f32(&S3,2,&iir_coeff3[0],&iir_state3[0]);
 80031f4:	4b20      	ldr	r3, [pc, #128]	; (8003278 <main+0xcc>)
 80031f6:	4a21      	ldr	r2, [pc, #132]	; (800327c <main+0xd0>)
 80031f8:	2102      	movs	r1, #2
 80031fa:	4821      	ldr	r0, [pc, #132]	; (8003280 <main+0xd4>)
 80031fc:	f003 fff4 	bl	80071e8 <arm_biquad_cascade_df1_init_f32>
arm_biquad_cascade_df1_init_f32(&S4,2,&iir_coeff4[0],&iir_state4[0]);
 8003200:	4b20      	ldr	r3, [pc, #128]	; (8003284 <main+0xd8>)
 8003202:	4a21      	ldr	r2, [pc, #132]	; (8003288 <main+0xdc>)
 8003204:	2102      	movs	r1, #2
 8003206:	4821      	ldr	r0, [pc, #132]	; (800328c <main+0xe0>)
 8003208:	f003 ffee 	bl	80071e8 <arm_biquad_cascade_df1_init_f32>
arm_biquad_cascade_df1_init_f32(&S5,3,&iir_coeff5[0],&iir_state5[0]);
 800320c:	4b20      	ldr	r3, [pc, #128]	; (8003290 <main+0xe4>)
 800320e:	4a21      	ldr	r2, [pc, #132]	; (8003294 <main+0xe8>)
 8003210:	2103      	movs	r1, #3
 8003212:	4821      	ldr	r0, [pc, #132]	; (8003298 <main+0xec>)
 8003214:	f003 ffe8 	bl	80071e8 <arm_biquad_cascade_df1_init_f32>
arm_biquad_cascade_df1_init_f32(&S6,4,&iir_coeff6[0],&iir_state6[0]);
 8003218:	4b20      	ldr	r3, [pc, #128]	; (800329c <main+0xf0>)
 800321a:	4a21      	ldr	r2, [pc, #132]	; (80032a0 <main+0xf4>)
 800321c:	2104      	movs	r1, #4
 800321e:	4821      	ldr	r0, [pc, #132]	; (80032a4 <main+0xf8>)
 8003220:	f003 ffe2 	bl	80071e8 <arm_biquad_cascade_df1_init_f32>
arm_biquad_cascade_df1_init_f32(&S7,4,&iir_coeff7[0],&iir_state7[0]);
 8003224:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <main+0xfc>)
 8003226:	4a21      	ldr	r2, [pc, #132]	; (80032ac <main+0x100>)
 8003228:	2104      	movs	r1, #4
 800322a:	4821      	ldr	r0, [pc, #132]	; (80032b0 <main+0x104>)
 800322c:	f003 ffdc 	bl	80071e8 <arm_biquad_cascade_df1_init_f32>
arm_biquad_cascade_df1_init_f32(&S8,2,&iir_coeff8[0],&iir_state8[0]);
 8003230:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <main+0x108>)
 8003232:	4a21      	ldr	r2, [pc, #132]	; (80032b8 <main+0x10c>)
 8003234:	2102      	movs	r1, #2
 8003236:	4821      	ldr	r0, [pc, #132]	; (80032bc <main+0x110>)
 8003238:	f003 ffd6 	bl	80071e8 <arm_biquad_cascade_df1_init_f32>
  arm_fir_init_f32(&fir_instance7,4,fir_coeff,fir_state7,1);
  arm_fir_init_f32(&fir_instance8,4,fir_coeff,fir_state8,1);
  */


  HAL_ADC_Start_IT(&hadc1);
 800323c:	4820      	ldr	r0, [pc, #128]	; (80032c0 <main+0x114>)
 800323e:	f000 fdb9 	bl	8003db4 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003242:	2100      	movs	r1, #0
 8003244:	481f      	ldr	r0, [pc, #124]	; (80032c4 <main+0x118>)
 8003246:	f002 fddf 	bl	8005e08 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800324a:	481f      	ldr	r0, [pc, #124]	; (80032c8 <main+0x11c>)
 800324c:	f002 fcc8 	bl	8005be0 <HAL_TIM_Base_Start_IT>
 }
 HAL_Delay(20);
 }
*/

  while (1)
 8003250:	e7fe      	b.n	8003250 <main+0xa4>
 8003252:	bf00      	nop
 8003254:	2000036c 	.word	0x2000036c
 8003258:	20000000 	.word	0x20000000
 800325c:	20000384 	.word	0x20000384
 8003260:	20000390 	.word	0x20000390
 8003264:	20000014 	.word	0x20000014
 8003268:	200003b4 	.word	0x200003b4
 800326c:	200003c0 	.word	0x200003c0
 8003270:	2000003c 	.word	0x2000003c
 8003274:	200003e4 	.word	0x200003e4
 8003278:	200003f0 	.word	0x200003f0
 800327c:	20000064 	.word	0x20000064
 8003280:	20000414 	.word	0x20000414
 8003284:	20000420 	.word	0x20000420
 8003288:	2000008c 	.word	0x2000008c
 800328c:	20000444 	.word	0x20000444
 8003290:	20000450 	.word	0x20000450
 8003294:	200000b4 	.word	0x200000b4
 8003298:	20000484 	.word	0x20000484
 800329c:	20000490 	.word	0x20000490
 80032a0:	200000f0 	.word	0x200000f0
 80032a4:	200004d4 	.word	0x200004d4
 80032a8:	200004e0 	.word	0x200004e0
 80032ac:	20000140 	.word	0x20000140
 80032b0:	20000524 	.word	0x20000524
 80032b4:	20000530 	.word	0x20000530
 80032b8:	20000190 	.word	0x20000190
 80032bc:	20000554 	.word	0x20000554
 80032c0:	200001e4 	.word	0x200001e4
 80032c4:	20000274 	.word	0x20000274
 80032c8:	200002bc 	.word	0x200002bc

080032cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b094      	sub	sp, #80	; 0x50
 80032d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032d2:	f107 0320 	add.w	r3, r7, #32
 80032d6:	2230      	movs	r2, #48	; 0x30
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f004 f88e 	bl	80073fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032e0:	f107 030c 	add.w	r3, r7, #12
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032f0:	2300      	movs	r3, #0
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	4b28      	ldr	r3, [pc, #160]	; (8003398 <SystemClock_Config+0xcc>)
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	4a27      	ldr	r2, [pc, #156]	; (8003398 <SystemClock_Config+0xcc>)
 80032fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <SystemClock_Config+0xcc>)
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800330c:	2300      	movs	r3, #0
 800330e:	607b      	str	r3, [r7, #4]
 8003310:	4b22      	ldr	r3, [pc, #136]	; (800339c <SystemClock_Config+0xd0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a21      	ldr	r2, [pc, #132]	; (800339c <SystemClock_Config+0xd0>)
 8003316:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	4b1f      	ldr	r3, [pc, #124]	; (800339c <SystemClock_Config+0xd0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003324:	607b      	str	r3, [r7, #4]
 8003326:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003328:	2301      	movs	r3, #1
 800332a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800332c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003332:	2302      	movs	r3, #2
 8003334:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003336:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800333a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800333c:	2304      	movs	r3, #4
 800333e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003340:	23c0      	movs	r3, #192	; 0xc0
 8003342:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003344:	2304      	movs	r3, #4
 8003346:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003348:	2308      	movs	r3, #8
 800334a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800334c:	f107 0320 	add.w	r3, r7, #32
 8003350:	4618      	mov	r0, r3
 8003352:	f001 ff91 	bl	8005278 <HAL_RCC_OscConfig>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800335c:	f000 faa4 	bl	80038a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003360:	230f      	movs	r3, #15
 8003362:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003364:	2302      	movs	r3, #2
 8003366:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800336c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003370:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003376:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003378:	f107 030c 	add.w	r3, r7, #12
 800337c:	2103      	movs	r1, #3
 800337e:	4618      	mov	r0, r3
 8003380:	f002 f9f2 	bl	8005768 <HAL_RCC_ClockConfig>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800338a:	f000 fa8d 	bl	80038a8 <Error_Handler>
  }
}
 800338e:	bf00      	nop
 8003390:	3750      	adds	r7, #80	; 0x50
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800
 800339c:	40007000 	.word	0x40007000

080033a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033a6:	463b      	mov	r3, r7
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80033b2:	4b22      	ldr	r3, [pc, #136]	; (800343c <MX_ADC1_Init+0x9c>)
 80033b4:	4a22      	ldr	r2, [pc, #136]	; (8003440 <MX_ADC1_Init+0xa0>)
 80033b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80033b8:	4b20      	ldr	r3, [pc, #128]	; (800343c <MX_ADC1_Init+0x9c>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80033be:	4b1f      	ldr	r3, [pc, #124]	; (800343c <MX_ADC1_Init+0x9c>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80033c4:	4b1d      	ldr	r3, [pc, #116]	; (800343c <MX_ADC1_Init+0x9c>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80033ca:	4b1c      	ldr	r3, [pc, #112]	; (800343c <MX_ADC1_Init+0x9c>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80033d0:	4b1a      	ldr	r3, [pc, #104]	; (800343c <MX_ADC1_Init+0x9c>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80033d8:	4b18      	ldr	r3, [pc, #96]	; (800343c <MX_ADC1_Init+0x9c>)
 80033da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80033e0:	4b16      	ldr	r3, [pc, #88]	; (800343c <MX_ADC1_Init+0x9c>)
 80033e2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <MX_ADC1_Init+0x9c>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <MX_ADC1_Init+0x9c>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <MX_ADC1_Init+0x9c>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033fc:	4b0f      	ldr	r3, [pc, #60]	; (800343c <MX_ADC1_Init+0x9c>)
 80033fe:	2201      	movs	r2, #1
 8003400:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003402:	480e      	ldr	r0, [pc, #56]	; (800343c <MX_ADC1_Init+0x9c>)
 8003404:	f000 fc92 	bl	8003d2c <HAL_ADC_Init>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800340e:	f000 fa4b 	bl	80038a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003412:	2301      	movs	r3, #1
 8003414:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003416:	2301      	movs	r3, #1
 8003418:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800341e:	463b      	mov	r3, r7
 8003420:	4619      	mov	r1, r3
 8003422:	4806      	ldr	r0, [pc, #24]	; (800343c <MX_ADC1_Init+0x9c>)
 8003424:	f000 feb6 	bl	8004194 <HAL_ADC_ConfigChannel>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800342e:	f000 fa3b 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	200001e4 	.word	0x200001e4
 8003440:	40012000 	.word	0x40012000

08003444 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b096      	sub	sp, #88	; 0x58
 8003448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800344a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	605a      	str	r2, [r3, #4]
 8003454:	609a      	str	r2, [r3, #8]
 8003456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003458:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	60da      	str	r2, [r3, #12]
 8003470:	611a      	str	r2, [r3, #16]
 8003472:	615a      	str	r2, [r3, #20]
 8003474:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003476:	1d3b      	adds	r3, r7, #4
 8003478:	2220      	movs	r2, #32
 800347a:	2100      	movs	r1, #0
 800347c:	4618      	mov	r0, r3
 800347e:	f003 ffbd 	bl	80073fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003482:	4b3e      	ldr	r3, [pc, #248]	; (800357c <MX_TIM1_Init+0x138>)
 8003484:	4a3e      	ldr	r2, [pc, #248]	; (8003580 <MX_TIM1_Init+0x13c>)
 8003486:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003488:	4b3c      	ldr	r3, [pc, #240]	; (800357c <MX_TIM1_Init+0x138>)
 800348a:	2200      	movs	r2, #0
 800348c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <MX_TIM1_Init+0x138>)
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 120-1;
 8003494:	4b39      	ldr	r3, [pc, #228]	; (800357c <MX_TIM1_Init+0x138>)
 8003496:	2277      	movs	r2, #119	; 0x77
 8003498:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800349a:	4b38      	ldr	r3, [pc, #224]	; (800357c <MX_TIM1_Init+0x138>)
 800349c:	2200      	movs	r2, #0
 800349e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80034a0:	4b36      	ldr	r3, [pc, #216]	; (800357c <MX_TIM1_Init+0x138>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034a6:	4b35      	ldr	r3, [pc, #212]	; (800357c <MX_TIM1_Init+0x138>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80034ac:	4833      	ldr	r0, [pc, #204]	; (800357c <MX_TIM1_Init+0x138>)
 80034ae:	f002 fb47 	bl	8005b40 <HAL_TIM_Base_Init>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80034b8:	f000 f9f6 	bl	80038a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80034c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034c6:	4619      	mov	r1, r3
 80034c8:	482c      	ldr	r0, [pc, #176]	; (800357c <MX_TIM1_Init+0x138>)
 80034ca:	f003 f923 	bl	8006714 <HAL_TIM_ConfigClockSource>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80034d4:	f000 f9e8 	bl	80038a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80034d8:	4828      	ldr	r0, [pc, #160]	; (800357c <MX_TIM1_Init+0x138>)
 80034da:	f002 fc3c 	bl	8005d56 <HAL_TIM_PWM_Init>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80034e4:	f000 f9e0 	bl	80038a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034e8:	2300      	movs	r3, #0
 80034ea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ec:	2300      	movs	r3, #0
 80034ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80034f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034f4:	4619      	mov	r1, r3
 80034f6:	4821      	ldr	r0, [pc, #132]	; (800357c <MX_TIM1_Init+0x138>)
 80034f8:	f003 fda2 	bl	8007040 <HAL_TIMEx_MasterConfigSynchronization>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003502:	f000 f9d1 	bl	80038a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003506:	2360      	movs	r3, #96	; 0x60
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800350e:	2300      	movs	r3, #0
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003512:	2300      	movs	r3, #0
 8003514:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003516:	2300      	movs	r3, #0
 8003518:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800351a:	2300      	movs	r3, #0
 800351c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003526:	2200      	movs	r2, #0
 8003528:	4619      	mov	r1, r3
 800352a:	4814      	ldr	r0, [pc, #80]	; (800357c <MX_TIM1_Init+0x138>)
 800352c:	f003 f830 	bl	8006590 <HAL_TIM_PWM_ConfigChannel>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003536:	f000 f9b7 	bl	80038a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800353a:	2300      	movs	r3, #0
 800353c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800353e:	2300      	movs	r3, #0
 8003540:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800354e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003552:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003554:	2300      	movs	r3, #0
 8003556:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	4619      	mov	r1, r3
 800355c:	4807      	ldr	r0, [pc, #28]	; (800357c <MX_TIM1_Init+0x138>)
 800355e:	f003 fddd 	bl	800711c <HAL_TIMEx_ConfigBreakDeadTime>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003568:	f000 f99e 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800356c:	4803      	ldr	r0, [pc, #12]	; (800357c <MX_TIM1_Init+0x138>)
 800356e:	f000 faa3 	bl	8003ab8 <HAL_TIM_MspPostInit>

}
 8003572:	bf00      	nop
 8003574:	3758      	adds	r7, #88	; 0x58
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	2000022c 	.word	0x2000022c
 8003580:	40010000 	.word	0x40010000

08003584 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08e      	sub	sp, #56	; 0x38
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800358a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	609a      	str	r2, [r3, #8]
 8003596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003598:	f107 0320 	add.w	r3, r7, #32
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035a2:	1d3b      	adds	r3, r7, #4
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	611a      	str	r2, [r3, #16]
 80035b0:	615a      	str	r2, [r3, #20]
 80035b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035b4:	4b37      	ldr	r3, [pc, #220]	; (8003694 <MX_TIM2_Init+0x110>)
 80035b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80035bc:	4b35      	ldr	r3, [pc, #212]	; (8003694 <MX_TIM2_Init+0x110>)
 80035be:	2200      	movs	r2, #0
 80035c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035c2:	4b34      	ldr	r3, [pc, #208]	; (8003694 <MX_TIM2_Init+0x110>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1088-1;
 80035c8:	4b32      	ldr	r3, [pc, #200]	; (8003694 <MX_TIM2_Init+0x110>)
 80035ca:	f240 423f 	movw	r2, #1087	; 0x43f
 80035ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035d0:	4b30      	ldr	r3, [pc, #192]	; (8003694 <MX_TIM2_Init+0x110>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035d6:	4b2f      	ldr	r3, [pc, #188]	; (8003694 <MX_TIM2_Init+0x110>)
 80035d8:	2200      	movs	r2, #0
 80035da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80035dc:	482d      	ldr	r0, [pc, #180]	; (8003694 <MX_TIM2_Init+0x110>)
 80035de:	f002 faaf 	bl	8005b40 <HAL_TIM_Base_Init>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80035e8:	f000 f95e 	bl	80038a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80035f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035f6:	4619      	mov	r1, r3
 80035f8:	4826      	ldr	r0, [pc, #152]	; (8003694 <MX_TIM2_Init+0x110>)
 80035fa:	f003 f88b 	bl	8006714 <HAL_TIM_ConfigClockSource>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003604:	f000 f950 	bl	80038a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003608:	4822      	ldr	r0, [pc, #136]	; (8003694 <MX_TIM2_Init+0x110>)
 800360a:	f002 fba4 	bl	8005d56 <HAL_TIM_PWM_Init>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003614:	f000 f948 	bl	80038a8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003618:	481e      	ldr	r0, [pc, #120]	; (8003694 <MX_TIM2_Init+0x110>)
 800361a:	f002 fb43 	bl	8005ca4 <HAL_TIM_OC_Init>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8003624:	f000 f940 	bl	80038a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003628:	2320      	movs	r3, #32
 800362a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800362c:	2300      	movs	r3, #0
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003630:	f107 0320 	add.w	r3, r7, #32
 8003634:	4619      	mov	r1, r3
 8003636:	4817      	ldr	r0, [pc, #92]	; (8003694 <MX_TIM2_Init+0x110>)
 8003638:	f003 fd02 	bl	8007040 <HAL_TIMEx_MasterConfigSynchronization>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8003642:	f000 f931 	bl	80038a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003646:	2360      	movs	r3, #96	; 0x60
 8003648:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003656:	1d3b      	adds	r3, r7, #4
 8003658:	2200      	movs	r2, #0
 800365a:	4619      	mov	r1, r3
 800365c:	480d      	ldr	r0, [pc, #52]	; (8003694 <MX_TIM2_Init+0x110>)
 800365e:	f002 ff97 	bl	8006590 <HAL_TIM_PWM_ConfigChannel>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8003668:	f000 f91e 	bl	80038a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800366c:	2300      	movs	r3, #0
 800366e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3676-1;
 8003670:	f640 635b 	movw	r3, #3675	; 0xe5b
 8003674:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003676:	1d3b      	adds	r3, r7, #4
 8003678:	2204      	movs	r2, #4
 800367a:	4619      	mov	r1, r3
 800367c:	4805      	ldr	r0, [pc, #20]	; (8003694 <MX_TIM2_Init+0x110>)
 800367e:	f002 ff2b 	bl	80064d8 <HAL_TIM_OC_ConfigChannel>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8003688:	f000 f90e 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800368c:	bf00      	nop
 800368e:	3738      	adds	r7, #56	; 0x38
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000274 	.word	0x20000274

08003698 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800369e:	f107 0308 	add.w	r3, r7, #8
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	605a      	str	r2, [r3, #4]
 80036a8:	609a      	str	r2, [r3, #8]
 80036aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ac:	463b      	mov	r3, r7
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036b4:	4b1d      	ldr	r3, [pc, #116]	; (800372c <MX_TIM3_Init+0x94>)
 80036b6:	4a1e      	ldr	r2, [pc, #120]	; (8003730 <MX_TIM3_Init+0x98>)
 80036b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000;
 80036ba:	4b1c      	ldr	r3, [pc, #112]	; (800372c <MX_TIM3_Init+0x94>)
 80036bc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80036c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036c2:	4b1a      	ldr	r3, [pc, #104]	; (800372c <MX_TIM3_Init+0x94>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 332-1;
 80036c8:	4b18      	ldr	r3, [pc, #96]	; (800372c <MX_TIM3_Init+0x94>)
 80036ca:	f240 124b 	movw	r2, #331	; 0x14b
 80036ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036d0:	4b16      	ldr	r3, [pc, #88]	; (800372c <MX_TIM3_Init+0x94>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036d6:	4b15      	ldr	r3, [pc, #84]	; (800372c <MX_TIM3_Init+0x94>)
 80036d8:	2200      	movs	r2, #0
 80036da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80036dc:	4813      	ldr	r0, [pc, #76]	; (800372c <MX_TIM3_Init+0x94>)
 80036de:	f002 fa2f 	bl	8005b40 <HAL_TIM_Base_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80036e8:	f000 f8de 	bl	80038a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80036f2:	f107 0308 	add.w	r3, r7, #8
 80036f6:	4619      	mov	r1, r3
 80036f8:	480c      	ldr	r0, [pc, #48]	; (800372c <MX_TIM3_Init+0x94>)
 80036fa:	f003 f80b 	bl	8006714 <HAL_TIM_ConfigClockSource>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003704:	f000 f8d0 	bl	80038a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003708:	2300      	movs	r3, #0
 800370a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800370c:	2300      	movs	r3, #0
 800370e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003710:	463b      	mov	r3, r7
 8003712:	4619      	mov	r1, r3
 8003714:	4805      	ldr	r0, [pc, #20]	; (800372c <MX_TIM3_Init+0x94>)
 8003716:	f003 fc93 	bl	8007040 <HAL_TIMEx_MasterConfigSynchronization>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003720:	f000 f8c2 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003724:	bf00      	nop
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	200002bc 	.word	0x200002bc
 8003730:	40000400 	.word	0x40000400

08003734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	607b      	str	r3, [r7, #4]
 800373e:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <MX_DMA_Init+0x3c>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <MX_DMA_Init+0x3c>)
 8003744:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003748:	6313      	str	r3, [r2, #48]	; 0x30
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <MX_DMA_Init+0x3c>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003752:	607b      	str	r3, [r7, #4]
 8003754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003756:	2200      	movs	r2, #0
 8003758:	2100      	movs	r1, #0
 800375a:	2039      	movs	r0, #57	; 0x39
 800375c:	f001 f82d 	bl	80047ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003760:	2039      	movs	r0, #57	; 0x39
 8003762:	f001 f846 	bl	80047f2 <HAL_NVIC_EnableIRQ>

}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800

08003774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08a      	sub	sp, #40	; 0x28
 8003778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800377a:	f107 0314 	add.w	r3, r7, #20
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	605a      	str	r2, [r3, #4]
 8003784:	609a      	str	r2, [r3, #8]
 8003786:	60da      	str	r2, [r3, #12]
 8003788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	4b42      	ldr	r3, [pc, #264]	; (8003898 <MX_GPIO_Init+0x124>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	4a41      	ldr	r2, [pc, #260]	; (8003898 <MX_GPIO_Init+0x124>)
 8003794:	f043 0304 	orr.w	r3, r3, #4
 8003798:	6313      	str	r3, [r2, #48]	; 0x30
 800379a:	4b3f      	ldr	r3, [pc, #252]	; (8003898 <MX_GPIO_Init+0x124>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	4b3b      	ldr	r3, [pc, #236]	; (8003898 <MX_GPIO_Init+0x124>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	4a3a      	ldr	r2, [pc, #232]	; (8003898 <MX_GPIO_Init+0x124>)
 80037b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b4:	6313      	str	r3, [r2, #48]	; 0x30
 80037b6:	4b38      	ldr	r3, [pc, #224]	; (8003898 <MX_GPIO_Init+0x124>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	4b34      	ldr	r3, [pc, #208]	; (8003898 <MX_GPIO_Init+0x124>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	4a33      	ldr	r2, [pc, #204]	; (8003898 <MX_GPIO_Init+0x124>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6313      	str	r3, [r2, #48]	; 0x30
 80037d2:	4b31      	ldr	r3, [pc, #196]	; (8003898 <MX_GPIO_Init+0x124>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	4b2d      	ldr	r3, [pc, #180]	; (8003898 <MX_GPIO_Init+0x124>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	4a2c      	ldr	r2, [pc, #176]	; (8003898 <MX_GPIO_Init+0x124>)
 80037e8:	f043 0310 	orr.w	r3, r3, #16
 80037ec:	6313      	str	r3, [r2, #48]	; 0x30
 80037ee:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <MX_GPIO_Init+0x124>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	607b      	str	r3, [r7, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	4b26      	ldr	r3, [pc, #152]	; (8003898 <MX_GPIO_Init+0x124>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	4a25      	ldr	r2, [pc, #148]	; (8003898 <MX_GPIO_Init+0x124>)
 8003804:	f043 0308 	orr.w	r3, r3, #8
 8003808:	6313      	str	r3, [r2, #48]	; 0x30
 800380a:	4b23      	ldr	r3, [pc, #140]	; (8003898 <MX_GPIO_Init+0x124>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003816:	2201      	movs	r2, #1
 8003818:	2101      	movs	r1, #1
 800381a:	4820      	ldr	r0, [pc, #128]	; (800389c <MX_GPIO_Init+0x128>)
 800381c:	f001 fcf8 	bl	8005210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003820:	2200      	movs	r2, #0
 8003822:	f640 71ff 	movw	r1, #4095	; 0xfff
 8003826:	481e      	ldr	r0, [pc, #120]	; (80038a0 <MX_GPIO_Init+0x12c>)
 8003828:	f001 fcf2 	bl	8005210 <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800382c:	2200      	movs	r2, #0
 800382e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003832:	481a      	ldr	r0, [pc, #104]	; (800389c <MX_GPIO_Init+0x128>)
 8003834:	f001 fcec 	bl	8005210 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8003838:	f240 13c1 	movw	r3, #449	; 0x1c1
 800383c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800383e:	2301      	movs	r3, #1
 8003840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003846:	2300      	movs	r3, #0
 8003848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800384a:	f107 0314 	add.w	r3, r7, #20
 800384e:	4619      	mov	r1, r3
 8003850:	4812      	ldr	r0, [pc, #72]	; (800389c <MX_GPIO_Init+0x128>)
 8003852:	f001 fb59 	bl	8004f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003856:	2301      	movs	r3, #1
 8003858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800385a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800385e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003860:	2300      	movs	r3, #0
 8003862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003864:	f107 0314 	add.w	r3, r7, #20
 8003868:	4619      	mov	r1, r3
 800386a:	480e      	ldr	r0, [pc, #56]	; (80038a4 <MX_GPIO_Init+0x130>)
 800386c:	f001 fb4c 	bl	8004f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003870:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003874:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003876:	2301      	movs	r3, #1
 8003878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387e:	2300      	movs	r3, #0
 8003880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003882:	f107 0314 	add.w	r3, r7, #20
 8003886:	4619      	mov	r1, r3
 8003888:	4805      	ldr	r0, [pc, #20]	; (80038a0 <MX_GPIO_Init+0x12c>)
 800388a:	f001 fb3d 	bl	8004f08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800388e:	bf00      	nop
 8003890:	3728      	adds	r7, #40	; 0x28
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	40020800 	.word	0x40020800
 80038a0:	40020c00 	.word	0x40020c00
 80038a4:	40020000 	.word	0x40020000

080038a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038ac:	b672      	cpsid	i
}
 80038ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038b0:	e7fe      	b.n	80038b0 <Error_Handler+0x8>
	...

080038b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_MspInit+0x4c>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	4a0f      	ldr	r2, [pc, #60]	; (8003900 <HAL_MspInit+0x4c>)
 80038c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <HAL_MspInit+0x4c>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_MspInit+0x4c>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	4a08      	ldr	r2, [pc, #32]	; (8003900 <HAL_MspInit+0x4c>)
 80038e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e4:	6413      	str	r3, [r2, #64]	; 0x40
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <HAL_MspInit+0x4c>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80038f2:	2007      	movs	r0, #7
 80038f4:	f000 ff56 	bl	80047a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40023800 	.word	0x40023800

08003904 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1b      	ldr	r2, [pc, #108]	; (8003990 <HAL_ADC_MspInit+0x8c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d12f      	bne.n	8003986 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <HAL_ADC_MspInit+0x90>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	4a19      	ldr	r2, [pc, #100]	; (8003994 <HAL_ADC_MspInit+0x90>)
 8003930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003934:	6453      	str	r3, [r2, #68]	; 0x44
 8003936:	4b17      	ldr	r3, [pc, #92]	; (8003994 <HAL_ADC_MspInit+0x90>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	4b13      	ldr	r3, [pc, #76]	; (8003994 <HAL_ADC_MspInit+0x90>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	4a12      	ldr	r2, [pc, #72]	; (8003994 <HAL_ADC_MspInit+0x90>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	6313      	str	r3, [r2, #48]	; 0x30
 8003952:	4b10      	ldr	r3, [pc, #64]	; (8003994 <HAL_ADC_MspInit+0x90>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800395e:	2302      	movs	r3, #2
 8003960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003962:	2303      	movs	r3, #3
 8003964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800396a:	f107 0314 	add.w	r3, r7, #20
 800396e:	4619      	mov	r1, r3
 8003970:	4809      	ldr	r0, [pc, #36]	; (8003998 <HAL_ADC_MspInit+0x94>)
 8003972:	f001 fac9 	bl	8004f08 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003976:	2200      	movs	r2, #0
 8003978:	2100      	movs	r1, #0
 800397a:	2012      	movs	r0, #18
 800397c:	f000 ff1d 	bl	80047ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003980:	2012      	movs	r0, #18
 8003982:	f000 ff36 	bl	80047f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003986:	bf00      	nop
 8003988:	3728      	adds	r7, #40	; 0x28
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40012000 	.word	0x40012000
 8003994:	40023800 	.word	0x40023800
 8003998:	40020000 	.word	0x40020000

0800399c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a3e      	ldr	r2, [pc, #248]	; (8003aa4 <HAL_TIM_Base_MspInit+0x108>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d13f      	bne.n	8003a2e <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	4b3d      	ldr	r3, [pc, #244]	; (8003aa8 <HAL_TIM_Base_MspInit+0x10c>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	4a3c      	ldr	r2, [pc, #240]	; (8003aa8 <HAL_TIM_Base_MspInit+0x10c>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	6453      	str	r3, [r2, #68]	; 0x44
 80039be:	4b3a      	ldr	r3, [pc, #232]	; (8003aa8 <HAL_TIM_Base_MspInit+0x10c>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80039ca:	4b38      	ldr	r3, [pc, #224]	; (8003aac <HAL_TIM_Base_MspInit+0x110>)
 80039cc:	4a38      	ldr	r2, [pc, #224]	; (8003ab0 <HAL_TIM_Base_MspInit+0x114>)
 80039ce:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80039d0:	4b36      	ldr	r3, [pc, #216]	; (8003aac <HAL_TIM_Base_MspInit+0x110>)
 80039d2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80039d6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039d8:	4b34      	ldr	r3, [pc, #208]	; (8003aac <HAL_TIM_Base_MspInit+0x110>)
 80039da:	2240      	movs	r2, #64	; 0x40
 80039dc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80039de:	4b33      	ldr	r3, [pc, #204]	; (8003aac <HAL_TIM_Base_MspInit+0x110>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80039e4:	4b31      	ldr	r3, [pc, #196]	; (8003aac <HAL_TIM_Base_MspInit+0x110>)
 80039e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039ea:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039ec:	4b2f      	ldr	r3, [pc, #188]	; (8003aac <HAL_TIM_Base_MspInit+0x110>)
 80039ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039f2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80039f4:	4b2d      	ldr	r3, [pc, #180]	; (8003aac <HAL_TIM_Base_MspInit+0x110>)
 80039f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039fa:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80039fc:	4b2b      	ldr	r3, [pc, #172]	; (8003aac <HAL_TIM_Base_MspInit+0x110>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003a02:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <HAL_TIM_Base_MspInit+0x110>)
 8003a04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a08:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a0a:	4b28      	ldr	r3, [pc, #160]	; (8003aac <HAL_TIM_Base_MspInit+0x110>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003a10:	4826      	ldr	r0, [pc, #152]	; (8003aac <HAL_TIM_Base_MspInit+0x110>)
 8003a12:	f000 ff09 	bl	8004828 <HAL_DMA_Init>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003a1c:	f7ff ff44 	bl	80038a8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a22      	ldr	r2, [pc, #136]	; (8003aac <HAL_TIM_Base_MspInit+0x110>)
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24
 8003a26:	4a21      	ldr	r2, [pc, #132]	; (8003aac <HAL_TIM_Base_MspInit+0x110>)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a2c:	e036      	b.n	8003a9c <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM2)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a36:	d116      	bne.n	8003a66 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <HAL_TIM_Base_MspInit+0x10c>)
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	4a19      	ldr	r2, [pc, #100]	; (8003aa8 <HAL_TIM_Base_MspInit+0x10c>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	6413      	str	r3, [r2, #64]	; 0x40
 8003a48:	4b17      	ldr	r3, [pc, #92]	; (8003aa8 <HAL_TIM_Base_MspInit+0x10c>)
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a54:	2200      	movs	r2, #0
 8003a56:	2100      	movs	r1, #0
 8003a58:	201c      	movs	r0, #28
 8003a5a:	f000 feae 	bl	80047ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a5e:	201c      	movs	r0, #28
 8003a60:	f000 fec7 	bl	80047f2 <HAL_NVIC_EnableIRQ>
}
 8003a64:	e01a      	b.n	8003a9c <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM3)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <HAL_TIM_Base_MspInit+0x118>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d115      	bne.n	8003a9c <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <HAL_TIM_Base_MspInit+0x10c>)
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	4a0b      	ldr	r2, [pc, #44]	; (8003aa8 <HAL_TIM_Base_MspInit+0x10c>)
 8003a7a:	f043 0302 	orr.w	r3, r3, #2
 8003a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8003a80:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_TIM_Base_MspInit+0x10c>)
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2100      	movs	r1, #0
 8003a90:	201d      	movs	r0, #29
 8003a92:	f000 fe92 	bl	80047ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a96:	201d      	movs	r0, #29
 8003a98:	f000 feab 	bl	80047f2 <HAL_NVIC_EnableIRQ>
}
 8003a9c:	bf00      	nop
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40010000 	.word	0x40010000
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	20000304 	.word	0x20000304
 8003ab0:	40026428 	.word	0x40026428
 8003ab4:	40000400 	.word	0x40000400

08003ab8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac0:	f107 030c 	add.w	r3, r7, #12
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <HAL_TIM_MspPostInit+0x68>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d11e      	bne.n	8003b18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <HAL_TIM_MspPostInit+0x6c>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	4a10      	ldr	r2, [pc, #64]	; (8003b24 <HAL_TIM_MspPostInit+0x6c>)
 8003ae4:	f043 0310 	orr.w	r3, r3, #16
 8003ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aea:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <HAL_TIM_MspPostInit+0x6c>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003afa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afc:	2302      	movs	r3, #2
 8003afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b0c:	f107 030c 	add.w	r3, r7, #12
 8003b10:	4619      	mov	r1, r3
 8003b12:	4805      	ldr	r0, [pc, #20]	; (8003b28 <HAL_TIM_MspPostInit+0x70>)
 8003b14:	f001 f9f8 	bl	8004f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003b18:	bf00      	nop
 8003b1a:	3720      	adds	r7, #32
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40010000 	.word	0x40010000
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40021000 	.word	0x40021000

08003b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b30:	e7fe      	b.n	8003b30 <NMI_Handler+0x4>

08003b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b36:	e7fe      	b.n	8003b36 <HardFault_Handler+0x4>

08003b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b3c:	e7fe      	b.n	8003b3c <MemManage_Handler+0x4>

08003b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b42:	e7fe      	b.n	8003b42 <BusFault_Handler+0x4>

08003b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b48:	e7fe      	b.n	8003b48 <UsageFault_Handler+0x4>

08003b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b66:	b480      	push	{r7}
 8003b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b78:	f000 f8b8 	bl	8003cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b7c:	bf00      	nop
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003b84:	4802      	ldr	r0, [pc, #8]	; (8003b90 <ADC_IRQHandler+0x10>)
 8003b86:	f000 f9d3 	bl	8003f30 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	200001e4 	.word	0x200001e4

08003b94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b98:	4802      	ldr	r0, [pc, #8]	; (8003ba4 <TIM2_IRQHandler+0x10>)
 8003b9a:	f002 fb95 	bl	80062c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000274 	.word	0x20000274

08003ba8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003bac:	4802      	ldr	r0, [pc, #8]	; (8003bb8 <TIM3_IRQHandler+0x10>)
 8003bae:	f002 fb8b 	bl	80062c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	200002bc 	.word	0x200002bc

08003bbc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003bc0:	4802      	ldr	r0, [pc, #8]	; (8003bcc <DMA2_Stream1_IRQHandler+0x10>)
 8003bc2:	f000 ff37 	bl	8004a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000304 	.word	0x20000304

08003bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <SystemInit+0x20>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <SystemInit+0x20>)
 8003bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bf8:	480d      	ldr	r0, [pc, #52]	; (8003c30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bfa:	490e      	ldr	r1, [pc, #56]	; (8003c34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bfc:	4a0e      	ldr	r2, [pc, #56]	; (8003c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c00:	e002      	b.n	8003c08 <LoopCopyDataInit>

08003c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c06:	3304      	adds	r3, #4

08003c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c0c:	d3f9      	bcc.n	8003c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c0e:	4a0b      	ldr	r2, [pc, #44]	; (8003c3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c10:	4c0b      	ldr	r4, [pc, #44]	; (8003c40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c14:	e001      	b.n	8003c1a <LoopFillZerobss>

08003c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c18:	3204      	adds	r2, #4

08003c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c1c:	d3fb      	bcc.n	8003c16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c1e:	f7ff ffd7 	bl	8003bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c22:	f003 fbf3 	bl	800740c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c26:	f7ff fac1 	bl	80031ac <main>
  bx  lr    
 8003c2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c34:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8003c38:	080087b0 	.word	0x080087b0
  ldr r2, =_sbss
 8003c3c:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8003c40:	200013d4 	.word	0x200013d4

08003c44 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c44:	e7fe      	b.n	8003c44 <DMA1_Stream0_IRQHandler>
	...

08003c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c4c:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <HAL_Init+0x40>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0d      	ldr	r2, [pc, #52]	; (8003c88 <HAL_Init+0x40>)
 8003c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c58:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <HAL_Init+0x40>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a0a      	ldr	r2, [pc, #40]	; (8003c88 <HAL_Init+0x40>)
 8003c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c64:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <HAL_Init+0x40>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a07      	ldr	r2, [pc, #28]	; (8003c88 <HAL_Init+0x40>)
 8003c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c70:	2003      	movs	r0, #3
 8003c72:	f000 fd97 	bl	80047a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c76:	2000      	movs	r0, #0
 8003c78:	f000 f808 	bl	8003c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c7c:	f7ff fe1a 	bl	80038b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40023c00 	.word	0x40023c00

08003c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c94:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <HAL_InitTick+0x54>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <HAL_InitTick+0x58>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fdaf 	bl	800480e <HAL_SYSTICK_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e00e      	b.n	8003cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b0f      	cmp	r3, #15
 8003cbe:	d80a      	bhi.n	8003cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc8:	f000 fd77 	bl	80047ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ccc:	4a06      	ldr	r2, [pc, #24]	; (8003ce8 <HAL_InitTick+0x5c>)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e000      	b.n	8003cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	200001bc 	.word	0x200001bc
 8003ce4:	200001c4 	.word	0x200001c4
 8003ce8:	200001c0 	.word	0x200001c0

08003cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_IncTick+0x20>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <HAL_IncTick+0x24>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	4a04      	ldr	r2, [pc, #16]	; (8003d10 <HAL_IncTick+0x24>)
 8003cfe:	6013      	str	r3, [r2, #0]
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	200001c4 	.word	0x200001c4
 8003d10:	200013d0 	.word	0x200013d0

08003d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  return uwTick;
 8003d18:	4b03      	ldr	r3, [pc, #12]	; (8003d28 <HAL_GetTick+0x14>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	200013d0 	.word	0x200013d0

08003d2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e033      	b.n	8003daa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d109      	bne.n	8003d5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff fdda 	bl	8003904 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d118      	bne.n	8003d9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d72:	f023 0302 	bic.w	r3, r3, #2
 8003d76:	f043 0202 	orr.w	r2, r3, #2
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fb3a 	bl	80043f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f023 0303 	bic.w	r3, r3, #3
 8003d92:	f043 0201 	orr.w	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40
 8003d9a:	e001      	b.n	8003da0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_ADC_Start_IT+0x1a>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e0a1      	b.n	8003f12 <HAL_ADC_Start_IT+0x15e>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d018      	beq.n	8003e16 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003df4:	4b4a      	ldr	r3, [pc, #296]	; (8003f20 <HAL_ADC_Start_IT+0x16c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a4a      	ldr	r2, [pc, #296]	; (8003f24 <HAL_ADC_Start_IT+0x170>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	0c9a      	lsrs	r2, r3, #18
 8003e00:	4613      	mov	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4413      	add	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e08:	e002      	b.n	8003e10 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f9      	bne.n	8003e0a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d169      	bne.n	8003ef8 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d007      	beq.n	8003e56 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e62:	d106      	bne.n	8003e72 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e68:	f023 0206 	bic.w	r2, r3, #6
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	645a      	str	r2, [r3, #68]	; 0x44
 8003e70:	e002      	b.n	8003e78 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e80:	4b29      	ldr	r3, [pc, #164]	; (8003f28 <HAL_ADC_Start_IT+0x174>)
 8003e82:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e8c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6812      	ldr	r2, [r2, #0]
 8003e98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e9c:	f043 0320 	orr.w	r3, r3, #32
 8003ea0:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f003 031f 	and.w	r3, r3, #31
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10f      	bne.n	8003ece <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d129      	bne.n	8003f10 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	e020      	b.n	8003f10 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <HAL_ADC_Start_IT+0x178>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d11b      	bne.n	8003f10 <HAL_ADC_Start_IT+0x15c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d114      	bne.n	8003f10 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ef4:	609a      	str	r2, [r3, #8]
 8003ef6:	e00b      	b.n	8003f10 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	f043 0210 	orr.w	r2, r3, #16
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	f043 0201 	orr.w	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	200001bc 	.word	0x200001bc
 8003f24:	431bde83 	.word	0x431bde83
 8003f28:	40012300 	.word	0x40012300
 8003f2c:	40012000 	.word	0x40012000

08003f30 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d049      	beq.n	8003ffa <HAL_ADC_IRQHandler+0xca>
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d046      	beq.n	8003ffa <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d105      	bne.n	8003f84 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d12b      	bne.n	8003fea <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d127      	bne.n	8003fea <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d006      	beq.n	8003fb6 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d119      	bne.n	8003fea <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0220 	bic.w	r2, r2, #32
 8003fc4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d105      	bne.n	8003fea <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	f043 0201 	orr.w	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff f836 	bl	800305c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0212 	mvn.w	r2, #18
 8003ff8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004008:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d057      	beq.n	80040c0 <HAL_ADC_IRQHandler+0x190>
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d054      	beq.n	80040c0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f003 0310 	and.w	r3, r3, #16
 800401e:	2b00      	cmp	r3, #0
 8004020:	d105      	bne.n	800402e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d139      	bne.n	80040b0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004046:	2b00      	cmp	r3, #0
 8004048:	d006      	beq.n	8004058 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004054:	2b00      	cmp	r3, #0
 8004056:	d12b      	bne.n	80040b0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004062:	2b00      	cmp	r3, #0
 8004064:	d124      	bne.n	80040b0 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004070:	2b00      	cmp	r3, #0
 8004072:	d11d      	bne.n	80040b0 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004078:	2b00      	cmp	r3, #0
 800407a:	d119      	bne.n	80040b0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800408a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	f043 0201 	orr.w	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fa9d 	bl	80045f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f06f 020c 	mvn.w	r2, #12
 80040be:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d017      	beq.n	8004106 <HAL_ADC_IRQHandler+0x1d6>
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d014      	beq.n	8004106 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d10d      	bne.n	8004106 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f837 	bl	800416a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0201 	mvn.w	r2, #1
 8004104:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004114:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d015      	beq.n	8004148 <HAL_ADC_IRQHandler+0x218>
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d012      	beq.n	8004148 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	f043 0202 	orr.w	r2, r3, #2
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f06f 0220 	mvn.w	r2, #32
 8004136:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f820 	bl	800417e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f06f 0220 	mvn.w	r2, #32
 8004146:	601a      	str	r2, [r3, #0]
  }
}
 8004148:	bf00      	nop
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x1c>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e113      	b.n	80043d8 <HAL_ADC_ConfigChannel+0x244>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b09      	cmp	r3, #9
 80041be:	d925      	bls.n	800420c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68d9      	ldr	r1, [r3, #12]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	4613      	mov	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	4413      	add	r3, r2
 80041d4:	3b1e      	subs	r3, #30
 80041d6:	2207      	movs	r2, #7
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43da      	mvns	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	400a      	ands	r2, r1
 80041e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68d9      	ldr	r1, [r3, #12]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	4618      	mov	r0, r3
 80041f8:	4603      	mov	r3, r0
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	4403      	add	r3, r0
 80041fe:	3b1e      	subs	r3, #30
 8004200:	409a      	lsls	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	60da      	str	r2, [r3, #12]
 800420a:	e022      	b.n	8004252 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6919      	ldr	r1, [r3, #16]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	b29b      	uxth	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	4613      	mov	r3, r2
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	4413      	add	r3, r2
 8004220:	2207      	movs	r2, #7
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43da      	mvns	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	400a      	ands	r2, r1
 800422e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6919      	ldr	r1, [r3, #16]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	4618      	mov	r0, r3
 8004242:	4603      	mov	r3, r0
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	4403      	add	r3, r0
 8004248:	409a      	lsls	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b06      	cmp	r3, #6
 8004258:	d824      	bhi.n	80042a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	3b05      	subs	r3, #5
 800426c:	221f      	movs	r2, #31
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	43da      	mvns	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	400a      	ands	r2, r1
 800427a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	4618      	mov	r0, r3
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	3b05      	subs	r3, #5
 8004296:	fa00 f203 	lsl.w	r2, r0, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	635a      	str	r2, [r3, #52]	; 0x34
 80042a2:	e04c      	b.n	800433e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b0c      	cmp	r3, #12
 80042aa:	d824      	bhi.n	80042f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	3b23      	subs	r3, #35	; 0x23
 80042be:	221f      	movs	r2, #31
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	43da      	mvns	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	400a      	ands	r2, r1
 80042cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	4618      	mov	r0, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	3b23      	subs	r3, #35	; 0x23
 80042e8:	fa00 f203 	lsl.w	r2, r0, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30
 80042f4:	e023      	b.n	800433e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	3b41      	subs	r3, #65	; 0x41
 8004308:	221f      	movs	r2, #31
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43da      	mvns	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	400a      	ands	r2, r1
 8004316:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	4618      	mov	r0, r3
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	3b41      	subs	r3, #65	; 0x41
 8004332:	fa00 f203 	lsl.w	r2, r0, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800433e:	4b29      	ldr	r3, [pc, #164]	; (80043e4 <HAL_ADC_ConfigChannel+0x250>)
 8004340:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a28      	ldr	r2, [pc, #160]	; (80043e8 <HAL_ADC_ConfigChannel+0x254>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d10f      	bne.n	800436c <HAL_ADC_ConfigChannel+0x1d8>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b12      	cmp	r3, #18
 8004352:	d10b      	bne.n	800436c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1d      	ldr	r2, [pc, #116]	; (80043e8 <HAL_ADC_ConfigChannel+0x254>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d12b      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x23a>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1c      	ldr	r2, [pc, #112]	; (80043ec <HAL_ADC_ConfigChannel+0x258>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d003      	beq.n	8004388 <HAL_ADC_ConfigChannel+0x1f4>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b11      	cmp	r3, #17
 8004386:	d122      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a11      	ldr	r2, [pc, #68]	; (80043ec <HAL_ADC_ConfigChannel+0x258>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d111      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043aa:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <HAL_ADC_ConfigChannel+0x25c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a11      	ldr	r2, [pc, #68]	; (80043f4 <HAL_ADC_ConfigChannel+0x260>)
 80043b0:	fba2 2303 	umull	r2, r3, r2, r3
 80043b4:	0c9a      	lsrs	r2, r3, #18
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043c0:	e002      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f9      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40012300 	.word	0x40012300
 80043e8:	40012000 	.word	0x40012000
 80043ec:	10000012 	.word	0x10000012
 80043f0:	200001bc 	.word	0x200001bc
 80043f4:	431bde83 	.word	0x431bde83

080043f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004400:	4b79      	ldr	r3, [pc, #484]	; (80045e8 <ADC_Init+0x1f0>)
 8004402:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	431a      	orrs	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800442c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6859      	ldr	r1, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	021a      	lsls	r2, r3, #8
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004450:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6859      	ldr	r1, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004472:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6899      	ldr	r1, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	4a58      	ldr	r2, [pc, #352]	; (80045ec <ADC_Init+0x1f4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d022      	beq.n	80044d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800449e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6899      	ldr	r1, [r3, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6899      	ldr	r1, [r3, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	609a      	str	r2, [r3, #8]
 80044d4:	e00f      	b.n	80044f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0202 	bic.w	r2, r2, #2
 8004504:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6899      	ldr	r1, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	7e1b      	ldrb	r3, [r3, #24]
 8004510:	005a      	lsls	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01b      	beq.n	800455c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004532:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004542:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6859      	ldr	r1, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	3b01      	subs	r3, #1
 8004550:	035a      	lsls	r2, r3, #13
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
 800455a:	e007      	b.n	800456c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800456a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800457a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	3b01      	subs	r3, #1
 8004588:	051a      	lsls	r2, r3, #20
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6899      	ldr	r1, [r3, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045ae:	025a      	lsls	r2, r3, #9
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6899      	ldr	r1, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	029a      	lsls	r2, r3, #10
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	609a      	str	r2, [r3, #8]
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	40012300 	.word	0x40012300
 80045ec:	0f000001 	.word	0x0f000001

080045f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004614:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <__NVIC_SetPriorityGrouping+0x44>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004620:	4013      	ands	r3, r2
 8004622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800462c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004636:	4a04      	ldr	r2, [pc, #16]	; (8004648 <__NVIC_SetPriorityGrouping+0x44>)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	60d3      	str	r3, [r2, #12]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	e000ed00 	.word	0xe000ed00

0800464c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004650:	4b04      	ldr	r3, [pc, #16]	; (8004664 <__NVIC_GetPriorityGrouping+0x18>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	0a1b      	lsrs	r3, r3, #8
 8004656:	f003 0307 	and.w	r3, r3, #7
}
 800465a:	4618      	mov	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	e000ed00 	.word	0xe000ed00

08004668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004676:	2b00      	cmp	r3, #0
 8004678:	db0b      	blt.n	8004692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	f003 021f 	and.w	r2, r3, #31
 8004680:	4907      	ldr	r1, [pc, #28]	; (80046a0 <__NVIC_EnableIRQ+0x38>)
 8004682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2001      	movs	r0, #1
 800468a:	fa00 f202 	lsl.w	r2, r0, r2
 800468e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	e000e100 	.word	0xe000e100

080046a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	6039      	str	r1, [r7, #0]
 80046ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	db0a      	blt.n	80046ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	490c      	ldr	r1, [pc, #48]	; (80046f0 <__NVIC_SetPriority+0x4c>)
 80046be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c2:	0112      	lsls	r2, r2, #4
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	440b      	add	r3, r1
 80046c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046cc:	e00a      	b.n	80046e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	4908      	ldr	r1, [pc, #32]	; (80046f4 <__NVIC_SetPriority+0x50>)
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	3b04      	subs	r3, #4
 80046dc:	0112      	lsls	r2, r2, #4
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	440b      	add	r3, r1
 80046e2:	761a      	strb	r2, [r3, #24]
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	e000e100 	.word	0xe000e100
 80046f4:	e000ed00 	.word	0xe000ed00

080046f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b089      	sub	sp, #36	; 0x24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f1c3 0307 	rsb	r3, r3, #7
 8004712:	2b04      	cmp	r3, #4
 8004714:	bf28      	it	cs
 8004716:	2304      	movcs	r3, #4
 8004718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	3304      	adds	r3, #4
 800471e:	2b06      	cmp	r3, #6
 8004720:	d902      	bls.n	8004728 <NVIC_EncodePriority+0x30>
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	3b03      	subs	r3, #3
 8004726:	e000      	b.n	800472a <NVIC_EncodePriority+0x32>
 8004728:	2300      	movs	r3, #0
 800472a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800472c:	f04f 32ff 	mov.w	r2, #4294967295
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	43da      	mvns	r2, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	401a      	ands	r2, r3
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004740:	f04f 31ff 	mov.w	r1, #4294967295
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	43d9      	mvns	r1, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004750:	4313      	orrs	r3, r2
         );
}
 8004752:	4618      	mov	r0, r3
 8004754:	3724      	adds	r7, #36	; 0x24
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3b01      	subs	r3, #1
 800476c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004770:	d301      	bcc.n	8004776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004772:	2301      	movs	r3, #1
 8004774:	e00f      	b.n	8004796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004776:	4a0a      	ldr	r2, [pc, #40]	; (80047a0 <SysTick_Config+0x40>)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3b01      	subs	r3, #1
 800477c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800477e:	210f      	movs	r1, #15
 8004780:	f04f 30ff 	mov.w	r0, #4294967295
 8004784:	f7ff ff8e 	bl	80046a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004788:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <SysTick_Config+0x40>)
 800478a:	2200      	movs	r2, #0
 800478c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800478e:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <SysTick_Config+0x40>)
 8004790:	2207      	movs	r2, #7
 8004792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	e000e010 	.word	0xe000e010

080047a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff ff29 	bl	8004604 <__NVIC_SetPriorityGrouping>
}
 80047b2:	bf00      	nop
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b086      	sub	sp, #24
 80047be:	af00      	add	r7, sp, #0
 80047c0:	4603      	mov	r3, r0
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
 80047c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047cc:	f7ff ff3e 	bl	800464c <__NVIC_GetPriorityGrouping>
 80047d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	6978      	ldr	r0, [r7, #20]
 80047d8:	f7ff ff8e 	bl	80046f8 <NVIC_EncodePriority>
 80047dc:	4602      	mov	r2, r0
 80047de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047e2:	4611      	mov	r1, r2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff ff5d 	bl	80046a4 <__NVIC_SetPriority>
}
 80047ea:	bf00      	nop
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	4603      	mov	r3, r0
 80047fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ff31 	bl	8004668 <__NVIC_EnableIRQ>
}
 8004806:	bf00      	nop
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff ffa2 	bl	8004760 <SysTick_Config>
 800481c:	4603      	mov	r3, r0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004834:	f7ff fa6e 	bl	8003d14 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e099      	b.n	8004978 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004864:	e00f      	b.n	8004886 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004866:	f7ff fa55 	bl	8003d14 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b05      	cmp	r3, #5
 8004872:	d908      	bls.n	8004886 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2203      	movs	r2, #3
 800487e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e078      	b.n	8004978 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e8      	bne.n	8004866 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	4b38      	ldr	r3, [pc, #224]	; (8004980 <HAL_DMA_Init+0x158>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d107      	bne.n	80048f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	4313      	orrs	r3, r2
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f023 0307 	bic.w	r3, r3, #7
 8004906:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	2b04      	cmp	r3, #4
 8004918:	d117      	bne.n	800494a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00e      	beq.n	800494a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fa6f 	bl	8004e10 <DMA_CheckFifoParam>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2240      	movs	r2, #64	; 0x40
 800493c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004946:	2301      	movs	r3, #1
 8004948:	e016      	b.n	8004978 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa26 	bl	8004da4 <DMA_CalcBaseAndBitshift>
 8004958:	4603      	mov	r3, r0
 800495a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004960:	223f      	movs	r2, #63	; 0x3f
 8004962:	409a      	lsls	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	f010803f 	.word	0xf010803f

08004984 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
 8004990:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HAL_DMA_Start_IT+0x26>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e040      	b.n	8004a2c <HAL_DMA_Start_IT+0xa8>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d12f      	bne.n	8004a1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2202      	movs	r2, #2
 80049c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 f9b8 	bl	8004d48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049dc:	223f      	movs	r2, #63	; 0x3f
 80049de:	409a      	lsls	r2, r3
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0216 	orr.w	r2, r2, #22
 80049f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d007      	beq.n	8004a0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0208 	orr.w	r2, r2, #8
 8004a0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	e005      	b.n	8004a2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a26:	2302      	movs	r3, #2
 8004a28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a40:	4b8e      	ldr	r3, [pc, #568]	; (8004c7c <HAL_DMA_IRQHandler+0x248>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a8e      	ldr	r2, [pc, #568]	; (8004c80 <HAL_DMA_IRQHandler+0x24c>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	0a9b      	lsrs	r3, r3, #10
 8004a4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a5e:	2208      	movs	r2, #8
 8004a60:	409a      	lsls	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4013      	ands	r3, r2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d01a      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d013      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0204 	bic.w	r2, r2, #4
 8004a86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8c:	2208      	movs	r2, #8
 8004a8e:	409a      	lsls	r2, r3
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a98:	f043 0201 	orr.w	r2, r3, #1
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	409a      	lsls	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d012      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ace:	f043 0202 	orr.w	r2, r3, #2
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ada:	2204      	movs	r2, #4
 8004adc:	409a      	lsls	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d012      	beq.n	8004b0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00b      	beq.n	8004b0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af8:	2204      	movs	r2, #4
 8004afa:	409a      	lsls	r2, r3
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b04:	f043 0204 	orr.w	r2, r3, #4
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b10:	2210      	movs	r2, #16
 8004b12:	409a      	lsls	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d043      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d03c      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2e:	2210      	movs	r2, #16
 8004b30:	409a      	lsls	r2, r3
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d018      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d108      	bne.n	8004b64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d024      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4798      	blx	r3
 8004b62:	e01f      	b.n	8004ba4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d01b      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	4798      	blx	r3
 8004b74:	e016      	b.n	8004ba4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d107      	bne.n	8004b94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0208 	bic.w	r2, r2, #8
 8004b92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba8:	2220      	movs	r2, #32
 8004baa:	409a      	lsls	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 808f 	beq.w	8004cd4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 8087 	beq.w	8004cd4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bca:	2220      	movs	r2, #32
 8004bcc:	409a      	lsls	r2, r3
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b05      	cmp	r3, #5
 8004bdc:	d136      	bne.n	8004c4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0216 	bic.w	r2, r2, #22
 8004bec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695a      	ldr	r2, [r3, #20]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d103      	bne.n	8004c0e <HAL_DMA_IRQHandler+0x1da>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d007      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0208 	bic.w	r2, r2, #8
 8004c1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c22:	223f      	movs	r2, #63	; 0x3f
 8004c24:	409a      	lsls	r2, r3
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d07e      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	4798      	blx	r3
        }
        return;
 8004c4a:	e079      	b.n	8004d40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d01d      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10d      	bne.n	8004c84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d031      	beq.n	8004cd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	4798      	blx	r3
 8004c78:	e02c      	b.n	8004cd4 <HAL_DMA_IRQHandler+0x2a0>
 8004c7a:	bf00      	nop
 8004c7c:	200001bc 	.word	0x200001bc
 8004c80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d023      	beq.n	8004cd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	4798      	blx	r3
 8004c94:	e01e      	b.n	8004cd4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10f      	bne.n	8004cc4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0210 	bic.w	r2, r2, #16
 8004cb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d032      	beq.n	8004d42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d022      	beq.n	8004d2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2205      	movs	r2, #5
 8004cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0201 	bic.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	3301      	adds	r3, #1
 8004d04:	60bb      	str	r3, [r7, #8]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d307      	bcc.n	8004d1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1f2      	bne.n	8004d00 <HAL_DMA_IRQHandler+0x2cc>
 8004d1a:	e000      	b.n	8004d1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	4798      	blx	r3
 8004d3e:	e000      	b.n	8004d42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d40:	bf00      	nop
    }
  }
}
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	2b40      	cmp	r3, #64	; 0x40
 8004d74:	d108      	bne.n	8004d88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d86:	e007      	b.n	8004d98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	60da      	str	r2, [r3, #12]
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	3b10      	subs	r3, #16
 8004db4:	4a14      	ldr	r2, [pc, #80]	; (8004e08 <DMA_CalcBaseAndBitshift+0x64>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	091b      	lsrs	r3, r3, #4
 8004dbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004dbe:	4a13      	ldr	r2, [pc, #76]	; (8004e0c <DMA_CalcBaseAndBitshift+0x68>)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d909      	bls.n	8004de6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dda:	f023 0303 	bic.w	r3, r3, #3
 8004dde:	1d1a      	adds	r2, r3, #4
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	659a      	str	r2, [r3, #88]	; 0x58
 8004de4:	e007      	b.n	8004df6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dee:	f023 0303 	bic.w	r3, r3, #3
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	aaaaaaab 	.word	0xaaaaaaab
 8004e0c:	080085c0 	.word	0x080085c0

08004e10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d11f      	bne.n	8004e6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d856      	bhi.n	8004ede <DMA_CheckFifoParam+0xce>
 8004e30:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <DMA_CheckFifoParam+0x28>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e49 	.word	0x08004e49
 8004e3c:	08004e5b 	.word	0x08004e5b
 8004e40:	08004e49 	.word	0x08004e49
 8004e44:	08004edf 	.word	0x08004edf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d046      	beq.n	8004ee2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e58:	e043      	b.n	8004ee2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e62:	d140      	bne.n	8004ee6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e68:	e03d      	b.n	8004ee6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e72:	d121      	bne.n	8004eb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d837      	bhi.n	8004eea <DMA_CheckFifoParam+0xda>
 8004e7a:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <DMA_CheckFifoParam+0x70>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004e91 	.word	0x08004e91
 8004e84:	08004e97 	.word	0x08004e97
 8004e88:	08004e91 	.word	0x08004e91
 8004e8c:	08004ea9 	.word	0x08004ea9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
      break;
 8004e94:	e030      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d025      	beq.n	8004eee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ea6:	e022      	b.n	8004eee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004eb0:	d11f      	bne.n	8004ef2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004eb6:	e01c      	b.n	8004ef2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d903      	bls.n	8004ec6 <DMA_CheckFifoParam+0xb6>
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d003      	beq.n	8004ecc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ec4:	e018      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	73fb      	strb	r3, [r7, #15]
      break;
 8004eca:	e015      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00e      	beq.n	8004ef6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
      break;
 8004edc:	e00b      	b.n	8004ef6 <DMA_CheckFifoParam+0xe6>
      break;
 8004ede:	bf00      	nop
 8004ee0:	e00a      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ee2:	bf00      	nop
 8004ee4:	e008      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ee6:	bf00      	nop
 8004ee8:	e006      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
      break;
 8004eea:	bf00      	nop
 8004eec:	e004      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e002      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004ef2:	bf00      	nop
 8004ef4:	e000      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ef6:	bf00      	nop
    }
  } 
  
  return status; 
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop

08004f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b089      	sub	sp, #36	; 0x24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
 8004f22:	e159      	b.n	80051d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f24:	2201      	movs	r2, #1
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4013      	ands	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	f040 8148 	bne.w	80051d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d005      	beq.n	8004f5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d130      	bne.n	8004fbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	2203      	movs	r2, #3
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f90:	2201      	movs	r2, #1
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	091b      	lsrs	r3, r3, #4
 8004fa6:	f003 0201 	and.w	r2, r3, #1
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f003 0303 	and.w	r3, r3, #3
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d017      	beq.n	8004ff8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	2203      	movs	r2, #3
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d123      	bne.n	800504c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	08da      	lsrs	r2, r3, #3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3208      	adds	r2, #8
 800500c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	220f      	movs	r2, #15
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	4013      	ands	r3, r2
 8005026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4313      	orrs	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	08da      	lsrs	r2, r3, #3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3208      	adds	r2, #8
 8005046:	69b9      	ldr	r1, [r7, #24]
 8005048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	2203      	movs	r2, #3
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f003 0203 	and.w	r2, r3, #3
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4313      	orrs	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 80a2 	beq.w	80051d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	4b57      	ldr	r3, [pc, #348]	; (80051f0 <HAL_GPIO_Init+0x2e8>)
 8005094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005096:	4a56      	ldr	r2, [pc, #344]	; (80051f0 <HAL_GPIO_Init+0x2e8>)
 8005098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800509c:	6453      	str	r3, [r2, #68]	; 0x44
 800509e:	4b54      	ldr	r3, [pc, #336]	; (80051f0 <HAL_GPIO_Init+0x2e8>)
 80050a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050aa:	4a52      	ldr	r2, [pc, #328]	; (80051f4 <HAL_GPIO_Init+0x2ec>)
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	089b      	lsrs	r3, r3, #2
 80050b0:	3302      	adds	r3, #2
 80050b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	220f      	movs	r2, #15
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	43db      	mvns	r3, r3
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	4013      	ands	r3, r2
 80050cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a49      	ldr	r2, [pc, #292]	; (80051f8 <HAL_GPIO_Init+0x2f0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d019      	beq.n	800510a <HAL_GPIO_Init+0x202>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a48      	ldr	r2, [pc, #288]	; (80051fc <HAL_GPIO_Init+0x2f4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d013      	beq.n	8005106 <HAL_GPIO_Init+0x1fe>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a47      	ldr	r2, [pc, #284]	; (8005200 <HAL_GPIO_Init+0x2f8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00d      	beq.n	8005102 <HAL_GPIO_Init+0x1fa>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a46      	ldr	r2, [pc, #280]	; (8005204 <HAL_GPIO_Init+0x2fc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d007      	beq.n	80050fe <HAL_GPIO_Init+0x1f6>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a45      	ldr	r2, [pc, #276]	; (8005208 <HAL_GPIO_Init+0x300>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d101      	bne.n	80050fa <HAL_GPIO_Init+0x1f2>
 80050f6:	2304      	movs	r3, #4
 80050f8:	e008      	b.n	800510c <HAL_GPIO_Init+0x204>
 80050fa:	2307      	movs	r3, #7
 80050fc:	e006      	b.n	800510c <HAL_GPIO_Init+0x204>
 80050fe:	2303      	movs	r3, #3
 8005100:	e004      	b.n	800510c <HAL_GPIO_Init+0x204>
 8005102:	2302      	movs	r3, #2
 8005104:	e002      	b.n	800510c <HAL_GPIO_Init+0x204>
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <HAL_GPIO_Init+0x204>
 800510a:	2300      	movs	r3, #0
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	f002 0203 	and.w	r2, r2, #3
 8005112:	0092      	lsls	r2, r2, #2
 8005114:	4093      	lsls	r3, r2
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	4313      	orrs	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800511c:	4935      	ldr	r1, [pc, #212]	; (80051f4 <HAL_GPIO_Init+0x2ec>)
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	089b      	lsrs	r3, r3, #2
 8005122:	3302      	adds	r3, #2
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800512a:	4b38      	ldr	r3, [pc, #224]	; (800520c <HAL_GPIO_Init+0x304>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	43db      	mvns	r3, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	4013      	ands	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800514e:	4a2f      	ldr	r2, [pc, #188]	; (800520c <HAL_GPIO_Init+0x304>)
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005154:	4b2d      	ldr	r3, [pc, #180]	; (800520c <HAL_GPIO_Init+0x304>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005178:	4a24      	ldr	r2, [pc, #144]	; (800520c <HAL_GPIO_Init+0x304>)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800517e:	4b23      	ldr	r3, [pc, #140]	; (800520c <HAL_GPIO_Init+0x304>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	43db      	mvns	r3, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	4013      	ands	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051a2:	4a1a      	ldr	r2, [pc, #104]	; (800520c <HAL_GPIO_Init+0x304>)
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051a8:	4b18      	ldr	r3, [pc, #96]	; (800520c <HAL_GPIO_Init+0x304>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	43db      	mvns	r3, r3
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4013      	ands	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051cc:	4a0f      	ldr	r2, [pc, #60]	; (800520c <HAL_GPIO_Init+0x304>)
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	3301      	adds	r3, #1
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2b0f      	cmp	r3, #15
 80051dc:	f67f aea2 	bls.w	8004f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
 80051e4:	3724      	adds	r7, #36	; 0x24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40023800 	.word	0x40023800
 80051f4:	40013800 	.word	0x40013800
 80051f8:	40020000 	.word	0x40020000
 80051fc:	40020400 	.word	0x40020400
 8005200:	40020800 	.word	0x40020800
 8005204:	40020c00 	.word	0x40020c00
 8005208:	40021000 	.word	0x40021000
 800520c:	40013c00 	.word	0x40013c00

08005210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	807b      	strh	r3, [r7, #2]
 800521c:	4613      	mov	r3, r2
 800521e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005220:	787b      	ldrb	r3, [r7, #1]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005226:	887a      	ldrh	r2, [r7, #2]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800522c:	e003      	b.n	8005236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800522e:	887b      	ldrh	r3, [r7, #2]
 8005230:	041a      	lsls	r2, r3, #16
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	619a      	str	r2, [r3, #24]
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	460b      	mov	r3, r1
 800524c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005254:	887a      	ldrh	r2, [r7, #2]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4013      	ands	r3, r2
 800525a:	041a      	lsls	r2, r3, #16
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	43d9      	mvns	r1, r3
 8005260:	887b      	ldrh	r3, [r7, #2]
 8005262:	400b      	ands	r3, r1
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	619a      	str	r2, [r3, #24]
}
 800526a:	bf00      	nop
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
	...

08005278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e267      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d075      	beq.n	8005382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005296:	4b88      	ldr	r3, [pc, #544]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 030c 	and.w	r3, r3, #12
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d00c      	beq.n	80052bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052a2:	4b85      	ldr	r3, [pc, #532]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d112      	bne.n	80052d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ae:	4b82      	ldr	r3, [pc, #520]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ba:	d10b      	bne.n	80052d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052bc:	4b7e      	ldr	r3, [pc, #504]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d05b      	beq.n	8005380 <HAL_RCC_OscConfig+0x108>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d157      	bne.n	8005380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e242      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052dc:	d106      	bne.n	80052ec <HAL_RCC_OscConfig+0x74>
 80052de:	4b76      	ldr	r3, [pc, #472]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a75      	ldr	r2, [pc, #468]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80052e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	e01d      	b.n	8005328 <HAL_RCC_OscConfig+0xb0>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052f4:	d10c      	bne.n	8005310 <HAL_RCC_OscConfig+0x98>
 80052f6:	4b70      	ldr	r3, [pc, #448]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a6f      	ldr	r2, [pc, #444]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80052fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	4b6d      	ldr	r3, [pc, #436]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a6c      	ldr	r2, [pc, #432]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	e00b      	b.n	8005328 <HAL_RCC_OscConfig+0xb0>
 8005310:	4b69      	ldr	r3, [pc, #420]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a68      	ldr	r2, [pc, #416]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	4b66      	ldr	r3, [pc, #408]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a65      	ldr	r2, [pc, #404]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d013      	beq.n	8005358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005330:	f7fe fcf0 	bl	8003d14 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005338:	f7fe fcec 	bl	8003d14 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	; 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e207      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800534a:	4b5b      	ldr	r3, [pc, #364]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f0      	beq.n	8005338 <HAL_RCC_OscConfig+0xc0>
 8005356:	e014      	b.n	8005382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005358:	f7fe fcdc 	bl	8003d14 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005360:	f7fe fcd8 	bl	8003d14 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b64      	cmp	r3, #100	; 0x64
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e1f3      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005372:	4b51      	ldr	r3, [pc, #324]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f0      	bne.n	8005360 <HAL_RCC_OscConfig+0xe8>
 800537e:	e000      	b.n	8005382 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d063      	beq.n	8005456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800538e:	4b4a      	ldr	r3, [pc, #296]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00b      	beq.n	80053b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800539a:	4b47      	ldr	r3, [pc, #284]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d11c      	bne.n	80053e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053a6:	4b44      	ldr	r3, [pc, #272]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d116      	bne.n	80053e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053b2:	4b41      	ldr	r3, [pc, #260]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <HAL_RCC_OscConfig+0x152>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d001      	beq.n	80053ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e1c7      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ca:	4b3b      	ldr	r3, [pc, #236]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	4937      	ldr	r1, [pc, #220]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053de:	e03a      	b.n	8005456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d020      	beq.n	800542a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053e8:	4b34      	ldr	r3, [pc, #208]	; (80054bc <HAL_RCC_OscConfig+0x244>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ee:	f7fe fc91 	bl	8003d14 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053f6:	f7fe fc8d 	bl	8003d14 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e1a8      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005408:	4b2b      	ldr	r3, [pc, #172]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0f0      	beq.n	80053f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005414:	4b28      	ldr	r3, [pc, #160]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	4925      	ldr	r1, [pc, #148]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005424:	4313      	orrs	r3, r2
 8005426:	600b      	str	r3, [r1, #0]
 8005428:	e015      	b.n	8005456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800542a:	4b24      	ldr	r3, [pc, #144]	; (80054bc <HAL_RCC_OscConfig+0x244>)
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005430:	f7fe fc70 	bl	8003d14 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005438:	f7fe fc6c 	bl	8003d14 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e187      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544a:	4b1b      	ldr	r3, [pc, #108]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f0      	bne.n	8005438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d036      	beq.n	80054d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d016      	beq.n	8005498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800546a:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <HAL_RCC_OscConfig+0x248>)
 800546c:	2201      	movs	r2, #1
 800546e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005470:	f7fe fc50 	bl	8003d14 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005478:	f7fe fc4c 	bl	8003d14 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e167      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800548a:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 800548c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f0      	beq.n	8005478 <HAL_RCC_OscConfig+0x200>
 8005496:	e01b      	b.n	80054d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005498:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <HAL_RCC_OscConfig+0x248>)
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800549e:	f7fe fc39 	bl	8003d14 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054a4:	e00e      	b.n	80054c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054a6:	f7fe fc35 	bl	8003d14 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d907      	bls.n	80054c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e150      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
 80054b8:	40023800 	.word	0x40023800
 80054bc:	42470000 	.word	0x42470000
 80054c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054c4:	4b88      	ldr	r3, [pc, #544]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 80054c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1ea      	bne.n	80054a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 8097 	beq.w	800560c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054de:	2300      	movs	r3, #0
 80054e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054e2:	4b81      	ldr	r3, [pc, #516]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10f      	bne.n	800550e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ee:	2300      	movs	r3, #0
 80054f0:	60bb      	str	r3, [r7, #8]
 80054f2:	4b7d      	ldr	r3, [pc, #500]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	4a7c      	ldr	r2, [pc, #496]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 80054f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fc:	6413      	str	r3, [r2, #64]	; 0x40
 80054fe:	4b7a      	ldr	r3, [pc, #488]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005506:	60bb      	str	r3, [r7, #8]
 8005508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800550a:	2301      	movs	r3, #1
 800550c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550e:	4b77      	ldr	r3, [pc, #476]	; (80056ec <HAL_RCC_OscConfig+0x474>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005516:	2b00      	cmp	r3, #0
 8005518:	d118      	bne.n	800554c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800551a:	4b74      	ldr	r3, [pc, #464]	; (80056ec <HAL_RCC_OscConfig+0x474>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a73      	ldr	r2, [pc, #460]	; (80056ec <HAL_RCC_OscConfig+0x474>)
 8005520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005526:	f7fe fbf5 	bl	8003d14 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800552e:	f7fe fbf1 	bl	8003d14 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e10c      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005540:	4b6a      	ldr	r3, [pc, #424]	; (80056ec <HAL_RCC_OscConfig+0x474>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0f0      	beq.n	800552e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d106      	bne.n	8005562 <HAL_RCC_OscConfig+0x2ea>
 8005554:	4b64      	ldr	r3, [pc, #400]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005558:	4a63      	ldr	r2, [pc, #396]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 800555a:	f043 0301 	orr.w	r3, r3, #1
 800555e:	6713      	str	r3, [r2, #112]	; 0x70
 8005560:	e01c      	b.n	800559c <HAL_RCC_OscConfig+0x324>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	2b05      	cmp	r3, #5
 8005568:	d10c      	bne.n	8005584 <HAL_RCC_OscConfig+0x30c>
 800556a:	4b5f      	ldr	r3, [pc, #380]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 800556c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556e:	4a5e      	ldr	r2, [pc, #376]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005570:	f043 0304 	orr.w	r3, r3, #4
 8005574:	6713      	str	r3, [r2, #112]	; 0x70
 8005576:	4b5c      	ldr	r3, [pc, #368]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557a:	4a5b      	ldr	r2, [pc, #364]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 800557c:	f043 0301 	orr.w	r3, r3, #1
 8005580:	6713      	str	r3, [r2, #112]	; 0x70
 8005582:	e00b      	b.n	800559c <HAL_RCC_OscConfig+0x324>
 8005584:	4b58      	ldr	r3, [pc, #352]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005588:	4a57      	ldr	r2, [pc, #348]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 800558a:	f023 0301 	bic.w	r3, r3, #1
 800558e:	6713      	str	r3, [r2, #112]	; 0x70
 8005590:	4b55      	ldr	r3, [pc, #340]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005594:	4a54      	ldr	r2, [pc, #336]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005596:	f023 0304 	bic.w	r3, r3, #4
 800559a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d015      	beq.n	80055d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a4:	f7fe fbb6 	bl	8003d14 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055aa:	e00a      	b.n	80055c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055ac:	f7fe fbb2 	bl	8003d14 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e0cb      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c2:	4b49      	ldr	r3, [pc, #292]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 80055c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0ee      	beq.n	80055ac <HAL_RCC_OscConfig+0x334>
 80055ce:	e014      	b.n	80055fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055d0:	f7fe fba0 	bl	8003d14 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055d6:	e00a      	b.n	80055ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055d8:	f7fe fb9c 	bl	8003d14 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e0b5      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ee:	4b3e      	ldr	r3, [pc, #248]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 80055f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1ee      	bne.n	80055d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055fa:	7dfb      	ldrb	r3, [r7, #23]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d105      	bne.n	800560c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005600:	4b39      	ldr	r3, [pc, #228]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	4a38      	ldr	r2, [pc, #224]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800560a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 80a1 	beq.w	8005758 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005616:	4b34      	ldr	r3, [pc, #208]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 030c 	and.w	r3, r3, #12
 800561e:	2b08      	cmp	r3, #8
 8005620:	d05c      	beq.n	80056dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d141      	bne.n	80056ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800562a:	4b31      	ldr	r3, [pc, #196]	; (80056f0 <HAL_RCC_OscConfig+0x478>)
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005630:	f7fe fb70 	bl	8003d14 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005638:	f7fe fb6c 	bl	8003d14 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e087      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800564a:	4b27      	ldr	r3, [pc, #156]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1f0      	bne.n	8005638 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69da      	ldr	r2, [r3, #28]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	019b      	lsls	r3, r3, #6
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	085b      	lsrs	r3, r3, #1
 800566e:	3b01      	subs	r3, #1
 8005670:	041b      	lsls	r3, r3, #16
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	061b      	lsls	r3, r3, #24
 800567a:	491b      	ldr	r1, [pc, #108]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 800567c:	4313      	orrs	r3, r2
 800567e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005680:	4b1b      	ldr	r3, [pc, #108]	; (80056f0 <HAL_RCC_OscConfig+0x478>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005686:	f7fe fb45 	bl	8003d14 <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800568c:	e008      	b.n	80056a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800568e:	f7fe fb41 	bl	8003d14 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e05c      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056a0:	4b11      	ldr	r3, [pc, #68]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0f0      	beq.n	800568e <HAL_RCC_OscConfig+0x416>
 80056ac:	e054      	b.n	8005758 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ae:	4b10      	ldr	r3, [pc, #64]	; (80056f0 <HAL_RCC_OscConfig+0x478>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b4:	f7fe fb2e 	bl	8003d14 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056bc:	f7fe fb2a 	bl	8003d14 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e045      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ce:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f0      	bne.n	80056bc <HAL_RCC_OscConfig+0x444>
 80056da:	e03d      	b.n	8005758 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d107      	bne.n	80056f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e038      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
 80056e8:	40023800 	.word	0x40023800
 80056ec:	40007000 	.word	0x40007000
 80056f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056f4:	4b1b      	ldr	r3, [pc, #108]	; (8005764 <HAL_RCC_OscConfig+0x4ec>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d028      	beq.n	8005754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800570c:	429a      	cmp	r2, r3
 800570e:	d121      	bne.n	8005754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d11a      	bne.n	8005754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005724:	4013      	ands	r3, r2
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800572a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800572c:	4293      	cmp	r3, r2
 800572e:	d111      	bne.n	8005754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	3b01      	subs	r3, #1
 800573e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005740:	429a      	cmp	r2, r3
 8005742:	d107      	bne.n	8005754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005750:	429a      	cmp	r2, r3
 8005752:	d001      	beq.n	8005758 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	40023800 	.word	0x40023800

08005768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e0cc      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800577c:	4b68      	ldr	r3, [pc, #416]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d90c      	bls.n	80057a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800578a:	4b65      	ldr	r3, [pc, #404]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005792:	4b63      	ldr	r3, [pc, #396]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	429a      	cmp	r2, r3
 800579e:	d001      	beq.n	80057a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e0b8      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d020      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d005      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057bc:	4b59      	ldr	r3, [pc, #356]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	4a58      	ldr	r2, [pc, #352]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057d4:	4b53      	ldr	r3, [pc, #332]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	4a52      	ldr	r2, [pc, #328]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057e0:	4b50      	ldr	r3, [pc, #320]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	494d      	ldr	r1, [pc, #308]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d044      	beq.n	8005888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d107      	bne.n	8005816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005806:	4b47      	ldr	r3, [pc, #284]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d119      	bne.n	8005846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e07f      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d003      	beq.n	8005826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005822:	2b03      	cmp	r3, #3
 8005824:	d107      	bne.n	8005836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005826:	4b3f      	ldr	r3, [pc, #252]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d109      	bne.n	8005846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e06f      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005836:	4b3b      	ldr	r3, [pc, #236]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e067      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005846:	4b37      	ldr	r3, [pc, #220]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f023 0203 	bic.w	r2, r3, #3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	4934      	ldr	r1, [pc, #208]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005854:	4313      	orrs	r3, r2
 8005856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005858:	f7fe fa5c 	bl	8003d14 <HAL_GetTick>
 800585c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585e:	e00a      	b.n	8005876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005860:	f7fe fa58 	bl	8003d14 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	f241 3288 	movw	r2, #5000	; 0x1388
 800586e:	4293      	cmp	r3, r2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e04f      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005876:	4b2b      	ldr	r3, [pc, #172]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 020c 	and.w	r2, r3, #12
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	429a      	cmp	r2, r3
 8005886:	d1eb      	bne.n	8005860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005888:	4b25      	ldr	r3, [pc, #148]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d20c      	bcs.n	80058b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005896:	4b22      	ldr	r3, [pc, #136]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800589e:	4b20      	ldr	r3, [pc, #128]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d001      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e032      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058bc:	4b19      	ldr	r3, [pc, #100]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4916      	ldr	r1, [pc, #88]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058da:	4b12      	ldr	r3, [pc, #72]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	490e      	ldr	r1, [pc, #56]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058ee:	f000 f821 	bl	8005934 <HAL_RCC_GetSysClockFreq>
 80058f2:	4602      	mov	r2, r0
 80058f4:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	490a      	ldr	r1, [pc, #40]	; (8005928 <HAL_RCC_ClockConfig+0x1c0>)
 8005900:	5ccb      	ldrb	r3, [r1, r3]
 8005902:	fa22 f303 	lsr.w	r3, r2, r3
 8005906:	4a09      	ldr	r2, [pc, #36]	; (800592c <HAL_RCC_ClockConfig+0x1c4>)
 8005908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800590a:	4b09      	ldr	r3, [pc, #36]	; (8005930 <HAL_RCC_ClockConfig+0x1c8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe f9bc 	bl	8003c8c <HAL_InitTick>

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	40023c00 	.word	0x40023c00
 8005924:	40023800 	.word	0x40023800
 8005928:	080085b0 	.word	0x080085b0
 800592c:	200001bc 	.word	0x200001bc
 8005930:	200001c0 	.word	0x200001c0

08005934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005938:	b094      	sub	sp, #80	; 0x50
 800593a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	647b      	str	r3, [r7, #68]	; 0x44
 8005940:	2300      	movs	r3, #0
 8005942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005944:	2300      	movs	r3, #0
 8005946:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800594c:	4b79      	ldr	r3, [pc, #484]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x200>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f003 030c 	and.w	r3, r3, #12
 8005954:	2b08      	cmp	r3, #8
 8005956:	d00d      	beq.n	8005974 <HAL_RCC_GetSysClockFreq+0x40>
 8005958:	2b08      	cmp	r3, #8
 800595a:	f200 80e1 	bhi.w	8005b20 <HAL_RCC_GetSysClockFreq+0x1ec>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <HAL_RCC_GetSysClockFreq+0x34>
 8005962:	2b04      	cmp	r3, #4
 8005964:	d003      	beq.n	800596e <HAL_RCC_GetSysClockFreq+0x3a>
 8005966:	e0db      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005968:	4b73      	ldr	r3, [pc, #460]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x204>)
 800596a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800596c:	e0db      	b.n	8005b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800596e:	4b73      	ldr	r3, [pc, #460]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x208>)
 8005970:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005972:	e0d8      	b.n	8005b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005974:	4b6f      	ldr	r3, [pc, #444]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800597c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800597e:	4b6d      	ldr	r3, [pc, #436]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d063      	beq.n	8005a52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800598a:	4b6a      	ldr	r3, [pc, #424]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x200>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	099b      	lsrs	r3, r3, #6
 8005990:	2200      	movs	r2, #0
 8005992:	63bb      	str	r3, [r7, #56]	; 0x38
 8005994:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800599c:	633b      	str	r3, [r7, #48]	; 0x30
 800599e:	2300      	movs	r3, #0
 80059a0:	637b      	str	r3, [r7, #52]	; 0x34
 80059a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80059a6:	4622      	mov	r2, r4
 80059a8:	462b      	mov	r3, r5
 80059aa:	f04f 0000 	mov.w	r0, #0
 80059ae:	f04f 0100 	mov.w	r1, #0
 80059b2:	0159      	lsls	r1, r3, #5
 80059b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059b8:	0150      	lsls	r0, r2, #5
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4621      	mov	r1, r4
 80059c0:	1a51      	subs	r1, r2, r1
 80059c2:	6139      	str	r1, [r7, #16]
 80059c4:	4629      	mov	r1, r5
 80059c6:	eb63 0301 	sbc.w	r3, r3, r1
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059d8:	4659      	mov	r1, fp
 80059da:	018b      	lsls	r3, r1, #6
 80059dc:	4651      	mov	r1, sl
 80059de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059e2:	4651      	mov	r1, sl
 80059e4:	018a      	lsls	r2, r1, #6
 80059e6:	4651      	mov	r1, sl
 80059e8:	ebb2 0801 	subs.w	r8, r2, r1
 80059ec:	4659      	mov	r1, fp
 80059ee:	eb63 0901 	sbc.w	r9, r3, r1
 80059f2:	f04f 0200 	mov.w	r2, #0
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a06:	4690      	mov	r8, r2
 8005a08:	4699      	mov	r9, r3
 8005a0a:	4623      	mov	r3, r4
 8005a0c:	eb18 0303 	adds.w	r3, r8, r3
 8005a10:	60bb      	str	r3, [r7, #8]
 8005a12:	462b      	mov	r3, r5
 8005a14:	eb49 0303 	adc.w	r3, r9, r3
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	f04f 0200 	mov.w	r2, #0
 8005a1e:	f04f 0300 	mov.w	r3, #0
 8005a22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a26:	4629      	mov	r1, r5
 8005a28:	024b      	lsls	r3, r1, #9
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a30:	4621      	mov	r1, r4
 8005a32:	024a      	lsls	r2, r1, #9
 8005a34:	4610      	mov	r0, r2
 8005a36:	4619      	mov	r1, r3
 8005a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a44:	f7fb f8b6 	bl	8000bb4 <__aeabi_uldivmod>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a50:	e058      	b.n	8005b04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a52:	4b38      	ldr	r3, [pc, #224]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	099b      	lsrs	r3, r3, #6
 8005a58:	2200      	movs	r2, #0
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a62:	623b      	str	r3, [r7, #32]
 8005a64:	2300      	movs	r3, #0
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
 8005a68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	464b      	mov	r3, r9
 8005a70:	f04f 0000 	mov.w	r0, #0
 8005a74:	f04f 0100 	mov.w	r1, #0
 8005a78:	0159      	lsls	r1, r3, #5
 8005a7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a7e:	0150      	lsls	r0, r2, #5
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4641      	mov	r1, r8
 8005a86:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005aa0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005aa4:	ebb2 040a 	subs.w	r4, r2, sl
 8005aa8:	eb63 050b 	sbc.w	r5, r3, fp
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	00eb      	lsls	r3, r5, #3
 8005ab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aba:	00e2      	lsls	r2, r4, #3
 8005abc:	4614      	mov	r4, r2
 8005abe:	461d      	mov	r5, r3
 8005ac0:	4643      	mov	r3, r8
 8005ac2:	18e3      	adds	r3, r4, r3
 8005ac4:	603b      	str	r3, [r7, #0]
 8005ac6:	464b      	mov	r3, r9
 8005ac8:	eb45 0303 	adc.w	r3, r5, r3
 8005acc:	607b      	str	r3, [r7, #4]
 8005ace:	f04f 0200 	mov.w	r2, #0
 8005ad2:	f04f 0300 	mov.w	r3, #0
 8005ad6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ada:	4629      	mov	r1, r5
 8005adc:	028b      	lsls	r3, r1, #10
 8005ade:	4621      	mov	r1, r4
 8005ae0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	028a      	lsls	r2, r1, #10
 8005ae8:	4610      	mov	r0, r2
 8005aea:	4619      	mov	r1, r3
 8005aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aee:	2200      	movs	r2, #0
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	61fa      	str	r2, [r7, #28]
 8005af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005af8:	f7fb f85c 	bl	8000bb4 <__aeabi_uldivmod>
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4613      	mov	r3, r2
 8005b02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b04:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	0c1b      	lsrs	r3, r3, #16
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	3301      	adds	r3, #1
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b1e:	e002      	b.n	8005b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b20:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3750      	adds	r7, #80	; 0x50
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b32:	bf00      	nop
 8005b34:	40023800 	.word	0x40023800
 8005b38:	00f42400 	.word	0x00f42400
 8005b3c:	007a1200 	.word	0x007a1200

08005b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e041      	b.n	8005bd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d106      	bne.n	8005b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fd ff18 	bl	800399c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	f000 ff92 	bl	8006aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d001      	beq.n	8005bf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e044      	b.n	8005c82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a1e      	ldr	r2, [pc, #120]	; (8005c90 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d018      	beq.n	8005c4c <HAL_TIM_Base_Start_IT+0x6c>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c22:	d013      	beq.n	8005c4c <HAL_TIM_Base_Start_IT+0x6c>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a1a      	ldr	r2, [pc, #104]	; (8005c94 <HAL_TIM_Base_Start_IT+0xb4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00e      	beq.n	8005c4c <HAL_TIM_Base_Start_IT+0x6c>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a19      	ldr	r2, [pc, #100]	; (8005c98 <HAL_TIM_Base_Start_IT+0xb8>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d009      	beq.n	8005c4c <HAL_TIM_Base_Start_IT+0x6c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a17      	ldr	r2, [pc, #92]	; (8005c9c <HAL_TIM_Base_Start_IT+0xbc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d004      	beq.n	8005c4c <HAL_TIM_Base_Start_IT+0x6c>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a16      	ldr	r2, [pc, #88]	; (8005ca0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d111      	bne.n	8005c70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b06      	cmp	r3, #6
 8005c5c:	d010      	beq.n	8005c80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f042 0201 	orr.w	r2, r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c6e:	e007      	b.n	8005c80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0201 	orr.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	40010000 	.word	0x40010000
 8005c94:	40000400 	.word	0x40000400
 8005c98:	40000800 	.word	0x40000800
 8005c9c:	40000c00 	.word	0x40000c00
 8005ca0:	40014000 	.word	0x40014000

08005ca4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e041      	b.n	8005d3a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f839 	bl	8005d42 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	f000 fee0 	bl	8006aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e041      	b.n	8005dec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d106      	bne.n	8005d82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f839 	bl	8005df4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2202      	movs	r2, #2
 8005d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3304      	adds	r3, #4
 8005d92:	4619      	mov	r1, r3
 8005d94:	4610      	mov	r0, r2
 8005d96:	f000 fe87 	bl	8006aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d109      	bne.n	8005e2c <HAL_TIM_PWM_Start+0x24>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	bf14      	ite	ne
 8005e24:	2301      	movne	r3, #1
 8005e26:	2300      	moveq	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	e022      	b.n	8005e72 <HAL_TIM_PWM_Start+0x6a>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d109      	bne.n	8005e46 <HAL_TIM_PWM_Start+0x3e>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	bf14      	ite	ne
 8005e3e:	2301      	movne	r3, #1
 8005e40:	2300      	moveq	r3, #0
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	e015      	b.n	8005e72 <HAL_TIM_PWM_Start+0x6a>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d109      	bne.n	8005e60 <HAL_TIM_PWM_Start+0x58>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	bf14      	ite	ne
 8005e58:	2301      	movne	r3, #1
 8005e5a:	2300      	moveq	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	e008      	b.n	8005e72 <HAL_TIM_PWM_Start+0x6a>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	bf14      	ite	ne
 8005e6c:	2301      	movne	r3, #1
 8005e6e:	2300      	moveq	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e068      	b.n	8005f4c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d104      	bne.n	8005e8a <HAL_TIM_PWM_Start+0x82>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e88:	e013      	b.n	8005eb2 <HAL_TIM_PWM_Start+0xaa>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d104      	bne.n	8005e9a <HAL_TIM_PWM_Start+0x92>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e98:	e00b      	b.n	8005eb2 <HAL_TIM_PWM_Start+0xaa>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	d104      	bne.n	8005eaa <HAL_TIM_PWM_Start+0xa2>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ea8:	e003      	b.n	8005eb2 <HAL_TIM_PWM_Start+0xaa>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2202      	movs	r2, #2
 8005eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f001 f89a 	bl	8006ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a23      	ldr	r2, [pc, #140]	; (8005f54 <HAL_TIM_PWM_Start+0x14c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d107      	bne.n	8005eda <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ed8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a1d      	ldr	r2, [pc, #116]	; (8005f54 <HAL_TIM_PWM_Start+0x14c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d018      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x10e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eec:	d013      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x10e>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a19      	ldr	r2, [pc, #100]	; (8005f58 <HAL_TIM_PWM_Start+0x150>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00e      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x10e>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a17      	ldr	r2, [pc, #92]	; (8005f5c <HAL_TIM_PWM_Start+0x154>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d009      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x10e>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a16      	ldr	r2, [pc, #88]	; (8005f60 <HAL_TIM_PWM_Start+0x158>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d004      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x10e>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a14      	ldr	r2, [pc, #80]	; (8005f64 <HAL_TIM_PWM_Start+0x15c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d111      	bne.n	8005f3a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b06      	cmp	r3, #6
 8005f26:	d010      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0201 	orr.w	r2, r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f38:	e007      	b.n	8005f4a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0201 	orr.w	r2, r2, #1
 8005f48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40010000 	.word	0x40010000
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	40000800 	.word	0x40000800
 8005f60:	40000c00 	.word	0x40000c00
 8005f64:	40014000 	.word	0x40014000

08005f68 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
 8005f74:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d109      	bne.n	8005f94 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	bf0c      	ite	eq
 8005f8c:	2301      	moveq	r3, #1
 8005f8e:	2300      	movne	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	e022      	b.n	8005fda <HAL_TIM_PWM_Start_DMA+0x72>
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d109      	bne.n	8005fae <HAL_TIM_PWM_Start_DMA+0x46>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	bf0c      	ite	eq
 8005fa6:	2301      	moveq	r3, #1
 8005fa8:	2300      	movne	r3, #0
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	e015      	b.n	8005fda <HAL_TIM_PWM_Start_DMA+0x72>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d109      	bne.n	8005fc8 <HAL_TIM_PWM_Start_DMA+0x60>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	bf0c      	ite	eq
 8005fc0:	2301      	moveq	r3, #1
 8005fc2:	2300      	movne	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	e008      	b.n	8005fda <HAL_TIM_PWM_Start_DMA+0x72>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	bf0c      	ite	eq
 8005fd4:	2301      	moveq	r3, #1
 8005fd6:	2300      	movne	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e15d      	b.n	800629e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d109      	bne.n	8005ffc <HAL_TIM_PWM_Start_DMA+0x94>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	bf0c      	ite	eq
 8005ff4:	2301      	moveq	r3, #1
 8005ff6:	2300      	movne	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	e022      	b.n	8006042 <HAL_TIM_PWM_Start_DMA+0xda>
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d109      	bne.n	8006016 <HAL_TIM_PWM_Start_DMA+0xae>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b01      	cmp	r3, #1
 800600c:	bf0c      	ite	eq
 800600e:	2301      	moveq	r3, #1
 8006010:	2300      	movne	r3, #0
 8006012:	b2db      	uxtb	r3, r3
 8006014:	e015      	b.n	8006042 <HAL_TIM_PWM_Start_DMA+0xda>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b08      	cmp	r3, #8
 800601a:	d109      	bne.n	8006030 <HAL_TIM_PWM_Start_DMA+0xc8>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b01      	cmp	r3, #1
 8006026:	bf0c      	ite	eq
 8006028:	2301      	moveq	r3, #1
 800602a:	2300      	movne	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	e008      	b.n	8006042 <HAL_TIM_PWM_Start_DMA+0xda>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b01      	cmp	r3, #1
 800603a:	bf0c      	ite	eq
 800603c:	2301      	moveq	r3, #1
 800603e:	2300      	movne	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d024      	beq.n	8006090 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d104      	bne.n	8006056 <HAL_TIM_PWM_Start_DMA+0xee>
 800604c:	887b      	ldrh	r3, [r7, #2]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e123      	b.n	800629e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d104      	bne.n	8006066 <HAL_TIM_PWM_Start_DMA+0xfe>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006064:	e016      	b.n	8006094 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2b04      	cmp	r3, #4
 800606a:	d104      	bne.n	8006076 <HAL_TIM_PWM_Start_DMA+0x10e>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006074:	e00e      	b.n	8006094 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2b08      	cmp	r3, #8
 800607a:	d104      	bne.n	8006086 <HAL_TIM_PWM_Start_DMA+0x11e>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006084:	e006      	b.n	8006094 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2202      	movs	r2, #2
 800608a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800608e:	e001      	b.n	8006094 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e104      	b.n	800629e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b0c      	cmp	r3, #12
 8006098:	f200 80ae 	bhi.w	80061f8 <HAL_TIM_PWM_Start_DMA+0x290>
 800609c:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800609e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a2:	bf00      	nop
 80060a4:	080060d9 	.word	0x080060d9
 80060a8:	080061f9 	.word	0x080061f9
 80060ac:	080061f9 	.word	0x080061f9
 80060b0:	080061f9 	.word	0x080061f9
 80060b4:	08006121 	.word	0x08006121
 80060b8:	080061f9 	.word	0x080061f9
 80060bc:	080061f9 	.word	0x080061f9
 80060c0:	080061f9 	.word	0x080061f9
 80060c4:	08006169 	.word	0x08006169
 80060c8:	080061f9 	.word	0x080061f9
 80060cc:	080061f9 	.word	0x080061f9
 80060d0:	080061f9 	.word	0x080061f9
 80060d4:	080061b1 	.word	0x080061b1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	4a72      	ldr	r2, [pc, #456]	; (80062a8 <HAL_TIM_PWM_Start_DMA+0x340>)
 80060de:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	4a71      	ldr	r2, [pc, #452]	; (80062ac <HAL_TIM_PWM_Start_DMA+0x344>)
 80060e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	4a70      	ldr	r2, [pc, #448]	; (80062b0 <HAL_TIM_PWM_Start_DMA+0x348>)
 80060ee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3334      	adds	r3, #52	; 0x34
 80060fc:	461a      	mov	r2, r3
 80060fe:	887b      	ldrh	r3, [r7, #2]
 8006100:	f7fe fc40 	bl	8004984 <HAL_DMA_Start_IT>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e0c7      	b.n	800629e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800611c:	60da      	str	r2, [r3, #12]
      break;
 800611e:	e06e      	b.n	80061fe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	4a60      	ldr	r2, [pc, #384]	; (80062a8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006126:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612c:	4a5f      	ldr	r2, [pc, #380]	; (80062ac <HAL_TIM_PWM_Start_DMA+0x344>)
 800612e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006134:	4a5e      	ldr	r2, [pc, #376]	; (80062b0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006136:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3338      	adds	r3, #56	; 0x38
 8006144:	461a      	mov	r2, r3
 8006146:	887b      	ldrh	r3, [r7, #2]
 8006148:	f7fe fc1c 	bl	8004984 <HAL_DMA_Start_IT>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e0a3      	b.n	800629e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006164:	60da      	str	r2, [r3, #12]
      break;
 8006166:	e04a      	b.n	80061fe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	4a4e      	ldr	r2, [pc, #312]	; (80062a8 <HAL_TIM_PWM_Start_DMA+0x340>)
 800616e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	4a4d      	ldr	r2, [pc, #308]	; (80062ac <HAL_TIM_PWM_Start_DMA+0x344>)
 8006176:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	4a4c      	ldr	r2, [pc, #304]	; (80062b0 <HAL_TIM_PWM_Start_DMA+0x348>)
 800617e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	333c      	adds	r3, #60	; 0x3c
 800618c:	461a      	mov	r2, r3
 800618e:	887b      	ldrh	r3, [r7, #2]
 8006190:	f7fe fbf8 	bl	8004984 <HAL_DMA_Start_IT>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e07f      	b.n	800629e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ac:	60da      	str	r2, [r3, #12]
      break;
 80061ae:	e026      	b.n	80061fe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	4a3c      	ldr	r2, [pc, #240]	; (80062a8 <HAL_TIM_PWM_Start_DMA+0x340>)
 80061b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061bc:	4a3b      	ldr	r2, [pc, #236]	; (80062ac <HAL_TIM_PWM_Start_DMA+0x344>)
 80061be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	4a3a      	ldr	r2, [pc, #232]	; (80062b0 <HAL_TIM_PWM_Start_DMA+0x348>)
 80061c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3340      	adds	r3, #64	; 0x40
 80061d4:	461a      	mov	r2, r3
 80061d6:	887b      	ldrh	r3, [r7, #2]
 80061d8:	f7fe fbd4 	bl	8004984 <HAL_DMA_Start_IT>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e05b      	b.n	800629e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061f4:	60da      	str	r2, [r3, #12]
      break;
 80061f6:	e002      	b.n	80061fe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	75fb      	strb	r3, [r7, #23]
      break;
 80061fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80061fe:	7dfb      	ldrb	r3, [r7, #23]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d14b      	bne.n	800629c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2201      	movs	r2, #1
 800620a:	68b9      	ldr	r1, [r7, #8]
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fef1 	bl	8006ff4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a27      	ldr	r2, [pc, #156]	; (80062b4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d107      	bne.n	800622c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800622a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a20      	ldr	r2, [pc, #128]	; (80062b4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d018      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0x300>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800623e:	d013      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0x300>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a1c      	ldr	r2, [pc, #112]	; (80062b8 <HAL_TIM_PWM_Start_DMA+0x350>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00e      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0x300>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a1b      	ldr	r2, [pc, #108]	; (80062bc <HAL_TIM_PWM_Start_DMA+0x354>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d009      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0x300>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a19      	ldr	r2, [pc, #100]	; (80062c0 <HAL_TIM_PWM_Start_DMA+0x358>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d004      	beq.n	8006268 <HAL_TIM_PWM_Start_DMA+0x300>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a18      	ldr	r2, [pc, #96]	; (80062c4 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d111      	bne.n	800628c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	2b06      	cmp	r3, #6
 8006278:	d010      	beq.n	800629c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0201 	orr.w	r2, r2, #1
 8006288:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628a:	e007      	b.n	800629c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800629c:	7dfb      	ldrb	r3, [r7, #23]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	08006999 	.word	0x08006999
 80062ac:	08006a41 	.word	0x08006a41
 80062b0:	08006907 	.word	0x08006907
 80062b4:	40010000 	.word	0x40010000
 80062b8:	40000400 	.word	0x40000400
 80062bc:	40000800 	.word	0x40000800
 80062c0:	40000c00 	.word	0x40000c00
 80062c4:	40014000 	.word	0x40014000

080062c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d122      	bne.n	8006324 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d11b      	bne.n	8006324 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f06f 0202 	mvn.w	r2, #2
 80062f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	f003 0303 	and.w	r3, r3, #3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fad3 	bl	80068b6 <HAL_TIM_IC_CaptureCallback>
 8006310:	e005      	b.n	800631e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fac5 	bl	80068a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7fa fdc9 	bl	8000eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f003 0304 	and.w	r3, r3, #4
 800632e:	2b04      	cmp	r3, #4
 8006330:	d122      	bne.n	8006378 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b04      	cmp	r3, #4
 800633e:	d11b      	bne.n	8006378 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0204 	mvn.w	r2, #4
 8006348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2202      	movs	r2, #2
 800634e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 faa9 	bl	80068b6 <HAL_TIM_IC_CaptureCallback>
 8006364:	e005      	b.n	8006372 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fa9b 	bl	80068a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7fa fd9f 	bl	8000eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	2b08      	cmp	r3, #8
 8006384:	d122      	bne.n	80063cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f003 0308 	and.w	r3, r3, #8
 8006390:	2b08      	cmp	r3, #8
 8006392:	d11b      	bne.n	80063cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f06f 0208 	mvn.w	r2, #8
 800639c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2204      	movs	r2, #4
 80063a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fa7f 	bl	80068b6 <HAL_TIM_IC_CaptureCallback>
 80063b8:	e005      	b.n	80063c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fa71 	bl	80068a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7fa fd75 	bl	8000eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f003 0310 	and.w	r3, r3, #16
 80063d6:	2b10      	cmp	r3, #16
 80063d8:	d122      	bne.n	8006420 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f003 0310 	and.w	r3, r3, #16
 80063e4:	2b10      	cmp	r3, #16
 80063e6:	d11b      	bne.n	8006420 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f06f 0210 	mvn.w	r2, #16
 80063f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2208      	movs	r2, #8
 80063f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fa55 	bl	80068b6 <HAL_TIM_IC_CaptureCallback>
 800640c:	e005      	b.n	800641a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fa47 	bl	80068a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7fa fd4b 	bl	8000eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b01      	cmp	r3, #1
 800642c:	d10e      	bne.n	800644c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b01      	cmp	r3, #1
 800643a:	d107      	bne.n	800644c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f06f 0201 	mvn.w	r2, #1
 8006444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7fa fe70 	bl	800112c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006456:	2b80      	cmp	r3, #128	; 0x80
 8006458:	d10e      	bne.n	8006478 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006464:	2b80      	cmp	r3, #128	; 0x80
 8006466:	d107      	bne.n	8006478 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 feae 	bl	80071d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006482:	2b40      	cmp	r3, #64	; 0x40
 8006484:	d10e      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006490:	2b40      	cmp	r3, #64	; 0x40
 8006492:	d107      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800649c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa1d 	bl	80068de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	d10e      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f003 0320 	and.w	r3, r3, #32
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d107      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0220 	mvn.w	r2, #32
 80064c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fe78 	bl	80071c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064d0:	bf00      	nop
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d101      	bne.n	80064f6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80064f2:	2302      	movs	r3, #2
 80064f4:	e048      	b.n	8006588 <HAL_TIM_OC_ConfigChannel+0xb0>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b0c      	cmp	r3, #12
 8006502:	d839      	bhi.n	8006578 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006504:	a201      	add	r2, pc, #4	; (adr r2, 800650c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650a:	bf00      	nop
 800650c:	08006541 	.word	0x08006541
 8006510:	08006579 	.word	0x08006579
 8006514:	08006579 	.word	0x08006579
 8006518:	08006579 	.word	0x08006579
 800651c:	0800654f 	.word	0x0800654f
 8006520:	08006579 	.word	0x08006579
 8006524:	08006579 	.word	0x08006579
 8006528:	08006579 	.word	0x08006579
 800652c:	0800655d 	.word	0x0800655d
 8006530:	08006579 	.word	0x08006579
 8006534:	08006579 	.word	0x08006579
 8006538:	08006579 	.word	0x08006579
 800653c:	0800656b 	.word	0x0800656b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68b9      	ldr	r1, [r7, #8]
 8006546:	4618      	mov	r0, r3
 8006548:	f000 fb2e 	bl	8006ba8 <TIM_OC1_SetConfig>
      break;
 800654c:	e017      	b.n	800657e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	4618      	mov	r0, r3
 8006556:	f000 fb8d 	bl	8006c74 <TIM_OC2_SetConfig>
      break;
 800655a:	e010      	b.n	800657e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68b9      	ldr	r1, [r7, #8]
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fbf2 	bl	8006d4c <TIM_OC3_SetConfig>
      break;
 8006568:	e009      	b.n	800657e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68b9      	ldr	r1, [r7, #8]
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fc55 	bl	8006e20 <TIM_OC4_SetConfig>
      break;
 8006576:	e002      	b.n	800657e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	75fb      	strb	r3, [r7, #23]
      break;
 800657c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006586:	7dfb      	ldrb	r3, [r7, #23]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800659c:	2300      	movs	r3, #0
 800659e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d101      	bne.n	80065ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065aa:	2302      	movs	r3, #2
 80065ac:	e0ae      	b.n	800670c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b0c      	cmp	r3, #12
 80065ba:	f200 809f 	bhi.w	80066fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80065be:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c4:	080065f9 	.word	0x080065f9
 80065c8:	080066fd 	.word	0x080066fd
 80065cc:	080066fd 	.word	0x080066fd
 80065d0:	080066fd 	.word	0x080066fd
 80065d4:	08006639 	.word	0x08006639
 80065d8:	080066fd 	.word	0x080066fd
 80065dc:	080066fd 	.word	0x080066fd
 80065e0:	080066fd 	.word	0x080066fd
 80065e4:	0800667b 	.word	0x0800667b
 80065e8:	080066fd 	.word	0x080066fd
 80065ec:	080066fd 	.word	0x080066fd
 80065f0:	080066fd 	.word	0x080066fd
 80065f4:	080066bb 	.word	0x080066bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68b9      	ldr	r1, [r7, #8]
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fad2 	bl	8006ba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699a      	ldr	r2, [r3, #24]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0208 	orr.w	r2, r2, #8
 8006612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699a      	ldr	r2, [r3, #24]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0204 	bic.w	r2, r2, #4
 8006622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6999      	ldr	r1, [r3, #24]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	691a      	ldr	r2, [r3, #16]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	619a      	str	r2, [r3, #24]
      break;
 8006636:	e064      	b.n	8006702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68b9      	ldr	r1, [r7, #8]
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fb18 	bl	8006c74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6999      	ldr	r1, [r3, #24]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	021a      	lsls	r2, r3, #8
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	619a      	str	r2, [r3, #24]
      break;
 8006678:	e043      	b.n	8006702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68b9      	ldr	r1, [r7, #8]
 8006680:	4618      	mov	r0, r3
 8006682:	f000 fb63 	bl	8006d4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69da      	ldr	r2, [r3, #28]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0208 	orr.w	r2, r2, #8
 8006694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69da      	ldr	r2, [r3, #28]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0204 	bic.w	r2, r2, #4
 80066a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69d9      	ldr	r1, [r3, #28]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	61da      	str	r2, [r3, #28]
      break;
 80066b8:	e023      	b.n	8006702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fbad 	bl	8006e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69da      	ldr	r2, [r3, #28]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69da      	ldr	r2, [r3, #28]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69d9      	ldr	r1, [r3, #28]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	021a      	lsls	r2, r3, #8
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	61da      	str	r2, [r3, #28]
      break;
 80066fa:	e002      	b.n	8006702 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006700:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800670a:	7dfb      	ldrb	r3, [r7, #23]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_TIM_ConfigClockSource+0x1c>
 800672c:	2302      	movs	r3, #2
 800672e:	e0b4      	b.n	800689a <HAL_TIM_ConfigClockSource+0x186>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800674e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006756:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006768:	d03e      	beq.n	80067e8 <HAL_TIM_ConfigClockSource+0xd4>
 800676a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676e:	f200 8087 	bhi.w	8006880 <HAL_TIM_ConfigClockSource+0x16c>
 8006772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006776:	f000 8086 	beq.w	8006886 <HAL_TIM_ConfigClockSource+0x172>
 800677a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677e:	d87f      	bhi.n	8006880 <HAL_TIM_ConfigClockSource+0x16c>
 8006780:	2b70      	cmp	r3, #112	; 0x70
 8006782:	d01a      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0xa6>
 8006784:	2b70      	cmp	r3, #112	; 0x70
 8006786:	d87b      	bhi.n	8006880 <HAL_TIM_ConfigClockSource+0x16c>
 8006788:	2b60      	cmp	r3, #96	; 0x60
 800678a:	d050      	beq.n	800682e <HAL_TIM_ConfigClockSource+0x11a>
 800678c:	2b60      	cmp	r3, #96	; 0x60
 800678e:	d877      	bhi.n	8006880 <HAL_TIM_ConfigClockSource+0x16c>
 8006790:	2b50      	cmp	r3, #80	; 0x50
 8006792:	d03c      	beq.n	800680e <HAL_TIM_ConfigClockSource+0xfa>
 8006794:	2b50      	cmp	r3, #80	; 0x50
 8006796:	d873      	bhi.n	8006880 <HAL_TIM_ConfigClockSource+0x16c>
 8006798:	2b40      	cmp	r3, #64	; 0x40
 800679a:	d058      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x13a>
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	d86f      	bhi.n	8006880 <HAL_TIM_ConfigClockSource+0x16c>
 80067a0:	2b30      	cmp	r3, #48	; 0x30
 80067a2:	d064      	beq.n	800686e <HAL_TIM_ConfigClockSource+0x15a>
 80067a4:	2b30      	cmp	r3, #48	; 0x30
 80067a6:	d86b      	bhi.n	8006880 <HAL_TIM_ConfigClockSource+0x16c>
 80067a8:	2b20      	cmp	r3, #32
 80067aa:	d060      	beq.n	800686e <HAL_TIM_ConfigClockSource+0x15a>
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	d867      	bhi.n	8006880 <HAL_TIM_ConfigClockSource+0x16c>
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d05c      	beq.n	800686e <HAL_TIM_ConfigClockSource+0x15a>
 80067b4:	2b10      	cmp	r3, #16
 80067b6:	d05a      	beq.n	800686e <HAL_TIM_ConfigClockSource+0x15a>
 80067b8:	e062      	b.n	8006880 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6899      	ldr	r1, [r3, #8]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f000 fbf3 	bl	8006fb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	609a      	str	r2, [r3, #8]
      break;
 80067e6:	e04f      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	6899      	ldr	r1, [r3, #8]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f000 fbdc 	bl	8006fb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800680a:	609a      	str	r2, [r3, #8]
      break;
 800680c:	e03c      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	6859      	ldr	r1, [r3, #4]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	461a      	mov	r2, r3
 800681c:	f000 fb50 	bl	8006ec0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2150      	movs	r1, #80	; 0x50
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fba9 	bl	8006f7e <TIM_ITRx_SetConfig>
      break;
 800682c:	e02c      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	6859      	ldr	r1, [r3, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	461a      	mov	r2, r3
 800683c:	f000 fb6f 	bl	8006f1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2160      	movs	r1, #96	; 0x60
 8006846:	4618      	mov	r0, r3
 8006848:	f000 fb99 	bl	8006f7e <TIM_ITRx_SetConfig>
      break;
 800684c:	e01c      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6859      	ldr	r1, [r3, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	461a      	mov	r2, r3
 800685c:	f000 fb30 	bl	8006ec0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2140      	movs	r1, #64	; 0x40
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fb89 	bl	8006f7e <TIM_ITRx_SetConfig>
      break;
 800686c:	e00c      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4619      	mov	r1, r3
 8006878:	4610      	mov	r0, r2
 800687a:	f000 fb80 	bl	8006f7e <TIM_ITRx_SetConfig>
      break;
 800687e:	e003      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	73fb      	strb	r3, [r7, #15]
      break;
 8006884:	e000      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006886:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006898:	7bfb      	ldrb	r3, [r7, #15]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068aa:	bf00      	nop
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80068d2:	bf00      	nop
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068de:	b480      	push	{r7}
 80068e0:	b083      	sub	sp, #12
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068e6:	bf00      	nop
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80068fa:	bf00      	nop
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	429a      	cmp	r2, r3
 800691c:	d107      	bne.n	800692e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800692c:	e02a      	b.n	8006984 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	429a      	cmp	r2, r3
 8006936:	d107      	bne.n	8006948 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2202      	movs	r2, #2
 800693c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006946:	e01d      	b.n	8006984 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	429a      	cmp	r2, r3
 8006950:	d107      	bne.n	8006962 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2204      	movs	r2, #4
 8006956:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006960:	e010      	b.n	8006984 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	429a      	cmp	r2, r3
 800696a:	d107      	bne.n	800697c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2208      	movs	r2, #8
 8006970:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800697a:	e003      	b.n	8006984 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f7ff ffb4 	bl	80068f2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	771a      	strb	r2, [r3, #28]
}
 8006990:	bf00      	nop
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d10b      	bne.n	80069c8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2201      	movs	r2, #1
 80069b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d136      	bne.n	8006a2c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069c6:	e031      	b.n	8006a2c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d10b      	bne.n	80069ea <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2202      	movs	r2, #2
 80069d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d125      	bne.n	8006a2c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069e8:	e020      	b.n	8006a2c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d10b      	bne.n	8006a0c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2204      	movs	r2, #4
 80069f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d114      	bne.n	8006a2c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a0a:	e00f      	b.n	8006a2c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d10a      	bne.n	8006a2c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2208      	movs	r2, #8
 8006a1a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d103      	bne.n	8006a2c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f7fa fa3f 	bl	8000eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	771a      	strb	r2, [r3, #28]
}
 8006a38:	bf00      	nop
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d103      	bne.n	8006a60 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	771a      	strb	r2, [r3, #28]
 8006a5e:	e019      	b.n	8006a94 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d103      	bne.n	8006a72 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	771a      	strb	r2, [r3, #28]
 8006a70:	e010      	b.n	8006a94 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d103      	bne.n	8006a84 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2204      	movs	r2, #4
 8006a80:	771a      	strb	r2, [r3, #28]
 8006a82:	e007      	b.n	8006a94 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d102      	bne.n	8006a94 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2208      	movs	r2, #8
 8006a92:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f7ff ff18 	bl	80068ca <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	771a      	strb	r2, [r3, #28]
}
 8006aa0:	bf00      	nop
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a34      	ldr	r2, [pc, #208]	; (8006b8c <TIM_Base_SetConfig+0xe4>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d00f      	beq.n	8006ae0 <TIM_Base_SetConfig+0x38>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac6:	d00b      	beq.n	8006ae0 <TIM_Base_SetConfig+0x38>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a31      	ldr	r2, [pc, #196]	; (8006b90 <TIM_Base_SetConfig+0xe8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d007      	beq.n	8006ae0 <TIM_Base_SetConfig+0x38>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a30      	ldr	r2, [pc, #192]	; (8006b94 <TIM_Base_SetConfig+0xec>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d003      	beq.n	8006ae0 <TIM_Base_SetConfig+0x38>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a2f      	ldr	r2, [pc, #188]	; (8006b98 <TIM_Base_SetConfig+0xf0>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d108      	bne.n	8006af2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a25      	ldr	r2, [pc, #148]	; (8006b8c <TIM_Base_SetConfig+0xe4>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d01b      	beq.n	8006b32 <TIM_Base_SetConfig+0x8a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b00:	d017      	beq.n	8006b32 <TIM_Base_SetConfig+0x8a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a22      	ldr	r2, [pc, #136]	; (8006b90 <TIM_Base_SetConfig+0xe8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d013      	beq.n	8006b32 <TIM_Base_SetConfig+0x8a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a21      	ldr	r2, [pc, #132]	; (8006b94 <TIM_Base_SetConfig+0xec>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00f      	beq.n	8006b32 <TIM_Base_SetConfig+0x8a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a20      	ldr	r2, [pc, #128]	; (8006b98 <TIM_Base_SetConfig+0xf0>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d00b      	beq.n	8006b32 <TIM_Base_SetConfig+0x8a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a1f      	ldr	r2, [pc, #124]	; (8006b9c <TIM_Base_SetConfig+0xf4>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d007      	beq.n	8006b32 <TIM_Base_SetConfig+0x8a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a1e      	ldr	r2, [pc, #120]	; (8006ba0 <TIM_Base_SetConfig+0xf8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d003      	beq.n	8006b32 <TIM_Base_SetConfig+0x8a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ba4 <TIM_Base_SetConfig+0xfc>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d108      	bne.n	8006b44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a08      	ldr	r2, [pc, #32]	; (8006b8c <TIM_Base_SetConfig+0xe4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d103      	bne.n	8006b78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	615a      	str	r2, [r3, #20]
}
 8006b7e:	bf00      	nop
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	40010000 	.word	0x40010000
 8006b90:	40000400 	.word	0x40000400
 8006b94:	40000800 	.word	0x40000800
 8006b98:	40000c00 	.word	0x40000c00
 8006b9c:	40014000 	.word	0x40014000
 8006ba0:	40014400 	.word	0x40014400
 8006ba4:	40014800 	.word	0x40014800

08006ba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	f023 0201 	bic.w	r2, r3, #1
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0303 	bic.w	r3, r3, #3
 8006bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f023 0302 	bic.w	r3, r3, #2
 8006bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a1c      	ldr	r2, [pc, #112]	; (8006c70 <TIM_OC1_SetConfig+0xc8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d10c      	bne.n	8006c1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f023 0308 	bic.w	r3, r3, #8
 8006c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f023 0304 	bic.w	r3, r3, #4
 8006c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a13      	ldr	r2, [pc, #76]	; (8006c70 <TIM_OC1_SetConfig+0xc8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d111      	bne.n	8006c4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	621a      	str	r2, [r3, #32]
}
 8006c64:	bf00      	nop
 8006c66:	371c      	adds	r7, #28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	40010000 	.word	0x40010000

08006c74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	f023 0210 	bic.w	r2, r3, #16
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f023 0320 	bic.w	r3, r3, #32
 8006cbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a1e      	ldr	r2, [pc, #120]	; (8006d48 <TIM_OC2_SetConfig+0xd4>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d10d      	bne.n	8006cf0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	011b      	lsls	r3, r3, #4
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a15      	ldr	r2, [pc, #84]	; (8006d48 <TIM_OC2_SetConfig+0xd4>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d113      	bne.n	8006d20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	621a      	str	r2, [r3, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	40010000 	.word	0x40010000

08006d4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0303 	bic.w	r3, r3, #3
 8006d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	021b      	lsls	r3, r3, #8
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a1d      	ldr	r2, [pc, #116]	; (8006e1c <TIM_OC3_SetConfig+0xd0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d10d      	bne.n	8006dc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006db0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	021b      	lsls	r3, r3, #8
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a14      	ldr	r2, [pc, #80]	; (8006e1c <TIM_OC3_SetConfig+0xd0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d113      	bne.n	8006df6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	011b      	lsls	r3, r3, #4
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	621a      	str	r2, [r3, #32]
}
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	40010000 	.word	0x40010000

08006e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	021b      	lsls	r3, r3, #8
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	031b      	lsls	r3, r3, #12
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a10      	ldr	r2, [pc, #64]	; (8006ebc <TIM_OC4_SetConfig+0x9c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d109      	bne.n	8006e94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	019b      	lsls	r3, r3, #6
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	621a      	str	r2, [r3, #32]
}
 8006eae:	bf00      	nop
 8006eb0:	371c      	adds	r7, #28
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	40010000 	.word	0x40010000

08006ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f023 0201 	bic.w	r2, r3, #1
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	011b      	lsls	r3, r3, #4
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f023 030a 	bic.w	r3, r3, #10
 8006efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	621a      	str	r2, [r3, #32]
}
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b087      	sub	sp, #28
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	f023 0210 	bic.w	r2, r3, #16
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	031b      	lsls	r3, r3, #12
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	011b      	lsls	r3, r3, #4
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	621a      	str	r2, [r3, #32]
}
 8006f72:	bf00      	nop
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b085      	sub	sp, #20
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	f043 0307 	orr.w	r3, r3, #7
 8006fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	609a      	str	r2, [r3, #8]
}
 8006fa8:	bf00      	nop
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	021a      	lsls	r2, r3, #8
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	609a      	str	r2, [r3, #8]
}
 8006fe8:	bf00      	nop
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f003 031f 	and.w	r3, r3, #31
 8007006:	2201      	movs	r2, #1
 8007008:	fa02 f303 	lsl.w	r3, r2, r3
 800700c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6a1a      	ldr	r2, [r3, #32]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	43db      	mvns	r3, r3
 8007016:	401a      	ands	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a1a      	ldr	r2, [r3, #32]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	f003 031f 	and.w	r3, r3, #31
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	fa01 f303 	lsl.w	r3, r1, r3
 800702c:	431a      	orrs	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	621a      	str	r2, [r3, #32]
}
 8007032:	bf00      	nop
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
	...

08007040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007054:	2302      	movs	r3, #2
 8007056:	e050      	b.n	80070fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a1c      	ldr	r2, [pc, #112]	; (8007108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d018      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a4:	d013      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a18      	ldr	r2, [pc, #96]	; (800710c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d00e      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a16      	ldr	r2, [pc, #88]	; (8007110 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d009      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a15      	ldr	r2, [pc, #84]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d004      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a13      	ldr	r2, [pc, #76]	; (8007118 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d10c      	bne.n	80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	4313      	orrs	r3, r2
 80070de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	40010000 	.word	0x40010000
 800710c:	40000400 	.word	0x40000400
 8007110:	40000800 	.word	0x40000800
 8007114:	40000c00 	.word	0x40000c00
 8007118:	40014000 	.word	0x40014000

0800711c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007130:	2b01      	cmp	r3, #1
 8007132:	d101      	bne.n	8007138 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007134:	2302      	movs	r3, #2
 8007136:	e03d      	b.n	80071b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	4313      	orrs	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	4313      	orrs	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	4313      	orrs	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	4313      	orrs	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <arm_biquad_cascade_df1_init_f32>:
 80071e8:	b510      	push	{r4, lr}
 80071ea:	6082      	str	r2, [r0, #8]
 80071ec:	6001      	str	r1, [r0, #0]
 80071ee:	4604      	mov	r4, r0
 80071f0:	010a      	lsls	r2, r1, #4
 80071f2:	4618      	mov	r0, r3
 80071f4:	2100      	movs	r1, #0
 80071f6:	f000 f901 	bl	80073fc <memset>
 80071fa:	6060      	str	r0, [r4, #4]
 80071fc:	bd10      	pop	{r4, pc}
 80071fe:	bf00      	nop

08007200 <arm_biquad_cascade_df1_f32>:
 8007200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007204:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
 8007208:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800720c:	f003 0e03 	and.w	lr, r3, #3
 8007210:	ea4f 190c 	mov.w	r9, ip, lsl #4
 8007214:	6807      	ldr	r7, [r0, #0]
 8007216:	eb02 0a09 	add.w	sl, r2, r9
 800721a:	f10e 38ff 	add.w	r8, lr, #4294967295
 800721e:	3614      	adds	r6, #20
 8007220:	3510      	adds	r5, #16
 8007222:	ed16 4a05 	vldr	s8, [r6, #-20]	; 0xffffffec
 8007226:	ed16 2a04 	vldr	s4, [r6, #-16]
 800722a:	ed56 2a03 	vldr	s5, [r6, #-12]
 800722e:	ed16 3a02 	vldr	s6, [r6, #-8]
 8007232:	ed56 3a01 	vldr	s7, [r6, #-4]
 8007236:	ed55 5a04 	vldr	s11, [r5, #-16]
 800723a:	ed15 5a03 	vldr	s10, [r5, #-12]
 800723e:	ed15 7a02 	vldr	s14, [r5, #-8]
 8007242:	ed55 7a01 	vldr	s15, [r5, #-4]
 8007246:	f1bc 0f00 	cmp.w	ip, #0
 800724a:	f000 80d4 	beq.w	80073f6 <arm_biquad_cascade_df1_f32+0x1f6>
 800724e:	f101 0010 	add.w	r0, r1, #16
 8007252:	f102 0310 	add.w	r3, r2, #16
 8007256:	4664      	mov	r4, ip
 8007258:	ed10 6a04 	vldr	s12, [r0, #-16]
 800725c:	ee62 4a25 	vmul.f32	s9, s4, s11
 8007260:	ee64 6a06 	vmul.f32	s13, s8, s12
 8007264:	ee22 5a85 	vmul.f32	s10, s5, s10
 8007268:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800726c:	ee63 4a07 	vmul.f32	s9, s6, s14
 8007270:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007274:	ee23 5aa7 	vmul.f32	s10, s7, s15
 8007278:	ee76 7aa4 	vadd.f32	s15, s13, s9
 800727c:	ee22 1a06 	vmul.f32	s2, s4, s12
 8007280:	ee77 7a85 	vadd.f32	s15, s15, s10
 8007284:	ee62 1aa5 	vmul.f32	s3, s5, s11
 8007288:	ed43 7a04 	vstr	s15, [r3, #-16]
 800728c:	ed50 4a03 	vldr	s9, [r0, #-12]
 8007290:	ee64 6a24 	vmul.f32	s13, s8, s9
 8007294:	ee23 5a27 	vmul.f32	s10, s6, s15
 8007298:	ee76 6a81 	vadd.f32	s13, s13, s2
 800729c:	ee63 5a87 	vmul.f32	s11, s7, s14
 80072a0:	ee36 7aa1 	vadd.f32	s14, s13, s3
 80072a4:	ee62 1a24 	vmul.f32	s3, s4, s9
 80072a8:	ee37 7a05 	vadd.f32	s14, s14, s10
 80072ac:	ee22 6a86 	vmul.f32	s12, s5, s12
 80072b0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80072b4:	ee63 7aa7 	vmul.f32	s15, s7, s15
 80072b8:	ed03 7a03 	vstr	s14, [r3, #-12]
 80072bc:	ed10 5a02 	vldr	s10, [r0, #-8]
 80072c0:	ee64 5a05 	vmul.f32	s11, s8, s10
 80072c4:	ee63 6a07 	vmul.f32	s13, s6, s14
 80072c8:	ee75 5aa1 	vadd.f32	s11, s11, s3
 80072cc:	ee62 1a05 	vmul.f32	s3, s4, s10
 80072d0:	ee75 5a86 	vadd.f32	s11, s11, s12
 80072d4:	ee62 4aa4 	vmul.f32	s9, s5, s9
 80072d8:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80072dc:	ee23 7a87 	vmul.f32	s14, s7, s14
 80072e0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80072e4:	3c01      	subs	r4, #1
 80072e6:	ed43 7a02 	vstr	s15, [r3, #-8]
 80072ea:	ed50 5a01 	vldr	s11, [r0, #-4]
 80072ee:	ee24 6a25 	vmul.f32	s12, s8, s11
 80072f2:	ee63 6a27 	vmul.f32	s13, s6, s15
 80072f6:	ee36 6a21 	vadd.f32	s12, s12, s3
 80072fa:	f100 0010 	add.w	r0, r0, #16
 80072fe:	ee36 6a24 	vadd.f32	s12, s12, s9
 8007302:	f103 0310 	add.w	r3, r3, #16
 8007306:	ee36 6a26 	vadd.f32	s12, s12, s13
 800730a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800730e:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8007312:	d1a1      	bne.n	8007258 <arm_biquad_cascade_df1_f32+0x58>
 8007314:	4449      	add	r1, r9
 8007316:	4653      	mov	r3, sl
 8007318:	f1be 0f00 	cmp.w	lr, #0
 800731c:	d047      	beq.n	80073ae <arm_biquad_cascade_df1_f32+0x1ae>
 800731e:	edd1 4a00 	vldr	s9, [r1]
 8007322:	ee22 6a25 	vmul.f32	s12, s4, s11
 8007326:	ee64 1a24 	vmul.f32	s3, s8, s9
 800732a:	ee62 6a85 	vmul.f32	s13, s5, s10
 800732e:	ee36 5a21 	vadd.f32	s10, s12, s3
 8007332:	ee23 6a07 	vmul.f32	s12, s6, s14
 8007336:	ee35 5a26 	vadd.f32	s10, s10, s13
 800733a:	ee63 7aa7 	vmul.f32	s15, s7, s15
 800733e:	ee35 6a06 	vadd.f32	s12, s10, s12
 8007342:	ee36 6a27 	vadd.f32	s12, s12, s15
 8007346:	ed83 6a00 	vstr	s12, [r3]
 800734a:	f1b8 0f00 	cmp.w	r8, #0
 800734e:	d040      	beq.n	80073d2 <arm_biquad_cascade_df1_f32+0x1d2>
 8007350:	ed91 5a01 	vldr	s10, [r1, #4]
 8007354:	ee62 7a24 	vmul.f32	s15, s4, s9
 8007358:	ee65 1a04 	vmul.f32	s3, s10, s8
 800735c:	ee62 6aa5 	vmul.f32	s13, s5, s11
 8007360:	ee77 5aa1 	vadd.f32	s11, s15, s3
 8007364:	ee63 7a06 	vmul.f32	s15, s6, s12
 8007368:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800736c:	ee23 7a87 	vmul.f32	s14, s7, s14
 8007370:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8007374:	f1b8 0f01 	cmp.w	r8, #1
 8007378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800737c:	edc3 7a01 	vstr	s15, [r3, #4]
 8007380:	d030      	beq.n	80073e4 <arm_biquad_cascade_df1_f32+0x1e4>
 8007382:	edd1 5a02 	vldr	s11, [r1, #8]
 8007386:	ee25 2a02 	vmul.f32	s4, s10, s4
 800738a:	ee64 6a25 	vmul.f32	s13, s8, s11
 800738e:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8007392:	ee76 6a82 	vadd.f32	s13, s13, s4
 8007396:	ee27 3a83 	vmul.f32	s6, s15, s6
 800739a:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800739e:	ee63 3a86 	vmul.f32	s7, s7, s12
 80073a2:	ee76 6a83 	vadd.f32	s13, s13, s6
 80073a6:	ee36 7aa3 	vadd.f32	s14, s13, s7
 80073aa:	ed83 7a02 	vstr	s14, [r3, #8]
 80073ae:	3f01      	subs	r7, #1
 80073b0:	ed45 5a04 	vstr	s11, [r5, #-16]
 80073b4:	ed05 5a03 	vstr	s10, [r5, #-12]
 80073b8:	ed05 7a02 	vstr	s14, [r5, #-8]
 80073bc:	ed45 7a01 	vstr	s15, [r5, #-4]
 80073c0:	f106 0614 	add.w	r6, r6, #20
 80073c4:	f105 0510 	add.w	r5, r5, #16
 80073c8:	4611      	mov	r1, r2
 80073ca:	f47f af2a 	bne.w	8007222 <arm_biquad_cascade_df1_f32+0x22>
 80073ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d2:	eef0 7a47 	vmov.f32	s15, s14
 80073d6:	eeb0 5a65 	vmov.f32	s10, s11
 80073da:	eeb0 7a46 	vmov.f32	s14, s12
 80073de:	eef0 5a64 	vmov.f32	s11, s9
 80073e2:	e7e4      	b.n	80073ae <arm_biquad_cascade_df1_f32+0x1ae>
 80073e4:	eeb0 7a67 	vmov.f32	s14, s15
 80073e8:	eef0 5a45 	vmov.f32	s11, s10
 80073ec:	eef0 7a46 	vmov.f32	s15, s12
 80073f0:	eeb0 5a64 	vmov.f32	s10, s9
 80073f4:	e7db      	b.n	80073ae <arm_biquad_cascade_df1_f32+0x1ae>
 80073f6:	4613      	mov	r3, r2
 80073f8:	e78e      	b.n	8007318 <arm_biquad_cascade_df1_f32+0x118>
 80073fa:	bf00      	nop

080073fc <memset>:
 80073fc:	4402      	add	r2, r0
 80073fe:	4603      	mov	r3, r0
 8007400:	4293      	cmp	r3, r2
 8007402:	d100      	bne.n	8007406 <memset+0xa>
 8007404:	4770      	bx	lr
 8007406:	f803 1b01 	strb.w	r1, [r3], #1
 800740a:	e7f9      	b.n	8007400 <memset+0x4>

0800740c <__libc_init_array>:
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	4d0d      	ldr	r5, [pc, #52]	; (8007444 <__libc_init_array+0x38>)
 8007410:	4c0d      	ldr	r4, [pc, #52]	; (8007448 <__libc_init_array+0x3c>)
 8007412:	1b64      	subs	r4, r4, r5
 8007414:	10a4      	asrs	r4, r4, #2
 8007416:	2600      	movs	r6, #0
 8007418:	42a6      	cmp	r6, r4
 800741a:	d109      	bne.n	8007430 <__libc_init_array+0x24>
 800741c:	4d0b      	ldr	r5, [pc, #44]	; (800744c <__libc_init_array+0x40>)
 800741e:	4c0c      	ldr	r4, [pc, #48]	; (8007450 <__libc_init_array+0x44>)
 8007420:	f001 f8ba 	bl	8008598 <_init>
 8007424:	1b64      	subs	r4, r4, r5
 8007426:	10a4      	asrs	r4, r4, #2
 8007428:	2600      	movs	r6, #0
 800742a:	42a6      	cmp	r6, r4
 800742c:	d105      	bne.n	800743a <__libc_init_array+0x2e>
 800742e:	bd70      	pop	{r4, r5, r6, pc}
 8007430:	f855 3b04 	ldr.w	r3, [r5], #4
 8007434:	4798      	blx	r3
 8007436:	3601      	adds	r6, #1
 8007438:	e7ee      	b.n	8007418 <__libc_init_array+0xc>
 800743a:	f855 3b04 	ldr.w	r3, [r5], #4
 800743e:	4798      	blx	r3
 8007440:	3601      	adds	r6, #1
 8007442:	e7f2      	b.n	800742a <__libc_init_array+0x1e>
 8007444:	080087a8 	.word	0x080087a8
 8007448:	080087a8 	.word	0x080087a8
 800744c:	080087a8 	.word	0x080087a8
 8007450:	080087ac 	.word	0x080087ac
 8007454:	00000000 	.word	0x00000000

08007458 <tan>:
 8007458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800745a:	ec53 2b10 	vmov	r2, r3, d0
 800745e:	4816      	ldr	r0, [pc, #88]	; (80074b8 <tan+0x60>)
 8007460:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007464:	4281      	cmp	r1, r0
 8007466:	dc07      	bgt.n	8007478 <tan+0x20>
 8007468:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80074b0 <tan+0x58>
 800746c:	2001      	movs	r0, #1
 800746e:	b005      	add	sp, #20
 8007470:	f85d eb04 	ldr.w	lr, [sp], #4
 8007474:	f000 b824 	b.w	80074c0 <__kernel_tan>
 8007478:	4810      	ldr	r0, [pc, #64]	; (80074bc <tan+0x64>)
 800747a:	4281      	cmp	r1, r0
 800747c:	dd09      	ble.n	8007492 <tan+0x3a>
 800747e:	ee10 0a10 	vmov	r0, s0
 8007482:	4619      	mov	r1, r3
 8007484:	f7f8 feac 	bl	80001e0 <__aeabi_dsub>
 8007488:	ec41 0b10 	vmov	d0, r0, r1
 800748c:	b005      	add	sp, #20
 800748e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007492:	4668      	mov	r0, sp
 8007494:	f000 fa20 	bl	80078d8 <__ieee754_rem_pio2>
 8007498:	0040      	lsls	r0, r0, #1
 800749a:	f000 0002 	and.w	r0, r0, #2
 800749e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074a2:	ed9d 0b00 	vldr	d0, [sp]
 80074a6:	f1c0 0001 	rsb	r0, r0, #1
 80074aa:	f000 f809 	bl	80074c0 <__kernel_tan>
 80074ae:	e7ed      	b.n	800748c <tan+0x34>
	...
 80074b8:	3fe921fb 	.word	0x3fe921fb
 80074bc:	7fefffff 	.word	0x7fefffff

080074c0 <__kernel_tan>:
 80074c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c4:	ed2d 8b06 	vpush	{d8-d10}
 80074c8:	ec5b ab10 	vmov	sl, fp, d0
 80074cc:	4be0      	ldr	r3, [pc, #896]	; (8007850 <__kernel_tan+0x390>)
 80074ce:	b083      	sub	sp, #12
 80074d0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80074d4:	429f      	cmp	r7, r3
 80074d6:	ec59 8b11 	vmov	r8, r9, d1
 80074da:	4606      	mov	r6, r0
 80074dc:	f8cd b000 	str.w	fp, [sp]
 80074e0:	dc61      	bgt.n	80075a6 <__kernel_tan+0xe6>
 80074e2:	ee10 0a10 	vmov	r0, s0
 80074e6:	4659      	mov	r1, fp
 80074e8:	f7f9 facc 	bl	8000a84 <__aeabi_d2iz>
 80074ec:	4605      	mov	r5, r0
 80074ee:	2800      	cmp	r0, #0
 80074f0:	f040 8083 	bne.w	80075fa <__kernel_tan+0x13a>
 80074f4:	1c73      	adds	r3, r6, #1
 80074f6:	4652      	mov	r2, sl
 80074f8:	4313      	orrs	r3, r2
 80074fa:	433b      	orrs	r3, r7
 80074fc:	d112      	bne.n	8007524 <__kernel_tan+0x64>
 80074fe:	ec4b ab10 	vmov	d0, sl, fp
 8007502:	f000 fbef 	bl	8007ce4 <fabs>
 8007506:	49d3      	ldr	r1, [pc, #844]	; (8007854 <__kernel_tan+0x394>)
 8007508:	ec53 2b10 	vmov	r2, r3, d0
 800750c:	2000      	movs	r0, #0
 800750e:	f7f9 f949 	bl	80007a4 <__aeabi_ddiv>
 8007512:	4682      	mov	sl, r0
 8007514:	468b      	mov	fp, r1
 8007516:	ec4b ab10 	vmov	d0, sl, fp
 800751a:	b003      	add	sp, #12
 800751c:	ecbd 8b06 	vpop	{d8-d10}
 8007520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007524:	2e01      	cmp	r6, #1
 8007526:	d0f6      	beq.n	8007516 <__kernel_tan+0x56>
 8007528:	4642      	mov	r2, r8
 800752a:	464b      	mov	r3, r9
 800752c:	4650      	mov	r0, sl
 800752e:	4659      	mov	r1, fp
 8007530:	f7f8 fe58 	bl	80001e4 <__adddf3>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	460f      	mov	r7, r1
 800753a:	2000      	movs	r0, #0
 800753c:	49c6      	ldr	r1, [pc, #792]	; (8007858 <__kernel_tan+0x398>)
 800753e:	f7f9 f931 	bl	80007a4 <__aeabi_ddiv>
 8007542:	e9cd 0100 	strd	r0, r1, [sp]
 8007546:	e9dd 2300 	ldrd	r2, r3, [sp]
 800754a:	462e      	mov	r6, r5
 800754c:	4652      	mov	r2, sl
 800754e:	462c      	mov	r4, r5
 8007550:	4630      	mov	r0, r6
 8007552:	461d      	mov	r5, r3
 8007554:	4639      	mov	r1, r7
 8007556:	465b      	mov	r3, fp
 8007558:	f7f8 fe42 	bl	80001e0 <__aeabi_dsub>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	4640      	mov	r0, r8
 8007562:	4649      	mov	r1, r9
 8007564:	f7f8 fe3c 	bl	80001e0 <__aeabi_dsub>
 8007568:	4632      	mov	r2, r6
 800756a:	462b      	mov	r3, r5
 800756c:	f7f8 fff0 	bl	8000550 <__aeabi_dmul>
 8007570:	4632      	mov	r2, r6
 8007572:	4680      	mov	r8, r0
 8007574:	4689      	mov	r9, r1
 8007576:	462b      	mov	r3, r5
 8007578:	4630      	mov	r0, r6
 800757a:	4639      	mov	r1, r7
 800757c:	f7f8 ffe8 	bl	8000550 <__aeabi_dmul>
 8007580:	4bb4      	ldr	r3, [pc, #720]	; (8007854 <__kernel_tan+0x394>)
 8007582:	2200      	movs	r2, #0
 8007584:	f7f8 fe2e 	bl	80001e4 <__adddf3>
 8007588:	4602      	mov	r2, r0
 800758a:	460b      	mov	r3, r1
 800758c:	4640      	mov	r0, r8
 800758e:	4649      	mov	r1, r9
 8007590:	f7f8 fe28 	bl	80001e4 <__adddf3>
 8007594:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007598:	f7f8 ffda 	bl	8000550 <__aeabi_dmul>
 800759c:	4622      	mov	r2, r4
 800759e:	462b      	mov	r3, r5
 80075a0:	f7f8 fe20 	bl	80001e4 <__adddf3>
 80075a4:	e7b5      	b.n	8007512 <__kernel_tan+0x52>
 80075a6:	4bad      	ldr	r3, [pc, #692]	; (800785c <__kernel_tan+0x39c>)
 80075a8:	429f      	cmp	r7, r3
 80075aa:	dd26      	ble.n	80075fa <__kernel_tan+0x13a>
 80075ac:	9b00      	ldr	r3, [sp, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	da09      	bge.n	80075c6 <__kernel_tan+0x106>
 80075b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80075b6:	469b      	mov	fp, r3
 80075b8:	ee10 aa10 	vmov	sl, s0
 80075bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80075c0:	ee11 8a10 	vmov	r8, s2
 80075c4:	4699      	mov	r9, r3
 80075c6:	4652      	mov	r2, sl
 80075c8:	465b      	mov	r3, fp
 80075ca:	a183      	add	r1, pc, #524	; (adr r1, 80077d8 <__kernel_tan+0x318>)
 80075cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075d0:	f7f8 fe06 	bl	80001e0 <__aeabi_dsub>
 80075d4:	4642      	mov	r2, r8
 80075d6:	464b      	mov	r3, r9
 80075d8:	4604      	mov	r4, r0
 80075da:	460d      	mov	r5, r1
 80075dc:	a180      	add	r1, pc, #512	; (adr r1, 80077e0 <__kernel_tan+0x320>)
 80075de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075e2:	f7f8 fdfd 	bl	80001e0 <__aeabi_dsub>
 80075e6:	4622      	mov	r2, r4
 80075e8:	462b      	mov	r3, r5
 80075ea:	f7f8 fdfb 	bl	80001e4 <__adddf3>
 80075ee:	f04f 0800 	mov.w	r8, #0
 80075f2:	4682      	mov	sl, r0
 80075f4:	468b      	mov	fp, r1
 80075f6:	f04f 0900 	mov.w	r9, #0
 80075fa:	4652      	mov	r2, sl
 80075fc:	465b      	mov	r3, fp
 80075fe:	4650      	mov	r0, sl
 8007600:	4659      	mov	r1, fp
 8007602:	f7f8 ffa5 	bl	8000550 <__aeabi_dmul>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	ec43 2b18 	vmov	d8, r2, r3
 800760e:	f7f8 ff9f 	bl	8000550 <__aeabi_dmul>
 8007612:	ec53 2b18 	vmov	r2, r3, d8
 8007616:	4604      	mov	r4, r0
 8007618:	460d      	mov	r5, r1
 800761a:	4650      	mov	r0, sl
 800761c:	4659      	mov	r1, fp
 800761e:	f7f8 ff97 	bl	8000550 <__aeabi_dmul>
 8007622:	a371      	add	r3, pc, #452	; (adr r3, 80077e8 <__kernel_tan+0x328>)
 8007624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007628:	ec41 0b19 	vmov	d9, r0, r1
 800762c:	4620      	mov	r0, r4
 800762e:	4629      	mov	r1, r5
 8007630:	f7f8 ff8e 	bl	8000550 <__aeabi_dmul>
 8007634:	a36e      	add	r3, pc, #440	; (adr r3, 80077f0 <__kernel_tan+0x330>)
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	f7f8 fdd3 	bl	80001e4 <__adddf3>
 800763e:	4622      	mov	r2, r4
 8007640:	462b      	mov	r3, r5
 8007642:	f7f8 ff85 	bl	8000550 <__aeabi_dmul>
 8007646:	a36c      	add	r3, pc, #432	; (adr r3, 80077f8 <__kernel_tan+0x338>)
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f7f8 fdca 	bl	80001e4 <__adddf3>
 8007650:	4622      	mov	r2, r4
 8007652:	462b      	mov	r3, r5
 8007654:	f7f8 ff7c 	bl	8000550 <__aeabi_dmul>
 8007658:	a369      	add	r3, pc, #420	; (adr r3, 8007800 <__kernel_tan+0x340>)
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	f7f8 fdc1 	bl	80001e4 <__adddf3>
 8007662:	4622      	mov	r2, r4
 8007664:	462b      	mov	r3, r5
 8007666:	f7f8 ff73 	bl	8000550 <__aeabi_dmul>
 800766a:	a367      	add	r3, pc, #412	; (adr r3, 8007808 <__kernel_tan+0x348>)
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	f7f8 fdb8 	bl	80001e4 <__adddf3>
 8007674:	4622      	mov	r2, r4
 8007676:	462b      	mov	r3, r5
 8007678:	f7f8 ff6a 	bl	8000550 <__aeabi_dmul>
 800767c:	a364      	add	r3, pc, #400	; (adr r3, 8007810 <__kernel_tan+0x350>)
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	f7f8 fdaf 	bl	80001e4 <__adddf3>
 8007686:	ec53 2b18 	vmov	r2, r3, d8
 800768a:	f7f8 ff61 	bl	8000550 <__aeabi_dmul>
 800768e:	a362      	add	r3, pc, #392	; (adr r3, 8007818 <__kernel_tan+0x358>)
 8007690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007694:	ec41 0b1a 	vmov	d10, r0, r1
 8007698:	4620      	mov	r0, r4
 800769a:	4629      	mov	r1, r5
 800769c:	f7f8 ff58 	bl	8000550 <__aeabi_dmul>
 80076a0:	a35f      	add	r3, pc, #380	; (adr r3, 8007820 <__kernel_tan+0x360>)
 80076a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a6:	f7f8 fd9d 	bl	80001e4 <__adddf3>
 80076aa:	4622      	mov	r2, r4
 80076ac:	462b      	mov	r3, r5
 80076ae:	f7f8 ff4f 	bl	8000550 <__aeabi_dmul>
 80076b2:	a35d      	add	r3, pc, #372	; (adr r3, 8007828 <__kernel_tan+0x368>)
 80076b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b8:	f7f8 fd94 	bl	80001e4 <__adddf3>
 80076bc:	4622      	mov	r2, r4
 80076be:	462b      	mov	r3, r5
 80076c0:	f7f8 ff46 	bl	8000550 <__aeabi_dmul>
 80076c4:	a35a      	add	r3, pc, #360	; (adr r3, 8007830 <__kernel_tan+0x370>)
 80076c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ca:	f7f8 fd8b 	bl	80001e4 <__adddf3>
 80076ce:	4622      	mov	r2, r4
 80076d0:	462b      	mov	r3, r5
 80076d2:	f7f8 ff3d 	bl	8000550 <__aeabi_dmul>
 80076d6:	a358      	add	r3, pc, #352	; (adr r3, 8007838 <__kernel_tan+0x378>)
 80076d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076dc:	f7f8 fd82 	bl	80001e4 <__adddf3>
 80076e0:	4622      	mov	r2, r4
 80076e2:	462b      	mov	r3, r5
 80076e4:	f7f8 ff34 	bl	8000550 <__aeabi_dmul>
 80076e8:	a355      	add	r3, pc, #340	; (adr r3, 8007840 <__kernel_tan+0x380>)
 80076ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ee:	f7f8 fd79 	bl	80001e4 <__adddf3>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	ec51 0b1a 	vmov	r0, r1, d10
 80076fa:	f7f8 fd73 	bl	80001e4 <__adddf3>
 80076fe:	ec53 2b19 	vmov	r2, r3, d9
 8007702:	f7f8 ff25 	bl	8000550 <__aeabi_dmul>
 8007706:	4642      	mov	r2, r8
 8007708:	464b      	mov	r3, r9
 800770a:	f7f8 fd6b 	bl	80001e4 <__adddf3>
 800770e:	ec53 2b18 	vmov	r2, r3, d8
 8007712:	f7f8 ff1d 	bl	8000550 <__aeabi_dmul>
 8007716:	4642      	mov	r2, r8
 8007718:	464b      	mov	r3, r9
 800771a:	f7f8 fd63 	bl	80001e4 <__adddf3>
 800771e:	a34a      	add	r3, pc, #296	; (adr r3, 8007848 <__kernel_tan+0x388>)
 8007720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007724:	4604      	mov	r4, r0
 8007726:	460d      	mov	r5, r1
 8007728:	ec51 0b19 	vmov	r0, r1, d9
 800772c:	f7f8 ff10 	bl	8000550 <__aeabi_dmul>
 8007730:	4622      	mov	r2, r4
 8007732:	462b      	mov	r3, r5
 8007734:	f7f8 fd56 	bl	80001e4 <__adddf3>
 8007738:	460b      	mov	r3, r1
 800773a:	ec41 0b18 	vmov	d8, r0, r1
 800773e:	4602      	mov	r2, r0
 8007740:	4659      	mov	r1, fp
 8007742:	4650      	mov	r0, sl
 8007744:	f7f8 fd4e 	bl	80001e4 <__adddf3>
 8007748:	4b44      	ldr	r3, [pc, #272]	; (800785c <__kernel_tan+0x39c>)
 800774a:	429f      	cmp	r7, r3
 800774c:	4604      	mov	r4, r0
 800774e:	460d      	mov	r5, r1
 8007750:	f340 8086 	ble.w	8007860 <__kernel_tan+0x3a0>
 8007754:	4630      	mov	r0, r6
 8007756:	f7f8 fe91 	bl	800047c <__aeabi_i2d>
 800775a:	4622      	mov	r2, r4
 800775c:	4680      	mov	r8, r0
 800775e:	4689      	mov	r9, r1
 8007760:	462b      	mov	r3, r5
 8007762:	4620      	mov	r0, r4
 8007764:	4629      	mov	r1, r5
 8007766:	f7f8 fef3 	bl	8000550 <__aeabi_dmul>
 800776a:	4642      	mov	r2, r8
 800776c:	4606      	mov	r6, r0
 800776e:	460f      	mov	r7, r1
 8007770:	464b      	mov	r3, r9
 8007772:	4620      	mov	r0, r4
 8007774:	4629      	mov	r1, r5
 8007776:	f7f8 fd35 	bl	80001e4 <__adddf3>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4630      	mov	r0, r6
 8007780:	4639      	mov	r1, r7
 8007782:	f7f9 f80f 	bl	80007a4 <__aeabi_ddiv>
 8007786:	ec53 2b18 	vmov	r2, r3, d8
 800778a:	f7f8 fd29 	bl	80001e0 <__aeabi_dsub>
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	4650      	mov	r0, sl
 8007794:	4659      	mov	r1, fp
 8007796:	f7f8 fd23 	bl	80001e0 <__aeabi_dsub>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	f7f8 fd21 	bl	80001e4 <__adddf3>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	4640      	mov	r0, r8
 80077a8:	4649      	mov	r1, r9
 80077aa:	f7f8 fd19 	bl	80001e0 <__aeabi_dsub>
 80077ae:	9b00      	ldr	r3, [sp, #0]
 80077b0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80077b4:	f00a 0a02 	and.w	sl, sl, #2
 80077b8:	4604      	mov	r4, r0
 80077ba:	f1ca 0001 	rsb	r0, sl, #1
 80077be:	460d      	mov	r5, r1
 80077c0:	f7f8 fe5c 	bl	800047c <__aeabi_i2d>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4620      	mov	r0, r4
 80077ca:	4629      	mov	r1, r5
 80077cc:	f7f8 fec0 	bl	8000550 <__aeabi_dmul>
 80077d0:	e69f      	b.n	8007512 <__kernel_tan+0x52>
 80077d2:	bf00      	nop
 80077d4:	f3af 8000 	nop.w
 80077d8:	54442d18 	.word	0x54442d18
 80077dc:	3fe921fb 	.word	0x3fe921fb
 80077e0:	33145c07 	.word	0x33145c07
 80077e4:	3c81a626 	.word	0x3c81a626
 80077e8:	74bf7ad4 	.word	0x74bf7ad4
 80077ec:	3efb2a70 	.word	0x3efb2a70
 80077f0:	32f0a7e9 	.word	0x32f0a7e9
 80077f4:	3f12b80f 	.word	0x3f12b80f
 80077f8:	1a8d1068 	.word	0x1a8d1068
 80077fc:	3f3026f7 	.word	0x3f3026f7
 8007800:	fee08315 	.word	0xfee08315
 8007804:	3f57dbc8 	.word	0x3f57dbc8
 8007808:	e96e8493 	.word	0xe96e8493
 800780c:	3f8226e3 	.word	0x3f8226e3
 8007810:	1bb341fe 	.word	0x1bb341fe
 8007814:	3faba1ba 	.word	0x3faba1ba
 8007818:	db605373 	.word	0xdb605373
 800781c:	bef375cb 	.word	0xbef375cb
 8007820:	a03792a6 	.word	0xa03792a6
 8007824:	3f147e88 	.word	0x3f147e88
 8007828:	f2f26501 	.word	0xf2f26501
 800782c:	3f4344d8 	.word	0x3f4344d8
 8007830:	c9560328 	.word	0xc9560328
 8007834:	3f6d6d22 	.word	0x3f6d6d22
 8007838:	8406d637 	.word	0x8406d637
 800783c:	3f9664f4 	.word	0x3f9664f4
 8007840:	1110fe7a 	.word	0x1110fe7a
 8007844:	3fc11111 	.word	0x3fc11111
 8007848:	55555563 	.word	0x55555563
 800784c:	3fd55555 	.word	0x3fd55555
 8007850:	3e2fffff 	.word	0x3e2fffff
 8007854:	3ff00000 	.word	0x3ff00000
 8007858:	bff00000 	.word	0xbff00000
 800785c:	3fe59427 	.word	0x3fe59427
 8007860:	2e01      	cmp	r6, #1
 8007862:	d02f      	beq.n	80078c4 <__kernel_tan+0x404>
 8007864:	460f      	mov	r7, r1
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	4689      	mov	r9, r1
 800786c:	2000      	movs	r0, #0
 800786e:	4917      	ldr	r1, [pc, #92]	; (80078cc <__kernel_tan+0x40c>)
 8007870:	f7f8 ff98 	bl	80007a4 <__aeabi_ddiv>
 8007874:	2600      	movs	r6, #0
 8007876:	e9cd 0100 	strd	r0, r1, [sp]
 800787a:	4652      	mov	r2, sl
 800787c:	465b      	mov	r3, fp
 800787e:	4630      	mov	r0, r6
 8007880:	4639      	mov	r1, r7
 8007882:	f7f8 fcad 	bl	80001e0 <__aeabi_dsub>
 8007886:	e9dd 4500 	ldrd	r4, r5, [sp]
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	ec51 0b18 	vmov	r0, r1, d8
 8007892:	f7f8 fca5 	bl	80001e0 <__aeabi_dsub>
 8007896:	4632      	mov	r2, r6
 8007898:	462b      	mov	r3, r5
 800789a:	f7f8 fe59 	bl	8000550 <__aeabi_dmul>
 800789e:	46b0      	mov	r8, r6
 80078a0:	460f      	mov	r7, r1
 80078a2:	4642      	mov	r2, r8
 80078a4:	462b      	mov	r3, r5
 80078a6:	4634      	mov	r4, r6
 80078a8:	4649      	mov	r1, r9
 80078aa:	4606      	mov	r6, r0
 80078ac:	4640      	mov	r0, r8
 80078ae:	f7f8 fe4f 	bl	8000550 <__aeabi_dmul>
 80078b2:	4b07      	ldr	r3, [pc, #28]	; (80078d0 <__kernel_tan+0x410>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	f7f8 fc95 	bl	80001e4 <__adddf3>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	4630      	mov	r0, r6
 80078c0:	4639      	mov	r1, r7
 80078c2:	e665      	b.n	8007590 <__kernel_tan+0xd0>
 80078c4:	4682      	mov	sl, r0
 80078c6:	468b      	mov	fp, r1
 80078c8:	e625      	b.n	8007516 <__kernel_tan+0x56>
 80078ca:	bf00      	nop
 80078cc:	bff00000 	.word	0xbff00000
 80078d0:	3ff00000 	.word	0x3ff00000
 80078d4:	00000000 	.word	0x00000000

080078d8 <__ieee754_rem_pio2>:
 80078d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	ed2d 8b02 	vpush	{d8}
 80078e0:	ec55 4b10 	vmov	r4, r5, d0
 80078e4:	4bca      	ldr	r3, [pc, #808]	; (8007c10 <__ieee754_rem_pio2+0x338>)
 80078e6:	b08b      	sub	sp, #44	; 0x2c
 80078e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80078ec:	4598      	cmp	r8, r3
 80078ee:	4682      	mov	sl, r0
 80078f0:	9502      	str	r5, [sp, #8]
 80078f2:	dc08      	bgt.n	8007906 <__ieee754_rem_pio2+0x2e>
 80078f4:	2200      	movs	r2, #0
 80078f6:	2300      	movs	r3, #0
 80078f8:	ed80 0b00 	vstr	d0, [r0]
 80078fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007900:	f04f 0b00 	mov.w	fp, #0
 8007904:	e028      	b.n	8007958 <__ieee754_rem_pio2+0x80>
 8007906:	4bc3      	ldr	r3, [pc, #780]	; (8007c14 <__ieee754_rem_pio2+0x33c>)
 8007908:	4598      	cmp	r8, r3
 800790a:	dc78      	bgt.n	80079fe <__ieee754_rem_pio2+0x126>
 800790c:	9b02      	ldr	r3, [sp, #8]
 800790e:	4ec2      	ldr	r6, [pc, #776]	; (8007c18 <__ieee754_rem_pio2+0x340>)
 8007910:	2b00      	cmp	r3, #0
 8007912:	ee10 0a10 	vmov	r0, s0
 8007916:	a3b0      	add	r3, pc, #704	; (adr r3, 8007bd8 <__ieee754_rem_pio2+0x300>)
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	4629      	mov	r1, r5
 800791e:	dd39      	ble.n	8007994 <__ieee754_rem_pio2+0xbc>
 8007920:	f7f8 fc5e 	bl	80001e0 <__aeabi_dsub>
 8007924:	45b0      	cmp	r8, r6
 8007926:	4604      	mov	r4, r0
 8007928:	460d      	mov	r5, r1
 800792a:	d01b      	beq.n	8007964 <__ieee754_rem_pio2+0x8c>
 800792c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007be0 <__ieee754_rem_pio2+0x308>)
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	f7f8 fc55 	bl	80001e0 <__aeabi_dsub>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	e9ca 2300 	strd	r2, r3, [sl]
 800793e:	4620      	mov	r0, r4
 8007940:	4629      	mov	r1, r5
 8007942:	f7f8 fc4d 	bl	80001e0 <__aeabi_dsub>
 8007946:	a3a6      	add	r3, pc, #664	; (adr r3, 8007be0 <__ieee754_rem_pio2+0x308>)
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	f7f8 fc48 	bl	80001e0 <__aeabi_dsub>
 8007950:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007954:	f04f 0b01 	mov.w	fp, #1
 8007958:	4658      	mov	r0, fp
 800795a:	b00b      	add	sp, #44	; 0x2c
 800795c:	ecbd 8b02 	vpop	{d8}
 8007960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007964:	a3a0      	add	r3, pc, #640	; (adr r3, 8007be8 <__ieee754_rem_pio2+0x310>)
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	f7f8 fc39 	bl	80001e0 <__aeabi_dsub>
 800796e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007bf0 <__ieee754_rem_pio2+0x318>)
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	4604      	mov	r4, r0
 8007976:	460d      	mov	r5, r1
 8007978:	f7f8 fc32 	bl	80001e0 <__aeabi_dsub>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	e9ca 2300 	strd	r2, r3, [sl]
 8007984:	4620      	mov	r0, r4
 8007986:	4629      	mov	r1, r5
 8007988:	f7f8 fc2a 	bl	80001e0 <__aeabi_dsub>
 800798c:	a398      	add	r3, pc, #608	; (adr r3, 8007bf0 <__ieee754_rem_pio2+0x318>)
 800798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007992:	e7db      	b.n	800794c <__ieee754_rem_pio2+0x74>
 8007994:	f7f8 fc26 	bl	80001e4 <__adddf3>
 8007998:	45b0      	cmp	r8, r6
 800799a:	4604      	mov	r4, r0
 800799c:	460d      	mov	r5, r1
 800799e:	d016      	beq.n	80079ce <__ieee754_rem_pio2+0xf6>
 80079a0:	a38f      	add	r3, pc, #572	; (adr r3, 8007be0 <__ieee754_rem_pio2+0x308>)
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	f7f8 fc1d 	bl	80001e4 <__adddf3>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	e9ca 2300 	strd	r2, r3, [sl]
 80079b2:	4620      	mov	r0, r4
 80079b4:	4629      	mov	r1, r5
 80079b6:	f7f8 fc13 	bl	80001e0 <__aeabi_dsub>
 80079ba:	a389      	add	r3, pc, #548	; (adr r3, 8007be0 <__ieee754_rem_pio2+0x308>)
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	f7f8 fc10 	bl	80001e4 <__adddf3>
 80079c4:	f04f 3bff 	mov.w	fp, #4294967295
 80079c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80079cc:	e7c4      	b.n	8007958 <__ieee754_rem_pio2+0x80>
 80079ce:	a386      	add	r3, pc, #536	; (adr r3, 8007be8 <__ieee754_rem_pio2+0x310>)
 80079d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d4:	f7f8 fc06 	bl	80001e4 <__adddf3>
 80079d8:	a385      	add	r3, pc, #532	; (adr r3, 8007bf0 <__ieee754_rem_pio2+0x318>)
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	4604      	mov	r4, r0
 80079e0:	460d      	mov	r5, r1
 80079e2:	f7f8 fbff 	bl	80001e4 <__adddf3>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	e9ca 2300 	strd	r2, r3, [sl]
 80079ee:	4620      	mov	r0, r4
 80079f0:	4629      	mov	r1, r5
 80079f2:	f7f8 fbf5 	bl	80001e0 <__aeabi_dsub>
 80079f6:	a37e      	add	r3, pc, #504	; (adr r3, 8007bf0 <__ieee754_rem_pio2+0x318>)
 80079f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fc:	e7e0      	b.n	80079c0 <__ieee754_rem_pio2+0xe8>
 80079fe:	4b87      	ldr	r3, [pc, #540]	; (8007c1c <__ieee754_rem_pio2+0x344>)
 8007a00:	4598      	cmp	r8, r3
 8007a02:	f300 80d8 	bgt.w	8007bb6 <__ieee754_rem_pio2+0x2de>
 8007a06:	f000 f96d 	bl	8007ce4 <fabs>
 8007a0a:	ec55 4b10 	vmov	r4, r5, d0
 8007a0e:	ee10 0a10 	vmov	r0, s0
 8007a12:	a379      	add	r3, pc, #484	; (adr r3, 8007bf8 <__ieee754_rem_pio2+0x320>)
 8007a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a18:	4629      	mov	r1, r5
 8007a1a:	f7f8 fd99 	bl	8000550 <__aeabi_dmul>
 8007a1e:	4b80      	ldr	r3, [pc, #512]	; (8007c20 <__ieee754_rem_pio2+0x348>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	f7f8 fbdf 	bl	80001e4 <__adddf3>
 8007a26:	f7f9 f82d 	bl	8000a84 <__aeabi_d2iz>
 8007a2a:	4683      	mov	fp, r0
 8007a2c:	f7f8 fd26 	bl	800047c <__aeabi_i2d>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	ec43 2b18 	vmov	d8, r2, r3
 8007a38:	a367      	add	r3, pc, #412	; (adr r3, 8007bd8 <__ieee754_rem_pio2+0x300>)
 8007a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3e:	f7f8 fd87 	bl	8000550 <__aeabi_dmul>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	4620      	mov	r0, r4
 8007a48:	4629      	mov	r1, r5
 8007a4a:	f7f8 fbc9 	bl	80001e0 <__aeabi_dsub>
 8007a4e:	a364      	add	r3, pc, #400	; (adr r3, 8007be0 <__ieee754_rem_pio2+0x308>)
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	4606      	mov	r6, r0
 8007a56:	460f      	mov	r7, r1
 8007a58:	ec51 0b18 	vmov	r0, r1, d8
 8007a5c:	f7f8 fd78 	bl	8000550 <__aeabi_dmul>
 8007a60:	f1bb 0f1f 	cmp.w	fp, #31
 8007a64:	4604      	mov	r4, r0
 8007a66:	460d      	mov	r5, r1
 8007a68:	dc0d      	bgt.n	8007a86 <__ieee754_rem_pio2+0x1ae>
 8007a6a:	4b6e      	ldr	r3, [pc, #440]	; (8007c24 <__ieee754_rem_pio2+0x34c>)
 8007a6c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a74:	4543      	cmp	r3, r8
 8007a76:	d006      	beq.n	8007a86 <__ieee754_rem_pio2+0x1ae>
 8007a78:	4622      	mov	r2, r4
 8007a7a:	462b      	mov	r3, r5
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	4639      	mov	r1, r7
 8007a80:	f7f8 fbae 	bl	80001e0 <__aeabi_dsub>
 8007a84:	e00e      	b.n	8007aa4 <__ieee754_rem_pio2+0x1cc>
 8007a86:	462b      	mov	r3, r5
 8007a88:	4622      	mov	r2, r4
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	f7f8 fba7 	bl	80001e0 <__aeabi_dsub>
 8007a92:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007a96:	9303      	str	r3, [sp, #12]
 8007a98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007a9c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007aa0:	2b10      	cmp	r3, #16
 8007aa2:	dc02      	bgt.n	8007aaa <__ieee754_rem_pio2+0x1d2>
 8007aa4:	e9ca 0100 	strd	r0, r1, [sl]
 8007aa8:	e039      	b.n	8007b1e <__ieee754_rem_pio2+0x246>
 8007aaa:	a34f      	add	r3, pc, #316	; (adr r3, 8007be8 <__ieee754_rem_pio2+0x310>)
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	ec51 0b18 	vmov	r0, r1, d8
 8007ab4:	f7f8 fd4c 	bl	8000550 <__aeabi_dmul>
 8007ab8:	4604      	mov	r4, r0
 8007aba:	460d      	mov	r5, r1
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	f7f8 fb8c 	bl	80001e0 <__aeabi_dsub>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4680      	mov	r8, r0
 8007ace:	4689      	mov	r9, r1
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	4639      	mov	r1, r7
 8007ad4:	f7f8 fb84 	bl	80001e0 <__aeabi_dsub>
 8007ad8:	4622      	mov	r2, r4
 8007ada:	462b      	mov	r3, r5
 8007adc:	f7f8 fb80 	bl	80001e0 <__aeabi_dsub>
 8007ae0:	a343      	add	r3, pc, #268	; (adr r3, 8007bf0 <__ieee754_rem_pio2+0x318>)
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	460d      	mov	r5, r1
 8007aea:	ec51 0b18 	vmov	r0, r1, d8
 8007aee:	f7f8 fd2f 	bl	8000550 <__aeabi_dmul>
 8007af2:	4622      	mov	r2, r4
 8007af4:	462b      	mov	r3, r5
 8007af6:	f7f8 fb73 	bl	80001e0 <__aeabi_dsub>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4604      	mov	r4, r0
 8007b00:	460d      	mov	r5, r1
 8007b02:	4640      	mov	r0, r8
 8007b04:	4649      	mov	r1, r9
 8007b06:	f7f8 fb6b 	bl	80001e0 <__aeabi_dsub>
 8007b0a:	9a03      	ldr	r2, [sp, #12]
 8007b0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	2b31      	cmp	r3, #49	; 0x31
 8007b14:	dc24      	bgt.n	8007b60 <__ieee754_rem_pio2+0x288>
 8007b16:	e9ca 0100 	strd	r0, r1, [sl]
 8007b1a:	4646      	mov	r6, r8
 8007b1c:	464f      	mov	r7, r9
 8007b1e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007b22:	4630      	mov	r0, r6
 8007b24:	4642      	mov	r2, r8
 8007b26:	464b      	mov	r3, r9
 8007b28:	4639      	mov	r1, r7
 8007b2a:	f7f8 fb59 	bl	80001e0 <__aeabi_dsub>
 8007b2e:	462b      	mov	r3, r5
 8007b30:	4622      	mov	r2, r4
 8007b32:	f7f8 fb55 	bl	80001e0 <__aeabi_dsub>
 8007b36:	9b02      	ldr	r3, [sp, #8]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007b3e:	f6bf af0b 	bge.w	8007958 <__ieee754_rem_pio2+0x80>
 8007b42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b46:	f8ca 3004 	str.w	r3, [sl, #4]
 8007b4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b4e:	f8ca 8000 	str.w	r8, [sl]
 8007b52:	f8ca 0008 	str.w	r0, [sl, #8]
 8007b56:	f8ca 300c 	str.w	r3, [sl, #12]
 8007b5a:	f1cb 0b00 	rsb	fp, fp, #0
 8007b5e:	e6fb      	b.n	8007958 <__ieee754_rem_pio2+0x80>
 8007b60:	a327      	add	r3, pc, #156	; (adr r3, 8007c00 <__ieee754_rem_pio2+0x328>)
 8007b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b66:	ec51 0b18 	vmov	r0, r1, d8
 8007b6a:	f7f8 fcf1 	bl	8000550 <__aeabi_dmul>
 8007b6e:	4604      	mov	r4, r0
 8007b70:	460d      	mov	r5, r1
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4640      	mov	r0, r8
 8007b78:	4649      	mov	r1, r9
 8007b7a:	f7f8 fb31 	bl	80001e0 <__aeabi_dsub>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	4606      	mov	r6, r0
 8007b84:	460f      	mov	r7, r1
 8007b86:	4640      	mov	r0, r8
 8007b88:	4649      	mov	r1, r9
 8007b8a:	f7f8 fb29 	bl	80001e0 <__aeabi_dsub>
 8007b8e:	4622      	mov	r2, r4
 8007b90:	462b      	mov	r3, r5
 8007b92:	f7f8 fb25 	bl	80001e0 <__aeabi_dsub>
 8007b96:	a31c      	add	r3, pc, #112	; (adr r3, 8007c08 <__ieee754_rem_pio2+0x330>)
 8007b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	460d      	mov	r5, r1
 8007ba0:	ec51 0b18 	vmov	r0, r1, d8
 8007ba4:	f7f8 fcd4 	bl	8000550 <__aeabi_dmul>
 8007ba8:	4622      	mov	r2, r4
 8007baa:	462b      	mov	r3, r5
 8007bac:	f7f8 fb18 	bl	80001e0 <__aeabi_dsub>
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	460d      	mov	r5, r1
 8007bb4:	e760      	b.n	8007a78 <__ieee754_rem_pio2+0x1a0>
 8007bb6:	4b1c      	ldr	r3, [pc, #112]	; (8007c28 <__ieee754_rem_pio2+0x350>)
 8007bb8:	4598      	cmp	r8, r3
 8007bba:	dd37      	ble.n	8007c2c <__ieee754_rem_pio2+0x354>
 8007bbc:	ee10 2a10 	vmov	r2, s0
 8007bc0:	462b      	mov	r3, r5
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	f7f8 fb0b 	bl	80001e0 <__aeabi_dsub>
 8007bca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007bce:	e9ca 0100 	strd	r0, r1, [sl]
 8007bd2:	e695      	b.n	8007900 <__ieee754_rem_pio2+0x28>
 8007bd4:	f3af 8000 	nop.w
 8007bd8:	54400000 	.word	0x54400000
 8007bdc:	3ff921fb 	.word	0x3ff921fb
 8007be0:	1a626331 	.word	0x1a626331
 8007be4:	3dd0b461 	.word	0x3dd0b461
 8007be8:	1a600000 	.word	0x1a600000
 8007bec:	3dd0b461 	.word	0x3dd0b461
 8007bf0:	2e037073 	.word	0x2e037073
 8007bf4:	3ba3198a 	.word	0x3ba3198a
 8007bf8:	6dc9c883 	.word	0x6dc9c883
 8007bfc:	3fe45f30 	.word	0x3fe45f30
 8007c00:	2e000000 	.word	0x2e000000
 8007c04:	3ba3198a 	.word	0x3ba3198a
 8007c08:	252049c1 	.word	0x252049c1
 8007c0c:	397b839a 	.word	0x397b839a
 8007c10:	3fe921fb 	.word	0x3fe921fb
 8007c14:	4002d97b 	.word	0x4002d97b
 8007c18:	3ff921fb 	.word	0x3ff921fb
 8007c1c:	413921fb 	.word	0x413921fb
 8007c20:	3fe00000 	.word	0x3fe00000
 8007c24:	080085c8 	.word	0x080085c8
 8007c28:	7fefffff 	.word	0x7fefffff
 8007c2c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8007c30:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8007c34:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8007c38:	4620      	mov	r0, r4
 8007c3a:	460d      	mov	r5, r1
 8007c3c:	f7f8 ff22 	bl	8000a84 <__aeabi_d2iz>
 8007c40:	f7f8 fc1c 	bl	800047c <__aeabi_i2d>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4620      	mov	r0, r4
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c50:	f7f8 fac6 	bl	80001e0 <__aeabi_dsub>
 8007c54:	4b21      	ldr	r3, [pc, #132]	; (8007cdc <__ieee754_rem_pio2+0x404>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	f7f8 fc7a 	bl	8000550 <__aeabi_dmul>
 8007c5c:	460d      	mov	r5, r1
 8007c5e:	4604      	mov	r4, r0
 8007c60:	f7f8 ff10 	bl	8000a84 <__aeabi_d2iz>
 8007c64:	f7f8 fc0a 	bl	800047c <__aeabi_i2d>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	4629      	mov	r1, r5
 8007c70:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c74:	f7f8 fab4 	bl	80001e0 <__aeabi_dsub>
 8007c78:	4b18      	ldr	r3, [pc, #96]	; (8007cdc <__ieee754_rem_pio2+0x404>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f7f8 fc68 	bl	8000550 <__aeabi_dmul>
 8007c80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c84:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8007c88:	2703      	movs	r7, #3
 8007c8a:	2400      	movs	r4, #0
 8007c8c:	2500      	movs	r5, #0
 8007c8e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8007c92:	4622      	mov	r2, r4
 8007c94:	462b      	mov	r3, r5
 8007c96:	46b9      	mov	r9, r7
 8007c98:	3f01      	subs	r7, #1
 8007c9a:	f7f8 fec1 	bl	8000a20 <__aeabi_dcmpeq>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d1f5      	bne.n	8007c8e <__ieee754_rem_pio2+0x3b6>
 8007ca2:	4b0f      	ldr	r3, [pc, #60]	; (8007ce0 <__ieee754_rem_pio2+0x408>)
 8007ca4:	9301      	str	r3, [sp, #4]
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	4632      	mov	r2, r6
 8007cac:	464b      	mov	r3, r9
 8007cae:	4651      	mov	r1, sl
 8007cb0:	a804      	add	r0, sp, #16
 8007cb2:	f000 f821 	bl	8007cf8 <__kernel_rem_pio2>
 8007cb6:	9b02      	ldr	r3, [sp, #8]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	4683      	mov	fp, r0
 8007cbc:	f6bf ae4c 	bge.w	8007958 <__ieee754_rem_pio2+0x80>
 8007cc0:	e9da 2100 	ldrd	r2, r1, [sl]
 8007cc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cc8:	e9ca 2300 	strd	r2, r3, [sl]
 8007ccc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007cd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cd4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007cd8:	e73f      	b.n	8007b5a <__ieee754_rem_pio2+0x282>
 8007cda:	bf00      	nop
 8007cdc:	41700000 	.word	0x41700000
 8007ce0:	08008648 	.word	0x08008648

08007ce4 <fabs>:
 8007ce4:	ec51 0b10 	vmov	r0, r1, d0
 8007ce8:	ee10 2a10 	vmov	r2, s0
 8007cec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007cf0:	ec43 2b10 	vmov	d0, r2, r3
 8007cf4:	4770      	bx	lr
	...

08007cf8 <__kernel_rem_pio2>:
 8007cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfc:	ed2d 8b02 	vpush	{d8}
 8007d00:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007d04:	f112 0f14 	cmn.w	r2, #20
 8007d08:	9306      	str	r3, [sp, #24]
 8007d0a:	9104      	str	r1, [sp, #16]
 8007d0c:	4bc2      	ldr	r3, [pc, #776]	; (8008018 <__kernel_rem_pio2+0x320>)
 8007d0e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007d10:	9009      	str	r0, [sp, #36]	; 0x24
 8007d12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	9b06      	ldr	r3, [sp, #24]
 8007d1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d1e:	bfa8      	it	ge
 8007d20:	1ed4      	subge	r4, r2, #3
 8007d22:	9305      	str	r3, [sp, #20]
 8007d24:	bfb2      	itee	lt
 8007d26:	2400      	movlt	r4, #0
 8007d28:	2318      	movge	r3, #24
 8007d2a:	fb94 f4f3 	sdivge	r4, r4, r3
 8007d2e:	f06f 0317 	mvn.w	r3, #23
 8007d32:	fb04 3303 	mla	r3, r4, r3, r3
 8007d36:	eb03 0a02 	add.w	sl, r3, r2
 8007d3a:	9b00      	ldr	r3, [sp, #0]
 8007d3c:	9a05      	ldr	r2, [sp, #20]
 8007d3e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008008 <__kernel_rem_pio2+0x310>
 8007d42:	eb03 0802 	add.w	r8, r3, r2
 8007d46:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007d48:	1aa7      	subs	r7, r4, r2
 8007d4a:	ae20      	add	r6, sp, #128	; 0x80
 8007d4c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007d50:	2500      	movs	r5, #0
 8007d52:	4545      	cmp	r5, r8
 8007d54:	dd13      	ble.n	8007d7e <__kernel_rem_pio2+0x86>
 8007d56:	9b06      	ldr	r3, [sp, #24]
 8007d58:	aa20      	add	r2, sp, #128	; 0x80
 8007d5a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007d5e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007d62:	f04f 0800 	mov.w	r8, #0
 8007d66:	9b00      	ldr	r3, [sp, #0]
 8007d68:	4598      	cmp	r8, r3
 8007d6a:	dc31      	bgt.n	8007dd0 <__kernel_rem_pio2+0xd8>
 8007d6c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008008 <__kernel_rem_pio2+0x310>
 8007d70:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007d74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d78:	462f      	mov	r7, r5
 8007d7a:	2600      	movs	r6, #0
 8007d7c:	e01b      	b.n	8007db6 <__kernel_rem_pio2+0xbe>
 8007d7e:	42ef      	cmn	r7, r5
 8007d80:	d407      	bmi.n	8007d92 <__kernel_rem_pio2+0x9a>
 8007d82:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007d86:	f7f8 fb79 	bl	800047c <__aeabi_i2d>
 8007d8a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007d8e:	3501      	adds	r5, #1
 8007d90:	e7df      	b.n	8007d52 <__kernel_rem_pio2+0x5a>
 8007d92:	ec51 0b18 	vmov	r0, r1, d8
 8007d96:	e7f8      	b.n	8007d8a <__kernel_rem_pio2+0x92>
 8007d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d9c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007da0:	f7f8 fbd6 	bl	8000550 <__aeabi_dmul>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dac:	f7f8 fa1a 	bl	80001e4 <__adddf3>
 8007db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007db4:	3601      	adds	r6, #1
 8007db6:	9b05      	ldr	r3, [sp, #20]
 8007db8:	429e      	cmp	r6, r3
 8007dba:	f1a7 0708 	sub.w	r7, r7, #8
 8007dbe:	ddeb      	ble.n	8007d98 <__kernel_rem_pio2+0xa0>
 8007dc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dc4:	f108 0801 	add.w	r8, r8, #1
 8007dc8:	ecab 7b02 	vstmia	fp!, {d7}
 8007dcc:	3508      	adds	r5, #8
 8007dce:	e7ca      	b.n	8007d66 <__kernel_rem_pio2+0x6e>
 8007dd0:	9b00      	ldr	r3, [sp, #0]
 8007dd2:	aa0c      	add	r2, sp, #48	; 0x30
 8007dd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007dd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dda:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007ddc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007de0:	9c00      	ldr	r4, [sp, #0]
 8007de2:	930a      	str	r3, [sp, #40]	; 0x28
 8007de4:	00e3      	lsls	r3, r4, #3
 8007de6:	9308      	str	r3, [sp, #32]
 8007de8:	ab98      	add	r3, sp, #608	; 0x260
 8007dea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007dee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007df2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8007df6:	ab70      	add	r3, sp, #448	; 0x1c0
 8007df8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007dfc:	46c3      	mov	fp, r8
 8007dfe:	46a1      	mov	r9, r4
 8007e00:	f1b9 0f00 	cmp.w	r9, #0
 8007e04:	f1a5 0508 	sub.w	r5, r5, #8
 8007e08:	dc77      	bgt.n	8007efa <__kernel_rem_pio2+0x202>
 8007e0a:	ec47 6b10 	vmov	d0, r6, r7
 8007e0e:	4650      	mov	r0, sl
 8007e10:	f000 fac2 	bl	8008398 <scalbn>
 8007e14:	ec57 6b10 	vmov	r6, r7, d0
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007e1e:	ee10 0a10 	vmov	r0, s0
 8007e22:	4639      	mov	r1, r7
 8007e24:	f7f8 fb94 	bl	8000550 <__aeabi_dmul>
 8007e28:	ec41 0b10 	vmov	d0, r0, r1
 8007e2c:	f000 fb34 	bl	8008498 <floor>
 8007e30:	4b7a      	ldr	r3, [pc, #488]	; (800801c <__kernel_rem_pio2+0x324>)
 8007e32:	ec51 0b10 	vmov	r0, r1, d0
 8007e36:	2200      	movs	r2, #0
 8007e38:	f7f8 fb8a 	bl	8000550 <__aeabi_dmul>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4630      	mov	r0, r6
 8007e42:	4639      	mov	r1, r7
 8007e44:	f7f8 f9cc 	bl	80001e0 <__aeabi_dsub>
 8007e48:	460f      	mov	r7, r1
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	f7f8 fe1a 	bl	8000a84 <__aeabi_d2iz>
 8007e50:	9002      	str	r0, [sp, #8]
 8007e52:	f7f8 fb13 	bl	800047c <__aeabi_i2d>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	f7f8 f9bf 	bl	80001e0 <__aeabi_dsub>
 8007e62:	f1ba 0f00 	cmp.w	sl, #0
 8007e66:	4606      	mov	r6, r0
 8007e68:	460f      	mov	r7, r1
 8007e6a:	dd6d      	ble.n	8007f48 <__kernel_rem_pio2+0x250>
 8007e6c:	1e61      	subs	r1, r4, #1
 8007e6e:	ab0c      	add	r3, sp, #48	; 0x30
 8007e70:	9d02      	ldr	r5, [sp, #8]
 8007e72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e76:	f1ca 0018 	rsb	r0, sl, #24
 8007e7a:	fa43 f200 	asr.w	r2, r3, r0
 8007e7e:	4415      	add	r5, r2
 8007e80:	4082      	lsls	r2, r0
 8007e82:	1a9b      	subs	r3, r3, r2
 8007e84:	aa0c      	add	r2, sp, #48	; 0x30
 8007e86:	9502      	str	r5, [sp, #8]
 8007e88:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007e8c:	f1ca 0217 	rsb	r2, sl, #23
 8007e90:	fa43 fb02 	asr.w	fp, r3, r2
 8007e94:	f1bb 0f00 	cmp.w	fp, #0
 8007e98:	dd65      	ble.n	8007f66 <__kernel_rem_pio2+0x26e>
 8007e9a:	9b02      	ldr	r3, [sp, #8]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	9302      	str	r3, [sp, #8]
 8007ea2:	4615      	mov	r5, r2
 8007ea4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007ea8:	4294      	cmp	r4, r2
 8007eaa:	f300 809f 	bgt.w	8007fec <__kernel_rem_pio2+0x2f4>
 8007eae:	f1ba 0f00 	cmp.w	sl, #0
 8007eb2:	dd07      	ble.n	8007ec4 <__kernel_rem_pio2+0x1cc>
 8007eb4:	f1ba 0f01 	cmp.w	sl, #1
 8007eb8:	f000 80c1 	beq.w	800803e <__kernel_rem_pio2+0x346>
 8007ebc:	f1ba 0f02 	cmp.w	sl, #2
 8007ec0:	f000 80c7 	beq.w	8008052 <__kernel_rem_pio2+0x35a>
 8007ec4:	f1bb 0f02 	cmp.w	fp, #2
 8007ec8:	d14d      	bne.n	8007f66 <__kernel_rem_pio2+0x26e>
 8007eca:	4632      	mov	r2, r6
 8007ecc:	463b      	mov	r3, r7
 8007ece:	4954      	ldr	r1, [pc, #336]	; (8008020 <__kernel_rem_pio2+0x328>)
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	f7f8 f985 	bl	80001e0 <__aeabi_dsub>
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	460f      	mov	r7, r1
 8007eda:	2d00      	cmp	r5, #0
 8007edc:	d043      	beq.n	8007f66 <__kernel_rem_pio2+0x26e>
 8007ede:	4650      	mov	r0, sl
 8007ee0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008010 <__kernel_rem_pio2+0x318>
 8007ee4:	f000 fa58 	bl	8008398 <scalbn>
 8007ee8:	4630      	mov	r0, r6
 8007eea:	4639      	mov	r1, r7
 8007eec:	ec53 2b10 	vmov	r2, r3, d0
 8007ef0:	f7f8 f976 	bl	80001e0 <__aeabi_dsub>
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	460f      	mov	r7, r1
 8007ef8:	e035      	b.n	8007f66 <__kernel_rem_pio2+0x26e>
 8007efa:	4b4a      	ldr	r3, [pc, #296]	; (8008024 <__kernel_rem_pio2+0x32c>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	4630      	mov	r0, r6
 8007f00:	4639      	mov	r1, r7
 8007f02:	f7f8 fb25 	bl	8000550 <__aeabi_dmul>
 8007f06:	f7f8 fdbd 	bl	8000a84 <__aeabi_d2iz>
 8007f0a:	f7f8 fab7 	bl	800047c <__aeabi_i2d>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	ec43 2b18 	vmov	d8, r2, r3
 8007f16:	4b44      	ldr	r3, [pc, #272]	; (8008028 <__kernel_rem_pio2+0x330>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f7f8 fb19 	bl	8000550 <__aeabi_dmul>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4630      	mov	r0, r6
 8007f24:	4639      	mov	r1, r7
 8007f26:	f7f8 f95b 	bl	80001e0 <__aeabi_dsub>
 8007f2a:	f7f8 fdab 	bl	8000a84 <__aeabi_d2iz>
 8007f2e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f32:	f84b 0b04 	str.w	r0, [fp], #4
 8007f36:	ec51 0b18 	vmov	r0, r1, d8
 8007f3a:	f7f8 f953 	bl	80001e4 <__adddf3>
 8007f3e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007f42:	4606      	mov	r6, r0
 8007f44:	460f      	mov	r7, r1
 8007f46:	e75b      	b.n	8007e00 <__kernel_rem_pio2+0x108>
 8007f48:	d106      	bne.n	8007f58 <__kernel_rem_pio2+0x260>
 8007f4a:	1e63      	subs	r3, r4, #1
 8007f4c:	aa0c      	add	r2, sp, #48	; 0x30
 8007f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f52:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8007f56:	e79d      	b.n	8007e94 <__kernel_rem_pio2+0x19c>
 8007f58:	4b34      	ldr	r3, [pc, #208]	; (800802c <__kernel_rem_pio2+0x334>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f7f8 fd7e 	bl	8000a5c <__aeabi_dcmpge>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d140      	bne.n	8007fe6 <__kernel_rem_pio2+0x2ee>
 8007f64:	4683      	mov	fp, r0
 8007f66:	2200      	movs	r2, #0
 8007f68:	2300      	movs	r3, #0
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	4639      	mov	r1, r7
 8007f6e:	f7f8 fd57 	bl	8000a20 <__aeabi_dcmpeq>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	f000 80c1 	beq.w	80080fa <__kernel_rem_pio2+0x402>
 8007f78:	1e65      	subs	r5, r4, #1
 8007f7a:	462b      	mov	r3, r5
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	9900      	ldr	r1, [sp, #0]
 8007f80:	428b      	cmp	r3, r1
 8007f82:	da6d      	bge.n	8008060 <__kernel_rem_pio2+0x368>
 8007f84:	2a00      	cmp	r2, #0
 8007f86:	f000 808a 	beq.w	800809e <__kernel_rem_pio2+0x3a6>
 8007f8a:	ab0c      	add	r3, sp, #48	; 0x30
 8007f8c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007f90:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 80ae 	beq.w	80080f6 <__kernel_rem_pio2+0x3fe>
 8007f9a:	4650      	mov	r0, sl
 8007f9c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008010 <__kernel_rem_pio2+0x318>
 8007fa0:	f000 f9fa 	bl	8008398 <scalbn>
 8007fa4:	1c6b      	adds	r3, r5, #1
 8007fa6:	00da      	lsls	r2, r3, #3
 8007fa8:	9205      	str	r2, [sp, #20]
 8007faa:	ec57 6b10 	vmov	r6, r7, d0
 8007fae:	aa70      	add	r2, sp, #448	; 0x1c0
 8007fb0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008024 <__kernel_rem_pio2+0x32c>
 8007fb4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8007fb8:	462c      	mov	r4, r5
 8007fba:	f04f 0800 	mov.w	r8, #0
 8007fbe:	2c00      	cmp	r4, #0
 8007fc0:	f280 80d4 	bge.w	800816c <__kernel_rem_pio2+0x474>
 8007fc4:	462c      	mov	r4, r5
 8007fc6:	2c00      	cmp	r4, #0
 8007fc8:	f2c0 8102 	blt.w	80081d0 <__kernel_rem_pio2+0x4d8>
 8007fcc:	4b18      	ldr	r3, [pc, #96]	; (8008030 <__kernel_rem_pio2+0x338>)
 8007fce:	461e      	mov	r6, r3
 8007fd0:	ab70      	add	r3, sp, #448	; 0x1c0
 8007fd2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8007fd6:	1b2b      	subs	r3, r5, r4
 8007fd8:	f04f 0900 	mov.w	r9, #0
 8007fdc:	f04f 0a00 	mov.w	sl, #0
 8007fe0:	2700      	movs	r7, #0
 8007fe2:	9306      	str	r3, [sp, #24]
 8007fe4:	e0e6      	b.n	80081b4 <__kernel_rem_pio2+0x4bc>
 8007fe6:	f04f 0b02 	mov.w	fp, #2
 8007fea:	e756      	b.n	8007e9a <__kernel_rem_pio2+0x1a2>
 8007fec:	f8d8 3000 	ldr.w	r3, [r8]
 8007ff0:	bb05      	cbnz	r5, 8008034 <__kernel_rem_pio2+0x33c>
 8007ff2:	b123      	cbz	r3, 8007ffe <__kernel_rem_pio2+0x306>
 8007ff4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007ff8:	f8c8 3000 	str.w	r3, [r8]
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	3201      	adds	r2, #1
 8008000:	f108 0804 	add.w	r8, r8, #4
 8008004:	461d      	mov	r5, r3
 8008006:	e74f      	b.n	8007ea8 <__kernel_rem_pio2+0x1b0>
	...
 8008014:	3ff00000 	.word	0x3ff00000
 8008018:	08008790 	.word	0x08008790
 800801c:	40200000 	.word	0x40200000
 8008020:	3ff00000 	.word	0x3ff00000
 8008024:	3e700000 	.word	0x3e700000
 8008028:	41700000 	.word	0x41700000
 800802c:	3fe00000 	.word	0x3fe00000
 8008030:	08008750 	.word	0x08008750
 8008034:	1acb      	subs	r3, r1, r3
 8008036:	f8c8 3000 	str.w	r3, [r8]
 800803a:	462b      	mov	r3, r5
 800803c:	e7df      	b.n	8007ffe <__kernel_rem_pio2+0x306>
 800803e:	1e62      	subs	r2, r4, #1
 8008040:	ab0c      	add	r3, sp, #48	; 0x30
 8008042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008046:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800804a:	a90c      	add	r1, sp, #48	; 0x30
 800804c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008050:	e738      	b.n	8007ec4 <__kernel_rem_pio2+0x1cc>
 8008052:	1e62      	subs	r2, r4, #1
 8008054:	ab0c      	add	r3, sp, #48	; 0x30
 8008056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800805e:	e7f4      	b.n	800804a <__kernel_rem_pio2+0x352>
 8008060:	a90c      	add	r1, sp, #48	; 0x30
 8008062:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008066:	3b01      	subs	r3, #1
 8008068:	430a      	orrs	r2, r1
 800806a:	e788      	b.n	8007f7e <__kernel_rem_pio2+0x286>
 800806c:	3301      	adds	r3, #1
 800806e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008072:	2900      	cmp	r1, #0
 8008074:	d0fa      	beq.n	800806c <__kernel_rem_pio2+0x374>
 8008076:	9a08      	ldr	r2, [sp, #32]
 8008078:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800807c:	446a      	add	r2, sp
 800807e:	3a98      	subs	r2, #152	; 0x98
 8008080:	9208      	str	r2, [sp, #32]
 8008082:	9a06      	ldr	r2, [sp, #24]
 8008084:	a920      	add	r1, sp, #128	; 0x80
 8008086:	18a2      	adds	r2, r4, r2
 8008088:	18e3      	adds	r3, r4, r3
 800808a:	f104 0801 	add.w	r8, r4, #1
 800808e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008092:	9302      	str	r3, [sp, #8]
 8008094:	9b02      	ldr	r3, [sp, #8]
 8008096:	4543      	cmp	r3, r8
 8008098:	da04      	bge.n	80080a4 <__kernel_rem_pio2+0x3ac>
 800809a:	461c      	mov	r4, r3
 800809c:	e6a2      	b.n	8007de4 <__kernel_rem_pio2+0xec>
 800809e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080a0:	2301      	movs	r3, #1
 80080a2:	e7e4      	b.n	800806e <__kernel_rem_pio2+0x376>
 80080a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80080aa:	f7f8 f9e7 	bl	800047c <__aeabi_i2d>
 80080ae:	e8e5 0102 	strd	r0, r1, [r5], #8
 80080b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b4:	46ab      	mov	fp, r5
 80080b6:	461c      	mov	r4, r3
 80080b8:	f04f 0900 	mov.w	r9, #0
 80080bc:	2600      	movs	r6, #0
 80080be:	2700      	movs	r7, #0
 80080c0:	9b05      	ldr	r3, [sp, #20]
 80080c2:	4599      	cmp	r9, r3
 80080c4:	dd06      	ble.n	80080d4 <__kernel_rem_pio2+0x3dc>
 80080c6:	9b08      	ldr	r3, [sp, #32]
 80080c8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80080cc:	f108 0801 	add.w	r8, r8, #1
 80080d0:	9308      	str	r3, [sp, #32]
 80080d2:	e7df      	b.n	8008094 <__kernel_rem_pio2+0x39c>
 80080d4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80080d8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80080dc:	f7f8 fa38 	bl	8000550 <__aeabi_dmul>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	4630      	mov	r0, r6
 80080e6:	4639      	mov	r1, r7
 80080e8:	f7f8 f87c 	bl	80001e4 <__adddf3>
 80080ec:	f109 0901 	add.w	r9, r9, #1
 80080f0:	4606      	mov	r6, r0
 80080f2:	460f      	mov	r7, r1
 80080f4:	e7e4      	b.n	80080c0 <__kernel_rem_pio2+0x3c8>
 80080f6:	3d01      	subs	r5, #1
 80080f8:	e747      	b.n	8007f8a <__kernel_rem_pio2+0x292>
 80080fa:	ec47 6b10 	vmov	d0, r6, r7
 80080fe:	f1ca 0000 	rsb	r0, sl, #0
 8008102:	f000 f949 	bl	8008398 <scalbn>
 8008106:	ec57 6b10 	vmov	r6, r7, d0
 800810a:	4ba0      	ldr	r3, [pc, #640]	; (800838c <__kernel_rem_pio2+0x694>)
 800810c:	ee10 0a10 	vmov	r0, s0
 8008110:	2200      	movs	r2, #0
 8008112:	4639      	mov	r1, r7
 8008114:	f7f8 fca2 	bl	8000a5c <__aeabi_dcmpge>
 8008118:	b1f8      	cbz	r0, 800815a <__kernel_rem_pio2+0x462>
 800811a:	4b9d      	ldr	r3, [pc, #628]	; (8008390 <__kernel_rem_pio2+0x698>)
 800811c:	2200      	movs	r2, #0
 800811e:	4630      	mov	r0, r6
 8008120:	4639      	mov	r1, r7
 8008122:	f7f8 fa15 	bl	8000550 <__aeabi_dmul>
 8008126:	f7f8 fcad 	bl	8000a84 <__aeabi_d2iz>
 800812a:	4680      	mov	r8, r0
 800812c:	f7f8 f9a6 	bl	800047c <__aeabi_i2d>
 8008130:	4b96      	ldr	r3, [pc, #600]	; (800838c <__kernel_rem_pio2+0x694>)
 8008132:	2200      	movs	r2, #0
 8008134:	f7f8 fa0c 	bl	8000550 <__aeabi_dmul>
 8008138:	460b      	mov	r3, r1
 800813a:	4602      	mov	r2, r0
 800813c:	4639      	mov	r1, r7
 800813e:	4630      	mov	r0, r6
 8008140:	f7f8 f84e 	bl	80001e0 <__aeabi_dsub>
 8008144:	f7f8 fc9e 	bl	8000a84 <__aeabi_d2iz>
 8008148:	1c65      	adds	r5, r4, #1
 800814a:	ab0c      	add	r3, sp, #48	; 0x30
 800814c:	f10a 0a18 	add.w	sl, sl, #24
 8008150:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008154:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008158:	e71f      	b.n	8007f9a <__kernel_rem_pio2+0x2a2>
 800815a:	4630      	mov	r0, r6
 800815c:	4639      	mov	r1, r7
 800815e:	f7f8 fc91 	bl	8000a84 <__aeabi_d2iz>
 8008162:	ab0c      	add	r3, sp, #48	; 0x30
 8008164:	4625      	mov	r5, r4
 8008166:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800816a:	e716      	b.n	8007f9a <__kernel_rem_pio2+0x2a2>
 800816c:	ab0c      	add	r3, sp, #48	; 0x30
 800816e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008172:	f7f8 f983 	bl	800047c <__aeabi_i2d>
 8008176:	4632      	mov	r2, r6
 8008178:	463b      	mov	r3, r7
 800817a:	f7f8 f9e9 	bl	8000550 <__aeabi_dmul>
 800817e:	4642      	mov	r2, r8
 8008180:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008184:	464b      	mov	r3, r9
 8008186:	4630      	mov	r0, r6
 8008188:	4639      	mov	r1, r7
 800818a:	f7f8 f9e1 	bl	8000550 <__aeabi_dmul>
 800818e:	3c01      	subs	r4, #1
 8008190:	4606      	mov	r6, r0
 8008192:	460f      	mov	r7, r1
 8008194:	e713      	b.n	8007fbe <__kernel_rem_pio2+0x2c6>
 8008196:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800819a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800819e:	f7f8 f9d7 	bl	8000550 <__aeabi_dmul>
 80081a2:	4602      	mov	r2, r0
 80081a4:	460b      	mov	r3, r1
 80081a6:	4648      	mov	r0, r9
 80081a8:	4651      	mov	r1, sl
 80081aa:	f7f8 f81b 	bl	80001e4 <__adddf3>
 80081ae:	3701      	adds	r7, #1
 80081b0:	4681      	mov	r9, r0
 80081b2:	468a      	mov	sl, r1
 80081b4:	9b00      	ldr	r3, [sp, #0]
 80081b6:	429f      	cmp	r7, r3
 80081b8:	dc02      	bgt.n	80081c0 <__kernel_rem_pio2+0x4c8>
 80081ba:	9b06      	ldr	r3, [sp, #24]
 80081bc:	429f      	cmp	r7, r3
 80081be:	ddea      	ble.n	8008196 <__kernel_rem_pio2+0x49e>
 80081c0:	9a06      	ldr	r2, [sp, #24]
 80081c2:	ab48      	add	r3, sp, #288	; 0x120
 80081c4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80081c8:	e9c6 9a00 	strd	r9, sl, [r6]
 80081cc:	3c01      	subs	r4, #1
 80081ce:	e6fa      	b.n	8007fc6 <__kernel_rem_pio2+0x2ce>
 80081d0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	dc0b      	bgt.n	80081ee <__kernel_rem_pio2+0x4f6>
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	dc39      	bgt.n	800824e <__kernel_rem_pio2+0x556>
 80081da:	d05d      	beq.n	8008298 <__kernel_rem_pio2+0x5a0>
 80081dc:	9b02      	ldr	r3, [sp, #8]
 80081de:	f003 0007 	and.w	r0, r3, #7
 80081e2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80081e6:	ecbd 8b02 	vpop	{d8}
 80081ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ee:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d1f3      	bne.n	80081dc <__kernel_rem_pio2+0x4e4>
 80081f4:	9b05      	ldr	r3, [sp, #20]
 80081f6:	9500      	str	r5, [sp, #0]
 80081f8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80081fc:	eb0d 0403 	add.w	r4, sp, r3
 8008200:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8008204:	46a2      	mov	sl, r4
 8008206:	9b00      	ldr	r3, [sp, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	f1aa 0a08 	sub.w	sl, sl, #8
 800820e:	dc69      	bgt.n	80082e4 <__kernel_rem_pio2+0x5ec>
 8008210:	46aa      	mov	sl, r5
 8008212:	f1ba 0f01 	cmp.w	sl, #1
 8008216:	f1a4 0408 	sub.w	r4, r4, #8
 800821a:	f300 8083 	bgt.w	8008324 <__kernel_rem_pio2+0x62c>
 800821e:	9c05      	ldr	r4, [sp, #20]
 8008220:	ab48      	add	r3, sp, #288	; 0x120
 8008222:	441c      	add	r4, r3
 8008224:	2000      	movs	r0, #0
 8008226:	2100      	movs	r1, #0
 8008228:	2d01      	cmp	r5, #1
 800822a:	f300 809a 	bgt.w	8008362 <__kernel_rem_pio2+0x66a>
 800822e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8008232:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008236:	f1bb 0f00 	cmp.w	fp, #0
 800823a:	f040 8098 	bne.w	800836e <__kernel_rem_pio2+0x676>
 800823e:	9b04      	ldr	r3, [sp, #16]
 8008240:	e9c3 7800 	strd	r7, r8, [r3]
 8008244:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008248:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800824c:	e7c6      	b.n	80081dc <__kernel_rem_pio2+0x4e4>
 800824e:	9e05      	ldr	r6, [sp, #20]
 8008250:	ab48      	add	r3, sp, #288	; 0x120
 8008252:	441e      	add	r6, r3
 8008254:	462c      	mov	r4, r5
 8008256:	2000      	movs	r0, #0
 8008258:	2100      	movs	r1, #0
 800825a:	2c00      	cmp	r4, #0
 800825c:	da33      	bge.n	80082c6 <__kernel_rem_pio2+0x5ce>
 800825e:	f1bb 0f00 	cmp.w	fp, #0
 8008262:	d036      	beq.n	80082d2 <__kernel_rem_pio2+0x5da>
 8008264:	4602      	mov	r2, r0
 8008266:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800826a:	9c04      	ldr	r4, [sp, #16]
 800826c:	e9c4 2300 	strd	r2, r3, [r4]
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008278:	f7f7 ffb2 	bl	80001e0 <__aeabi_dsub>
 800827c:	ae4a      	add	r6, sp, #296	; 0x128
 800827e:	2401      	movs	r4, #1
 8008280:	42a5      	cmp	r5, r4
 8008282:	da29      	bge.n	80082d8 <__kernel_rem_pio2+0x5e0>
 8008284:	f1bb 0f00 	cmp.w	fp, #0
 8008288:	d002      	beq.n	8008290 <__kernel_rem_pio2+0x598>
 800828a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800828e:	4619      	mov	r1, r3
 8008290:	9b04      	ldr	r3, [sp, #16]
 8008292:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008296:	e7a1      	b.n	80081dc <__kernel_rem_pio2+0x4e4>
 8008298:	9c05      	ldr	r4, [sp, #20]
 800829a:	ab48      	add	r3, sp, #288	; 0x120
 800829c:	441c      	add	r4, r3
 800829e:	2000      	movs	r0, #0
 80082a0:	2100      	movs	r1, #0
 80082a2:	2d00      	cmp	r5, #0
 80082a4:	da09      	bge.n	80082ba <__kernel_rem_pio2+0x5c2>
 80082a6:	f1bb 0f00 	cmp.w	fp, #0
 80082aa:	d002      	beq.n	80082b2 <__kernel_rem_pio2+0x5ba>
 80082ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082b0:	4619      	mov	r1, r3
 80082b2:	9b04      	ldr	r3, [sp, #16]
 80082b4:	e9c3 0100 	strd	r0, r1, [r3]
 80082b8:	e790      	b.n	80081dc <__kernel_rem_pio2+0x4e4>
 80082ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80082be:	f7f7 ff91 	bl	80001e4 <__adddf3>
 80082c2:	3d01      	subs	r5, #1
 80082c4:	e7ed      	b.n	80082a2 <__kernel_rem_pio2+0x5aa>
 80082c6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80082ca:	f7f7 ff8b 	bl	80001e4 <__adddf3>
 80082ce:	3c01      	subs	r4, #1
 80082d0:	e7c3      	b.n	800825a <__kernel_rem_pio2+0x562>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	e7c8      	b.n	800826a <__kernel_rem_pio2+0x572>
 80082d8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80082dc:	f7f7 ff82 	bl	80001e4 <__adddf3>
 80082e0:	3401      	adds	r4, #1
 80082e2:	e7cd      	b.n	8008280 <__kernel_rem_pio2+0x588>
 80082e4:	e9da 8900 	ldrd	r8, r9, [sl]
 80082e8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80082ec:	9b00      	ldr	r3, [sp, #0]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	4632      	mov	r2, r6
 80082f4:	463b      	mov	r3, r7
 80082f6:	4640      	mov	r0, r8
 80082f8:	4649      	mov	r1, r9
 80082fa:	f7f7 ff73 	bl	80001e4 <__adddf3>
 80082fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	4640      	mov	r0, r8
 8008308:	4649      	mov	r1, r9
 800830a:	f7f7 ff69 	bl	80001e0 <__aeabi_dsub>
 800830e:	4632      	mov	r2, r6
 8008310:	463b      	mov	r3, r7
 8008312:	f7f7 ff67 	bl	80001e4 <__adddf3>
 8008316:	ed9d 7b06 	vldr	d7, [sp, #24]
 800831a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800831e:	ed8a 7b00 	vstr	d7, [sl]
 8008322:	e770      	b.n	8008206 <__kernel_rem_pio2+0x50e>
 8008324:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008328:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800832c:	4640      	mov	r0, r8
 800832e:	4632      	mov	r2, r6
 8008330:	463b      	mov	r3, r7
 8008332:	4649      	mov	r1, r9
 8008334:	f7f7 ff56 	bl	80001e4 <__adddf3>
 8008338:	e9cd 0100 	strd	r0, r1, [sp]
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	4640      	mov	r0, r8
 8008342:	4649      	mov	r1, r9
 8008344:	f7f7 ff4c 	bl	80001e0 <__aeabi_dsub>
 8008348:	4632      	mov	r2, r6
 800834a:	463b      	mov	r3, r7
 800834c:	f7f7 ff4a 	bl	80001e4 <__adddf3>
 8008350:	ed9d 7b00 	vldr	d7, [sp]
 8008354:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008358:	ed84 7b00 	vstr	d7, [r4]
 800835c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008360:	e757      	b.n	8008212 <__kernel_rem_pio2+0x51a>
 8008362:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008366:	f7f7 ff3d 	bl	80001e4 <__adddf3>
 800836a:	3d01      	subs	r5, #1
 800836c:	e75c      	b.n	8008228 <__kernel_rem_pio2+0x530>
 800836e:	9b04      	ldr	r3, [sp, #16]
 8008370:	9a04      	ldr	r2, [sp, #16]
 8008372:	601f      	str	r7, [r3, #0]
 8008374:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008378:	605c      	str	r4, [r3, #4]
 800837a:	609d      	str	r5, [r3, #8]
 800837c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008380:	60d3      	str	r3, [r2, #12]
 8008382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008386:	6110      	str	r0, [r2, #16]
 8008388:	6153      	str	r3, [r2, #20]
 800838a:	e727      	b.n	80081dc <__kernel_rem_pio2+0x4e4>
 800838c:	41700000 	.word	0x41700000
 8008390:	3e700000 	.word	0x3e700000
 8008394:	00000000 	.word	0x00000000

08008398 <scalbn>:
 8008398:	b570      	push	{r4, r5, r6, lr}
 800839a:	ec55 4b10 	vmov	r4, r5, d0
 800839e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80083a2:	4606      	mov	r6, r0
 80083a4:	462b      	mov	r3, r5
 80083a6:	b999      	cbnz	r1, 80083d0 <scalbn+0x38>
 80083a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80083ac:	4323      	orrs	r3, r4
 80083ae:	d03f      	beq.n	8008430 <scalbn+0x98>
 80083b0:	4b35      	ldr	r3, [pc, #212]	; (8008488 <scalbn+0xf0>)
 80083b2:	4629      	mov	r1, r5
 80083b4:	ee10 0a10 	vmov	r0, s0
 80083b8:	2200      	movs	r2, #0
 80083ba:	f7f8 f8c9 	bl	8000550 <__aeabi_dmul>
 80083be:	4b33      	ldr	r3, [pc, #204]	; (800848c <scalbn+0xf4>)
 80083c0:	429e      	cmp	r6, r3
 80083c2:	4604      	mov	r4, r0
 80083c4:	460d      	mov	r5, r1
 80083c6:	da10      	bge.n	80083ea <scalbn+0x52>
 80083c8:	a327      	add	r3, pc, #156	; (adr r3, 8008468 <scalbn+0xd0>)
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	e01f      	b.n	8008410 <scalbn+0x78>
 80083d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80083d4:	4291      	cmp	r1, r2
 80083d6:	d10c      	bne.n	80083f2 <scalbn+0x5a>
 80083d8:	ee10 2a10 	vmov	r2, s0
 80083dc:	4620      	mov	r0, r4
 80083de:	4629      	mov	r1, r5
 80083e0:	f7f7 ff00 	bl	80001e4 <__adddf3>
 80083e4:	4604      	mov	r4, r0
 80083e6:	460d      	mov	r5, r1
 80083e8:	e022      	b.n	8008430 <scalbn+0x98>
 80083ea:	460b      	mov	r3, r1
 80083ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80083f0:	3936      	subs	r1, #54	; 0x36
 80083f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80083f6:	4296      	cmp	r6, r2
 80083f8:	dd0d      	ble.n	8008416 <scalbn+0x7e>
 80083fa:	2d00      	cmp	r5, #0
 80083fc:	a11c      	add	r1, pc, #112	; (adr r1, 8008470 <scalbn+0xd8>)
 80083fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008402:	da02      	bge.n	800840a <scalbn+0x72>
 8008404:	a11c      	add	r1, pc, #112	; (adr r1, 8008478 <scalbn+0xe0>)
 8008406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800840a:	a319      	add	r3, pc, #100	; (adr r3, 8008470 <scalbn+0xd8>)
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	f7f8 f89e 	bl	8000550 <__aeabi_dmul>
 8008414:	e7e6      	b.n	80083e4 <scalbn+0x4c>
 8008416:	1872      	adds	r2, r6, r1
 8008418:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800841c:	428a      	cmp	r2, r1
 800841e:	dcec      	bgt.n	80083fa <scalbn+0x62>
 8008420:	2a00      	cmp	r2, #0
 8008422:	dd08      	ble.n	8008436 <scalbn+0x9e>
 8008424:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008428:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800842c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008430:	ec45 4b10 	vmov	d0, r4, r5
 8008434:	bd70      	pop	{r4, r5, r6, pc}
 8008436:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800843a:	da08      	bge.n	800844e <scalbn+0xb6>
 800843c:	2d00      	cmp	r5, #0
 800843e:	a10a      	add	r1, pc, #40	; (adr r1, 8008468 <scalbn+0xd0>)
 8008440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008444:	dac0      	bge.n	80083c8 <scalbn+0x30>
 8008446:	a10e      	add	r1, pc, #56	; (adr r1, 8008480 <scalbn+0xe8>)
 8008448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800844c:	e7bc      	b.n	80083c8 <scalbn+0x30>
 800844e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008452:	3236      	adds	r2, #54	; 0x36
 8008454:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008458:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800845c:	4620      	mov	r0, r4
 800845e:	4b0c      	ldr	r3, [pc, #48]	; (8008490 <scalbn+0xf8>)
 8008460:	2200      	movs	r2, #0
 8008462:	e7d5      	b.n	8008410 <scalbn+0x78>
 8008464:	f3af 8000 	nop.w
 8008468:	c2f8f359 	.word	0xc2f8f359
 800846c:	01a56e1f 	.word	0x01a56e1f
 8008470:	8800759c 	.word	0x8800759c
 8008474:	7e37e43c 	.word	0x7e37e43c
 8008478:	8800759c 	.word	0x8800759c
 800847c:	fe37e43c 	.word	0xfe37e43c
 8008480:	c2f8f359 	.word	0xc2f8f359
 8008484:	81a56e1f 	.word	0x81a56e1f
 8008488:	43500000 	.word	0x43500000
 800848c:	ffff3cb0 	.word	0xffff3cb0
 8008490:	3c900000 	.word	0x3c900000
 8008494:	00000000 	.word	0x00000000

08008498 <floor>:
 8008498:	ec51 0b10 	vmov	r0, r1, d0
 800849c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80084a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80084a8:	2e13      	cmp	r6, #19
 80084aa:	ee10 5a10 	vmov	r5, s0
 80084ae:	ee10 8a10 	vmov	r8, s0
 80084b2:	460c      	mov	r4, r1
 80084b4:	dc31      	bgt.n	800851a <floor+0x82>
 80084b6:	2e00      	cmp	r6, #0
 80084b8:	da14      	bge.n	80084e4 <floor+0x4c>
 80084ba:	a333      	add	r3, pc, #204	; (adr r3, 8008588 <floor+0xf0>)
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	f7f7 fe90 	bl	80001e4 <__adddf3>
 80084c4:	2200      	movs	r2, #0
 80084c6:	2300      	movs	r3, #0
 80084c8:	f7f8 fad2 	bl	8000a70 <__aeabi_dcmpgt>
 80084cc:	b138      	cbz	r0, 80084de <floor+0x46>
 80084ce:	2c00      	cmp	r4, #0
 80084d0:	da53      	bge.n	800857a <floor+0xe2>
 80084d2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80084d6:	4325      	orrs	r5, r4
 80084d8:	d052      	beq.n	8008580 <floor+0xe8>
 80084da:	4c2d      	ldr	r4, [pc, #180]	; (8008590 <floor+0xf8>)
 80084dc:	2500      	movs	r5, #0
 80084de:	4621      	mov	r1, r4
 80084e0:	4628      	mov	r0, r5
 80084e2:	e024      	b.n	800852e <floor+0x96>
 80084e4:	4f2b      	ldr	r7, [pc, #172]	; (8008594 <floor+0xfc>)
 80084e6:	4137      	asrs	r7, r6
 80084e8:	ea01 0307 	and.w	r3, r1, r7
 80084ec:	4303      	orrs	r3, r0
 80084ee:	d01e      	beq.n	800852e <floor+0x96>
 80084f0:	a325      	add	r3, pc, #148	; (adr r3, 8008588 <floor+0xf0>)
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	f7f7 fe75 	bl	80001e4 <__adddf3>
 80084fa:	2200      	movs	r2, #0
 80084fc:	2300      	movs	r3, #0
 80084fe:	f7f8 fab7 	bl	8000a70 <__aeabi_dcmpgt>
 8008502:	2800      	cmp	r0, #0
 8008504:	d0eb      	beq.n	80084de <floor+0x46>
 8008506:	2c00      	cmp	r4, #0
 8008508:	bfbe      	ittt	lt
 800850a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800850e:	4133      	asrlt	r3, r6
 8008510:	18e4      	addlt	r4, r4, r3
 8008512:	ea24 0407 	bic.w	r4, r4, r7
 8008516:	2500      	movs	r5, #0
 8008518:	e7e1      	b.n	80084de <floor+0x46>
 800851a:	2e33      	cmp	r6, #51	; 0x33
 800851c:	dd0b      	ble.n	8008536 <floor+0x9e>
 800851e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008522:	d104      	bne.n	800852e <floor+0x96>
 8008524:	ee10 2a10 	vmov	r2, s0
 8008528:	460b      	mov	r3, r1
 800852a:	f7f7 fe5b 	bl	80001e4 <__adddf3>
 800852e:	ec41 0b10 	vmov	d0, r0, r1
 8008532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008536:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800853a:	f04f 37ff 	mov.w	r7, #4294967295
 800853e:	40df      	lsrs	r7, r3
 8008540:	4238      	tst	r0, r7
 8008542:	d0f4      	beq.n	800852e <floor+0x96>
 8008544:	a310      	add	r3, pc, #64	; (adr r3, 8008588 <floor+0xf0>)
 8008546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854a:	f7f7 fe4b 	bl	80001e4 <__adddf3>
 800854e:	2200      	movs	r2, #0
 8008550:	2300      	movs	r3, #0
 8008552:	f7f8 fa8d 	bl	8000a70 <__aeabi_dcmpgt>
 8008556:	2800      	cmp	r0, #0
 8008558:	d0c1      	beq.n	80084de <floor+0x46>
 800855a:	2c00      	cmp	r4, #0
 800855c:	da0a      	bge.n	8008574 <floor+0xdc>
 800855e:	2e14      	cmp	r6, #20
 8008560:	d101      	bne.n	8008566 <floor+0xce>
 8008562:	3401      	adds	r4, #1
 8008564:	e006      	b.n	8008574 <floor+0xdc>
 8008566:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800856a:	2301      	movs	r3, #1
 800856c:	40b3      	lsls	r3, r6
 800856e:	441d      	add	r5, r3
 8008570:	45a8      	cmp	r8, r5
 8008572:	d8f6      	bhi.n	8008562 <floor+0xca>
 8008574:	ea25 0507 	bic.w	r5, r5, r7
 8008578:	e7b1      	b.n	80084de <floor+0x46>
 800857a:	2500      	movs	r5, #0
 800857c:	462c      	mov	r4, r5
 800857e:	e7ae      	b.n	80084de <floor+0x46>
 8008580:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008584:	e7ab      	b.n	80084de <floor+0x46>
 8008586:	bf00      	nop
 8008588:	8800759c 	.word	0x8800759c
 800858c:	7e37e43c 	.word	0x7e37e43c
 8008590:	bff00000 	.word	0xbff00000
 8008594:	000fffff 	.word	0x000fffff

08008598 <_init>:
 8008598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859a:	bf00      	nop
 800859c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859e:	bc08      	pop	{r3}
 80085a0:	469e      	mov	lr, r3
 80085a2:	4770      	bx	lr

080085a4 <_fini>:
 80085a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a6:	bf00      	nop
 80085a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085aa:	bc08      	pop	{r3}
 80085ac:	469e      	mov	lr, r3
 80085ae:	4770      	bx	lr
