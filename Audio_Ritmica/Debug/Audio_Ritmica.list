
Audio_Ritmica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009414  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080095ac  080095ac  000195ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095c4  080095c4  000201ac  2**0
                  CONTENTS
  4 .ARM          00000008  080095c4  080095c4  000195c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095cc  080095cc  000201ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095cc  080095cc  000195cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095d0  080095d0  000195d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ac  20000000  080095d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e40  200001ac  08009780  000201ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fec  08009780  00021fec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e490  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000222a  00000000  00000000  0002e724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  00030950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000948  00000000  00000000  00031580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017620  00000000  00000000  00031ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f152  00000000  00000000  000494e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098bc4  00000000  00000000  0005863a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003250  00000000  00000000  000f1200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f4450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000880  00000000  00000000  000f44be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  000f4d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001ac 	.word	0x200001ac
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009594 	.word	0x08009594

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001b0 	.word	0x200001b0
 80001d4:	08009594 	.word	0x08009594

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <Set_Pixel>:
uint8_t Datos_Pixel[Num_pixels][4];
uint8_t Datos_Pixel_F[Num_pixels][4];

//Me armo una funcion que setee cada LED por separado
void Set_Pixel(uint8_t n, uint8_t Verde, uint8_t Rojo, uint8_t Azul)
{
 80004d4:	b490      	push	{r4, r7}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4604      	mov	r4, r0
 80004dc:	4608      	mov	r0, r1
 80004de:	4611      	mov	r1, r2
 80004e0:	461a      	mov	r2, r3
 80004e2:	4623      	mov	r3, r4
 80004e4:	71fb      	strb	r3, [r7, #7]
 80004e6:	4603      	mov	r3, r0
 80004e8:	71bb      	strb	r3, [r7, #6]
 80004ea:	460b      	mov	r3, r1
 80004ec:	717b      	strb	r3, [r7, #5]
 80004ee:	4613      	mov	r3, r2
 80004f0:	713b      	strb	r3, [r7, #4]
	Datos_Pixel[n][0] = n;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	490d      	ldr	r1, [pc, #52]	; (800052c <Set_Pixel+0x58>)
 80004f6:	79fa      	ldrb	r2, [r7, #7]
 80004f8:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	Datos_Pixel[n][1] = Verde;
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	4a0b      	ldr	r2, [pc, #44]	; (800052c <Set_Pixel+0x58>)
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	4413      	add	r3, r2
 8000504:	79ba      	ldrb	r2, [r7, #6]
 8000506:	705a      	strb	r2, [r3, #1]
	Datos_Pixel[n][2] = Rojo;
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	4a08      	ldr	r2, [pc, #32]	; (800052c <Set_Pixel+0x58>)
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	4413      	add	r3, r2
 8000510:	797a      	ldrb	r2, [r7, #5]
 8000512:	709a      	strb	r2, [r3, #2]
	Datos_Pixel[n][3] = Azul;
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	4a05      	ldr	r2, [pc, #20]	; (800052c <Set_Pixel+0x58>)
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	4413      	add	r3, r2
 800051c:	793a      	ldrb	r2, [r7, #4]
 800051e:	70da      	strb	r2, [r3, #3]

}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bc90      	pop	{r4, r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	20001de8 	.word	0x20001de8

08000530 <vumetro>:


void vumetro(uint8_t banda1,uint8_t banda2,uint8_t banda3,uint8_t banda4,uint8_t banda5,uint8_t banda6,uint8_t banda7,uint8_t banda8){
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b0b5      	sub	sp, #212	; 0xd4
 8000534:	af00      	add	r7, sp, #0
 8000536:	4604      	mov	r4, r0
 8000538:	4608      	mov	r0, r1
 800053a:	4611      	mov	r1, r2
 800053c:	461a      	mov	r2, r3
 800053e:	4623      	mov	r3, r4
 8000540:	71fb      	strb	r3, [r7, #7]
 8000542:	4603      	mov	r3, r0
 8000544:	71bb      	strb	r3, [r7, #6]
 8000546:	460b      	mov	r3, r1
 8000548:	717b      	strb	r3, [r7, #5]
 800054a:	4613      	mov	r3, r2
 800054c:	713b      	strb	r3, [r7, #4]
//Hay que tener en cuenta que cada banda del vumetro son dos lineas de la matriz, pero
//por como se recorre una esta invertida
//colores: violeta, rosa, azul, dos verdes, amarillo, dos rojos
int numled=0;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]

switch(banda1){
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	3b01      	subs	r3, #1
 8000556:	2b06      	cmp	r3, #6
 8000558:	f200 8341 	bhi.w	8000bde <vumetro+0x6ae>
 800055c:	a201      	add	r2, pc, #4	; (adr r2, 8000564 <vumetro+0x34>)
 800055e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000562:	bf00      	nop
 8000564:	08000581 	.word	0x08000581
 8000568:	08000607 	.word	0x08000607
 800056c:	080006b1 	.word	0x080006b1
 8000570:	0800077f 	.word	0x0800077f
 8000574:	08000871 	.word	0x08000871
 8000578:	08000987 	.word	0x08000987
 800057c:	08000ac1 	.word	0x08000ac1
case 1||0:
	Set_Pixel(0+numled,76,0,153);
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	b2d8      	uxtb	r0, r3
 8000584:	2399      	movs	r3, #153	; 0x99
 8000586:	2200      	movs	r2, #0
 8000588:	214c      	movs	r1, #76	; 0x4c
 800058a:	f7ff ffa3 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 800058e:	2301      	movs	r3, #1
 8000590:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8000594:	e010      	b.n	80005b8 <vumetro+0x88>
		Set_Pixel(j+numled,0,0,0);
 8000596:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800059a:	b2da      	uxtb	r2, r3
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	4413      	add	r3, r2
 80005a2:	b2d8      	uxtb	r0, r3
 80005a4:	2300      	movs	r3, #0
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	f7ff ff93 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 80005ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80005b2:	3301      	adds	r3, #1
 80005b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 80005b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80005bc:	2b07      	cmp	r3, #7
 80005be:	d9ea      	bls.n	8000596 <vumetro+0x66>
	}
	Set_Pixel(8+numled,76,0,153);
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	3308      	adds	r3, #8
 80005c6:	b2d8      	uxtb	r0, r3
 80005c8:	2399      	movs	r3, #153	; 0x99
 80005ca:	2200      	movs	r2, #0
 80005cc:	214c      	movs	r1, #76	; 0x4c
 80005ce:	f7ff ff81 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 80005d2:	2309      	movs	r3, #9
 80005d4:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 80005d8:	e010      	b.n	80005fc <vumetro+0xcc>
		Set_Pixel(j+numled,0,0,0);
 80005da:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	4413      	add	r3, r2
 80005e6:	b2d8      	uxtb	r0, r3
 80005e8:	2300      	movs	r3, #0
 80005ea:	2200      	movs	r2, #0
 80005ec:	2100      	movs	r1, #0
 80005ee:	f7ff ff71 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 80005f2:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80005f6:	3301      	adds	r3, #1
 80005f8:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 80005fc:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8000600:	2b0f      	cmp	r3, #15
 8000602:	d9ea      	bls.n	80005da <vumetro+0xaa>
	}
	break;
 8000604:	e37a      	b.n	8000cfc <vumetro+0x7cc>
case 2:
	Set_Pixel(0+numled,0,76,153);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	b2d8      	uxtb	r0, r3
 800060a:	2399      	movs	r3, #153	; 0x99
 800060c:	224c      	movs	r2, #76	; 0x4c
 800060e:	2100      	movs	r1, #0
 8000610:	f7ff ff60 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	3301      	adds	r3, #1
 800061a:	b2d8      	uxtb	r0, r3
 800061c:	2399      	movs	r3, #153	; 0x99
 800061e:	2299      	movs	r2, #153	; 0x99
 8000620:	2100      	movs	r1, #0
 8000622:	f7ff ff57 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8000626:	2302      	movs	r3, #2
 8000628:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 800062c:	e010      	b.n	8000650 <vumetro+0x120>
		Set_Pixel(j+numled,0,0,0);
 800062e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8000632:	b2da      	uxtb	r2, r3
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	4413      	add	r3, r2
 800063a:	b2d8      	uxtb	r0, r3
 800063c:	2300      	movs	r3, #0
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	f7ff ff47 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8000646:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800064a:	3301      	adds	r3, #1
 800064c:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 8000650:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8000654:	2b07      	cmp	r3, #7
 8000656:	d9ea      	bls.n	800062e <vumetro+0xfe>
	}
	Set_Pixel(8+numled,0,76,153);
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	3308      	adds	r3, #8
 800065e:	b2d8      	uxtb	r0, r3
 8000660:	2399      	movs	r3, #153	; 0x99
 8000662:	224c      	movs	r2, #76	; 0x4c
 8000664:	2100      	movs	r1, #0
 8000666:	f7ff ff35 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	3309      	adds	r3, #9
 8000670:	b2d8      	uxtb	r0, r3
 8000672:	2399      	movs	r3, #153	; 0x99
 8000674:	2299      	movs	r2, #153	; 0x99
 8000676:	2100      	movs	r1, #0
 8000678:	f7ff ff2c 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 800067c:	230a      	movs	r3, #10
 800067e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 8000682:	e010      	b.n	80006a6 <vumetro+0x176>
		Set_Pixel(j+numled,0,0,0);
 8000684:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8000688:	b2da      	uxtb	r2, r3
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	4413      	add	r3, r2
 8000690:	b2d8      	uxtb	r0, r3
 8000692:	2300      	movs	r3, #0
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	f7ff ff1c 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 800069c:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80006a0:	3301      	adds	r3, #1
 80006a2:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 80006a6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80006aa:	2b0f      	cmp	r3, #15
 80006ac:	d9ea      	bls.n	8000684 <vumetro+0x154>
	}
	break;
 80006ae:	e325      	b.n	8000cfc <vumetro+0x7cc>

case 3:
	Set_Pixel(0+numled,0,76,153);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	b2d8      	uxtb	r0, r3
 80006b4:	2399      	movs	r3, #153	; 0x99
 80006b6:	224c      	movs	r2, #76	; 0x4c
 80006b8:	2100      	movs	r1, #0
 80006ba:	f7ff ff0b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	3301      	adds	r3, #1
 80006c4:	b2d8      	uxtb	r0, r3
 80006c6:	2399      	movs	r3, #153	; 0x99
 80006c8:	2299      	movs	r2, #153	; 0x99
 80006ca:	2100      	movs	r1, #0
 80006cc:	f7ff ff02 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	3302      	adds	r3, #2
 80006d6:	b2d8      	uxtb	r0, r3
 80006d8:	23cc      	movs	r3, #204	; 0xcc
 80006da:	2200      	movs	r2, #0
 80006dc:	2166      	movs	r1, #102	; 0x66
 80006de:	f7ff fef9 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 80006e2:	2303      	movs	r3, #3
 80006e4:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 80006e8:	e010      	b.n	800070c <vumetro+0x1dc>
		Set_Pixel(j+numled,0,0,0);
 80006ea:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	4413      	add	r3, r2
 80006f6:	b2d8      	uxtb	r0, r3
 80006f8:	2300      	movs	r3, #0
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	f7ff fee9 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8000702:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8000706:	3301      	adds	r3, #1
 8000708:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800070c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8000710:	2b07      	cmp	r3, #7
 8000712:	d9ea      	bls.n	80006ea <vumetro+0x1ba>
	}
	Set_Pixel(8+numled,0,76,153);
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	3308      	adds	r3, #8
 800071a:	b2d8      	uxtb	r0, r3
 800071c:	2399      	movs	r3, #153	; 0x99
 800071e:	224c      	movs	r2, #76	; 0x4c
 8000720:	2100      	movs	r1, #0
 8000722:	f7ff fed7 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	3309      	adds	r3, #9
 800072c:	b2d8      	uxtb	r0, r3
 800072e:	2399      	movs	r3, #153	; 0x99
 8000730:	2299      	movs	r2, #153	; 0x99
 8000732:	2100      	movs	r1, #0
 8000734:	f7ff fece 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	330a      	adds	r3, #10
 800073e:	b2d8      	uxtb	r0, r3
 8000740:	23cc      	movs	r3, #204	; 0xcc
 8000742:	2200      	movs	r2, #0
 8000744:	2166      	movs	r1, #102	; 0x66
 8000746:	f7ff fec5 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 800074a:	230b      	movs	r3, #11
 800074c:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8000750:	e010      	b.n	8000774 <vumetro+0x244>
		Set_Pixel(j+numled,0,0,0);
 8000752:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000756:	b2da      	uxtb	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4413      	add	r3, r2
 800075e:	b2d8      	uxtb	r0, r3
 8000760:	2300      	movs	r3, #0
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	f7ff feb5 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 800076a:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800076e:	3301      	adds	r3, #1
 8000770:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8000774:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d9ea      	bls.n	8000752 <vumetro+0x222>
	}
	break;
 800077c:	e2be      	b.n	8000cfc <vumetro+0x7cc>
case 4:
	Set_Pixel(0+numled,0,76,153);
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	b2d8      	uxtb	r0, r3
 8000782:	2399      	movs	r3, #153	; 0x99
 8000784:	224c      	movs	r2, #76	; 0x4c
 8000786:	2100      	movs	r1, #0
 8000788:	f7ff fea4 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	3301      	adds	r3, #1
 8000792:	b2d8      	uxtb	r0, r3
 8000794:	2399      	movs	r3, #153	; 0x99
 8000796:	2299      	movs	r2, #153	; 0x99
 8000798:	2100      	movs	r1, #0
 800079a:	f7ff fe9b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	3302      	adds	r3, #2
 80007a4:	b2d8      	uxtb	r0, r3
 80007a6:	23cc      	movs	r3, #204	; 0xcc
 80007a8:	2200      	movs	r2, #0
 80007aa:	2166      	movs	r1, #102	; 0x66
 80007ac:	f7ff fe92 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	3303      	adds	r3, #3
 80007b6:	b2d8      	uxtb	r0, r3
 80007b8:	2300      	movs	r3, #0
 80007ba:	2200      	movs	r2, #0
 80007bc:	21cc      	movs	r1, #204	; 0xcc
 80007be:	f7ff fe89 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 80007c2:	2304      	movs	r3, #4
 80007c4:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 80007c8:	e010      	b.n	80007ec <vumetro+0x2bc>
		Set_Pixel(j+numled,0,0,0);
 80007ca:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	4413      	add	r3, r2
 80007d6:	b2d8      	uxtb	r0, r3
 80007d8:	2300      	movs	r3, #0
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	f7ff fe79 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 80007e2:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80007e6:	3301      	adds	r3, #1
 80007e8:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 80007ec:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	d9ea      	bls.n	80007ca <vumetro+0x29a>
	}
	Set_Pixel(8+numled,0,76,153);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	3308      	adds	r3, #8
 80007fa:	b2d8      	uxtb	r0, r3
 80007fc:	2399      	movs	r3, #153	; 0x99
 80007fe:	224c      	movs	r2, #76	; 0x4c
 8000800:	2100      	movs	r1, #0
 8000802:	f7ff fe67 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	3309      	adds	r3, #9
 800080c:	b2d8      	uxtb	r0, r3
 800080e:	2399      	movs	r3, #153	; 0x99
 8000810:	2299      	movs	r2, #153	; 0x99
 8000812:	2100      	movs	r1, #0
 8000814:	f7ff fe5e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	330a      	adds	r3, #10
 800081e:	b2d8      	uxtb	r0, r3
 8000820:	23cc      	movs	r3, #204	; 0xcc
 8000822:	2200      	movs	r2, #0
 8000824:	2166      	movs	r1, #102	; 0x66
 8000826:	f7ff fe55 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	330b      	adds	r3, #11
 8000830:	b2d8      	uxtb	r0, r3
 8000832:	2300      	movs	r3, #0
 8000834:	2200      	movs	r2, #0
 8000836:	21cc      	movs	r1, #204	; 0xcc
 8000838:	f7ff fe4c 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 800083c:	230c      	movs	r3, #12
 800083e:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 8000842:	e010      	b.n	8000866 <vumetro+0x336>
		Set_Pixel(j+numled,0,0,0);
 8000844:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8000848:	b2da      	uxtb	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4413      	add	r3, r2
 8000850:	b2d8      	uxtb	r0, r3
 8000852:	2300      	movs	r3, #0
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	f7ff fe3c 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 800085c:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8000860:	3301      	adds	r3, #1
 8000862:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 8000866:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800086a:	2b0f      	cmp	r3, #15
 800086c:	d9ea      	bls.n	8000844 <vumetro+0x314>
	}
	break;
 800086e:	e245      	b.n	8000cfc <vumetro+0x7cc>
case 5:
	Set_Pixel(0+numled,0,76,153);
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	b2d8      	uxtb	r0, r3
 8000874:	2399      	movs	r3, #153	; 0x99
 8000876:	224c      	movs	r2, #76	; 0x4c
 8000878:	2100      	movs	r1, #0
 800087a:	f7ff fe2b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	3301      	adds	r3, #1
 8000884:	b2d8      	uxtb	r0, r3
 8000886:	2399      	movs	r3, #153	; 0x99
 8000888:	2299      	movs	r2, #153	; 0x99
 800088a:	2100      	movs	r1, #0
 800088c:	f7ff fe22 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	3302      	adds	r3, #2
 8000896:	b2d8      	uxtb	r0, r3
 8000898:	23cc      	movs	r3, #204	; 0xcc
 800089a:	2200      	movs	r2, #0
 800089c:	2166      	movs	r1, #102	; 0x66
 800089e:	f7ff fe19 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	3303      	adds	r3, #3
 80008a8:	b2d8      	uxtb	r0, r3
 80008aa:	2300      	movs	r3, #0
 80008ac:	2200      	movs	r2, #0
 80008ae:	21cc      	movs	r1, #204	; 0xcc
 80008b0:	f7ff fe10 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	3304      	adds	r3, #4
 80008ba:	b2d8      	uxtb	r0, r3
 80008bc:	2300      	movs	r3, #0
 80008be:	2200      	movs	r2, #0
 80008c0:	21cc      	movs	r1, #204	; 0xcc
 80008c2:	f7ff fe07 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 80008c6:	2305      	movs	r3, #5
 80008c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80008cc:	e010      	b.n	80008f0 <vumetro+0x3c0>
		Set_Pixel(j+numled,0,0,0);
 80008ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	4413      	add	r3, r2
 80008da:	b2d8      	uxtb	r0, r3
 80008dc:	2300      	movs	r3, #0
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	f7ff fdf7 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 80008e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80008ea:	3301      	adds	r3, #1
 80008ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80008f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80008f4:	2b07      	cmp	r3, #7
 80008f6:	d9ea      	bls.n	80008ce <vumetro+0x39e>
	}
	Set_Pixel(8+numled,0,76,153);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	3308      	adds	r3, #8
 80008fe:	b2d8      	uxtb	r0, r3
 8000900:	2399      	movs	r3, #153	; 0x99
 8000902:	224c      	movs	r2, #76	; 0x4c
 8000904:	2100      	movs	r1, #0
 8000906:	f7ff fde5 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	3309      	adds	r3, #9
 8000910:	b2d8      	uxtb	r0, r3
 8000912:	2399      	movs	r3, #153	; 0x99
 8000914:	2299      	movs	r2, #153	; 0x99
 8000916:	2100      	movs	r1, #0
 8000918:	f7ff fddc 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	330a      	adds	r3, #10
 8000922:	b2d8      	uxtb	r0, r3
 8000924:	23cc      	movs	r3, #204	; 0xcc
 8000926:	2200      	movs	r2, #0
 8000928:	2166      	movs	r1, #102	; 0x66
 800092a:	f7ff fdd3 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	330b      	adds	r3, #11
 8000934:	b2d8      	uxtb	r0, r3
 8000936:	2300      	movs	r3, #0
 8000938:	2200      	movs	r2, #0
 800093a:	21cc      	movs	r1, #204	; 0xcc
 800093c:	f7ff fdca 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	330c      	adds	r3, #12
 8000946:	b2d8      	uxtb	r0, r3
 8000948:	2300      	movs	r3, #0
 800094a:	2200      	movs	r2, #0
 800094c:	21cc      	movs	r1, #204	; 0xcc
 800094e:	f7ff fdc1 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8000952:	230d      	movs	r3, #13
 8000954:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8000958:	e010      	b.n	800097c <vumetro+0x44c>
		Set_Pixel(j+numled,0,0,0);
 800095a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800095e:	b2da      	uxtb	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	4413      	add	r3, r2
 8000966:	b2d8      	uxtb	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	f7ff fdb1 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8000972:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8000976:	3301      	adds	r3, #1
 8000978:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800097c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d9ea      	bls.n	800095a <vumetro+0x42a>
	}
	break;
 8000984:	e1ba      	b.n	8000cfc <vumetro+0x7cc>
case 6:
	Set_Pixel(0+numled,0,76,153);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	b2d8      	uxtb	r0, r3
 800098a:	2399      	movs	r3, #153	; 0x99
 800098c:	224c      	movs	r2, #76	; 0x4c
 800098e:	2100      	movs	r1, #0
 8000990:	f7ff fda0 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	3301      	adds	r3, #1
 800099a:	b2d8      	uxtb	r0, r3
 800099c:	2399      	movs	r3, #153	; 0x99
 800099e:	2299      	movs	r2, #153	; 0x99
 80009a0:	2100      	movs	r1, #0
 80009a2:	f7ff fd97 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	3302      	adds	r3, #2
 80009ac:	b2d8      	uxtb	r0, r3
 80009ae:	23cc      	movs	r3, #204	; 0xcc
 80009b0:	2200      	movs	r2, #0
 80009b2:	2166      	movs	r1, #102	; 0x66
 80009b4:	f7ff fd8e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	3303      	adds	r3, #3
 80009be:	b2d8      	uxtb	r0, r3
 80009c0:	2300      	movs	r3, #0
 80009c2:	2200      	movs	r2, #0
 80009c4:	21cc      	movs	r1, #204	; 0xcc
 80009c6:	f7ff fd85 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	3304      	adds	r3, #4
 80009d0:	b2d8      	uxtb	r0, r3
 80009d2:	2300      	movs	r3, #0
 80009d4:	2200      	movs	r2, #0
 80009d6:	21cc      	movs	r1, #204	; 0xcc
 80009d8:	f7ff fd7c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	3305      	adds	r3, #5
 80009e2:	b2d8      	uxtb	r0, r3
 80009e4:	2333      	movs	r3, #51	; 0x33
 80009e6:	22ff      	movs	r2, #255	; 0xff
 80009e8:	21ff      	movs	r1, #255	; 0xff
 80009ea:	f7ff fd73 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 80009ee:	2306      	movs	r3, #6
 80009f0:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 80009f4:	e010      	b.n	8000a18 <vumetro+0x4e8>
		Set_Pixel(j+numled,0,0,0);
 80009f6:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	4413      	add	r3, r2
 8000a02:	b2d8      	uxtb	r0, r3
 8000a04:	2300      	movs	r3, #0
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f7ff fd63 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8000a0e:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8000a12:	3301      	adds	r3, #1
 8000a14:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8000a18:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8000a1c:	2b07      	cmp	r3, #7
 8000a1e:	d9ea      	bls.n	80009f6 <vumetro+0x4c6>
	}
	Set_Pixel(8+numled,0,76,153);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	3308      	adds	r3, #8
 8000a26:	b2d8      	uxtb	r0, r3
 8000a28:	2399      	movs	r3, #153	; 0x99
 8000a2a:	224c      	movs	r2, #76	; 0x4c
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	f7ff fd51 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	3309      	adds	r3, #9
 8000a38:	b2d8      	uxtb	r0, r3
 8000a3a:	2399      	movs	r3, #153	; 0x99
 8000a3c:	2299      	movs	r2, #153	; 0x99
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f7ff fd48 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	330a      	adds	r3, #10
 8000a4a:	b2d8      	uxtb	r0, r3
 8000a4c:	23cc      	movs	r3, #204	; 0xcc
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2166      	movs	r1, #102	; 0x66
 8000a52:	f7ff fd3f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	330b      	adds	r3, #11
 8000a5c:	b2d8      	uxtb	r0, r3
 8000a5e:	2300      	movs	r3, #0
 8000a60:	2200      	movs	r2, #0
 8000a62:	21cc      	movs	r1, #204	; 0xcc
 8000a64:	f7ff fd36 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	330c      	adds	r3, #12
 8000a6e:	b2d8      	uxtb	r0, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	2200      	movs	r2, #0
 8000a74:	21cc      	movs	r1, #204	; 0xcc
 8000a76:	f7ff fd2d 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	330d      	adds	r3, #13
 8000a80:	b2d8      	uxtb	r0, r3
 8000a82:	2333      	movs	r3, #51	; 0x33
 8000a84:	22ff      	movs	r2, #255	; 0xff
 8000a86:	21ff      	movs	r1, #255	; 0xff
 8000a88:	f7ff fd24 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8000a8c:	230e      	movs	r3, #14
 8000a8e:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8000a92:	e010      	b.n	8000ab6 <vumetro+0x586>
		Set_Pixel(j+numled,0,0,0);
 8000a94:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4413      	add	r3, r2
 8000aa0:	b2d8      	uxtb	r0, r3
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	f7ff fd14 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8000aac:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8000ab6:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8000aba:	2b0f      	cmp	r3, #15
 8000abc:	d9ea      	bls.n	8000a94 <vumetro+0x564>
	}
	break;
 8000abe:	e11d      	b.n	8000cfc <vumetro+0x7cc>
case 7:
	Set_Pixel(0+numled,0,76,153);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	b2d8      	uxtb	r0, r3
 8000ac4:	2399      	movs	r3, #153	; 0x99
 8000ac6:	224c      	movs	r2, #76	; 0x4c
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f7ff fd03 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	b2d8      	uxtb	r0, r3
 8000ad6:	2399      	movs	r3, #153	; 0x99
 8000ad8:	2299      	movs	r2, #153	; 0x99
 8000ada:	2100      	movs	r1, #0
 8000adc:	f7ff fcfa 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	3302      	adds	r3, #2
 8000ae6:	b2d8      	uxtb	r0, r3
 8000ae8:	23cc      	movs	r3, #204	; 0xcc
 8000aea:	2200      	movs	r2, #0
 8000aec:	2166      	movs	r1, #102	; 0x66
 8000aee:	f7ff fcf1 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	3303      	adds	r3, #3
 8000af8:	b2d8      	uxtb	r0, r3
 8000afa:	2300      	movs	r3, #0
 8000afc:	2200      	movs	r2, #0
 8000afe:	21cc      	movs	r1, #204	; 0xcc
 8000b00:	f7ff fce8 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	3304      	adds	r3, #4
 8000b0a:	b2d8      	uxtb	r0, r3
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	2200      	movs	r2, #0
 8000b10:	21cc      	movs	r1, #204	; 0xcc
 8000b12:	f7ff fcdf 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	3305      	adds	r3, #5
 8000b1c:	b2d8      	uxtb	r0, r3
 8000b1e:	2333      	movs	r3, #51	; 0x33
 8000b20:	22ff      	movs	r2, #255	; 0xff
 8000b22:	21ff      	movs	r1, #255	; 0xff
 8000b24:	f7ff fcd6 	bl	80004d4 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	3306      	adds	r3, #6
 8000b2e:	b2d8      	uxtb	r0, r3
 8000b30:	2300      	movs	r3, #0
 8000b32:	22cc      	movs	r2, #204	; 0xcc
 8000b34:	2100      	movs	r1, #0
 8000b36:	f7ff fccd 	bl	80004d4 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	3307      	adds	r3, #7
 8000b40:	b2d8      	uxtb	r0, r3
 8000b42:	2300      	movs	r3, #0
 8000b44:	2200      	movs	r2, #0
 8000b46:	2100      	movs	r1, #0
 8000b48:	f7ff fcc4 	bl	80004d4 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	3308      	adds	r3, #8
 8000b52:	b2d8      	uxtb	r0, r3
 8000b54:	2399      	movs	r3, #153	; 0x99
 8000b56:	224c      	movs	r2, #76	; 0x4c
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f7ff fcbb 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	3309      	adds	r3, #9
 8000b64:	b2d8      	uxtb	r0, r3
 8000b66:	2399      	movs	r3, #153	; 0x99
 8000b68:	2299      	movs	r2, #153	; 0x99
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f7ff fcb2 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	330a      	adds	r3, #10
 8000b76:	b2d8      	uxtb	r0, r3
 8000b78:	23cc      	movs	r3, #204	; 0xcc
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2166      	movs	r1, #102	; 0x66
 8000b7e:	f7ff fca9 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	330b      	adds	r3, #11
 8000b88:	b2d8      	uxtb	r0, r3
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	21cc      	movs	r1, #204	; 0xcc
 8000b90:	f7ff fca0 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	330c      	adds	r3, #12
 8000b9a:	b2d8      	uxtb	r0, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	21cc      	movs	r1, #204	; 0xcc
 8000ba2:	f7ff fc97 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	330d      	adds	r3, #13
 8000bac:	b2d8      	uxtb	r0, r3
 8000bae:	2333      	movs	r3, #51	; 0x33
 8000bb0:	22ff      	movs	r2, #255	; 0xff
 8000bb2:	21ff      	movs	r1, #255	; 0xff
 8000bb4:	f7ff fc8e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	330e      	adds	r3, #14
 8000bbe:	b2d8      	uxtb	r0, r3
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	22cc      	movs	r2, #204	; 0xcc
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f7ff fc85 	bl	80004d4 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	330f      	adds	r3, #15
 8000bd0:	b2d8      	uxtb	r0, r3
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f7ff fc7c 	bl	80004d4 <Set_Pixel>
	break;
 8000bdc:	e08e      	b.n	8000cfc <vumetro+0x7cc>
default:
	Set_Pixel(0+numled,0,76,153);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	b2d8      	uxtb	r0, r3
 8000be2:	2399      	movs	r3, #153	; 0x99
 8000be4:	224c      	movs	r2, #76	; 0x4c
 8000be6:	2100      	movs	r1, #0
 8000be8:	f7ff fc74 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	b2d8      	uxtb	r0, r3
 8000bf4:	2399      	movs	r3, #153	; 0x99
 8000bf6:	2299      	movs	r2, #153	; 0x99
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	f7ff fc6b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	3302      	adds	r3, #2
 8000c04:	b2d8      	uxtb	r0, r3
 8000c06:	23cc      	movs	r3, #204	; 0xcc
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2166      	movs	r1, #102	; 0x66
 8000c0c:	f7ff fc62 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	3303      	adds	r3, #3
 8000c16:	b2d8      	uxtb	r0, r3
 8000c18:	2300      	movs	r3, #0
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	21cc      	movs	r1, #204	; 0xcc
 8000c1e:	f7ff fc59 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	3304      	adds	r3, #4
 8000c28:	b2d8      	uxtb	r0, r3
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	21cc      	movs	r1, #204	; 0xcc
 8000c30:	f7ff fc50 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	3305      	adds	r3, #5
 8000c3a:	b2d8      	uxtb	r0, r3
 8000c3c:	2333      	movs	r3, #51	; 0x33
 8000c3e:	22ff      	movs	r2, #255	; 0xff
 8000c40:	21ff      	movs	r1, #255	; 0xff
 8000c42:	f7ff fc47 	bl	80004d4 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	3306      	adds	r3, #6
 8000c4c:	b2d8      	uxtb	r0, r3
 8000c4e:	2300      	movs	r3, #0
 8000c50:	22cc      	movs	r2, #204	; 0xcc
 8000c52:	2100      	movs	r1, #0
 8000c54:	f7ff fc3e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	3307      	adds	r3, #7
 8000c5e:	b2d8      	uxtb	r0, r3
 8000c60:	2300      	movs	r3, #0
 8000c62:	22cc      	movs	r2, #204	; 0xcc
 8000c64:	2100      	movs	r1, #0
 8000c66:	f7ff fc35 	bl	80004d4 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	3308      	adds	r3, #8
 8000c70:	b2d8      	uxtb	r0, r3
 8000c72:	2399      	movs	r3, #153	; 0x99
 8000c74:	224c      	movs	r2, #76	; 0x4c
 8000c76:	2100      	movs	r1, #0
 8000c78:	f7ff fc2c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	3309      	adds	r3, #9
 8000c82:	b2d8      	uxtb	r0, r3
 8000c84:	2399      	movs	r3, #153	; 0x99
 8000c86:	2299      	movs	r2, #153	; 0x99
 8000c88:	2100      	movs	r1, #0
 8000c8a:	f7ff fc23 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	330a      	adds	r3, #10
 8000c94:	b2d8      	uxtb	r0, r3
 8000c96:	23cc      	movs	r3, #204	; 0xcc
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2166      	movs	r1, #102	; 0x66
 8000c9c:	f7ff fc1a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	330b      	adds	r3, #11
 8000ca6:	b2d8      	uxtb	r0, r3
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2200      	movs	r2, #0
 8000cac:	21cc      	movs	r1, #204	; 0xcc
 8000cae:	f7ff fc11 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	330c      	adds	r3, #12
 8000cb8:	b2d8      	uxtb	r0, r3
 8000cba:	2300      	movs	r3, #0
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	21cc      	movs	r1, #204	; 0xcc
 8000cc0:	f7ff fc08 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	330d      	adds	r3, #13
 8000cca:	b2d8      	uxtb	r0, r3
 8000ccc:	2333      	movs	r3, #51	; 0x33
 8000cce:	22ff      	movs	r2, #255	; 0xff
 8000cd0:	21ff      	movs	r1, #255	; 0xff
 8000cd2:	f7ff fbff 	bl	80004d4 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	330e      	adds	r3, #14
 8000cdc:	b2d8      	uxtb	r0, r3
 8000cde:	2300      	movs	r3, #0
 8000ce0:	22cc      	movs	r2, #204	; 0xcc
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	f7ff fbf6 	bl	80004d4 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	330f      	adds	r3, #15
 8000cee:	b2d8      	uxtb	r0, r3
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	22cc      	movs	r2, #204	; 0xcc
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	f7ff fbed 	bl	80004d4 <Set_Pixel>
	break;
 8000cfa:	bf00      	nop
}

numled=16;
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	60fb      	str	r3, [r7, #12]
switch(banda2){
 8000d00:	79bb      	ldrb	r3, [r7, #6]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	2b06      	cmp	r3, #6
 8000d06:	f200 8340 	bhi.w	800138a <vumetro+0xe5a>
 8000d0a:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <vumetro+0x7e0>)
 8000d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d10:	08000d2d 	.word	0x08000d2d
 8000d14:	08000db3 	.word	0x08000db3
 8000d18:	08000e5d 	.word	0x08000e5d
 8000d1c:	08000f2b 	.word	0x08000f2b
 8000d20:	0800101d 	.word	0x0800101d
 8000d24:	08001133 	.word	0x08001133
 8000d28:	0800126d 	.word	0x0800126d
case 1||0:
	Set_Pixel(0+numled,76,0,153);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	b2d8      	uxtb	r0, r3
 8000d30:	2399      	movs	r3, #153	; 0x99
 8000d32:	2200      	movs	r2, #0
 8000d34:	214c      	movs	r1, #76	; 0x4c
 8000d36:	f7ff fbcd 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 8000d40:	e010      	b.n	8000d64 <vumetro+0x834>
		Set_Pixel(j+numled,0,0,0);
 8000d42:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b2d8      	uxtb	r0, r3
 8000d50:	2300      	movs	r3, #0
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	f7ff fbbd 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8000d5a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8000d5e:	3301      	adds	r3, #1
 8000d60:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 8000d64:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8000d68:	2b07      	cmp	r3, #7
 8000d6a:	d9ea      	bls.n	8000d42 <vumetro+0x812>
	}
	Set_Pixel(8+numled,76,0,153);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	3308      	adds	r3, #8
 8000d72:	b2d8      	uxtb	r0, r3
 8000d74:	2399      	movs	r3, #153	; 0x99
 8000d76:	2200      	movs	r2, #0
 8000d78:	214c      	movs	r1, #76	; 0x4c
 8000d7a:	f7ff fbab 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8000d7e:	2309      	movs	r3, #9
 8000d80:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8000d84:	e010      	b.n	8000da8 <vumetro+0x878>
		Set_Pixel(j+numled,0,0,0);
 8000d86:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	b2d8      	uxtb	r0, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f7ff fb9b 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8000d9e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000da2:	3301      	adds	r3, #1
 8000da4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8000da8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d9ea      	bls.n	8000d86 <vumetro+0x856>
	}
	break;
 8000db0:	e37a      	b.n	80014a8 <vumetro+0xf78>
case 2:
	Set_Pixel(0+numled,0,76,153);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	b2d8      	uxtb	r0, r3
 8000db6:	2399      	movs	r3, #153	; 0x99
 8000db8:	224c      	movs	r2, #76	; 0x4c
 8000dba:	2100      	movs	r1, #0
 8000dbc:	f7ff fb8a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b2d8      	uxtb	r0, r3
 8000dc8:	2399      	movs	r3, #153	; 0x99
 8000dca:	2299      	movs	r2, #153	; 0x99
 8000dcc:	2100      	movs	r1, #0
 8000dce:	f7ff fb81 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8000dd8:	e010      	b.n	8000dfc <vumetro+0x8cc>
		Set_Pixel(j+numled,0,0,0);
 8000dda:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	4413      	add	r3, r2
 8000de6:	b2d8      	uxtb	r0, r3
 8000de8:	2300      	movs	r3, #0
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	f7ff fb71 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8000df2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8000df6:	3301      	adds	r3, #1
 8000df8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8000dfc:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8000e00:	2b07      	cmp	r3, #7
 8000e02:	d9ea      	bls.n	8000dda <vumetro+0x8aa>
	}
	Set_Pixel(8+numled,0,76,153);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	3308      	adds	r3, #8
 8000e0a:	b2d8      	uxtb	r0, r3
 8000e0c:	2399      	movs	r3, #153	; 0x99
 8000e0e:	224c      	movs	r2, #76	; 0x4c
 8000e10:	2100      	movs	r1, #0
 8000e12:	f7ff fb5f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	3309      	adds	r3, #9
 8000e1c:	b2d8      	uxtb	r0, r3
 8000e1e:	2399      	movs	r3, #153	; 0x99
 8000e20:	2299      	movs	r2, #153	; 0x99
 8000e22:	2100      	movs	r1, #0
 8000e24:	f7ff fb56 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8000e28:	230a      	movs	r3, #10
 8000e2a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8000e2e:	e010      	b.n	8000e52 <vumetro+0x922>
		Set_Pixel(j+numled,0,0,0);
 8000e30:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b2d8      	uxtb	r0, r3
 8000e3e:	2300      	movs	r3, #0
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	f7ff fb46 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8000e48:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8000e52:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8000e56:	2b0f      	cmp	r3, #15
 8000e58:	d9ea      	bls.n	8000e30 <vumetro+0x900>
	}
	break;
 8000e5a:	e325      	b.n	80014a8 <vumetro+0xf78>

case 3:
	Set_Pixel(0+numled,0,76,153);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	b2d8      	uxtb	r0, r3
 8000e60:	2399      	movs	r3, #153	; 0x99
 8000e62:	224c      	movs	r2, #76	; 0x4c
 8000e64:	2100      	movs	r1, #0
 8000e66:	f7ff fb35 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	3301      	adds	r3, #1
 8000e70:	b2d8      	uxtb	r0, r3
 8000e72:	2399      	movs	r3, #153	; 0x99
 8000e74:	2299      	movs	r2, #153	; 0x99
 8000e76:	2100      	movs	r1, #0
 8000e78:	f7ff fb2c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	3302      	adds	r3, #2
 8000e82:	b2d8      	uxtb	r0, r3
 8000e84:	23cc      	movs	r3, #204	; 0xcc
 8000e86:	2200      	movs	r2, #0
 8000e88:	2166      	movs	r1, #102	; 0x66
 8000e8a:	f7ff fb23 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8000e8e:	2303      	movs	r3, #3
 8000e90:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8000e94:	e010      	b.n	8000eb8 <vumetro+0x988>
		Set_Pixel(j+numled,0,0,0);
 8000e96:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	4413      	add	r3, r2
 8000ea2:	b2d8      	uxtb	r0, r3
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	f7ff fb13 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8000eae:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8000eb8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000ebc:	2b07      	cmp	r3, #7
 8000ebe:	d9ea      	bls.n	8000e96 <vumetro+0x966>
	}
	Set_Pixel(8+numled,0,76,153);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	3308      	adds	r3, #8
 8000ec6:	b2d8      	uxtb	r0, r3
 8000ec8:	2399      	movs	r3, #153	; 0x99
 8000eca:	224c      	movs	r2, #76	; 0x4c
 8000ecc:	2100      	movs	r1, #0
 8000ece:	f7ff fb01 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	3309      	adds	r3, #9
 8000ed8:	b2d8      	uxtb	r0, r3
 8000eda:	2399      	movs	r3, #153	; 0x99
 8000edc:	2299      	movs	r2, #153	; 0x99
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f7ff faf8 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	330a      	adds	r3, #10
 8000eea:	b2d8      	uxtb	r0, r3
 8000eec:	23cc      	movs	r3, #204	; 0xcc
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2166      	movs	r1, #102	; 0x66
 8000ef2:	f7ff faef 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8000ef6:	230b      	movs	r3, #11
 8000ef8:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8000efc:	e010      	b.n	8000f20 <vumetro+0x9f0>
		Set_Pixel(j+numled,0,0,0);
 8000efe:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	4413      	add	r3, r2
 8000f0a:	b2d8      	uxtb	r0, r3
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	f7ff fadf 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8000f16:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8000f20:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000f24:	2b0f      	cmp	r3, #15
 8000f26:	d9ea      	bls.n	8000efe <vumetro+0x9ce>
	}
	break;
 8000f28:	e2be      	b.n	80014a8 <vumetro+0xf78>
case 4:
	Set_Pixel(0+numled,0,76,153);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	b2d8      	uxtb	r0, r3
 8000f2e:	2399      	movs	r3, #153	; 0x99
 8000f30:	224c      	movs	r2, #76	; 0x4c
 8000f32:	2100      	movs	r1, #0
 8000f34:	f7ff face 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	b2d8      	uxtb	r0, r3
 8000f40:	2399      	movs	r3, #153	; 0x99
 8000f42:	2299      	movs	r2, #153	; 0x99
 8000f44:	2100      	movs	r1, #0
 8000f46:	f7ff fac5 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	3302      	adds	r3, #2
 8000f50:	b2d8      	uxtb	r0, r3
 8000f52:	23cc      	movs	r3, #204	; 0xcc
 8000f54:	2200      	movs	r2, #0
 8000f56:	2166      	movs	r1, #102	; 0x66
 8000f58:	f7ff fabc 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	3303      	adds	r3, #3
 8000f62:	b2d8      	uxtb	r0, r3
 8000f64:	2300      	movs	r3, #0
 8000f66:	2200      	movs	r2, #0
 8000f68:	21cc      	movs	r1, #204	; 0xcc
 8000f6a:	f7ff fab3 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8000f6e:	2304      	movs	r3, #4
 8000f70:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8000f74:	e010      	b.n	8000f98 <vumetro+0xa68>
		Set_Pixel(j+numled,0,0,0);
 8000f76:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	4413      	add	r3, r2
 8000f82:	b2d8      	uxtb	r0, r3
 8000f84:	2300      	movs	r3, #0
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	f7ff faa3 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8000f8e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8000f92:	3301      	adds	r3, #1
 8000f94:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8000f98:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8000f9c:	2b07      	cmp	r3, #7
 8000f9e:	d9ea      	bls.n	8000f76 <vumetro+0xa46>
	}
	Set_Pixel(8+numled,0,76,153);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	3308      	adds	r3, #8
 8000fa6:	b2d8      	uxtb	r0, r3
 8000fa8:	2399      	movs	r3, #153	; 0x99
 8000faa:	224c      	movs	r2, #76	; 0x4c
 8000fac:	2100      	movs	r1, #0
 8000fae:	f7ff fa91 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	3309      	adds	r3, #9
 8000fb8:	b2d8      	uxtb	r0, r3
 8000fba:	2399      	movs	r3, #153	; 0x99
 8000fbc:	2299      	movs	r2, #153	; 0x99
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	f7ff fa88 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	330a      	adds	r3, #10
 8000fca:	b2d8      	uxtb	r0, r3
 8000fcc:	23cc      	movs	r3, #204	; 0xcc
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2166      	movs	r1, #102	; 0x66
 8000fd2:	f7ff fa7f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	330b      	adds	r3, #11
 8000fdc:	b2d8      	uxtb	r0, r3
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	21cc      	movs	r1, #204	; 0xcc
 8000fe4:	f7ff fa76 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8000fe8:	230c      	movs	r3, #12
 8000fea:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8000fee:	e010      	b.n	8001012 <vumetro+0xae2>
		Set_Pixel(j+numled,0,0,0);
 8000ff0:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b2d8      	uxtb	r0, r3
 8000ffe:	2300      	movs	r3, #0
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	f7ff fa66 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8001008:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800100c:	3301      	adds	r3, #1
 800100e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8001012:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8001016:	2b0f      	cmp	r3, #15
 8001018:	d9ea      	bls.n	8000ff0 <vumetro+0xac0>
	}
	break;
 800101a:	e245      	b.n	80014a8 <vumetro+0xf78>
case 5:
	Set_Pixel(0+numled,0,76,153);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	b2d8      	uxtb	r0, r3
 8001020:	2399      	movs	r3, #153	; 0x99
 8001022:	224c      	movs	r2, #76	; 0x4c
 8001024:	2100      	movs	r1, #0
 8001026:	f7ff fa55 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	3301      	adds	r3, #1
 8001030:	b2d8      	uxtb	r0, r3
 8001032:	2399      	movs	r3, #153	; 0x99
 8001034:	2299      	movs	r2, #153	; 0x99
 8001036:	2100      	movs	r1, #0
 8001038:	f7ff fa4c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	3302      	adds	r3, #2
 8001042:	b2d8      	uxtb	r0, r3
 8001044:	23cc      	movs	r3, #204	; 0xcc
 8001046:	2200      	movs	r2, #0
 8001048:	2166      	movs	r1, #102	; 0x66
 800104a:	f7ff fa43 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	3303      	adds	r3, #3
 8001054:	b2d8      	uxtb	r0, r3
 8001056:	2300      	movs	r3, #0
 8001058:	2200      	movs	r2, #0
 800105a:	21cc      	movs	r1, #204	; 0xcc
 800105c:	f7ff fa3a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	3304      	adds	r3, #4
 8001066:	b2d8      	uxtb	r0, r3
 8001068:	2300      	movs	r3, #0
 800106a:	2200      	movs	r2, #0
 800106c:	21cc      	movs	r1, #204	; 0xcc
 800106e:	f7ff fa31 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8001072:	2305      	movs	r3, #5
 8001074:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001078:	e010      	b.n	800109c <vumetro+0xb6c>
		Set_Pixel(j+numled,0,0,0);
 800107a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800107e:	b2da      	uxtb	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4413      	add	r3, r2
 8001086:	b2d8      	uxtb	r0, r3
 8001088:	2300      	movs	r3, #0
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	f7ff fa21 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8001092:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001096:	3301      	adds	r3, #1
 8001098:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800109c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	d9ea      	bls.n	800107a <vumetro+0xb4a>
	}
	Set_Pixel(8+numled,0,76,153);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	3308      	adds	r3, #8
 80010aa:	b2d8      	uxtb	r0, r3
 80010ac:	2399      	movs	r3, #153	; 0x99
 80010ae:	224c      	movs	r2, #76	; 0x4c
 80010b0:	2100      	movs	r1, #0
 80010b2:	f7ff fa0f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	3309      	adds	r3, #9
 80010bc:	b2d8      	uxtb	r0, r3
 80010be:	2399      	movs	r3, #153	; 0x99
 80010c0:	2299      	movs	r2, #153	; 0x99
 80010c2:	2100      	movs	r1, #0
 80010c4:	f7ff fa06 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	330a      	adds	r3, #10
 80010ce:	b2d8      	uxtb	r0, r3
 80010d0:	23cc      	movs	r3, #204	; 0xcc
 80010d2:	2200      	movs	r2, #0
 80010d4:	2166      	movs	r1, #102	; 0x66
 80010d6:	f7ff f9fd 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	330b      	adds	r3, #11
 80010e0:	b2d8      	uxtb	r0, r3
 80010e2:	2300      	movs	r3, #0
 80010e4:	2200      	movs	r2, #0
 80010e6:	21cc      	movs	r1, #204	; 0xcc
 80010e8:	f7ff f9f4 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	330c      	adds	r3, #12
 80010f2:	b2d8      	uxtb	r0, r3
 80010f4:	2300      	movs	r3, #0
 80010f6:	2200      	movs	r2, #0
 80010f8:	21cc      	movs	r1, #204	; 0xcc
 80010fa:	f7ff f9eb 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 80010fe:	230d      	movs	r3, #13
 8001100:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8001104:	e010      	b.n	8001128 <vumetro+0xbf8>
		Set_Pixel(j+numled,0,0,0);
 8001106:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800110a:	b2da      	uxtb	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4413      	add	r3, r2
 8001112:	b2d8      	uxtb	r0, r3
 8001114:	2300      	movs	r3, #0
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	f7ff f9db 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 800111e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001122:	3301      	adds	r3, #1
 8001124:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8001128:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d9ea      	bls.n	8001106 <vumetro+0xbd6>
	}
	break;
 8001130:	e1ba      	b.n	80014a8 <vumetro+0xf78>
case 6:
	Set_Pixel(0+numled,0,76,153);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	b2d8      	uxtb	r0, r3
 8001136:	2399      	movs	r3, #153	; 0x99
 8001138:	224c      	movs	r2, #76	; 0x4c
 800113a:	2100      	movs	r1, #0
 800113c:	f7ff f9ca 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	3301      	adds	r3, #1
 8001146:	b2d8      	uxtb	r0, r3
 8001148:	2399      	movs	r3, #153	; 0x99
 800114a:	2299      	movs	r2, #153	; 0x99
 800114c:	2100      	movs	r1, #0
 800114e:	f7ff f9c1 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	3302      	adds	r3, #2
 8001158:	b2d8      	uxtb	r0, r3
 800115a:	23cc      	movs	r3, #204	; 0xcc
 800115c:	2200      	movs	r2, #0
 800115e:	2166      	movs	r1, #102	; 0x66
 8001160:	f7ff f9b8 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	3303      	adds	r3, #3
 800116a:	b2d8      	uxtb	r0, r3
 800116c:	2300      	movs	r3, #0
 800116e:	2200      	movs	r2, #0
 8001170:	21cc      	movs	r1, #204	; 0xcc
 8001172:	f7ff f9af 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	3304      	adds	r3, #4
 800117c:	b2d8      	uxtb	r0, r3
 800117e:	2300      	movs	r3, #0
 8001180:	2200      	movs	r2, #0
 8001182:	21cc      	movs	r1, #204	; 0xcc
 8001184:	f7ff f9a6 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	3305      	adds	r3, #5
 800118e:	b2d8      	uxtb	r0, r3
 8001190:	2333      	movs	r3, #51	; 0x33
 8001192:	22ff      	movs	r2, #255	; 0xff
 8001194:	21ff      	movs	r1, #255	; 0xff
 8001196:	f7ff f99d 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 800119a:	2306      	movs	r3, #6
 800119c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 80011a0:	e010      	b.n	80011c4 <vumetro+0xc94>
		Set_Pixel(j+numled,0,0,0);
 80011a2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4413      	add	r3, r2
 80011ae:	b2d8      	uxtb	r0, r3
 80011b0:	2300      	movs	r3, #0
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	f7ff f98d 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 80011ba:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80011be:	3301      	adds	r3, #1
 80011c0:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 80011c4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80011c8:	2b07      	cmp	r3, #7
 80011ca:	d9ea      	bls.n	80011a2 <vumetro+0xc72>
	}
	Set_Pixel(8+numled,0,76,153);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	3308      	adds	r3, #8
 80011d2:	b2d8      	uxtb	r0, r3
 80011d4:	2399      	movs	r3, #153	; 0x99
 80011d6:	224c      	movs	r2, #76	; 0x4c
 80011d8:	2100      	movs	r1, #0
 80011da:	f7ff f97b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	3309      	adds	r3, #9
 80011e4:	b2d8      	uxtb	r0, r3
 80011e6:	2399      	movs	r3, #153	; 0x99
 80011e8:	2299      	movs	r2, #153	; 0x99
 80011ea:	2100      	movs	r1, #0
 80011ec:	f7ff f972 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	330a      	adds	r3, #10
 80011f6:	b2d8      	uxtb	r0, r3
 80011f8:	23cc      	movs	r3, #204	; 0xcc
 80011fa:	2200      	movs	r2, #0
 80011fc:	2166      	movs	r1, #102	; 0x66
 80011fe:	f7ff f969 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	330b      	adds	r3, #11
 8001208:	b2d8      	uxtb	r0, r3
 800120a:	2300      	movs	r3, #0
 800120c:	2200      	movs	r2, #0
 800120e:	21cc      	movs	r1, #204	; 0xcc
 8001210:	f7ff f960 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	330c      	adds	r3, #12
 800121a:	b2d8      	uxtb	r0, r3
 800121c:	2300      	movs	r3, #0
 800121e:	2200      	movs	r2, #0
 8001220:	21cc      	movs	r1, #204	; 0xcc
 8001222:	f7ff f957 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	330d      	adds	r3, #13
 800122c:	b2d8      	uxtb	r0, r3
 800122e:	2333      	movs	r3, #51	; 0x33
 8001230:	22ff      	movs	r2, #255	; 0xff
 8001232:	21ff      	movs	r1, #255	; 0xff
 8001234:	f7ff f94e 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8001238:	230e      	movs	r3, #14
 800123a:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 800123e:	e010      	b.n	8001262 <vumetro+0xd32>
		Set_Pixel(j+numled,0,0,0);
 8001240:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8001244:	b2da      	uxtb	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b2d8      	uxtb	r0, r3
 800124e:	2300      	movs	r3, #0
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	f7ff f93e 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8001258:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800125c:	3301      	adds	r3, #1
 800125e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8001262:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8001266:	2b0f      	cmp	r3, #15
 8001268:	d9ea      	bls.n	8001240 <vumetro+0xd10>
	}
	break;
 800126a:	e11d      	b.n	80014a8 <vumetro+0xf78>
case 7:
	Set_Pixel(0+numled,0,76,153);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	b2d8      	uxtb	r0, r3
 8001270:	2399      	movs	r3, #153	; 0x99
 8001272:	224c      	movs	r2, #76	; 0x4c
 8001274:	2100      	movs	r1, #0
 8001276:	f7ff f92d 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	3301      	adds	r3, #1
 8001280:	b2d8      	uxtb	r0, r3
 8001282:	2399      	movs	r3, #153	; 0x99
 8001284:	2299      	movs	r2, #153	; 0x99
 8001286:	2100      	movs	r1, #0
 8001288:	f7ff f924 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	3302      	adds	r3, #2
 8001292:	b2d8      	uxtb	r0, r3
 8001294:	23cc      	movs	r3, #204	; 0xcc
 8001296:	2200      	movs	r2, #0
 8001298:	2166      	movs	r1, #102	; 0x66
 800129a:	f7ff f91b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	3303      	adds	r3, #3
 80012a4:	b2d8      	uxtb	r0, r3
 80012a6:	2300      	movs	r3, #0
 80012a8:	2200      	movs	r2, #0
 80012aa:	21cc      	movs	r1, #204	; 0xcc
 80012ac:	f7ff f912 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	3304      	adds	r3, #4
 80012b6:	b2d8      	uxtb	r0, r3
 80012b8:	2300      	movs	r3, #0
 80012ba:	2200      	movs	r2, #0
 80012bc:	21cc      	movs	r1, #204	; 0xcc
 80012be:	f7ff f909 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	3305      	adds	r3, #5
 80012c8:	b2d8      	uxtb	r0, r3
 80012ca:	2333      	movs	r3, #51	; 0x33
 80012cc:	22ff      	movs	r2, #255	; 0xff
 80012ce:	21ff      	movs	r1, #255	; 0xff
 80012d0:	f7ff f900 	bl	80004d4 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	3306      	adds	r3, #6
 80012da:	b2d8      	uxtb	r0, r3
 80012dc:	2300      	movs	r3, #0
 80012de:	22cc      	movs	r2, #204	; 0xcc
 80012e0:	2100      	movs	r1, #0
 80012e2:	f7ff f8f7 	bl	80004d4 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	3307      	adds	r3, #7
 80012ec:	b2d8      	uxtb	r0, r3
 80012ee:	2300      	movs	r3, #0
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	f7ff f8ee 	bl	80004d4 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	3308      	adds	r3, #8
 80012fe:	b2d8      	uxtb	r0, r3
 8001300:	2399      	movs	r3, #153	; 0x99
 8001302:	224c      	movs	r2, #76	; 0x4c
 8001304:	2100      	movs	r1, #0
 8001306:	f7ff f8e5 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	3309      	adds	r3, #9
 8001310:	b2d8      	uxtb	r0, r3
 8001312:	2399      	movs	r3, #153	; 0x99
 8001314:	2299      	movs	r2, #153	; 0x99
 8001316:	2100      	movs	r1, #0
 8001318:	f7ff f8dc 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	330a      	adds	r3, #10
 8001322:	b2d8      	uxtb	r0, r3
 8001324:	23cc      	movs	r3, #204	; 0xcc
 8001326:	2200      	movs	r2, #0
 8001328:	2166      	movs	r1, #102	; 0x66
 800132a:	f7ff f8d3 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	330b      	adds	r3, #11
 8001334:	b2d8      	uxtb	r0, r3
 8001336:	2300      	movs	r3, #0
 8001338:	2200      	movs	r2, #0
 800133a:	21cc      	movs	r1, #204	; 0xcc
 800133c:	f7ff f8ca 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	330c      	adds	r3, #12
 8001346:	b2d8      	uxtb	r0, r3
 8001348:	2300      	movs	r3, #0
 800134a:	2200      	movs	r2, #0
 800134c:	21cc      	movs	r1, #204	; 0xcc
 800134e:	f7ff f8c1 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	330d      	adds	r3, #13
 8001358:	b2d8      	uxtb	r0, r3
 800135a:	2333      	movs	r3, #51	; 0x33
 800135c:	22ff      	movs	r2, #255	; 0xff
 800135e:	21ff      	movs	r1, #255	; 0xff
 8001360:	f7ff f8b8 	bl	80004d4 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	330e      	adds	r3, #14
 800136a:	b2d8      	uxtb	r0, r3
 800136c:	2300      	movs	r3, #0
 800136e:	22cc      	movs	r2, #204	; 0xcc
 8001370:	2100      	movs	r1, #0
 8001372:	f7ff f8af 	bl	80004d4 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	330f      	adds	r3, #15
 800137c:	b2d8      	uxtb	r0, r3
 800137e:	2300      	movs	r3, #0
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	f7ff f8a6 	bl	80004d4 <Set_Pixel>
	break;
 8001388:	e08e      	b.n	80014a8 <vumetro+0xf78>
default:
	Set_Pixel(0+numled,0,76,153);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	b2d8      	uxtb	r0, r3
 800138e:	2399      	movs	r3, #153	; 0x99
 8001390:	224c      	movs	r2, #76	; 0x4c
 8001392:	2100      	movs	r1, #0
 8001394:	f7ff f89e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	3301      	adds	r3, #1
 800139e:	b2d8      	uxtb	r0, r3
 80013a0:	2399      	movs	r3, #153	; 0x99
 80013a2:	2299      	movs	r2, #153	; 0x99
 80013a4:	2100      	movs	r1, #0
 80013a6:	f7ff f895 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	3302      	adds	r3, #2
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	23cc      	movs	r3, #204	; 0xcc
 80013b4:	2200      	movs	r2, #0
 80013b6:	2166      	movs	r1, #102	; 0x66
 80013b8:	f7ff f88c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	3303      	adds	r3, #3
 80013c2:	b2d8      	uxtb	r0, r3
 80013c4:	2300      	movs	r3, #0
 80013c6:	2200      	movs	r2, #0
 80013c8:	21cc      	movs	r1, #204	; 0xcc
 80013ca:	f7ff f883 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	3304      	adds	r3, #4
 80013d4:	b2d8      	uxtb	r0, r3
 80013d6:	2300      	movs	r3, #0
 80013d8:	2200      	movs	r2, #0
 80013da:	21cc      	movs	r1, #204	; 0xcc
 80013dc:	f7ff f87a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	3305      	adds	r3, #5
 80013e6:	b2d8      	uxtb	r0, r3
 80013e8:	2333      	movs	r3, #51	; 0x33
 80013ea:	22ff      	movs	r2, #255	; 0xff
 80013ec:	21ff      	movs	r1, #255	; 0xff
 80013ee:	f7ff f871 	bl	80004d4 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3306      	adds	r3, #6
 80013f8:	b2d8      	uxtb	r0, r3
 80013fa:	2300      	movs	r3, #0
 80013fc:	22cc      	movs	r2, #204	; 0xcc
 80013fe:	2100      	movs	r1, #0
 8001400:	f7ff f868 	bl	80004d4 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	3307      	adds	r3, #7
 800140a:	b2d8      	uxtb	r0, r3
 800140c:	2300      	movs	r3, #0
 800140e:	22cc      	movs	r2, #204	; 0xcc
 8001410:	2100      	movs	r1, #0
 8001412:	f7ff f85f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	3308      	adds	r3, #8
 800141c:	b2d8      	uxtb	r0, r3
 800141e:	2399      	movs	r3, #153	; 0x99
 8001420:	224c      	movs	r2, #76	; 0x4c
 8001422:	2100      	movs	r1, #0
 8001424:	f7ff f856 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	3309      	adds	r3, #9
 800142e:	b2d8      	uxtb	r0, r3
 8001430:	2399      	movs	r3, #153	; 0x99
 8001432:	2299      	movs	r2, #153	; 0x99
 8001434:	2100      	movs	r1, #0
 8001436:	f7ff f84d 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	330a      	adds	r3, #10
 8001440:	b2d8      	uxtb	r0, r3
 8001442:	23cc      	movs	r3, #204	; 0xcc
 8001444:	2200      	movs	r2, #0
 8001446:	2166      	movs	r1, #102	; 0x66
 8001448:	f7ff f844 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	330b      	adds	r3, #11
 8001452:	b2d8      	uxtb	r0, r3
 8001454:	2300      	movs	r3, #0
 8001456:	2200      	movs	r2, #0
 8001458:	21cc      	movs	r1, #204	; 0xcc
 800145a:	f7ff f83b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	330c      	adds	r3, #12
 8001464:	b2d8      	uxtb	r0, r3
 8001466:	2300      	movs	r3, #0
 8001468:	2200      	movs	r2, #0
 800146a:	21cc      	movs	r1, #204	; 0xcc
 800146c:	f7ff f832 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	330d      	adds	r3, #13
 8001476:	b2d8      	uxtb	r0, r3
 8001478:	2333      	movs	r3, #51	; 0x33
 800147a:	22ff      	movs	r2, #255	; 0xff
 800147c:	21ff      	movs	r1, #255	; 0xff
 800147e:	f7ff f829 	bl	80004d4 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	330e      	adds	r3, #14
 8001488:	b2d8      	uxtb	r0, r3
 800148a:	2300      	movs	r3, #0
 800148c:	22cc      	movs	r2, #204	; 0xcc
 800148e:	2100      	movs	r1, #0
 8001490:	f7ff f820 	bl	80004d4 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	330f      	adds	r3, #15
 800149a:	b2d8      	uxtb	r0, r3
 800149c:	2300      	movs	r3, #0
 800149e:	22cc      	movs	r2, #204	; 0xcc
 80014a0:	2100      	movs	r1, #0
 80014a2:	f7ff f817 	bl	80004d4 <Set_Pixel>
	break;
 80014a6:	bf00      	nop
}

numled=32;
 80014a8:	2320      	movs	r3, #32
 80014aa:	60fb      	str	r3, [r7, #12]
switch(banda3){
 80014ac:	797b      	ldrb	r3, [r7, #5]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	2b06      	cmp	r3, #6
 80014b2:	f200 8340 	bhi.w	8001b36 <vumetro+0x1606>
 80014b6:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <vumetro+0xf8c>)
 80014b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014bc:	080014d9 	.word	0x080014d9
 80014c0:	0800155f 	.word	0x0800155f
 80014c4:	08001609 	.word	0x08001609
 80014c8:	080016d7 	.word	0x080016d7
 80014cc:	080017c9 	.word	0x080017c9
 80014d0:	080018df 	.word	0x080018df
 80014d4:	08001a19 	.word	0x08001a19
case 1||0:
	Set_Pixel(0+numled,76,0,153);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	b2d8      	uxtb	r0, r3
 80014dc:	2399      	movs	r3, #153	; 0x99
 80014de:	2200      	movs	r2, #0
 80014e0:	214c      	movs	r1, #76	; 0x4c
 80014e2:	f7fe fff7 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 80014e6:	2301      	movs	r3, #1
 80014e8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80014ec:	e010      	b.n	8001510 <vumetro+0xfe0>
		Set_Pixel(j+numled,0,0,0);
 80014ee:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	b2d8      	uxtb	r0, r3
 80014fc:	2300      	movs	r3, #0
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	f7fe ffe7 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8001506:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800150a:	3301      	adds	r3, #1
 800150c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8001510:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001514:	2b07      	cmp	r3, #7
 8001516:	d9ea      	bls.n	80014ee <vumetro+0xfbe>
	}
	Set_Pixel(8+numled,76,0,153);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	3308      	adds	r3, #8
 800151e:	b2d8      	uxtb	r0, r3
 8001520:	2399      	movs	r3, #153	; 0x99
 8001522:	2200      	movs	r2, #0
 8001524:	214c      	movs	r1, #76	; 0x4c
 8001526:	f7fe ffd5 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 800152a:	2309      	movs	r3, #9
 800152c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001530:	e010      	b.n	8001554 <vumetro+0x1024>
		Set_Pixel(j+numled,0,0,0);
 8001532:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001536:	b2da      	uxtb	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	b2d8      	uxtb	r0, r3
 8001540:	2300      	movs	r3, #0
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	f7fe ffc5 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 800154a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800154e:	3301      	adds	r3, #1
 8001550:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001554:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001558:	2b0f      	cmp	r3, #15
 800155a:	d9ea      	bls.n	8001532 <vumetro+0x1002>
	}
	break;
 800155c:	e37a      	b.n	8001c54 <vumetro+0x1724>
case 2:
	Set_Pixel(0+numled,0,76,153);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	b2d8      	uxtb	r0, r3
 8001562:	2399      	movs	r3, #153	; 0x99
 8001564:	224c      	movs	r2, #76	; 0x4c
 8001566:	2100      	movs	r1, #0
 8001568:	f7fe ffb4 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	3301      	adds	r3, #1
 8001572:	b2d8      	uxtb	r0, r3
 8001574:	2399      	movs	r3, #153	; 0x99
 8001576:	2299      	movs	r2, #153	; 0x99
 8001578:	2100      	movs	r1, #0
 800157a:	f7fe ffab 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 800157e:	2302      	movs	r3, #2
 8001580:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8001584:	e010      	b.n	80015a8 <vumetro+0x1078>
		Set_Pixel(j+numled,0,0,0);
 8001586:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800158a:	b2da      	uxtb	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	4413      	add	r3, r2
 8001592:	b2d8      	uxtb	r0, r3
 8001594:	2300      	movs	r3, #0
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	f7fe ff9b 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 800159e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80015a2:	3301      	adds	r3, #1
 80015a4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80015a8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80015ac:	2b07      	cmp	r3, #7
 80015ae:	d9ea      	bls.n	8001586 <vumetro+0x1056>
	}
	Set_Pixel(8+numled,0,76,153);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	3308      	adds	r3, #8
 80015b6:	b2d8      	uxtb	r0, r3
 80015b8:	2399      	movs	r3, #153	; 0x99
 80015ba:	224c      	movs	r2, #76	; 0x4c
 80015bc:	2100      	movs	r1, #0
 80015be:	f7fe ff89 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	3309      	adds	r3, #9
 80015c8:	b2d8      	uxtb	r0, r3
 80015ca:	2399      	movs	r3, #153	; 0x99
 80015cc:	2299      	movs	r2, #153	; 0x99
 80015ce:	2100      	movs	r1, #0
 80015d0:	f7fe ff80 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 80015d4:	230a      	movs	r3, #10
 80015d6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80015da:	e010      	b.n	80015fe <vumetro+0x10ce>
		Set_Pixel(j+numled,0,0,0);
 80015dc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	4413      	add	r3, r2
 80015e8:	b2d8      	uxtb	r0, r3
 80015ea:	2300      	movs	r3, #0
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	f7fe ff70 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 80015f4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80015f8:	3301      	adds	r3, #1
 80015fa:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80015fe:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8001602:	2b0f      	cmp	r3, #15
 8001604:	d9ea      	bls.n	80015dc <vumetro+0x10ac>
	}
	break;
 8001606:	e325      	b.n	8001c54 <vumetro+0x1724>

case 3:
	Set_Pixel(0+numled,0,76,153);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	b2d8      	uxtb	r0, r3
 800160c:	2399      	movs	r3, #153	; 0x99
 800160e:	224c      	movs	r2, #76	; 0x4c
 8001610:	2100      	movs	r1, #0
 8001612:	f7fe ff5f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	3301      	adds	r3, #1
 800161c:	b2d8      	uxtb	r0, r3
 800161e:	2399      	movs	r3, #153	; 0x99
 8001620:	2299      	movs	r2, #153	; 0x99
 8001622:	2100      	movs	r1, #0
 8001624:	f7fe ff56 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	3302      	adds	r3, #2
 800162e:	b2d8      	uxtb	r0, r3
 8001630:	23cc      	movs	r3, #204	; 0xcc
 8001632:	2200      	movs	r2, #0
 8001634:	2166      	movs	r1, #102	; 0x66
 8001636:	f7fe ff4d 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 800163a:	2303      	movs	r3, #3
 800163c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8001640:	e010      	b.n	8001664 <vumetro+0x1134>
		Set_Pixel(j+numled,0,0,0);
 8001642:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001646:	b2da      	uxtb	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	4413      	add	r3, r2
 800164e:	b2d8      	uxtb	r0, r3
 8001650:	2300      	movs	r3, #0
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	f7fe ff3d 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 800165a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800165e:	3301      	adds	r3, #1
 8001660:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8001664:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001668:	2b07      	cmp	r3, #7
 800166a:	d9ea      	bls.n	8001642 <vumetro+0x1112>
	}
	Set_Pixel(8+numled,0,76,153);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	3308      	adds	r3, #8
 8001672:	b2d8      	uxtb	r0, r3
 8001674:	2399      	movs	r3, #153	; 0x99
 8001676:	224c      	movs	r2, #76	; 0x4c
 8001678:	2100      	movs	r1, #0
 800167a:	f7fe ff2b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	3309      	adds	r3, #9
 8001684:	b2d8      	uxtb	r0, r3
 8001686:	2399      	movs	r3, #153	; 0x99
 8001688:	2299      	movs	r2, #153	; 0x99
 800168a:	2100      	movs	r1, #0
 800168c:	f7fe ff22 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	330a      	adds	r3, #10
 8001696:	b2d8      	uxtb	r0, r3
 8001698:	23cc      	movs	r3, #204	; 0xcc
 800169a:	2200      	movs	r2, #0
 800169c:	2166      	movs	r1, #102	; 0x66
 800169e:	f7fe ff19 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 80016a2:	230b      	movs	r3, #11
 80016a4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80016a8:	e010      	b.n	80016cc <vumetro+0x119c>
		Set_Pixel(j+numled,0,0,0);
 80016aa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	b2d8      	uxtb	r0, r3
 80016b8:	2300      	movs	r3, #0
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	f7fe ff09 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 80016c2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80016c6:	3301      	adds	r3, #1
 80016c8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80016cc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d9ea      	bls.n	80016aa <vumetro+0x117a>
	}
	break;
 80016d4:	e2be      	b.n	8001c54 <vumetro+0x1724>
case 4:
	Set_Pixel(0+numled,0,76,153);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	b2d8      	uxtb	r0, r3
 80016da:	2399      	movs	r3, #153	; 0x99
 80016dc:	224c      	movs	r2, #76	; 0x4c
 80016de:	2100      	movs	r1, #0
 80016e0:	f7fe fef8 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	3301      	adds	r3, #1
 80016ea:	b2d8      	uxtb	r0, r3
 80016ec:	2399      	movs	r3, #153	; 0x99
 80016ee:	2299      	movs	r2, #153	; 0x99
 80016f0:	2100      	movs	r1, #0
 80016f2:	f7fe feef 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	3302      	adds	r3, #2
 80016fc:	b2d8      	uxtb	r0, r3
 80016fe:	23cc      	movs	r3, #204	; 0xcc
 8001700:	2200      	movs	r2, #0
 8001702:	2166      	movs	r1, #102	; 0x66
 8001704:	f7fe fee6 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	3303      	adds	r3, #3
 800170e:	b2d8      	uxtb	r0, r3
 8001710:	2300      	movs	r3, #0
 8001712:	2200      	movs	r2, #0
 8001714:	21cc      	movs	r1, #204	; 0xcc
 8001716:	f7fe fedd 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 800171a:	2304      	movs	r3, #4
 800171c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8001720:	e010      	b.n	8001744 <vumetro+0x1214>
		Set_Pixel(j+numled,0,0,0);
 8001722:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8001726:	b2da      	uxtb	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	4413      	add	r3, r2
 800172e:	b2d8      	uxtb	r0, r3
 8001730:	2300      	movs	r3, #0
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	f7fe fecd 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 800173a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800173e:	3301      	adds	r3, #1
 8001740:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8001744:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8001748:	2b07      	cmp	r3, #7
 800174a:	d9ea      	bls.n	8001722 <vumetro+0x11f2>
	}
	Set_Pixel(8+numled,0,76,153);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	3308      	adds	r3, #8
 8001752:	b2d8      	uxtb	r0, r3
 8001754:	2399      	movs	r3, #153	; 0x99
 8001756:	224c      	movs	r2, #76	; 0x4c
 8001758:	2100      	movs	r1, #0
 800175a:	f7fe febb 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	3309      	adds	r3, #9
 8001764:	b2d8      	uxtb	r0, r3
 8001766:	2399      	movs	r3, #153	; 0x99
 8001768:	2299      	movs	r2, #153	; 0x99
 800176a:	2100      	movs	r1, #0
 800176c:	f7fe feb2 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	330a      	adds	r3, #10
 8001776:	b2d8      	uxtb	r0, r3
 8001778:	23cc      	movs	r3, #204	; 0xcc
 800177a:	2200      	movs	r2, #0
 800177c:	2166      	movs	r1, #102	; 0x66
 800177e:	f7fe fea9 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	330b      	adds	r3, #11
 8001788:	b2d8      	uxtb	r0, r3
 800178a:	2300      	movs	r3, #0
 800178c:	2200      	movs	r2, #0
 800178e:	21cc      	movs	r1, #204	; 0xcc
 8001790:	f7fe fea0 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8001794:	230c      	movs	r3, #12
 8001796:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800179a:	e010      	b.n	80017be <vumetro+0x128e>
		Set_Pixel(j+numled,0,0,0);
 800179c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	b2d8      	uxtb	r0, r3
 80017aa:	2300      	movs	r3, #0
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	f7fe fe90 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 80017b4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80017b8:	3301      	adds	r3, #1
 80017ba:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80017be:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80017c2:	2b0f      	cmp	r3, #15
 80017c4:	d9ea      	bls.n	800179c <vumetro+0x126c>
	}
	break;
 80017c6:	e245      	b.n	8001c54 <vumetro+0x1724>
case 5:
	Set_Pixel(0+numled,0,76,153);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	b2d8      	uxtb	r0, r3
 80017cc:	2399      	movs	r3, #153	; 0x99
 80017ce:	224c      	movs	r2, #76	; 0x4c
 80017d0:	2100      	movs	r1, #0
 80017d2:	f7fe fe7f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	3301      	adds	r3, #1
 80017dc:	b2d8      	uxtb	r0, r3
 80017de:	2399      	movs	r3, #153	; 0x99
 80017e0:	2299      	movs	r2, #153	; 0x99
 80017e2:	2100      	movs	r1, #0
 80017e4:	f7fe fe76 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	3302      	adds	r3, #2
 80017ee:	b2d8      	uxtb	r0, r3
 80017f0:	23cc      	movs	r3, #204	; 0xcc
 80017f2:	2200      	movs	r2, #0
 80017f4:	2166      	movs	r1, #102	; 0x66
 80017f6:	f7fe fe6d 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	3303      	adds	r3, #3
 8001800:	b2d8      	uxtb	r0, r3
 8001802:	2300      	movs	r3, #0
 8001804:	2200      	movs	r2, #0
 8001806:	21cc      	movs	r1, #204	; 0xcc
 8001808:	f7fe fe64 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	3304      	adds	r3, #4
 8001812:	b2d8      	uxtb	r0, r3
 8001814:	2300      	movs	r3, #0
 8001816:	2200      	movs	r2, #0
 8001818:	21cc      	movs	r1, #204	; 0xcc
 800181a:	f7fe fe5b 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 800181e:	2305      	movs	r3, #5
 8001820:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001824:	e010      	b.n	8001848 <vumetro+0x1318>
		Set_Pixel(j+numled,0,0,0);
 8001826:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800182a:	b2da      	uxtb	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	4413      	add	r3, r2
 8001832:	b2d8      	uxtb	r0, r3
 8001834:	2300      	movs	r3, #0
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	f7fe fe4b 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 800183e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001842:	3301      	adds	r3, #1
 8001844:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001848:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800184c:	2b07      	cmp	r3, #7
 800184e:	d9ea      	bls.n	8001826 <vumetro+0x12f6>
	}
	Set_Pixel(8+numled,0,76,153);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	3308      	adds	r3, #8
 8001856:	b2d8      	uxtb	r0, r3
 8001858:	2399      	movs	r3, #153	; 0x99
 800185a:	224c      	movs	r2, #76	; 0x4c
 800185c:	2100      	movs	r1, #0
 800185e:	f7fe fe39 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	3309      	adds	r3, #9
 8001868:	b2d8      	uxtb	r0, r3
 800186a:	2399      	movs	r3, #153	; 0x99
 800186c:	2299      	movs	r2, #153	; 0x99
 800186e:	2100      	movs	r1, #0
 8001870:	f7fe fe30 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	330a      	adds	r3, #10
 800187a:	b2d8      	uxtb	r0, r3
 800187c:	23cc      	movs	r3, #204	; 0xcc
 800187e:	2200      	movs	r2, #0
 8001880:	2166      	movs	r1, #102	; 0x66
 8001882:	f7fe fe27 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	330b      	adds	r3, #11
 800188c:	b2d8      	uxtb	r0, r3
 800188e:	2300      	movs	r3, #0
 8001890:	2200      	movs	r2, #0
 8001892:	21cc      	movs	r1, #204	; 0xcc
 8001894:	f7fe fe1e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	330c      	adds	r3, #12
 800189e:	b2d8      	uxtb	r0, r3
 80018a0:	2300      	movs	r3, #0
 80018a2:	2200      	movs	r2, #0
 80018a4:	21cc      	movs	r1, #204	; 0xcc
 80018a6:	f7fe fe15 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 80018aa:	230d      	movs	r3, #13
 80018ac:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80018b0:	e010      	b.n	80018d4 <vumetro+0x13a4>
		Set_Pixel(j+numled,0,0,0);
 80018b2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	4413      	add	r3, r2
 80018be:	b2d8      	uxtb	r0, r3
 80018c0:	2300      	movs	r3, #0
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	f7fe fe05 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 80018ca:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018ce:	3301      	adds	r3, #1
 80018d0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80018d4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d9ea      	bls.n	80018b2 <vumetro+0x1382>
	}
	break;
 80018dc:	e1ba      	b.n	8001c54 <vumetro+0x1724>
case 6:
	Set_Pixel(0+numled,0,76,153);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	b2d8      	uxtb	r0, r3
 80018e2:	2399      	movs	r3, #153	; 0x99
 80018e4:	224c      	movs	r2, #76	; 0x4c
 80018e6:	2100      	movs	r1, #0
 80018e8:	f7fe fdf4 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	3301      	adds	r3, #1
 80018f2:	b2d8      	uxtb	r0, r3
 80018f4:	2399      	movs	r3, #153	; 0x99
 80018f6:	2299      	movs	r2, #153	; 0x99
 80018f8:	2100      	movs	r1, #0
 80018fa:	f7fe fdeb 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	3302      	adds	r3, #2
 8001904:	b2d8      	uxtb	r0, r3
 8001906:	23cc      	movs	r3, #204	; 0xcc
 8001908:	2200      	movs	r2, #0
 800190a:	2166      	movs	r1, #102	; 0x66
 800190c:	f7fe fde2 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	3303      	adds	r3, #3
 8001916:	b2d8      	uxtb	r0, r3
 8001918:	2300      	movs	r3, #0
 800191a:	2200      	movs	r2, #0
 800191c:	21cc      	movs	r1, #204	; 0xcc
 800191e:	f7fe fdd9 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	3304      	adds	r3, #4
 8001928:	b2d8      	uxtb	r0, r3
 800192a:	2300      	movs	r3, #0
 800192c:	2200      	movs	r2, #0
 800192e:	21cc      	movs	r1, #204	; 0xcc
 8001930:	f7fe fdd0 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	3305      	adds	r3, #5
 800193a:	b2d8      	uxtb	r0, r3
 800193c:	2333      	movs	r3, #51	; 0x33
 800193e:	22ff      	movs	r2, #255	; 0xff
 8001940:	21ff      	movs	r1, #255	; 0xff
 8001942:	f7fe fdc7 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8001946:	2306      	movs	r3, #6
 8001948:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800194c:	e010      	b.n	8001970 <vumetro+0x1440>
		Set_Pixel(j+numled,0,0,0);
 800194e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001952:	b2da      	uxtb	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	4413      	add	r3, r2
 800195a:	b2d8      	uxtb	r0, r3
 800195c:	2300      	movs	r3, #0
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	f7fe fdb7 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8001966:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800196a:	3301      	adds	r3, #1
 800196c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001970:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001974:	2b07      	cmp	r3, #7
 8001976:	d9ea      	bls.n	800194e <vumetro+0x141e>
	}
	Set_Pixel(8+numled,0,76,153);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	3308      	adds	r3, #8
 800197e:	b2d8      	uxtb	r0, r3
 8001980:	2399      	movs	r3, #153	; 0x99
 8001982:	224c      	movs	r2, #76	; 0x4c
 8001984:	2100      	movs	r1, #0
 8001986:	f7fe fda5 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	3309      	adds	r3, #9
 8001990:	b2d8      	uxtb	r0, r3
 8001992:	2399      	movs	r3, #153	; 0x99
 8001994:	2299      	movs	r2, #153	; 0x99
 8001996:	2100      	movs	r1, #0
 8001998:	f7fe fd9c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	330a      	adds	r3, #10
 80019a2:	b2d8      	uxtb	r0, r3
 80019a4:	23cc      	movs	r3, #204	; 0xcc
 80019a6:	2200      	movs	r2, #0
 80019a8:	2166      	movs	r1, #102	; 0x66
 80019aa:	f7fe fd93 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	330b      	adds	r3, #11
 80019b4:	b2d8      	uxtb	r0, r3
 80019b6:	2300      	movs	r3, #0
 80019b8:	2200      	movs	r2, #0
 80019ba:	21cc      	movs	r1, #204	; 0xcc
 80019bc:	f7fe fd8a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	330c      	adds	r3, #12
 80019c6:	b2d8      	uxtb	r0, r3
 80019c8:	2300      	movs	r3, #0
 80019ca:	2200      	movs	r2, #0
 80019cc:	21cc      	movs	r1, #204	; 0xcc
 80019ce:	f7fe fd81 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	330d      	adds	r3, #13
 80019d8:	b2d8      	uxtb	r0, r3
 80019da:	2333      	movs	r3, #51	; 0x33
 80019dc:	22ff      	movs	r2, #255	; 0xff
 80019de:	21ff      	movs	r1, #255	; 0xff
 80019e0:	f7fe fd78 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 80019e4:	230e      	movs	r3, #14
 80019e6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80019ea:	e010      	b.n	8001a0e <vumetro+0x14de>
		Set_Pixel(j+numled,0,0,0);
 80019ec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	b2d8      	uxtb	r0, r3
 80019fa:	2300      	movs	r3, #0
 80019fc:	2200      	movs	r2, #0
 80019fe:	2100      	movs	r1, #0
 8001a00:	f7fe fd68 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8001a04:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001a08:	3301      	adds	r3, #1
 8001a0a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8001a0e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001a12:	2b0f      	cmp	r3, #15
 8001a14:	d9ea      	bls.n	80019ec <vumetro+0x14bc>
	}
	break;
 8001a16:	e11d      	b.n	8001c54 <vumetro+0x1724>
case 7:
	Set_Pixel(0+numled,0,76,153);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	b2d8      	uxtb	r0, r3
 8001a1c:	2399      	movs	r3, #153	; 0x99
 8001a1e:	224c      	movs	r2, #76	; 0x4c
 8001a20:	2100      	movs	r1, #0
 8001a22:	f7fe fd57 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b2d8      	uxtb	r0, r3
 8001a2e:	2399      	movs	r3, #153	; 0x99
 8001a30:	2299      	movs	r2, #153	; 0x99
 8001a32:	2100      	movs	r1, #0
 8001a34:	f7fe fd4e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	b2d8      	uxtb	r0, r3
 8001a40:	23cc      	movs	r3, #204	; 0xcc
 8001a42:	2200      	movs	r2, #0
 8001a44:	2166      	movs	r1, #102	; 0x66
 8001a46:	f7fe fd45 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	3303      	adds	r3, #3
 8001a50:	b2d8      	uxtb	r0, r3
 8001a52:	2300      	movs	r3, #0
 8001a54:	2200      	movs	r2, #0
 8001a56:	21cc      	movs	r1, #204	; 0xcc
 8001a58:	f7fe fd3c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	3304      	adds	r3, #4
 8001a62:	b2d8      	uxtb	r0, r3
 8001a64:	2300      	movs	r3, #0
 8001a66:	2200      	movs	r2, #0
 8001a68:	21cc      	movs	r1, #204	; 0xcc
 8001a6a:	f7fe fd33 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	3305      	adds	r3, #5
 8001a74:	b2d8      	uxtb	r0, r3
 8001a76:	2333      	movs	r3, #51	; 0x33
 8001a78:	22ff      	movs	r2, #255	; 0xff
 8001a7a:	21ff      	movs	r1, #255	; 0xff
 8001a7c:	f7fe fd2a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	3306      	adds	r3, #6
 8001a86:	b2d8      	uxtb	r0, r3
 8001a88:	2300      	movs	r3, #0
 8001a8a:	22cc      	movs	r2, #204	; 0xcc
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	f7fe fd21 	bl	80004d4 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	3307      	adds	r3, #7
 8001a98:	b2d8      	uxtb	r0, r3
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	f7fe fd18 	bl	80004d4 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	3308      	adds	r3, #8
 8001aaa:	b2d8      	uxtb	r0, r3
 8001aac:	2399      	movs	r3, #153	; 0x99
 8001aae:	224c      	movs	r2, #76	; 0x4c
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	f7fe fd0f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	3309      	adds	r3, #9
 8001abc:	b2d8      	uxtb	r0, r3
 8001abe:	2399      	movs	r3, #153	; 0x99
 8001ac0:	2299      	movs	r2, #153	; 0x99
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	f7fe fd06 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	330a      	adds	r3, #10
 8001ace:	b2d8      	uxtb	r0, r3
 8001ad0:	23cc      	movs	r3, #204	; 0xcc
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2166      	movs	r1, #102	; 0x66
 8001ad6:	f7fe fcfd 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	330b      	adds	r3, #11
 8001ae0:	b2d8      	uxtb	r0, r3
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	21cc      	movs	r1, #204	; 0xcc
 8001ae8:	f7fe fcf4 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	330c      	adds	r3, #12
 8001af2:	b2d8      	uxtb	r0, r3
 8001af4:	2300      	movs	r3, #0
 8001af6:	2200      	movs	r2, #0
 8001af8:	21cc      	movs	r1, #204	; 0xcc
 8001afa:	f7fe fceb 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	330d      	adds	r3, #13
 8001b04:	b2d8      	uxtb	r0, r3
 8001b06:	2333      	movs	r3, #51	; 0x33
 8001b08:	22ff      	movs	r2, #255	; 0xff
 8001b0a:	21ff      	movs	r1, #255	; 0xff
 8001b0c:	f7fe fce2 	bl	80004d4 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	330e      	adds	r3, #14
 8001b16:	b2d8      	uxtb	r0, r3
 8001b18:	2300      	movs	r3, #0
 8001b1a:	22cc      	movs	r2, #204	; 0xcc
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	f7fe fcd9 	bl	80004d4 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	330f      	adds	r3, #15
 8001b28:	b2d8      	uxtb	r0, r3
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2100      	movs	r1, #0
 8001b30:	f7fe fcd0 	bl	80004d4 <Set_Pixel>
	break;
 8001b34:	e08e      	b.n	8001c54 <vumetro+0x1724>
default:
	Set_Pixel(0+numled,0,76,153);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	b2d8      	uxtb	r0, r3
 8001b3a:	2399      	movs	r3, #153	; 0x99
 8001b3c:	224c      	movs	r2, #76	; 0x4c
 8001b3e:	2100      	movs	r1, #0
 8001b40:	f7fe fcc8 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	3301      	adds	r3, #1
 8001b4a:	b2d8      	uxtb	r0, r3
 8001b4c:	2399      	movs	r3, #153	; 0x99
 8001b4e:	2299      	movs	r2, #153	; 0x99
 8001b50:	2100      	movs	r1, #0
 8001b52:	f7fe fcbf 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	b2d8      	uxtb	r0, r3
 8001b5e:	23cc      	movs	r3, #204	; 0xcc
 8001b60:	2200      	movs	r2, #0
 8001b62:	2166      	movs	r1, #102	; 0x66
 8001b64:	f7fe fcb6 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	3303      	adds	r3, #3
 8001b6e:	b2d8      	uxtb	r0, r3
 8001b70:	2300      	movs	r3, #0
 8001b72:	2200      	movs	r2, #0
 8001b74:	21cc      	movs	r1, #204	; 0xcc
 8001b76:	f7fe fcad 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	3304      	adds	r3, #4
 8001b80:	b2d8      	uxtb	r0, r3
 8001b82:	2300      	movs	r3, #0
 8001b84:	2200      	movs	r2, #0
 8001b86:	21cc      	movs	r1, #204	; 0xcc
 8001b88:	f7fe fca4 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	3305      	adds	r3, #5
 8001b92:	b2d8      	uxtb	r0, r3
 8001b94:	2333      	movs	r3, #51	; 0x33
 8001b96:	22ff      	movs	r2, #255	; 0xff
 8001b98:	21ff      	movs	r1, #255	; 0xff
 8001b9a:	f7fe fc9b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	3306      	adds	r3, #6
 8001ba4:	b2d8      	uxtb	r0, r3
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	22cc      	movs	r2, #204	; 0xcc
 8001baa:	2100      	movs	r1, #0
 8001bac:	f7fe fc92 	bl	80004d4 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	3307      	adds	r3, #7
 8001bb6:	b2d8      	uxtb	r0, r3
 8001bb8:	2300      	movs	r3, #0
 8001bba:	22cc      	movs	r2, #204	; 0xcc
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	f7fe fc89 	bl	80004d4 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	3308      	adds	r3, #8
 8001bc8:	b2d8      	uxtb	r0, r3
 8001bca:	2399      	movs	r3, #153	; 0x99
 8001bcc:	224c      	movs	r2, #76	; 0x4c
 8001bce:	2100      	movs	r1, #0
 8001bd0:	f7fe fc80 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	3309      	adds	r3, #9
 8001bda:	b2d8      	uxtb	r0, r3
 8001bdc:	2399      	movs	r3, #153	; 0x99
 8001bde:	2299      	movs	r2, #153	; 0x99
 8001be0:	2100      	movs	r1, #0
 8001be2:	f7fe fc77 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	330a      	adds	r3, #10
 8001bec:	b2d8      	uxtb	r0, r3
 8001bee:	23cc      	movs	r3, #204	; 0xcc
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2166      	movs	r1, #102	; 0x66
 8001bf4:	f7fe fc6e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	330b      	adds	r3, #11
 8001bfe:	b2d8      	uxtb	r0, r3
 8001c00:	2300      	movs	r3, #0
 8001c02:	2200      	movs	r2, #0
 8001c04:	21cc      	movs	r1, #204	; 0xcc
 8001c06:	f7fe fc65 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	330c      	adds	r3, #12
 8001c10:	b2d8      	uxtb	r0, r3
 8001c12:	2300      	movs	r3, #0
 8001c14:	2200      	movs	r2, #0
 8001c16:	21cc      	movs	r1, #204	; 0xcc
 8001c18:	f7fe fc5c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	330d      	adds	r3, #13
 8001c22:	b2d8      	uxtb	r0, r3
 8001c24:	2333      	movs	r3, #51	; 0x33
 8001c26:	22ff      	movs	r2, #255	; 0xff
 8001c28:	21ff      	movs	r1, #255	; 0xff
 8001c2a:	f7fe fc53 	bl	80004d4 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	330e      	adds	r3, #14
 8001c34:	b2d8      	uxtb	r0, r3
 8001c36:	2300      	movs	r3, #0
 8001c38:	22cc      	movs	r2, #204	; 0xcc
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	f7fe fc4a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	330f      	adds	r3, #15
 8001c46:	b2d8      	uxtb	r0, r3
 8001c48:	2300      	movs	r3, #0
 8001c4a:	22cc      	movs	r2, #204	; 0xcc
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	f7fe fc41 	bl	80004d4 <Set_Pixel>
	break;
 8001c52:	bf00      	nop
}

numled=48;
 8001c54:	2330      	movs	r3, #48	; 0x30
 8001c56:	60fb      	str	r3, [r7, #12]
switch(banda4){
 8001c58:	793b      	ldrb	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	2b06      	cmp	r3, #6
 8001c5e:	f200 8340 	bhi.w	80022e2 <vumetro+0x1db2>
 8001c62:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <vumetro+0x1738>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001c85 	.word	0x08001c85
 8001c6c:	08001d0b 	.word	0x08001d0b
 8001c70:	08001db5 	.word	0x08001db5
 8001c74:	08001e83 	.word	0x08001e83
 8001c78:	08001f75 	.word	0x08001f75
 8001c7c:	0800208b 	.word	0x0800208b
 8001c80:	080021c5 	.word	0x080021c5
case 1||0:
	Set_Pixel(0+numled,76,0,153);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	b2d8      	uxtb	r0, r3
 8001c88:	2399      	movs	r3, #153	; 0x99
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	214c      	movs	r1, #76	; 0x4c
 8001c8e:	f7fe fc21 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8001c92:	2301      	movs	r3, #1
 8001c94:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001c98:	e010      	b.n	8001cbc <vumetro+0x178c>
		Set_Pixel(j+numled,0,0,0);
 8001c9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	b2d8      	uxtb	r0, r3
 8001ca8:	2300      	movs	r3, #0
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	f7fe fc11 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8001cb2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001cbc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001cc0:	2b07      	cmp	r3, #7
 8001cc2:	d9ea      	bls.n	8001c9a <vumetro+0x176a>
	}
	Set_Pixel(8+numled,76,0,153);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	3308      	adds	r3, #8
 8001cca:	b2d8      	uxtb	r0, r3
 8001ccc:	2399      	movs	r3, #153	; 0x99
 8001cce:	2200      	movs	r2, #0
 8001cd0:	214c      	movs	r1, #76	; 0x4c
 8001cd2:	f7fe fbff 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8001cd6:	2309      	movs	r3, #9
 8001cd8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8001cdc:	e010      	b.n	8001d00 <vumetro+0x17d0>
		Set_Pixel(j+numled,0,0,0);
 8001cde:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	b2d8      	uxtb	r0, r3
 8001cec:	2300      	movs	r3, #0
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	f7fe fbef 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8001cf6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8001d00:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8001d04:	2b0f      	cmp	r3, #15
 8001d06:	d9ea      	bls.n	8001cde <vumetro+0x17ae>
	}
	break;
 8001d08:	e37a      	b.n	8002400 <vumetro+0x1ed0>
case 2:
	Set_Pixel(0+numled,0,76,153);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	b2d8      	uxtb	r0, r3
 8001d0e:	2399      	movs	r3, #153	; 0x99
 8001d10:	224c      	movs	r2, #76	; 0x4c
 8001d12:	2100      	movs	r1, #0
 8001d14:	f7fe fbde 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	b2d8      	uxtb	r0, r3
 8001d20:	2399      	movs	r3, #153	; 0x99
 8001d22:	2299      	movs	r2, #153	; 0x99
 8001d24:	2100      	movs	r1, #0
 8001d26:	f7fe fbd5 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8001d30:	e010      	b.n	8001d54 <vumetro+0x1824>
		Set_Pixel(j+numled,0,0,0);
 8001d32:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	b2d8      	uxtb	r0, r3
 8001d40:	2300      	movs	r3, #0
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	f7fe fbc5 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8001d4a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8001d54:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8001d58:	2b07      	cmp	r3, #7
 8001d5a:	d9ea      	bls.n	8001d32 <vumetro+0x1802>
	}
	Set_Pixel(8+numled,0,76,153);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	3308      	adds	r3, #8
 8001d62:	b2d8      	uxtb	r0, r3
 8001d64:	2399      	movs	r3, #153	; 0x99
 8001d66:	224c      	movs	r2, #76	; 0x4c
 8001d68:	2100      	movs	r1, #0
 8001d6a:	f7fe fbb3 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	3309      	adds	r3, #9
 8001d74:	b2d8      	uxtb	r0, r3
 8001d76:	2399      	movs	r3, #153	; 0x99
 8001d78:	2299      	movs	r2, #153	; 0x99
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	f7fe fbaa 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8001d80:	230a      	movs	r3, #10
 8001d82:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8001d86:	e010      	b.n	8001daa <vumetro+0x187a>
		Set_Pixel(j+numled,0,0,0);
 8001d88:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	b2d8      	uxtb	r0, r3
 8001d96:	2300      	movs	r3, #0
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	f7fe fb9a 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8001da0:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001da4:	3301      	adds	r3, #1
 8001da6:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8001daa:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001dae:	2b0f      	cmp	r3, #15
 8001db0:	d9ea      	bls.n	8001d88 <vumetro+0x1858>
	}
	break;
 8001db2:	e325      	b.n	8002400 <vumetro+0x1ed0>

case 3:
	Set_Pixel(0+numled,0,76,153);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	b2d8      	uxtb	r0, r3
 8001db8:	2399      	movs	r3, #153	; 0x99
 8001dba:	224c      	movs	r2, #76	; 0x4c
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	f7fe fb89 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	b2d8      	uxtb	r0, r3
 8001dca:	2399      	movs	r3, #153	; 0x99
 8001dcc:	2299      	movs	r2, #153	; 0x99
 8001dce:	2100      	movs	r1, #0
 8001dd0:	f7fe fb80 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	3302      	adds	r3, #2
 8001dda:	b2d8      	uxtb	r0, r3
 8001ddc:	23cc      	movs	r3, #204	; 0xcc
 8001dde:	2200      	movs	r2, #0
 8001de0:	2166      	movs	r1, #102	; 0x66
 8001de2:	f7fe fb77 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8001de6:	2303      	movs	r3, #3
 8001de8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001dec:	e010      	b.n	8001e10 <vumetro+0x18e0>
		Set_Pixel(j+numled,0,0,0);
 8001dee:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	b2d8      	uxtb	r0, r3
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	f7fe fb67 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8001e06:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001e10:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001e14:	2b07      	cmp	r3, #7
 8001e16:	d9ea      	bls.n	8001dee <vumetro+0x18be>
	}
	Set_Pixel(8+numled,0,76,153);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	3308      	adds	r3, #8
 8001e1e:	b2d8      	uxtb	r0, r3
 8001e20:	2399      	movs	r3, #153	; 0x99
 8001e22:	224c      	movs	r2, #76	; 0x4c
 8001e24:	2100      	movs	r1, #0
 8001e26:	f7fe fb55 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	3309      	adds	r3, #9
 8001e30:	b2d8      	uxtb	r0, r3
 8001e32:	2399      	movs	r3, #153	; 0x99
 8001e34:	2299      	movs	r2, #153	; 0x99
 8001e36:	2100      	movs	r1, #0
 8001e38:	f7fe fb4c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	330a      	adds	r3, #10
 8001e42:	b2d8      	uxtb	r0, r3
 8001e44:	23cc      	movs	r3, #204	; 0xcc
 8001e46:	2200      	movs	r2, #0
 8001e48:	2166      	movs	r1, #102	; 0x66
 8001e4a:	f7fe fb43 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8001e4e:	230b      	movs	r3, #11
 8001e50:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8001e54:	e010      	b.n	8001e78 <vumetro+0x1948>
		Set_Pixel(j+numled,0,0,0);
 8001e56:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	4413      	add	r3, r2
 8001e62:	b2d8      	uxtb	r0, r3
 8001e64:	2300      	movs	r3, #0
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	f7fe fb33 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8001e6e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001e72:	3301      	adds	r3, #1
 8001e74:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8001e78:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001e7c:	2b0f      	cmp	r3, #15
 8001e7e:	d9ea      	bls.n	8001e56 <vumetro+0x1926>
	}
	break;
 8001e80:	e2be      	b.n	8002400 <vumetro+0x1ed0>
case 4:
	Set_Pixel(0+numled,0,76,153);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	b2d8      	uxtb	r0, r3
 8001e86:	2399      	movs	r3, #153	; 0x99
 8001e88:	224c      	movs	r2, #76	; 0x4c
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	f7fe fb22 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	3301      	adds	r3, #1
 8001e96:	b2d8      	uxtb	r0, r3
 8001e98:	2399      	movs	r3, #153	; 0x99
 8001e9a:	2299      	movs	r2, #153	; 0x99
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	f7fe fb19 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	b2d8      	uxtb	r0, r3
 8001eaa:	23cc      	movs	r3, #204	; 0xcc
 8001eac:	2200      	movs	r2, #0
 8001eae:	2166      	movs	r1, #102	; 0x66
 8001eb0:	f7fe fb10 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	3303      	adds	r3, #3
 8001eba:	b2d8      	uxtb	r0, r3
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	21cc      	movs	r1, #204	; 0xcc
 8001ec2:	f7fe fb07 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8001ecc:	e010      	b.n	8001ef0 <vumetro+0x19c0>
		Set_Pixel(j+numled,0,0,0);
 8001ece:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	b2d8      	uxtb	r0, r3
 8001edc:	2300      	movs	r3, #0
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	f7fe faf7 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8001ee6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001eea:	3301      	adds	r3, #1
 8001eec:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8001ef0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001ef4:	2b07      	cmp	r3, #7
 8001ef6:	d9ea      	bls.n	8001ece <vumetro+0x199e>
	}
	Set_Pixel(8+numled,0,76,153);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	3308      	adds	r3, #8
 8001efe:	b2d8      	uxtb	r0, r3
 8001f00:	2399      	movs	r3, #153	; 0x99
 8001f02:	224c      	movs	r2, #76	; 0x4c
 8001f04:	2100      	movs	r1, #0
 8001f06:	f7fe fae5 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	3309      	adds	r3, #9
 8001f10:	b2d8      	uxtb	r0, r3
 8001f12:	2399      	movs	r3, #153	; 0x99
 8001f14:	2299      	movs	r2, #153	; 0x99
 8001f16:	2100      	movs	r1, #0
 8001f18:	f7fe fadc 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	330a      	adds	r3, #10
 8001f22:	b2d8      	uxtb	r0, r3
 8001f24:	23cc      	movs	r3, #204	; 0xcc
 8001f26:	2200      	movs	r2, #0
 8001f28:	2166      	movs	r1, #102	; 0x66
 8001f2a:	f7fe fad3 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	330b      	adds	r3, #11
 8001f34:	b2d8      	uxtb	r0, r3
 8001f36:	2300      	movs	r3, #0
 8001f38:	2200      	movs	r2, #0
 8001f3a:	21cc      	movs	r1, #204	; 0xcc
 8001f3c:	f7fe faca 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8001f40:	230c      	movs	r3, #12
 8001f42:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8001f46:	e010      	b.n	8001f6a <vumetro+0x1a3a>
		Set_Pixel(j+numled,0,0,0);
 8001f48:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	b2d8      	uxtb	r0, r3
 8001f56:	2300      	movs	r3, #0
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	f7fe faba 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8001f60:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001f64:	3301      	adds	r3, #1
 8001f66:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8001f6a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	d9ea      	bls.n	8001f48 <vumetro+0x1a18>
	}
	break;
 8001f72:	e245      	b.n	8002400 <vumetro+0x1ed0>
case 5:
	Set_Pixel(0+numled,0,76,153);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	b2d8      	uxtb	r0, r3
 8001f78:	2399      	movs	r3, #153	; 0x99
 8001f7a:	224c      	movs	r2, #76	; 0x4c
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	f7fe faa9 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	3301      	adds	r3, #1
 8001f88:	b2d8      	uxtb	r0, r3
 8001f8a:	2399      	movs	r3, #153	; 0x99
 8001f8c:	2299      	movs	r2, #153	; 0x99
 8001f8e:	2100      	movs	r1, #0
 8001f90:	f7fe faa0 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	3302      	adds	r3, #2
 8001f9a:	b2d8      	uxtb	r0, r3
 8001f9c:	23cc      	movs	r3, #204	; 0xcc
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2166      	movs	r1, #102	; 0x66
 8001fa2:	f7fe fa97 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	3303      	adds	r3, #3
 8001fac:	b2d8      	uxtb	r0, r3
 8001fae:	2300      	movs	r3, #0
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	21cc      	movs	r1, #204	; 0xcc
 8001fb4:	f7fe fa8e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	b2d8      	uxtb	r0, r3
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	21cc      	movs	r1, #204	; 0xcc
 8001fc6:	f7fe fa85 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8001fca:	2305      	movs	r3, #5
 8001fcc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8001fd0:	e010      	b.n	8001ff4 <vumetro+0x1ac4>
		Set_Pixel(j+numled,0,0,0);
 8001fd2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	b2d8      	uxtb	r0, r3
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	f7fe fa75 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8001fea:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8001ff4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001ff8:	2b07      	cmp	r3, #7
 8001ffa:	d9ea      	bls.n	8001fd2 <vumetro+0x1aa2>
	}
	Set_Pixel(8+numled,0,76,153);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	3308      	adds	r3, #8
 8002002:	b2d8      	uxtb	r0, r3
 8002004:	2399      	movs	r3, #153	; 0x99
 8002006:	224c      	movs	r2, #76	; 0x4c
 8002008:	2100      	movs	r1, #0
 800200a:	f7fe fa63 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	3309      	adds	r3, #9
 8002014:	b2d8      	uxtb	r0, r3
 8002016:	2399      	movs	r3, #153	; 0x99
 8002018:	2299      	movs	r2, #153	; 0x99
 800201a:	2100      	movs	r1, #0
 800201c:	f7fe fa5a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	330a      	adds	r3, #10
 8002026:	b2d8      	uxtb	r0, r3
 8002028:	23cc      	movs	r3, #204	; 0xcc
 800202a:	2200      	movs	r2, #0
 800202c:	2166      	movs	r1, #102	; 0x66
 800202e:	f7fe fa51 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	330b      	adds	r3, #11
 8002038:	b2d8      	uxtb	r0, r3
 800203a:	2300      	movs	r3, #0
 800203c:	2200      	movs	r2, #0
 800203e:	21cc      	movs	r1, #204	; 0xcc
 8002040:	f7fe fa48 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	330c      	adds	r3, #12
 800204a:	b2d8      	uxtb	r0, r3
 800204c:	2300      	movs	r3, #0
 800204e:	2200      	movs	r2, #0
 8002050:	21cc      	movs	r1, #204	; 0xcc
 8002052:	f7fe fa3f 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8002056:	230d      	movs	r3, #13
 8002058:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800205c:	e010      	b.n	8002080 <vumetro+0x1b50>
		Set_Pixel(j+numled,0,0,0);
 800205e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002062:	b2da      	uxtb	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	4413      	add	r3, r2
 800206a:	b2d8      	uxtb	r0, r3
 800206c:	2300      	movs	r3, #0
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	f7fe fa2f 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8002076:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800207a:	3301      	adds	r3, #1
 800207c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002080:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002084:	2b0f      	cmp	r3, #15
 8002086:	d9ea      	bls.n	800205e <vumetro+0x1b2e>
	}
	break;
 8002088:	e1ba      	b.n	8002400 <vumetro+0x1ed0>
case 6:
	Set_Pixel(0+numled,0,76,153);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	b2d8      	uxtb	r0, r3
 800208e:	2399      	movs	r3, #153	; 0x99
 8002090:	224c      	movs	r2, #76	; 0x4c
 8002092:	2100      	movs	r1, #0
 8002094:	f7fe fa1e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	3301      	adds	r3, #1
 800209e:	b2d8      	uxtb	r0, r3
 80020a0:	2399      	movs	r3, #153	; 0x99
 80020a2:	2299      	movs	r2, #153	; 0x99
 80020a4:	2100      	movs	r1, #0
 80020a6:	f7fe fa15 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	3302      	adds	r3, #2
 80020b0:	b2d8      	uxtb	r0, r3
 80020b2:	23cc      	movs	r3, #204	; 0xcc
 80020b4:	2200      	movs	r2, #0
 80020b6:	2166      	movs	r1, #102	; 0x66
 80020b8:	f7fe fa0c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	3303      	adds	r3, #3
 80020c2:	b2d8      	uxtb	r0, r3
 80020c4:	2300      	movs	r3, #0
 80020c6:	2200      	movs	r2, #0
 80020c8:	21cc      	movs	r1, #204	; 0xcc
 80020ca:	f7fe fa03 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	3304      	adds	r3, #4
 80020d4:	b2d8      	uxtb	r0, r3
 80020d6:	2300      	movs	r3, #0
 80020d8:	2200      	movs	r2, #0
 80020da:	21cc      	movs	r1, #204	; 0xcc
 80020dc:	f7fe f9fa 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	3305      	adds	r3, #5
 80020e6:	b2d8      	uxtb	r0, r3
 80020e8:	2333      	movs	r3, #51	; 0x33
 80020ea:	22ff      	movs	r2, #255	; 0xff
 80020ec:	21ff      	movs	r1, #255	; 0xff
 80020ee:	f7fe f9f1 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 80020f2:	2306      	movs	r3, #6
 80020f4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 80020f8:	e010      	b.n	800211c <vumetro+0x1bec>
		Set_Pixel(j+numled,0,0,0);
 80020fa:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	4413      	add	r3, r2
 8002106:	b2d8      	uxtb	r0, r3
 8002108:	2300      	movs	r3, #0
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	f7fe f9e1 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8002112:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002116:	3301      	adds	r3, #1
 8002118:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800211c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002120:	2b07      	cmp	r3, #7
 8002122:	d9ea      	bls.n	80020fa <vumetro+0x1bca>
	}
	Set_Pixel(8+numled,0,76,153);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	3308      	adds	r3, #8
 800212a:	b2d8      	uxtb	r0, r3
 800212c:	2399      	movs	r3, #153	; 0x99
 800212e:	224c      	movs	r2, #76	; 0x4c
 8002130:	2100      	movs	r1, #0
 8002132:	f7fe f9cf 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	3309      	adds	r3, #9
 800213c:	b2d8      	uxtb	r0, r3
 800213e:	2399      	movs	r3, #153	; 0x99
 8002140:	2299      	movs	r2, #153	; 0x99
 8002142:	2100      	movs	r1, #0
 8002144:	f7fe f9c6 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	330a      	adds	r3, #10
 800214e:	b2d8      	uxtb	r0, r3
 8002150:	23cc      	movs	r3, #204	; 0xcc
 8002152:	2200      	movs	r2, #0
 8002154:	2166      	movs	r1, #102	; 0x66
 8002156:	f7fe f9bd 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	330b      	adds	r3, #11
 8002160:	b2d8      	uxtb	r0, r3
 8002162:	2300      	movs	r3, #0
 8002164:	2200      	movs	r2, #0
 8002166:	21cc      	movs	r1, #204	; 0xcc
 8002168:	f7fe f9b4 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	330c      	adds	r3, #12
 8002172:	b2d8      	uxtb	r0, r3
 8002174:	2300      	movs	r3, #0
 8002176:	2200      	movs	r2, #0
 8002178:	21cc      	movs	r1, #204	; 0xcc
 800217a:	f7fe f9ab 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	330d      	adds	r3, #13
 8002184:	b2d8      	uxtb	r0, r3
 8002186:	2333      	movs	r3, #51	; 0x33
 8002188:	22ff      	movs	r2, #255	; 0xff
 800218a:	21ff      	movs	r1, #255	; 0xff
 800218c:	f7fe f9a2 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8002190:	230e      	movs	r3, #14
 8002192:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002196:	e010      	b.n	80021ba <vumetro+0x1c8a>
		Set_Pixel(j+numled,0,0,0);
 8002198:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	b2d8      	uxtb	r0, r3
 80021a6:	2300      	movs	r3, #0
 80021a8:	2200      	movs	r2, #0
 80021aa:	2100      	movs	r1, #0
 80021ac:	f7fe f992 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 80021b0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80021b4:	3301      	adds	r3, #1
 80021b6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 80021ba:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80021be:	2b0f      	cmp	r3, #15
 80021c0:	d9ea      	bls.n	8002198 <vumetro+0x1c68>
	}
	break;
 80021c2:	e11d      	b.n	8002400 <vumetro+0x1ed0>
case 7:
	Set_Pixel(0+numled,0,76,153);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	b2d8      	uxtb	r0, r3
 80021c8:	2399      	movs	r3, #153	; 0x99
 80021ca:	224c      	movs	r2, #76	; 0x4c
 80021cc:	2100      	movs	r1, #0
 80021ce:	f7fe f981 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	b2d8      	uxtb	r0, r3
 80021da:	2399      	movs	r3, #153	; 0x99
 80021dc:	2299      	movs	r2, #153	; 0x99
 80021de:	2100      	movs	r1, #0
 80021e0:	f7fe f978 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	3302      	adds	r3, #2
 80021ea:	b2d8      	uxtb	r0, r3
 80021ec:	23cc      	movs	r3, #204	; 0xcc
 80021ee:	2200      	movs	r2, #0
 80021f0:	2166      	movs	r1, #102	; 0x66
 80021f2:	f7fe f96f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	3303      	adds	r3, #3
 80021fc:	b2d8      	uxtb	r0, r3
 80021fe:	2300      	movs	r3, #0
 8002200:	2200      	movs	r2, #0
 8002202:	21cc      	movs	r1, #204	; 0xcc
 8002204:	f7fe f966 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	3304      	adds	r3, #4
 800220e:	b2d8      	uxtb	r0, r3
 8002210:	2300      	movs	r3, #0
 8002212:	2200      	movs	r2, #0
 8002214:	21cc      	movs	r1, #204	; 0xcc
 8002216:	f7fe f95d 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	3305      	adds	r3, #5
 8002220:	b2d8      	uxtb	r0, r3
 8002222:	2333      	movs	r3, #51	; 0x33
 8002224:	22ff      	movs	r2, #255	; 0xff
 8002226:	21ff      	movs	r1, #255	; 0xff
 8002228:	f7fe f954 	bl	80004d4 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	3306      	adds	r3, #6
 8002232:	b2d8      	uxtb	r0, r3
 8002234:	2300      	movs	r3, #0
 8002236:	22cc      	movs	r2, #204	; 0xcc
 8002238:	2100      	movs	r1, #0
 800223a:	f7fe f94b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	3307      	adds	r3, #7
 8002244:	b2d8      	uxtb	r0, r3
 8002246:	2300      	movs	r3, #0
 8002248:	2200      	movs	r2, #0
 800224a:	2100      	movs	r1, #0
 800224c:	f7fe f942 	bl	80004d4 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	3308      	adds	r3, #8
 8002256:	b2d8      	uxtb	r0, r3
 8002258:	2399      	movs	r3, #153	; 0x99
 800225a:	224c      	movs	r2, #76	; 0x4c
 800225c:	2100      	movs	r1, #0
 800225e:	f7fe f939 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	3309      	adds	r3, #9
 8002268:	b2d8      	uxtb	r0, r3
 800226a:	2399      	movs	r3, #153	; 0x99
 800226c:	2299      	movs	r2, #153	; 0x99
 800226e:	2100      	movs	r1, #0
 8002270:	f7fe f930 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	330a      	adds	r3, #10
 800227a:	b2d8      	uxtb	r0, r3
 800227c:	23cc      	movs	r3, #204	; 0xcc
 800227e:	2200      	movs	r2, #0
 8002280:	2166      	movs	r1, #102	; 0x66
 8002282:	f7fe f927 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	330b      	adds	r3, #11
 800228c:	b2d8      	uxtb	r0, r3
 800228e:	2300      	movs	r3, #0
 8002290:	2200      	movs	r2, #0
 8002292:	21cc      	movs	r1, #204	; 0xcc
 8002294:	f7fe f91e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	330c      	adds	r3, #12
 800229e:	b2d8      	uxtb	r0, r3
 80022a0:	2300      	movs	r3, #0
 80022a2:	2200      	movs	r2, #0
 80022a4:	21cc      	movs	r1, #204	; 0xcc
 80022a6:	f7fe f915 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	330d      	adds	r3, #13
 80022b0:	b2d8      	uxtb	r0, r3
 80022b2:	2333      	movs	r3, #51	; 0x33
 80022b4:	22ff      	movs	r2, #255	; 0xff
 80022b6:	21ff      	movs	r1, #255	; 0xff
 80022b8:	f7fe f90c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	330e      	adds	r3, #14
 80022c2:	b2d8      	uxtb	r0, r3
 80022c4:	2300      	movs	r3, #0
 80022c6:	22cc      	movs	r2, #204	; 0xcc
 80022c8:	2100      	movs	r1, #0
 80022ca:	f7fe f903 	bl	80004d4 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	330f      	adds	r3, #15
 80022d4:	b2d8      	uxtb	r0, r3
 80022d6:	2300      	movs	r3, #0
 80022d8:	2200      	movs	r2, #0
 80022da:	2100      	movs	r1, #0
 80022dc:	f7fe f8fa 	bl	80004d4 <Set_Pixel>
	break;
 80022e0:	e08e      	b.n	8002400 <vumetro+0x1ed0>
default:
	Set_Pixel(0+numled,0,76,153);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	b2d8      	uxtb	r0, r3
 80022e6:	2399      	movs	r3, #153	; 0x99
 80022e8:	224c      	movs	r2, #76	; 0x4c
 80022ea:	2100      	movs	r1, #0
 80022ec:	f7fe f8f2 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	b2d8      	uxtb	r0, r3
 80022f8:	2399      	movs	r3, #153	; 0x99
 80022fa:	2299      	movs	r2, #153	; 0x99
 80022fc:	2100      	movs	r1, #0
 80022fe:	f7fe f8e9 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	3302      	adds	r3, #2
 8002308:	b2d8      	uxtb	r0, r3
 800230a:	23cc      	movs	r3, #204	; 0xcc
 800230c:	2200      	movs	r2, #0
 800230e:	2166      	movs	r1, #102	; 0x66
 8002310:	f7fe f8e0 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	3303      	adds	r3, #3
 800231a:	b2d8      	uxtb	r0, r3
 800231c:	2300      	movs	r3, #0
 800231e:	2200      	movs	r2, #0
 8002320:	21cc      	movs	r1, #204	; 0xcc
 8002322:	f7fe f8d7 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	3304      	adds	r3, #4
 800232c:	b2d8      	uxtb	r0, r3
 800232e:	2300      	movs	r3, #0
 8002330:	2200      	movs	r2, #0
 8002332:	21cc      	movs	r1, #204	; 0xcc
 8002334:	f7fe f8ce 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	3305      	adds	r3, #5
 800233e:	b2d8      	uxtb	r0, r3
 8002340:	2333      	movs	r3, #51	; 0x33
 8002342:	22ff      	movs	r2, #255	; 0xff
 8002344:	21ff      	movs	r1, #255	; 0xff
 8002346:	f7fe f8c5 	bl	80004d4 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	3306      	adds	r3, #6
 8002350:	b2d8      	uxtb	r0, r3
 8002352:	2300      	movs	r3, #0
 8002354:	22cc      	movs	r2, #204	; 0xcc
 8002356:	2100      	movs	r1, #0
 8002358:	f7fe f8bc 	bl	80004d4 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	3307      	adds	r3, #7
 8002362:	b2d8      	uxtb	r0, r3
 8002364:	2300      	movs	r3, #0
 8002366:	22cc      	movs	r2, #204	; 0xcc
 8002368:	2100      	movs	r1, #0
 800236a:	f7fe f8b3 	bl	80004d4 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	3308      	adds	r3, #8
 8002374:	b2d8      	uxtb	r0, r3
 8002376:	2399      	movs	r3, #153	; 0x99
 8002378:	224c      	movs	r2, #76	; 0x4c
 800237a:	2100      	movs	r1, #0
 800237c:	f7fe f8aa 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	3309      	adds	r3, #9
 8002386:	b2d8      	uxtb	r0, r3
 8002388:	2399      	movs	r3, #153	; 0x99
 800238a:	2299      	movs	r2, #153	; 0x99
 800238c:	2100      	movs	r1, #0
 800238e:	f7fe f8a1 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	330a      	adds	r3, #10
 8002398:	b2d8      	uxtb	r0, r3
 800239a:	23cc      	movs	r3, #204	; 0xcc
 800239c:	2200      	movs	r2, #0
 800239e:	2166      	movs	r1, #102	; 0x66
 80023a0:	f7fe f898 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	330b      	adds	r3, #11
 80023aa:	b2d8      	uxtb	r0, r3
 80023ac:	2300      	movs	r3, #0
 80023ae:	2200      	movs	r2, #0
 80023b0:	21cc      	movs	r1, #204	; 0xcc
 80023b2:	f7fe f88f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	330c      	adds	r3, #12
 80023bc:	b2d8      	uxtb	r0, r3
 80023be:	2300      	movs	r3, #0
 80023c0:	2200      	movs	r2, #0
 80023c2:	21cc      	movs	r1, #204	; 0xcc
 80023c4:	f7fe f886 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	330d      	adds	r3, #13
 80023ce:	b2d8      	uxtb	r0, r3
 80023d0:	2333      	movs	r3, #51	; 0x33
 80023d2:	22ff      	movs	r2, #255	; 0xff
 80023d4:	21ff      	movs	r1, #255	; 0xff
 80023d6:	f7fe f87d 	bl	80004d4 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	330e      	adds	r3, #14
 80023e0:	b2d8      	uxtb	r0, r3
 80023e2:	2300      	movs	r3, #0
 80023e4:	22cc      	movs	r2, #204	; 0xcc
 80023e6:	2100      	movs	r1, #0
 80023e8:	f7fe f874 	bl	80004d4 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	330f      	adds	r3, #15
 80023f2:	b2d8      	uxtb	r0, r3
 80023f4:	2300      	movs	r3, #0
 80023f6:	22cc      	movs	r2, #204	; 0xcc
 80023f8:	2100      	movs	r1, #0
 80023fa:	f7fe f86b 	bl	80004d4 <Set_Pixel>
	break;
 80023fe:	bf00      	nop
}



numled=64;
 8002400:	2340      	movs	r3, #64	; 0x40
 8002402:	60fb      	str	r3, [r7, #12]
switch(banda5){
 8002404:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8002408:	3b01      	subs	r3, #1
 800240a:	2b07      	cmp	r3, #7
 800240c:	f200 83d2 	bhi.w	8002bb4 <vumetro+0x2684>
 8002410:	a201      	add	r2, pc, #4	; (adr r2, 8002418 <vumetro+0x1ee8>)
 8002412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002416:	bf00      	nop
 8002418:	08002439 	.word	0x08002439
 800241c:	080024bf 	.word	0x080024bf
 8002420:	08002569 	.word	0x08002569
 8002424:	08002637 	.word	0x08002637
 8002428:	08002729 	.word	0x08002729
 800242c:	0800283f 	.word	0x0800283f
 8002430:	08002979 	.word	0x08002979
 8002434:	08002a97 	.word	0x08002a97
case 1:
	Set_Pixel(0+numled,76,0,153);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	b2d8      	uxtb	r0, r3
 800243c:	2399      	movs	r3, #153	; 0x99
 800243e:	2200      	movs	r2, #0
 8002440:	214c      	movs	r1, #76	; 0x4c
 8002442:	f7fe f847 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8002446:	2301      	movs	r3, #1
 8002448:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800244c:	e010      	b.n	8002470 <vumetro+0x1f40>
		Set_Pixel(j+numled,0,0,0);
 800244e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002452:	b2da      	uxtb	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	4413      	add	r3, r2
 800245a:	b2d8      	uxtb	r0, r3
 800245c:	2300      	movs	r3, #0
 800245e:	2200      	movs	r2, #0
 8002460:	2100      	movs	r1, #0
 8002462:	f7fe f837 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8002466:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800246a:	3301      	adds	r3, #1
 800246c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8002470:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002474:	2b07      	cmp	r3, #7
 8002476:	d9ea      	bls.n	800244e <vumetro+0x1f1e>
	}
	Set_Pixel(8+numled,76,0,153);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	3308      	adds	r3, #8
 800247e:	b2d8      	uxtb	r0, r3
 8002480:	2399      	movs	r3, #153	; 0x99
 8002482:	2200      	movs	r2, #0
 8002484:	214c      	movs	r1, #76	; 0x4c
 8002486:	f7fe f825 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 800248a:	2309      	movs	r3, #9
 800248c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8002490:	e010      	b.n	80024b4 <vumetro+0x1f84>
		Set_Pixel(j+numled,0,0,0);
 8002492:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002496:	b2da      	uxtb	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	4413      	add	r3, r2
 800249e:	b2d8      	uxtb	r0, r3
 80024a0:	2300      	movs	r3, #0
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	f7fe f815 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 80024aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80024ae:	3301      	adds	r3, #1
 80024b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80024b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80024b8:	2b0f      	cmp	r3, #15
 80024ba:	d9ea      	bls.n	8002492 <vumetro+0x1f62>
	}
	break;
 80024bc:	e37a      	b.n	8002bb4 <vumetro+0x2684>
case 2:
	Set_Pixel(0+numled,0,76,153);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	b2d8      	uxtb	r0, r3
 80024c2:	2399      	movs	r3, #153	; 0x99
 80024c4:	224c      	movs	r2, #76	; 0x4c
 80024c6:	2100      	movs	r1, #0
 80024c8:	f7fe f804 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	b2d8      	uxtb	r0, r3
 80024d4:	2399      	movs	r3, #153	; 0x99
 80024d6:	2299      	movs	r2, #153	; 0x99
 80024d8:	2100      	movs	r1, #0
 80024da:	f7fd fffb 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 80024de:	2302      	movs	r3, #2
 80024e0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80024e4:	e010      	b.n	8002508 <vumetro+0x1fd8>
		Set_Pixel(j+numled,0,0,0);
 80024e6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	b2d8      	uxtb	r0, r3
 80024f4:	2300      	movs	r3, #0
 80024f6:	2200      	movs	r2, #0
 80024f8:	2100      	movs	r1, #0
 80024fa:	f7fd ffeb 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 80024fe:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8002502:	3301      	adds	r3, #1
 8002504:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8002508:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800250c:	2b07      	cmp	r3, #7
 800250e:	d9ea      	bls.n	80024e6 <vumetro+0x1fb6>
	}
	Set_Pixel(8+numled,0,76,153);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3308      	adds	r3, #8
 8002516:	b2d8      	uxtb	r0, r3
 8002518:	2399      	movs	r3, #153	; 0x99
 800251a:	224c      	movs	r2, #76	; 0x4c
 800251c:	2100      	movs	r1, #0
 800251e:	f7fd ffd9 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	3309      	adds	r3, #9
 8002528:	b2d8      	uxtb	r0, r3
 800252a:	2399      	movs	r3, #153	; 0x99
 800252c:	2299      	movs	r2, #153	; 0x99
 800252e:	2100      	movs	r1, #0
 8002530:	f7fd ffd0 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8002534:	230a      	movs	r3, #10
 8002536:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800253a:	e010      	b.n	800255e <vumetro+0x202e>
		Set_Pixel(j+numled,0,0,0);
 800253c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	4413      	add	r3, r2
 8002548:	b2d8      	uxtb	r0, r3
 800254a:	2300      	movs	r3, #0
 800254c:	2200      	movs	r2, #0
 800254e:	2100      	movs	r1, #0
 8002550:	f7fd ffc0 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8002554:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8002558:	3301      	adds	r3, #1
 800255a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800255e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8002562:	2b0f      	cmp	r3, #15
 8002564:	d9ea      	bls.n	800253c <vumetro+0x200c>
	}
	break;
 8002566:	e325      	b.n	8002bb4 <vumetro+0x2684>

case 3:
	Set_Pixel(0+numled,0,76,153);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	b2d8      	uxtb	r0, r3
 800256c:	2399      	movs	r3, #153	; 0x99
 800256e:	224c      	movs	r2, #76	; 0x4c
 8002570:	2100      	movs	r1, #0
 8002572:	f7fd ffaf 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	3301      	adds	r3, #1
 800257c:	b2d8      	uxtb	r0, r3
 800257e:	2399      	movs	r3, #153	; 0x99
 8002580:	2299      	movs	r2, #153	; 0x99
 8002582:	2100      	movs	r1, #0
 8002584:	f7fd ffa6 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	3302      	adds	r3, #2
 800258e:	b2d8      	uxtb	r0, r3
 8002590:	23cc      	movs	r3, #204	; 0xcc
 8002592:	2200      	movs	r2, #0
 8002594:	2166      	movs	r1, #102	; 0x66
 8002596:	f7fd ff9d 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 800259a:	2303      	movs	r3, #3
 800259c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80025a0:	e010      	b.n	80025c4 <vumetro+0x2094>
		Set_Pixel(j+numled,0,0,0);
 80025a2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	b2d8      	uxtb	r0, r3
 80025b0:	2300      	movs	r3, #0
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	f7fd ff8d 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 80025ba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80025be:	3301      	adds	r3, #1
 80025c0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80025c4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80025c8:	2b07      	cmp	r3, #7
 80025ca:	d9ea      	bls.n	80025a2 <vumetro+0x2072>
	}
	Set_Pixel(8+numled,0,76,153);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	3308      	adds	r3, #8
 80025d2:	b2d8      	uxtb	r0, r3
 80025d4:	2399      	movs	r3, #153	; 0x99
 80025d6:	224c      	movs	r2, #76	; 0x4c
 80025d8:	2100      	movs	r1, #0
 80025da:	f7fd ff7b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	3309      	adds	r3, #9
 80025e4:	b2d8      	uxtb	r0, r3
 80025e6:	2399      	movs	r3, #153	; 0x99
 80025e8:	2299      	movs	r2, #153	; 0x99
 80025ea:	2100      	movs	r1, #0
 80025ec:	f7fd ff72 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	330a      	adds	r3, #10
 80025f6:	b2d8      	uxtb	r0, r3
 80025f8:	23cc      	movs	r3, #204	; 0xcc
 80025fa:	2200      	movs	r2, #0
 80025fc:	2166      	movs	r1, #102	; 0x66
 80025fe:	f7fd ff69 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8002602:	230b      	movs	r3, #11
 8002604:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002608:	e010      	b.n	800262c <vumetro+0x20fc>
		Set_Pixel(j+numled,0,0,0);
 800260a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800260e:	b2da      	uxtb	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	4413      	add	r3, r2
 8002616:	b2d8      	uxtb	r0, r3
 8002618:	2300      	movs	r3, #0
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	f7fd ff59 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8002622:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002626:	3301      	adds	r3, #1
 8002628:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800262c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002630:	2b0f      	cmp	r3, #15
 8002632:	d9ea      	bls.n	800260a <vumetro+0x20da>
	}
	break;
 8002634:	e2be      	b.n	8002bb4 <vumetro+0x2684>
case 4:
	Set_Pixel(0+numled,0,76,153);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	b2d8      	uxtb	r0, r3
 800263a:	2399      	movs	r3, #153	; 0x99
 800263c:	224c      	movs	r2, #76	; 0x4c
 800263e:	2100      	movs	r1, #0
 8002640:	f7fd ff48 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	3301      	adds	r3, #1
 800264a:	b2d8      	uxtb	r0, r3
 800264c:	2399      	movs	r3, #153	; 0x99
 800264e:	2299      	movs	r2, #153	; 0x99
 8002650:	2100      	movs	r1, #0
 8002652:	f7fd ff3f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	3302      	adds	r3, #2
 800265c:	b2d8      	uxtb	r0, r3
 800265e:	23cc      	movs	r3, #204	; 0xcc
 8002660:	2200      	movs	r2, #0
 8002662:	2166      	movs	r1, #102	; 0x66
 8002664:	f7fd ff36 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	3303      	adds	r3, #3
 800266e:	b2d8      	uxtb	r0, r3
 8002670:	2300      	movs	r3, #0
 8002672:	2200      	movs	r2, #0
 8002674:	21cc      	movs	r1, #204	; 0xcc
 8002676:	f7fd ff2d 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 800267a:	2304      	movs	r3, #4
 800267c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8002680:	e010      	b.n	80026a4 <vumetro+0x2174>
		Set_Pixel(j+numled,0,0,0);
 8002682:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002686:	b2da      	uxtb	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	b2db      	uxtb	r3, r3
 800268c:	4413      	add	r3, r2
 800268e:	b2d8      	uxtb	r0, r3
 8002690:	2300      	movs	r3, #0
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	f7fd ff1d 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 800269a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800269e:	3301      	adds	r3, #1
 80026a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80026a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80026a8:	2b07      	cmp	r3, #7
 80026aa:	d9ea      	bls.n	8002682 <vumetro+0x2152>
	}
	Set_Pixel(8+numled,0,76,153);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	3308      	adds	r3, #8
 80026b2:	b2d8      	uxtb	r0, r3
 80026b4:	2399      	movs	r3, #153	; 0x99
 80026b6:	224c      	movs	r2, #76	; 0x4c
 80026b8:	2100      	movs	r1, #0
 80026ba:	f7fd ff0b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	3309      	adds	r3, #9
 80026c4:	b2d8      	uxtb	r0, r3
 80026c6:	2399      	movs	r3, #153	; 0x99
 80026c8:	2299      	movs	r2, #153	; 0x99
 80026ca:	2100      	movs	r1, #0
 80026cc:	f7fd ff02 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	330a      	adds	r3, #10
 80026d6:	b2d8      	uxtb	r0, r3
 80026d8:	23cc      	movs	r3, #204	; 0xcc
 80026da:	2200      	movs	r2, #0
 80026dc:	2166      	movs	r1, #102	; 0x66
 80026de:	f7fd fef9 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	330b      	adds	r3, #11
 80026e8:	b2d8      	uxtb	r0, r3
 80026ea:	2300      	movs	r3, #0
 80026ec:	2200      	movs	r2, #0
 80026ee:	21cc      	movs	r1, #204	; 0xcc
 80026f0:	f7fd fef0 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 80026f4:	230c      	movs	r3, #12
 80026f6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 80026fa:	e010      	b.n	800271e <vumetro+0x21ee>
		Set_Pixel(j+numled,0,0,0);
 80026fc:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002700:	b2da      	uxtb	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	4413      	add	r3, r2
 8002708:	b2d8      	uxtb	r0, r3
 800270a:	2300      	movs	r3, #0
 800270c:	2200      	movs	r2, #0
 800270e:	2100      	movs	r1, #0
 8002710:	f7fd fee0 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8002714:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002718:	3301      	adds	r3, #1
 800271a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800271e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002722:	2b0f      	cmp	r3, #15
 8002724:	d9ea      	bls.n	80026fc <vumetro+0x21cc>
	}
	break;
 8002726:	e245      	b.n	8002bb4 <vumetro+0x2684>
case 5:
	Set_Pixel(0+numled,0,76,153);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	b2d8      	uxtb	r0, r3
 800272c:	2399      	movs	r3, #153	; 0x99
 800272e:	224c      	movs	r2, #76	; 0x4c
 8002730:	2100      	movs	r1, #0
 8002732:	f7fd fecf 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	3301      	adds	r3, #1
 800273c:	b2d8      	uxtb	r0, r3
 800273e:	2399      	movs	r3, #153	; 0x99
 8002740:	2299      	movs	r2, #153	; 0x99
 8002742:	2100      	movs	r1, #0
 8002744:	f7fd fec6 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	3302      	adds	r3, #2
 800274e:	b2d8      	uxtb	r0, r3
 8002750:	23cc      	movs	r3, #204	; 0xcc
 8002752:	2200      	movs	r2, #0
 8002754:	2166      	movs	r1, #102	; 0x66
 8002756:	f7fd febd 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	3303      	adds	r3, #3
 8002760:	b2d8      	uxtb	r0, r3
 8002762:	2300      	movs	r3, #0
 8002764:	2200      	movs	r2, #0
 8002766:	21cc      	movs	r1, #204	; 0xcc
 8002768:	f7fd feb4 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	b2db      	uxtb	r3, r3
 8002770:	3304      	adds	r3, #4
 8002772:	b2d8      	uxtb	r0, r3
 8002774:	2300      	movs	r3, #0
 8002776:	2200      	movs	r2, #0
 8002778:	21cc      	movs	r1, #204	; 0xcc
 800277a:	f7fd feab 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 800277e:	2305      	movs	r3, #5
 8002780:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002784:	e010      	b.n	80027a8 <vumetro+0x2278>
		Set_Pixel(j+numled,0,0,0);
 8002786:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800278a:	b2da      	uxtb	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	4413      	add	r3, r2
 8002792:	b2d8      	uxtb	r0, r3
 8002794:	2300      	movs	r3, #0
 8002796:	2200      	movs	r2, #0
 8002798:	2100      	movs	r1, #0
 800279a:	f7fd fe9b 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 800279e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80027a2:	3301      	adds	r3, #1
 80027a4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80027a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80027ac:	2b07      	cmp	r3, #7
 80027ae:	d9ea      	bls.n	8002786 <vumetro+0x2256>
	}
	Set_Pixel(8+numled,0,76,153);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	3308      	adds	r3, #8
 80027b6:	b2d8      	uxtb	r0, r3
 80027b8:	2399      	movs	r3, #153	; 0x99
 80027ba:	224c      	movs	r2, #76	; 0x4c
 80027bc:	2100      	movs	r1, #0
 80027be:	f7fd fe89 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	3309      	adds	r3, #9
 80027c8:	b2d8      	uxtb	r0, r3
 80027ca:	2399      	movs	r3, #153	; 0x99
 80027cc:	2299      	movs	r2, #153	; 0x99
 80027ce:	2100      	movs	r1, #0
 80027d0:	f7fd fe80 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	330a      	adds	r3, #10
 80027da:	b2d8      	uxtb	r0, r3
 80027dc:	23cc      	movs	r3, #204	; 0xcc
 80027de:	2200      	movs	r2, #0
 80027e0:	2166      	movs	r1, #102	; 0x66
 80027e2:	f7fd fe77 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	330b      	adds	r3, #11
 80027ec:	b2d8      	uxtb	r0, r3
 80027ee:	2300      	movs	r3, #0
 80027f0:	2200      	movs	r2, #0
 80027f2:	21cc      	movs	r1, #204	; 0xcc
 80027f4:	f7fd fe6e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	330c      	adds	r3, #12
 80027fe:	b2d8      	uxtb	r0, r3
 8002800:	2300      	movs	r3, #0
 8002802:	2200      	movs	r2, #0
 8002804:	21cc      	movs	r1, #204	; 0xcc
 8002806:	f7fd fe65 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 800280a:	230d      	movs	r3, #13
 800280c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002810:	e010      	b.n	8002834 <vumetro+0x2304>
		Set_Pixel(j+numled,0,0,0);
 8002812:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002816:	b2da      	uxtb	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	4413      	add	r3, r2
 800281e:	b2d8      	uxtb	r0, r3
 8002820:	2300      	movs	r3, #0
 8002822:	2200      	movs	r2, #0
 8002824:	2100      	movs	r1, #0
 8002826:	f7fd fe55 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 800282a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800282e:	3301      	adds	r3, #1
 8002830:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002834:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002838:	2b0f      	cmp	r3, #15
 800283a:	d9ea      	bls.n	8002812 <vumetro+0x22e2>
	}
	break;
 800283c:	e1ba      	b.n	8002bb4 <vumetro+0x2684>
case 6:
	Set_Pixel(0+numled,0,76,153);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	b2d8      	uxtb	r0, r3
 8002842:	2399      	movs	r3, #153	; 0x99
 8002844:	224c      	movs	r2, #76	; 0x4c
 8002846:	2100      	movs	r1, #0
 8002848:	f7fd fe44 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	3301      	adds	r3, #1
 8002852:	b2d8      	uxtb	r0, r3
 8002854:	2399      	movs	r3, #153	; 0x99
 8002856:	2299      	movs	r2, #153	; 0x99
 8002858:	2100      	movs	r1, #0
 800285a:	f7fd fe3b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	3302      	adds	r3, #2
 8002864:	b2d8      	uxtb	r0, r3
 8002866:	23cc      	movs	r3, #204	; 0xcc
 8002868:	2200      	movs	r2, #0
 800286a:	2166      	movs	r1, #102	; 0x66
 800286c:	f7fd fe32 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	3303      	adds	r3, #3
 8002876:	b2d8      	uxtb	r0, r3
 8002878:	2300      	movs	r3, #0
 800287a:	2200      	movs	r2, #0
 800287c:	21cc      	movs	r1, #204	; 0xcc
 800287e:	f7fd fe29 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	3304      	adds	r3, #4
 8002888:	b2d8      	uxtb	r0, r3
 800288a:	2300      	movs	r3, #0
 800288c:	2200      	movs	r2, #0
 800288e:	21cc      	movs	r1, #204	; 0xcc
 8002890:	f7fd fe20 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	3305      	adds	r3, #5
 800289a:	b2d8      	uxtb	r0, r3
 800289c:	2333      	movs	r3, #51	; 0x33
 800289e:	22ff      	movs	r2, #255	; 0xff
 80028a0:	21ff      	movs	r1, #255	; 0xff
 80028a2:	f7fd fe17 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 80028a6:	2306      	movs	r3, #6
 80028a8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80028ac:	e010      	b.n	80028d0 <vumetro+0x23a0>
		Set_Pixel(j+numled,0,0,0);
 80028ae:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	b2d8      	uxtb	r0, r3
 80028bc:	2300      	movs	r3, #0
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	f7fd fe07 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 80028c6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80028ca:	3301      	adds	r3, #1
 80028cc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80028d0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80028d4:	2b07      	cmp	r3, #7
 80028d6:	d9ea      	bls.n	80028ae <vumetro+0x237e>
	}
	Set_Pixel(8+numled,0,76,153);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	3308      	adds	r3, #8
 80028de:	b2d8      	uxtb	r0, r3
 80028e0:	2399      	movs	r3, #153	; 0x99
 80028e2:	224c      	movs	r2, #76	; 0x4c
 80028e4:	2100      	movs	r1, #0
 80028e6:	f7fd fdf5 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	3309      	adds	r3, #9
 80028f0:	b2d8      	uxtb	r0, r3
 80028f2:	2399      	movs	r3, #153	; 0x99
 80028f4:	2299      	movs	r2, #153	; 0x99
 80028f6:	2100      	movs	r1, #0
 80028f8:	f7fd fdec 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	330a      	adds	r3, #10
 8002902:	b2d8      	uxtb	r0, r3
 8002904:	23cc      	movs	r3, #204	; 0xcc
 8002906:	2200      	movs	r2, #0
 8002908:	2166      	movs	r1, #102	; 0x66
 800290a:	f7fd fde3 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	330b      	adds	r3, #11
 8002914:	b2d8      	uxtb	r0, r3
 8002916:	2300      	movs	r3, #0
 8002918:	2200      	movs	r2, #0
 800291a:	21cc      	movs	r1, #204	; 0xcc
 800291c:	f7fd fdda 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	330c      	adds	r3, #12
 8002926:	b2d8      	uxtb	r0, r3
 8002928:	2300      	movs	r3, #0
 800292a:	2200      	movs	r2, #0
 800292c:	21cc      	movs	r1, #204	; 0xcc
 800292e:	f7fd fdd1 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	330d      	adds	r3, #13
 8002938:	b2d8      	uxtb	r0, r3
 800293a:	2333      	movs	r3, #51	; 0x33
 800293c:	22ff      	movs	r2, #255	; 0xff
 800293e:	21ff      	movs	r1, #255	; 0xff
 8002940:	f7fd fdc8 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8002944:	230e      	movs	r3, #14
 8002946:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800294a:	e010      	b.n	800296e <vumetro+0x243e>
		Set_Pixel(j+numled,0,0,0);
 800294c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002950:	b2da      	uxtb	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4413      	add	r3, r2
 8002958:	b2d8      	uxtb	r0, r3
 800295a:	2300      	movs	r3, #0
 800295c:	2200      	movs	r2, #0
 800295e:	2100      	movs	r1, #0
 8002960:	f7fd fdb8 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8002964:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002968:	3301      	adds	r3, #1
 800296a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800296e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002972:	2b0f      	cmp	r3, #15
 8002974:	d9ea      	bls.n	800294c <vumetro+0x241c>
	}
	break;
 8002976:	e11d      	b.n	8002bb4 <vumetro+0x2684>
case 7:
	Set_Pixel(0+numled,0,76,153);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	b2d8      	uxtb	r0, r3
 800297c:	2399      	movs	r3, #153	; 0x99
 800297e:	224c      	movs	r2, #76	; 0x4c
 8002980:	2100      	movs	r1, #0
 8002982:	f7fd fda7 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	3301      	adds	r3, #1
 800298c:	b2d8      	uxtb	r0, r3
 800298e:	2399      	movs	r3, #153	; 0x99
 8002990:	2299      	movs	r2, #153	; 0x99
 8002992:	2100      	movs	r1, #0
 8002994:	f7fd fd9e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	3302      	adds	r3, #2
 800299e:	b2d8      	uxtb	r0, r3
 80029a0:	23cc      	movs	r3, #204	; 0xcc
 80029a2:	2200      	movs	r2, #0
 80029a4:	2166      	movs	r1, #102	; 0x66
 80029a6:	f7fd fd95 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	3303      	adds	r3, #3
 80029b0:	b2d8      	uxtb	r0, r3
 80029b2:	2300      	movs	r3, #0
 80029b4:	2200      	movs	r2, #0
 80029b6:	21cc      	movs	r1, #204	; 0xcc
 80029b8:	f7fd fd8c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	3304      	adds	r3, #4
 80029c2:	b2d8      	uxtb	r0, r3
 80029c4:	2300      	movs	r3, #0
 80029c6:	2200      	movs	r2, #0
 80029c8:	21cc      	movs	r1, #204	; 0xcc
 80029ca:	f7fd fd83 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	3305      	adds	r3, #5
 80029d4:	b2d8      	uxtb	r0, r3
 80029d6:	2333      	movs	r3, #51	; 0x33
 80029d8:	22ff      	movs	r2, #255	; 0xff
 80029da:	21ff      	movs	r1, #255	; 0xff
 80029dc:	f7fd fd7a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	3306      	adds	r3, #6
 80029e6:	b2d8      	uxtb	r0, r3
 80029e8:	2300      	movs	r3, #0
 80029ea:	22cc      	movs	r2, #204	; 0xcc
 80029ec:	2100      	movs	r1, #0
 80029ee:	f7fd fd71 	bl	80004d4 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	3307      	adds	r3, #7
 80029f8:	b2d8      	uxtb	r0, r3
 80029fa:	2300      	movs	r3, #0
 80029fc:	2200      	movs	r2, #0
 80029fe:	2100      	movs	r1, #0
 8002a00:	f7fd fd68 	bl	80004d4 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	3308      	adds	r3, #8
 8002a0a:	b2d8      	uxtb	r0, r3
 8002a0c:	2399      	movs	r3, #153	; 0x99
 8002a0e:	224c      	movs	r2, #76	; 0x4c
 8002a10:	2100      	movs	r1, #0
 8002a12:	f7fd fd5f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	3309      	adds	r3, #9
 8002a1c:	b2d8      	uxtb	r0, r3
 8002a1e:	2399      	movs	r3, #153	; 0x99
 8002a20:	2299      	movs	r2, #153	; 0x99
 8002a22:	2100      	movs	r1, #0
 8002a24:	f7fd fd56 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	330a      	adds	r3, #10
 8002a2e:	b2d8      	uxtb	r0, r3
 8002a30:	23cc      	movs	r3, #204	; 0xcc
 8002a32:	2200      	movs	r2, #0
 8002a34:	2166      	movs	r1, #102	; 0x66
 8002a36:	f7fd fd4d 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	330b      	adds	r3, #11
 8002a40:	b2d8      	uxtb	r0, r3
 8002a42:	2300      	movs	r3, #0
 8002a44:	2200      	movs	r2, #0
 8002a46:	21cc      	movs	r1, #204	; 0xcc
 8002a48:	f7fd fd44 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	330c      	adds	r3, #12
 8002a52:	b2d8      	uxtb	r0, r3
 8002a54:	2300      	movs	r3, #0
 8002a56:	2200      	movs	r2, #0
 8002a58:	21cc      	movs	r1, #204	; 0xcc
 8002a5a:	f7fd fd3b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	330d      	adds	r3, #13
 8002a64:	b2d8      	uxtb	r0, r3
 8002a66:	2333      	movs	r3, #51	; 0x33
 8002a68:	22ff      	movs	r2, #255	; 0xff
 8002a6a:	21ff      	movs	r1, #255	; 0xff
 8002a6c:	f7fd fd32 	bl	80004d4 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	330e      	adds	r3, #14
 8002a76:	b2d8      	uxtb	r0, r3
 8002a78:	2300      	movs	r3, #0
 8002a7a:	22cc      	movs	r2, #204	; 0xcc
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	f7fd fd29 	bl	80004d4 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	330f      	adds	r3, #15
 8002a88:	b2d8      	uxtb	r0, r3
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2100      	movs	r1, #0
 8002a90:	f7fd fd20 	bl	80004d4 <Set_Pixel>
	break;
 8002a94:	e08e      	b.n	8002bb4 <vumetro+0x2684>
case 8:
	Set_Pixel(0+numled,0,76,153);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	b2d8      	uxtb	r0, r3
 8002a9a:	2399      	movs	r3, #153	; 0x99
 8002a9c:	224c      	movs	r2, #76	; 0x4c
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	f7fd fd18 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	b2d8      	uxtb	r0, r3
 8002aac:	2399      	movs	r3, #153	; 0x99
 8002aae:	2299      	movs	r2, #153	; 0x99
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	f7fd fd0f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	3302      	adds	r3, #2
 8002abc:	b2d8      	uxtb	r0, r3
 8002abe:	23cc      	movs	r3, #204	; 0xcc
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2166      	movs	r1, #102	; 0x66
 8002ac4:	f7fd fd06 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	3303      	adds	r3, #3
 8002ace:	b2d8      	uxtb	r0, r3
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	21cc      	movs	r1, #204	; 0xcc
 8002ad6:	f7fd fcfd 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	3304      	adds	r3, #4
 8002ae0:	b2d8      	uxtb	r0, r3
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	21cc      	movs	r1, #204	; 0xcc
 8002ae8:	f7fd fcf4 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	3305      	adds	r3, #5
 8002af2:	b2d8      	uxtb	r0, r3
 8002af4:	2333      	movs	r3, #51	; 0x33
 8002af6:	22ff      	movs	r2, #255	; 0xff
 8002af8:	21ff      	movs	r1, #255	; 0xff
 8002afa:	f7fd fceb 	bl	80004d4 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	3306      	adds	r3, #6
 8002b04:	b2d8      	uxtb	r0, r3
 8002b06:	2300      	movs	r3, #0
 8002b08:	22cc      	movs	r2, #204	; 0xcc
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	f7fd fce2 	bl	80004d4 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	3307      	adds	r3, #7
 8002b16:	b2d8      	uxtb	r0, r3
 8002b18:	2300      	movs	r3, #0
 8002b1a:	22cc      	movs	r2, #204	; 0xcc
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	f7fd fcd9 	bl	80004d4 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	3308      	adds	r3, #8
 8002b28:	b2d8      	uxtb	r0, r3
 8002b2a:	2399      	movs	r3, #153	; 0x99
 8002b2c:	224c      	movs	r2, #76	; 0x4c
 8002b2e:	2100      	movs	r1, #0
 8002b30:	f7fd fcd0 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	3309      	adds	r3, #9
 8002b3a:	b2d8      	uxtb	r0, r3
 8002b3c:	2399      	movs	r3, #153	; 0x99
 8002b3e:	2299      	movs	r2, #153	; 0x99
 8002b40:	2100      	movs	r1, #0
 8002b42:	f7fd fcc7 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	330a      	adds	r3, #10
 8002b4c:	b2d8      	uxtb	r0, r3
 8002b4e:	23cc      	movs	r3, #204	; 0xcc
 8002b50:	2200      	movs	r2, #0
 8002b52:	2166      	movs	r1, #102	; 0x66
 8002b54:	f7fd fcbe 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	330b      	adds	r3, #11
 8002b5e:	b2d8      	uxtb	r0, r3
 8002b60:	2300      	movs	r3, #0
 8002b62:	2200      	movs	r2, #0
 8002b64:	21cc      	movs	r1, #204	; 0xcc
 8002b66:	f7fd fcb5 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	330c      	adds	r3, #12
 8002b70:	b2d8      	uxtb	r0, r3
 8002b72:	2300      	movs	r3, #0
 8002b74:	2200      	movs	r2, #0
 8002b76:	21cc      	movs	r1, #204	; 0xcc
 8002b78:	f7fd fcac 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	330d      	adds	r3, #13
 8002b82:	b2d8      	uxtb	r0, r3
 8002b84:	2333      	movs	r3, #51	; 0x33
 8002b86:	22ff      	movs	r2, #255	; 0xff
 8002b88:	21ff      	movs	r1, #255	; 0xff
 8002b8a:	f7fd fca3 	bl	80004d4 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	330e      	adds	r3, #14
 8002b94:	b2d8      	uxtb	r0, r3
 8002b96:	2300      	movs	r3, #0
 8002b98:	22cc      	movs	r2, #204	; 0xcc
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	f7fd fc9a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	330f      	adds	r3, #15
 8002ba6:	b2d8      	uxtb	r0, r3
 8002ba8:	2300      	movs	r3, #0
 8002baa:	22cc      	movs	r2, #204	; 0xcc
 8002bac:	2100      	movs	r1, #0
 8002bae:	f7fd fc91 	bl	80004d4 <Set_Pixel>
	break;
 8002bb2:	bf00      	nop
}

numled=80;
 8002bb4:	2350      	movs	r3, #80	; 0x50
 8002bb6:	60fb      	str	r3, [r7, #12]
switch(banda6){
 8002bb8:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	2b07      	cmp	r3, #7
 8002bc0:	f200 83d2 	bhi.w	8003368 <vumetro+0x2e38>
 8002bc4:	a201      	add	r2, pc, #4	; (adr r2, 8002bcc <vumetro+0x269c>)
 8002bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bca:	bf00      	nop
 8002bcc:	08002bed 	.word	0x08002bed
 8002bd0:	08002c73 	.word	0x08002c73
 8002bd4:	08002d1d 	.word	0x08002d1d
 8002bd8:	08002deb 	.word	0x08002deb
 8002bdc:	08002edd 	.word	0x08002edd
 8002be0:	08002ff3 	.word	0x08002ff3
 8002be4:	0800312d 	.word	0x0800312d
 8002be8:	0800324b 	.word	0x0800324b
case 1:
	Set_Pixel(0+numled,76,0,153);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	b2d8      	uxtb	r0, r3
 8002bf0:	2399      	movs	r3, #153	; 0x99
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	214c      	movs	r1, #76	; 0x4c
 8002bf6:	f7fd fc6d 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8002c00:	e010      	b.n	8002c24 <vumetro+0x26f4>
		Set_Pixel(j+numled,0,0,0);
 8002c02:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	b2d8      	uxtb	r0, r3
 8002c10:	2300      	movs	r3, #0
 8002c12:	2200      	movs	r2, #0
 8002c14:	2100      	movs	r1, #0
 8002c16:	f7fd fc5d 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8002c1a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8002c24:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002c28:	2b07      	cmp	r3, #7
 8002c2a:	d9ea      	bls.n	8002c02 <vumetro+0x26d2>
	}
	Set_Pixel(8+numled,76,0,153);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	3308      	adds	r3, #8
 8002c32:	b2d8      	uxtb	r0, r3
 8002c34:	2399      	movs	r3, #153	; 0x99
 8002c36:	2200      	movs	r2, #0
 8002c38:	214c      	movs	r1, #76	; 0x4c
 8002c3a:	f7fd fc4b 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8002c3e:	2309      	movs	r3, #9
 8002c40:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8002c44:	e010      	b.n	8002c68 <vumetro+0x2738>
		Set_Pixel(j+numled,0,0,0);
 8002c46:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	b2d8      	uxtb	r0, r3
 8002c54:	2300      	movs	r3, #0
 8002c56:	2200      	movs	r2, #0
 8002c58:	2100      	movs	r1, #0
 8002c5a:	f7fd fc3b 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8002c5e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002c62:	3301      	adds	r3, #1
 8002c64:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8002c68:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002c6c:	2b0f      	cmp	r3, #15
 8002c6e:	d9ea      	bls.n	8002c46 <vumetro+0x2716>
	}
	break;
 8002c70:	e37a      	b.n	8003368 <vumetro+0x2e38>
case 2:
	Set_Pixel(0+numled,0,76,153);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	b2d8      	uxtb	r0, r3
 8002c76:	2399      	movs	r3, #153	; 0x99
 8002c78:	224c      	movs	r2, #76	; 0x4c
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	f7fd fc2a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	3301      	adds	r3, #1
 8002c86:	b2d8      	uxtb	r0, r3
 8002c88:	2399      	movs	r3, #153	; 0x99
 8002c8a:	2299      	movs	r2, #153	; 0x99
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	f7fd fc21 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8002c92:	2302      	movs	r3, #2
 8002c94:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002c98:	e010      	b.n	8002cbc <vumetro+0x278c>
		Set_Pixel(j+numled,0,0,0);
 8002c9a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	b2d8      	uxtb	r0, r3
 8002ca8:	2300      	movs	r3, #0
 8002caa:	2200      	movs	r2, #0
 8002cac:	2100      	movs	r1, #0
 8002cae:	f7fd fc11 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8002cb2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002cbc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002cc0:	2b07      	cmp	r3, #7
 8002cc2:	d9ea      	bls.n	8002c9a <vumetro+0x276a>
	}
	Set_Pixel(8+numled,0,76,153);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	3308      	adds	r3, #8
 8002cca:	b2d8      	uxtb	r0, r3
 8002ccc:	2399      	movs	r3, #153	; 0x99
 8002cce:	224c      	movs	r2, #76	; 0x4c
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	f7fd fbff 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	3309      	adds	r3, #9
 8002cdc:	b2d8      	uxtb	r0, r3
 8002cde:	2399      	movs	r3, #153	; 0x99
 8002ce0:	2299      	movs	r2, #153	; 0x99
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	f7fd fbf6 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8002ce8:	230a      	movs	r3, #10
 8002cea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002cee:	e010      	b.n	8002d12 <vumetro+0x27e2>
		Set_Pixel(j+numled,0,0,0);
 8002cf0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	b2d8      	uxtb	r0, r3
 8002cfe:	2300      	movs	r3, #0
 8002d00:	2200      	movs	r2, #0
 8002d02:	2100      	movs	r1, #0
 8002d04:	f7fd fbe6 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8002d08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002d12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002d16:	2b0f      	cmp	r3, #15
 8002d18:	d9ea      	bls.n	8002cf0 <vumetro+0x27c0>
	}
	break;
 8002d1a:	e325      	b.n	8003368 <vumetro+0x2e38>

case 3:
	Set_Pixel(0+numled,0,76,153);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	b2d8      	uxtb	r0, r3
 8002d20:	2399      	movs	r3, #153	; 0x99
 8002d22:	224c      	movs	r2, #76	; 0x4c
 8002d24:	2100      	movs	r1, #0
 8002d26:	f7fd fbd5 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	b2d8      	uxtb	r0, r3
 8002d32:	2399      	movs	r3, #153	; 0x99
 8002d34:	2299      	movs	r2, #153	; 0x99
 8002d36:	2100      	movs	r1, #0
 8002d38:	f7fd fbcc 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	3302      	adds	r3, #2
 8002d42:	b2d8      	uxtb	r0, r3
 8002d44:	23cc      	movs	r3, #204	; 0xcc
 8002d46:	2200      	movs	r2, #0
 8002d48:	2166      	movs	r1, #102	; 0x66
 8002d4a:	f7fd fbc3 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8002d4e:	2303      	movs	r3, #3
 8002d50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d54:	e010      	b.n	8002d78 <vumetro+0x2848>
		Set_Pixel(j+numled,0,0,0);
 8002d56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	b2d8      	uxtb	r0, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	2200      	movs	r2, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	f7fd fbb3 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8002d6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d72:	3301      	adds	r3, #1
 8002d74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d7c:	2b07      	cmp	r3, #7
 8002d7e:	d9ea      	bls.n	8002d56 <vumetro+0x2826>
	}
	Set_Pixel(8+numled,0,76,153);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	3308      	adds	r3, #8
 8002d86:	b2d8      	uxtb	r0, r3
 8002d88:	2399      	movs	r3, #153	; 0x99
 8002d8a:	224c      	movs	r2, #76	; 0x4c
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	f7fd fba1 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	3309      	adds	r3, #9
 8002d98:	b2d8      	uxtb	r0, r3
 8002d9a:	2399      	movs	r3, #153	; 0x99
 8002d9c:	2299      	movs	r2, #153	; 0x99
 8002d9e:	2100      	movs	r1, #0
 8002da0:	f7fd fb98 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	330a      	adds	r3, #10
 8002daa:	b2d8      	uxtb	r0, r3
 8002dac:	23cc      	movs	r3, #204	; 0xcc
 8002dae:	2200      	movs	r2, #0
 8002db0:	2166      	movs	r1, #102	; 0x66
 8002db2:	f7fd fb8f 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8002db6:	230b      	movs	r3, #11
 8002db8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002dbc:	e010      	b.n	8002de0 <vumetro+0x28b0>
		Set_Pixel(j+numled,0,0,0);
 8002dbe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	b2d8      	uxtb	r0, r3
 8002dcc:	2300      	movs	r3, #0
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	f7fd fb7f 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8002dd6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002de0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002de4:	2b0f      	cmp	r3, #15
 8002de6:	d9ea      	bls.n	8002dbe <vumetro+0x288e>
	}
	break;
 8002de8:	e2be      	b.n	8003368 <vumetro+0x2e38>
case 4:
	Set_Pixel(0+numled,0,76,153);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	b2d8      	uxtb	r0, r3
 8002dee:	2399      	movs	r3, #153	; 0x99
 8002df0:	224c      	movs	r2, #76	; 0x4c
 8002df2:	2100      	movs	r1, #0
 8002df4:	f7fd fb6e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	b2d8      	uxtb	r0, r3
 8002e00:	2399      	movs	r3, #153	; 0x99
 8002e02:	2299      	movs	r2, #153	; 0x99
 8002e04:	2100      	movs	r1, #0
 8002e06:	f7fd fb65 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	3302      	adds	r3, #2
 8002e10:	b2d8      	uxtb	r0, r3
 8002e12:	23cc      	movs	r3, #204	; 0xcc
 8002e14:	2200      	movs	r2, #0
 8002e16:	2166      	movs	r1, #102	; 0x66
 8002e18:	f7fd fb5c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	3303      	adds	r3, #3
 8002e22:	b2d8      	uxtb	r0, r3
 8002e24:	2300      	movs	r3, #0
 8002e26:	2200      	movs	r2, #0
 8002e28:	21cc      	movs	r1, #204	; 0xcc
 8002e2a:	f7fd fb53 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8002e2e:	2304      	movs	r3, #4
 8002e30:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002e34:	e010      	b.n	8002e58 <vumetro+0x2928>
		Set_Pixel(j+numled,0,0,0);
 8002e36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	b2d8      	uxtb	r0, r3
 8002e44:	2300      	movs	r3, #0
 8002e46:	2200      	movs	r2, #0
 8002e48:	2100      	movs	r1, #0
 8002e4a:	f7fd fb43 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8002e4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e52:	3301      	adds	r3, #1
 8002e54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002e58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e5c:	2b07      	cmp	r3, #7
 8002e5e:	d9ea      	bls.n	8002e36 <vumetro+0x2906>
	}
	Set_Pixel(8+numled,0,76,153);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	3308      	adds	r3, #8
 8002e66:	b2d8      	uxtb	r0, r3
 8002e68:	2399      	movs	r3, #153	; 0x99
 8002e6a:	224c      	movs	r2, #76	; 0x4c
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	f7fd fb31 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	3309      	adds	r3, #9
 8002e78:	b2d8      	uxtb	r0, r3
 8002e7a:	2399      	movs	r3, #153	; 0x99
 8002e7c:	2299      	movs	r2, #153	; 0x99
 8002e7e:	2100      	movs	r1, #0
 8002e80:	f7fd fb28 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	330a      	adds	r3, #10
 8002e8a:	b2d8      	uxtb	r0, r3
 8002e8c:	23cc      	movs	r3, #204	; 0xcc
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2166      	movs	r1, #102	; 0x66
 8002e92:	f7fd fb1f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	330b      	adds	r3, #11
 8002e9c:	b2d8      	uxtb	r0, r3
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	21cc      	movs	r1, #204	; 0xcc
 8002ea4:	f7fd fb16 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8002ea8:	230c      	movs	r3, #12
 8002eaa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002eae:	e010      	b.n	8002ed2 <vumetro+0x29a2>
		Set_Pixel(j+numled,0,0,0);
 8002eb0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	4413      	add	r3, r2
 8002ebc:	b2d8      	uxtb	r0, r3
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	f7fd fb06 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8002ec8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002ed2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ed6:	2b0f      	cmp	r3, #15
 8002ed8:	d9ea      	bls.n	8002eb0 <vumetro+0x2980>
	}
	break;
 8002eda:	e245      	b.n	8003368 <vumetro+0x2e38>
case 5:
	Set_Pixel(0+numled,0,76,153);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	b2d8      	uxtb	r0, r3
 8002ee0:	2399      	movs	r3, #153	; 0x99
 8002ee2:	224c      	movs	r2, #76	; 0x4c
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	f7fd faf5 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	3301      	adds	r3, #1
 8002ef0:	b2d8      	uxtb	r0, r3
 8002ef2:	2399      	movs	r3, #153	; 0x99
 8002ef4:	2299      	movs	r2, #153	; 0x99
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	f7fd faec 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	3302      	adds	r3, #2
 8002f02:	b2d8      	uxtb	r0, r3
 8002f04:	23cc      	movs	r3, #204	; 0xcc
 8002f06:	2200      	movs	r2, #0
 8002f08:	2166      	movs	r1, #102	; 0x66
 8002f0a:	f7fd fae3 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	3303      	adds	r3, #3
 8002f14:	b2d8      	uxtb	r0, r3
 8002f16:	2300      	movs	r3, #0
 8002f18:	2200      	movs	r2, #0
 8002f1a:	21cc      	movs	r1, #204	; 0xcc
 8002f1c:	f7fd fada 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	3304      	adds	r3, #4
 8002f26:	b2d8      	uxtb	r0, r3
 8002f28:	2300      	movs	r3, #0
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	21cc      	movs	r1, #204	; 0xcc
 8002f2e:	f7fd fad1 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8002f32:	2305      	movs	r3, #5
 8002f34:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002f38:	e010      	b.n	8002f5c <vumetro+0x2a2c>
		Set_Pixel(j+numled,0,0,0);
 8002f3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	b2d8      	uxtb	r0, r3
 8002f48:	2300      	movs	r3, #0
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	f7fd fac1 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8002f52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002f56:	3301      	adds	r3, #1
 8002f58:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002f5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002f60:	2b07      	cmp	r3, #7
 8002f62:	d9ea      	bls.n	8002f3a <vumetro+0x2a0a>
	}
	Set_Pixel(8+numled,0,76,153);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	3308      	adds	r3, #8
 8002f6a:	b2d8      	uxtb	r0, r3
 8002f6c:	2399      	movs	r3, #153	; 0x99
 8002f6e:	224c      	movs	r2, #76	; 0x4c
 8002f70:	2100      	movs	r1, #0
 8002f72:	f7fd faaf 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	3309      	adds	r3, #9
 8002f7c:	b2d8      	uxtb	r0, r3
 8002f7e:	2399      	movs	r3, #153	; 0x99
 8002f80:	2299      	movs	r2, #153	; 0x99
 8002f82:	2100      	movs	r1, #0
 8002f84:	f7fd faa6 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	330a      	adds	r3, #10
 8002f8e:	b2d8      	uxtb	r0, r3
 8002f90:	23cc      	movs	r3, #204	; 0xcc
 8002f92:	2200      	movs	r2, #0
 8002f94:	2166      	movs	r1, #102	; 0x66
 8002f96:	f7fd fa9d 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	330b      	adds	r3, #11
 8002fa0:	b2d8      	uxtb	r0, r3
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	21cc      	movs	r1, #204	; 0xcc
 8002fa8:	f7fd fa94 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	330c      	adds	r3, #12
 8002fb2:	b2d8      	uxtb	r0, r3
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	21cc      	movs	r1, #204	; 0xcc
 8002fba:	f7fd fa8b 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8002fbe:	230d      	movs	r3, #13
 8002fc0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002fc4:	e010      	b.n	8002fe8 <vumetro+0x2ab8>
		Set_Pixel(j+numled,0,0,0);
 8002fc6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	b2d8      	uxtb	r0, r3
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2100      	movs	r1, #0
 8002fda:	f7fd fa7b 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8002fde:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002fe8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002fec:	2b0f      	cmp	r3, #15
 8002fee:	d9ea      	bls.n	8002fc6 <vumetro+0x2a96>
	}
	break;
 8002ff0:	e1ba      	b.n	8003368 <vumetro+0x2e38>
case 6:
	Set_Pixel(0+numled,0,76,153);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	b2d8      	uxtb	r0, r3
 8002ff6:	2399      	movs	r3, #153	; 0x99
 8002ff8:	224c      	movs	r2, #76	; 0x4c
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	f7fd fa6a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	3301      	adds	r3, #1
 8003006:	b2d8      	uxtb	r0, r3
 8003008:	2399      	movs	r3, #153	; 0x99
 800300a:	2299      	movs	r2, #153	; 0x99
 800300c:	2100      	movs	r1, #0
 800300e:	f7fd fa61 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	3302      	adds	r3, #2
 8003018:	b2d8      	uxtb	r0, r3
 800301a:	23cc      	movs	r3, #204	; 0xcc
 800301c:	2200      	movs	r2, #0
 800301e:	2166      	movs	r1, #102	; 0x66
 8003020:	f7fd fa58 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	3303      	adds	r3, #3
 800302a:	b2d8      	uxtb	r0, r3
 800302c:	2300      	movs	r3, #0
 800302e:	2200      	movs	r2, #0
 8003030:	21cc      	movs	r1, #204	; 0xcc
 8003032:	f7fd fa4f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	3304      	adds	r3, #4
 800303c:	b2d8      	uxtb	r0, r3
 800303e:	2300      	movs	r3, #0
 8003040:	2200      	movs	r2, #0
 8003042:	21cc      	movs	r1, #204	; 0xcc
 8003044:	f7fd fa46 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	3305      	adds	r3, #5
 800304e:	b2d8      	uxtb	r0, r3
 8003050:	2333      	movs	r3, #51	; 0x33
 8003052:	22ff      	movs	r2, #255	; 0xff
 8003054:	21ff      	movs	r1, #255	; 0xff
 8003056:	f7fd fa3d 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 800305a:	2306      	movs	r3, #6
 800305c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003060:	e010      	b.n	8003084 <vumetro+0x2b54>
		Set_Pixel(j+numled,0,0,0);
 8003062:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003066:	b2da      	uxtb	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	4413      	add	r3, r2
 800306e:	b2d8      	uxtb	r0, r3
 8003070:	2300      	movs	r3, #0
 8003072:	2200      	movs	r2, #0
 8003074:	2100      	movs	r1, #0
 8003076:	f7fd fa2d 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 800307a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800307e:	3301      	adds	r3, #1
 8003080:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003084:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003088:	2b07      	cmp	r3, #7
 800308a:	d9ea      	bls.n	8003062 <vumetro+0x2b32>
	}
	Set_Pixel(8+numled,0,76,153);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	3308      	adds	r3, #8
 8003092:	b2d8      	uxtb	r0, r3
 8003094:	2399      	movs	r3, #153	; 0x99
 8003096:	224c      	movs	r2, #76	; 0x4c
 8003098:	2100      	movs	r1, #0
 800309a:	f7fd fa1b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	3309      	adds	r3, #9
 80030a4:	b2d8      	uxtb	r0, r3
 80030a6:	2399      	movs	r3, #153	; 0x99
 80030a8:	2299      	movs	r2, #153	; 0x99
 80030aa:	2100      	movs	r1, #0
 80030ac:	f7fd fa12 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	330a      	adds	r3, #10
 80030b6:	b2d8      	uxtb	r0, r3
 80030b8:	23cc      	movs	r3, #204	; 0xcc
 80030ba:	2200      	movs	r2, #0
 80030bc:	2166      	movs	r1, #102	; 0x66
 80030be:	f7fd fa09 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	330b      	adds	r3, #11
 80030c8:	b2d8      	uxtb	r0, r3
 80030ca:	2300      	movs	r3, #0
 80030cc:	2200      	movs	r2, #0
 80030ce:	21cc      	movs	r1, #204	; 0xcc
 80030d0:	f7fd fa00 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	330c      	adds	r3, #12
 80030da:	b2d8      	uxtb	r0, r3
 80030dc:	2300      	movs	r3, #0
 80030de:	2200      	movs	r2, #0
 80030e0:	21cc      	movs	r1, #204	; 0xcc
 80030e2:	f7fd f9f7 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	330d      	adds	r3, #13
 80030ec:	b2d8      	uxtb	r0, r3
 80030ee:	2333      	movs	r3, #51	; 0x33
 80030f0:	22ff      	movs	r2, #255	; 0xff
 80030f2:	21ff      	movs	r1, #255	; 0xff
 80030f4:	f7fd f9ee 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 80030f8:	230e      	movs	r3, #14
 80030fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80030fe:	e010      	b.n	8003122 <vumetro+0x2bf2>
		Set_Pixel(j+numled,0,0,0);
 8003100:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003104:	b2da      	uxtb	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	4413      	add	r3, r2
 800310c:	b2d8      	uxtb	r0, r3
 800310e:	2300      	movs	r3, #0
 8003110:	2200      	movs	r2, #0
 8003112:	2100      	movs	r1, #0
 8003114:	f7fd f9de 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8003118:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800311c:	3301      	adds	r3, #1
 800311e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003122:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003126:	2b0f      	cmp	r3, #15
 8003128:	d9ea      	bls.n	8003100 <vumetro+0x2bd0>
	}
	break;
 800312a:	e11d      	b.n	8003368 <vumetro+0x2e38>
case 7:
	Set_Pixel(0+numled,0,76,153);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	b2d8      	uxtb	r0, r3
 8003130:	2399      	movs	r3, #153	; 0x99
 8003132:	224c      	movs	r2, #76	; 0x4c
 8003134:	2100      	movs	r1, #0
 8003136:	f7fd f9cd 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	3301      	adds	r3, #1
 8003140:	b2d8      	uxtb	r0, r3
 8003142:	2399      	movs	r3, #153	; 0x99
 8003144:	2299      	movs	r2, #153	; 0x99
 8003146:	2100      	movs	r1, #0
 8003148:	f7fd f9c4 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	3302      	adds	r3, #2
 8003152:	b2d8      	uxtb	r0, r3
 8003154:	23cc      	movs	r3, #204	; 0xcc
 8003156:	2200      	movs	r2, #0
 8003158:	2166      	movs	r1, #102	; 0x66
 800315a:	f7fd f9bb 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	3303      	adds	r3, #3
 8003164:	b2d8      	uxtb	r0, r3
 8003166:	2300      	movs	r3, #0
 8003168:	2200      	movs	r2, #0
 800316a:	21cc      	movs	r1, #204	; 0xcc
 800316c:	f7fd f9b2 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	3304      	adds	r3, #4
 8003176:	b2d8      	uxtb	r0, r3
 8003178:	2300      	movs	r3, #0
 800317a:	2200      	movs	r2, #0
 800317c:	21cc      	movs	r1, #204	; 0xcc
 800317e:	f7fd f9a9 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	3305      	adds	r3, #5
 8003188:	b2d8      	uxtb	r0, r3
 800318a:	2333      	movs	r3, #51	; 0x33
 800318c:	22ff      	movs	r2, #255	; 0xff
 800318e:	21ff      	movs	r1, #255	; 0xff
 8003190:	f7fd f9a0 	bl	80004d4 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	3306      	adds	r3, #6
 800319a:	b2d8      	uxtb	r0, r3
 800319c:	2300      	movs	r3, #0
 800319e:	22cc      	movs	r2, #204	; 0xcc
 80031a0:	2100      	movs	r1, #0
 80031a2:	f7fd f997 	bl	80004d4 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	3307      	adds	r3, #7
 80031ac:	b2d8      	uxtb	r0, r3
 80031ae:	2300      	movs	r3, #0
 80031b0:	2200      	movs	r2, #0
 80031b2:	2100      	movs	r1, #0
 80031b4:	f7fd f98e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	3308      	adds	r3, #8
 80031be:	b2d8      	uxtb	r0, r3
 80031c0:	2399      	movs	r3, #153	; 0x99
 80031c2:	224c      	movs	r2, #76	; 0x4c
 80031c4:	2100      	movs	r1, #0
 80031c6:	f7fd f985 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	3309      	adds	r3, #9
 80031d0:	b2d8      	uxtb	r0, r3
 80031d2:	2399      	movs	r3, #153	; 0x99
 80031d4:	2299      	movs	r2, #153	; 0x99
 80031d6:	2100      	movs	r1, #0
 80031d8:	f7fd f97c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	330a      	adds	r3, #10
 80031e2:	b2d8      	uxtb	r0, r3
 80031e4:	23cc      	movs	r3, #204	; 0xcc
 80031e6:	2200      	movs	r2, #0
 80031e8:	2166      	movs	r1, #102	; 0x66
 80031ea:	f7fd f973 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	330b      	adds	r3, #11
 80031f4:	b2d8      	uxtb	r0, r3
 80031f6:	2300      	movs	r3, #0
 80031f8:	2200      	movs	r2, #0
 80031fa:	21cc      	movs	r1, #204	; 0xcc
 80031fc:	f7fd f96a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	b2db      	uxtb	r3, r3
 8003204:	330c      	adds	r3, #12
 8003206:	b2d8      	uxtb	r0, r3
 8003208:	2300      	movs	r3, #0
 800320a:	2200      	movs	r2, #0
 800320c:	21cc      	movs	r1, #204	; 0xcc
 800320e:	f7fd f961 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	330d      	adds	r3, #13
 8003218:	b2d8      	uxtb	r0, r3
 800321a:	2333      	movs	r3, #51	; 0x33
 800321c:	22ff      	movs	r2, #255	; 0xff
 800321e:	21ff      	movs	r1, #255	; 0xff
 8003220:	f7fd f958 	bl	80004d4 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	330e      	adds	r3, #14
 800322a:	b2d8      	uxtb	r0, r3
 800322c:	2300      	movs	r3, #0
 800322e:	22cc      	movs	r2, #204	; 0xcc
 8003230:	2100      	movs	r1, #0
 8003232:	f7fd f94f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	330f      	adds	r3, #15
 800323c:	b2d8      	uxtb	r0, r3
 800323e:	2300      	movs	r3, #0
 8003240:	2200      	movs	r2, #0
 8003242:	2100      	movs	r1, #0
 8003244:	f7fd f946 	bl	80004d4 <Set_Pixel>
	break;
 8003248:	e08e      	b.n	8003368 <vumetro+0x2e38>
case 8:
	Set_Pixel(0+numled,0,76,153);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	b2d8      	uxtb	r0, r3
 800324e:	2399      	movs	r3, #153	; 0x99
 8003250:	224c      	movs	r2, #76	; 0x4c
 8003252:	2100      	movs	r1, #0
 8003254:	f7fd f93e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	3301      	adds	r3, #1
 800325e:	b2d8      	uxtb	r0, r3
 8003260:	2399      	movs	r3, #153	; 0x99
 8003262:	2299      	movs	r2, #153	; 0x99
 8003264:	2100      	movs	r1, #0
 8003266:	f7fd f935 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	3302      	adds	r3, #2
 8003270:	b2d8      	uxtb	r0, r3
 8003272:	23cc      	movs	r3, #204	; 0xcc
 8003274:	2200      	movs	r2, #0
 8003276:	2166      	movs	r1, #102	; 0x66
 8003278:	f7fd f92c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	3303      	adds	r3, #3
 8003282:	b2d8      	uxtb	r0, r3
 8003284:	2300      	movs	r3, #0
 8003286:	2200      	movs	r2, #0
 8003288:	21cc      	movs	r1, #204	; 0xcc
 800328a:	f7fd f923 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	3304      	adds	r3, #4
 8003294:	b2d8      	uxtb	r0, r3
 8003296:	2300      	movs	r3, #0
 8003298:	2200      	movs	r2, #0
 800329a:	21cc      	movs	r1, #204	; 0xcc
 800329c:	f7fd f91a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	3305      	adds	r3, #5
 80032a6:	b2d8      	uxtb	r0, r3
 80032a8:	2333      	movs	r3, #51	; 0x33
 80032aa:	22ff      	movs	r2, #255	; 0xff
 80032ac:	21ff      	movs	r1, #255	; 0xff
 80032ae:	f7fd f911 	bl	80004d4 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	3306      	adds	r3, #6
 80032b8:	b2d8      	uxtb	r0, r3
 80032ba:	2300      	movs	r3, #0
 80032bc:	22cc      	movs	r2, #204	; 0xcc
 80032be:	2100      	movs	r1, #0
 80032c0:	f7fd f908 	bl	80004d4 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	3307      	adds	r3, #7
 80032ca:	b2d8      	uxtb	r0, r3
 80032cc:	2300      	movs	r3, #0
 80032ce:	22cc      	movs	r2, #204	; 0xcc
 80032d0:	2100      	movs	r1, #0
 80032d2:	f7fd f8ff 	bl	80004d4 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	3308      	adds	r3, #8
 80032dc:	b2d8      	uxtb	r0, r3
 80032de:	2399      	movs	r3, #153	; 0x99
 80032e0:	224c      	movs	r2, #76	; 0x4c
 80032e2:	2100      	movs	r1, #0
 80032e4:	f7fd f8f6 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	3309      	adds	r3, #9
 80032ee:	b2d8      	uxtb	r0, r3
 80032f0:	2399      	movs	r3, #153	; 0x99
 80032f2:	2299      	movs	r2, #153	; 0x99
 80032f4:	2100      	movs	r1, #0
 80032f6:	f7fd f8ed 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	330a      	adds	r3, #10
 8003300:	b2d8      	uxtb	r0, r3
 8003302:	23cc      	movs	r3, #204	; 0xcc
 8003304:	2200      	movs	r2, #0
 8003306:	2166      	movs	r1, #102	; 0x66
 8003308:	f7fd f8e4 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	330b      	adds	r3, #11
 8003312:	b2d8      	uxtb	r0, r3
 8003314:	2300      	movs	r3, #0
 8003316:	2200      	movs	r2, #0
 8003318:	21cc      	movs	r1, #204	; 0xcc
 800331a:	f7fd f8db 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	330c      	adds	r3, #12
 8003324:	b2d8      	uxtb	r0, r3
 8003326:	2300      	movs	r3, #0
 8003328:	2200      	movs	r2, #0
 800332a:	21cc      	movs	r1, #204	; 0xcc
 800332c:	f7fd f8d2 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	330d      	adds	r3, #13
 8003336:	b2d8      	uxtb	r0, r3
 8003338:	2333      	movs	r3, #51	; 0x33
 800333a:	22ff      	movs	r2, #255	; 0xff
 800333c:	21ff      	movs	r1, #255	; 0xff
 800333e:	f7fd f8c9 	bl	80004d4 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	330e      	adds	r3, #14
 8003348:	b2d8      	uxtb	r0, r3
 800334a:	2300      	movs	r3, #0
 800334c:	22cc      	movs	r2, #204	; 0xcc
 800334e:	2100      	movs	r1, #0
 8003350:	f7fd f8c0 	bl	80004d4 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	330f      	adds	r3, #15
 800335a:	b2d8      	uxtb	r0, r3
 800335c:	2300      	movs	r3, #0
 800335e:	22cc      	movs	r2, #204	; 0xcc
 8003360:	2100      	movs	r1, #0
 8003362:	f7fd f8b7 	bl	80004d4 <Set_Pixel>
	break;
 8003366:	bf00      	nop
}

numled=96;
 8003368:	2360      	movs	r3, #96	; 0x60
 800336a:	60fb      	str	r3, [r7, #12]
switch(banda7){
 800336c:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8003370:	3b01      	subs	r3, #1
 8003372:	2b07      	cmp	r3, #7
 8003374:	f200 8396 	bhi.w	8003aa4 <vumetro+0x3574>
 8003378:	a201      	add	r2, pc, #4	; (adr r2, 8003380 <vumetro+0x2e50>)
 800337a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337e:	bf00      	nop
 8003380:	080033a1 	.word	0x080033a1
 8003384:	08003413 	.word	0x08003413
 8003388:	080034a9 	.word	0x080034a9
 800338c:	08003563 	.word	0x08003563
 8003390:	08003641 	.word	0x08003641
 8003394:	08003743 	.word	0x08003743
 8003398:	08003869 	.word	0x08003869
 800339c:	08003987 	.word	0x08003987
case 1:
	Set_Pixel(0+numled,76,0,153);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	b2d8      	uxtb	r0, r3
 80033a4:	2399      	movs	r3, #153	; 0x99
 80033a6:	2200      	movs	r2, #0
 80033a8:	214c      	movs	r1, #76	; 0x4c
 80033aa:	f7fd f893 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 80033ae:	2301      	movs	r3, #1
 80033b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80033b2:	e00d      	b.n	80033d0 <vumetro+0x2ea0>
		Set_Pixel(j+numled,0,0,0);
 80033b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	4413      	add	r3, r2
 80033be:	b2d8      	uxtb	r0, r3
 80033c0:	2300      	movs	r3, #0
 80033c2:	2200      	movs	r2, #0
 80033c4:	2100      	movs	r1, #0
 80033c6:	f7fd f885 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 80033ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033cc:	3301      	adds	r3, #1
 80033ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80033d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033d2:	2b07      	cmp	r3, #7
 80033d4:	d9ee      	bls.n	80033b4 <vumetro+0x2e84>
	}
	Set_Pixel(8+numled,76,0,153);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	3308      	adds	r3, #8
 80033dc:	b2d8      	uxtb	r0, r3
 80033de:	2399      	movs	r3, #153	; 0x99
 80033e0:	2200      	movs	r2, #0
 80033e2:	214c      	movs	r1, #76	; 0x4c
 80033e4:	f7fd f876 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 80033e8:	2309      	movs	r3, #9
 80033ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80033ec:	e00d      	b.n	800340a <vumetro+0x2eda>
		Set_Pixel(j+numled,0,0,0);
 80033ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	4413      	add	r3, r2
 80033f8:	b2d8      	uxtb	r0, r3
 80033fa:	2300      	movs	r3, #0
 80033fc:	2200      	movs	r2, #0
 80033fe:	2100      	movs	r1, #0
 8003400:	f7fd f868 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8003404:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003406:	3301      	adds	r3, #1
 8003408:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800340a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800340c:	2b0f      	cmp	r3, #15
 800340e:	d9ee      	bls.n	80033ee <vumetro+0x2ebe>
	}
	break;
 8003410:	e348      	b.n	8003aa4 <vumetro+0x3574>
case 2:
	Set_Pixel(0+numled,0,76,153);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	b2d8      	uxtb	r0, r3
 8003416:	2399      	movs	r3, #153	; 0x99
 8003418:	224c      	movs	r2, #76	; 0x4c
 800341a:	2100      	movs	r1, #0
 800341c:	f7fd f85a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	3301      	adds	r3, #1
 8003426:	b2d8      	uxtb	r0, r3
 8003428:	2399      	movs	r3, #153	; 0x99
 800342a:	2299      	movs	r2, #153	; 0x99
 800342c:	2100      	movs	r1, #0
 800342e:	f7fd f851 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8003432:	2302      	movs	r3, #2
 8003434:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003436:	e00d      	b.n	8003454 <vumetro+0x2f24>
		Set_Pixel(j+numled,0,0,0);
 8003438:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	4413      	add	r3, r2
 8003442:	b2d8      	uxtb	r0, r3
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	2100      	movs	r1, #0
 800344a:	f7fd f843 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 800344e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003450:	3301      	adds	r3, #1
 8003452:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003454:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003456:	2b07      	cmp	r3, #7
 8003458:	d9ee      	bls.n	8003438 <vumetro+0x2f08>
	}
	Set_Pixel(8+numled,0,76,153);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	3308      	adds	r3, #8
 8003460:	b2d8      	uxtb	r0, r3
 8003462:	2399      	movs	r3, #153	; 0x99
 8003464:	224c      	movs	r2, #76	; 0x4c
 8003466:	2100      	movs	r1, #0
 8003468:	f7fd f834 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	3309      	adds	r3, #9
 8003472:	b2d8      	uxtb	r0, r3
 8003474:	2399      	movs	r3, #153	; 0x99
 8003476:	2299      	movs	r2, #153	; 0x99
 8003478:	2100      	movs	r1, #0
 800347a:	f7fd f82b 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 800347e:	230a      	movs	r3, #10
 8003480:	873b      	strh	r3, [r7, #56]	; 0x38
 8003482:	e00d      	b.n	80034a0 <vumetro+0x2f70>
		Set_Pixel(j+numled,0,0,0);
 8003484:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003486:	b2da      	uxtb	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	4413      	add	r3, r2
 800348e:	b2d8      	uxtb	r0, r3
 8003490:	2300      	movs	r3, #0
 8003492:	2200      	movs	r2, #0
 8003494:	2100      	movs	r1, #0
 8003496:	f7fd f81d 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 800349a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800349c:	3301      	adds	r3, #1
 800349e:	873b      	strh	r3, [r7, #56]	; 0x38
 80034a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80034a2:	2b0f      	cmp	r3, #15
 80034a4:	d9ee      	bls.n	8003484 <vumetro+0x2f54>
	}
	break;
 80034a6:	e2fd      	b.n	8003aa4 <vumetro+0x3574>

case 3:
	Set_Pixel(0+numled,0,76,153);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	b2d8      	uxtb	r0, r3
 80034ac:	2399      	movs	r3, #153	; 0x99
 80034ae:	224c      	movs	r2, #76	; 0x4c
 80034b0:	2100      	movs	r1, #0
 80034b2:	f7fd f80f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	b2d8      	uxtb	r0, r3
 80034be:	2399      	movs	r3, #153	; 0x99
 80034c0:	2299      	movs	r2, #153	; 0x99
 80034c2:	2100      	movs	r1, #0
 80034c4:	f7fd f806 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	3302      	adds	r3, #2
 80034ce:	b2d8      	uxtb	r0, r3
 80034d0:	23cc      	movs	r3, #204	; 0xcc
 80034d2:	2200      	movs	r2, #0
 80034d4:	2166      	movs	r1, #102	; 0x66
 80034d6:	f7fc fffd 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 80034da:	2303      	movs	r3, #3
 80034dc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80034de:	e00d      	b.n	80034fc <vumetro+0x2fcc>
		Set_Pixel(j+numled,0,0,0);
 80034e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	b2d8      	uxtb	r0, r3
 80034ec:	2300      	movs	r3, #0
 80034ee:	2200      	movs	r2, #0
 80034f0:	2100      	movs	r1, #0
 80034f2:	f7fc ffef 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 80034f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034f8:	3301      	adds	r3, #1
 80034fa:	86fb      	strh	r3, [r7, #54]	; 0x36
 80034fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034fe:	2b07      	cmp	r3, #7
 8003500:	d9ee      	bls.n	80034e0 <vumetro+0x2fb0>
	}
	Set_Pixel(8+numled,0,76,153);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	3308      	adds	r3, #8
 8003508:	b2d8      	uxtb	r0, r3
 800350a:	2399      	movs	r3, #153	; 0x99
 800350c:	224c      	movs	r2, #76	; 0x4c
 800350e:	2100      	movs	r1, #0
 8003510:	f7fc ffe0 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	3309      	adds	r3, #9
 800351a:	b2d8      	uxtb	r0, r3
 800351c:	2399      	movs	r3, #153	; 0x99
 800351e:	2299      	movs	r2, #153	; 0x99
 8003520:	2100      	movs	r1, #0
 8003522:	f7fc ffd7 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	330a      	adds	r3, #10
 800352c:	b2d8      	uxtb	r0, r3
 800352e:	23cc      	movs	r3, #204	; 0xcc
 8003530:	2200      	movs	r2, #0
 8003532:	2166      	movs	r1, #102	; 0x66
 8003534:	f7fc ffce 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8003538:	230b      	movs	r3, #11
 800353a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800353c:	e00d      	b.n	800355a <vumetro+0x302a>
		Set_Pixel(j+numled,0,0,0);
 800353e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003540:	b2da      	uxtb	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	4413      	add	r3, r2
 8003548:	b2d8      	uxtb	r0, r3
 800354a:	2300      	movs	r3, #0
 800354c:	2200      	movs	r2, #0
 800354e:	2100      	movs	r1, #0
 8003550:	f7fc ffc0 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8003554:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003556:	3301      	adds	r3, #1
 8003558:	86bb      	strh	r3, [r7, #52]	; 0x34
 800355a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800355c:	2b0f      	cmp	r3, #15
 800355e:	d9ee      	bls.n	800353e <vumetro+0x300e>
	}
	break;
 8003560:	e2a0      	b.n	8003aa4 <vumetro+0x3574>
case 4:
	Set_Pixel(0+numled,0,76,153);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	b2d8      	uxtb	r0, r3
 8003566:	2399      	movs	r3, #153	; 0x99
 8003568:	224c      	movs	r2, #76	; 0x4c
 800356a:	2100      	movs	r1, #0
 800356c:	f7fc ffb2 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	3301      	adds	r3, #1
 8003576:	b2d8      	uxtb	r0, r3
 8003578:	2399      	movs	r3, #153	; 0x99
 800357a:	2299      	movs	r2, #153	; 0x99
 800357c:	2100      	movs	r1, #0
 800357e:	f7fc ffa9 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	3302      	adds	r3, #2
 8003588:	b2d8      	uxtb	r0, r3
 800358a:	23cc      	movs	r3, #204	; 0xcc
 800358c:	2200      	movs	r2, #0
 800358e:	2166      	movs	r1, #102	; 0x66
 8003590:	f7fc ffa0 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	3303      	adds	r3, #3
 800359a:	b2d8      	uxtb	r0, r3
 800359c:	2300      	movs	r3, #0
 800359e:	2200      	movs	r2, #0
 80035a0:	21cc      	movs	r1, #204	; 0xcc
 80035a2:	f7fc ff97 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 80035a6:	2304      	movs	r3, #4
 80035a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80035aa:	e00d      	b.n	80035c8 <vumetro+0x3098>
		Set_Pixel(j+numled,0,0,0);
 80035ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	4413      	add	r3, r2
 80035b6:	b2d8      	uxtb	r0, r3
 80035b8:	2300      	movs	r3, #0
 80035ba:	2200      	movs	r2, #0
 80035bc:	2100      	movs	r1, #0
 80035be:	f7fc ff89 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 80035c2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80035c4:	3301      	adds	r3, #1
 80035c6:	867b      	strh	r3, [r7, #50]	; 0x32
 80035c8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80035ca:	2b07      	cmp	r3, #7
 80035cc:	d9ee      	bls.n	80035ac <vumetro+0x307c>
	}
	Set_Pixel(8+numled,0,76,153);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	3308      	adds	r3, #8
 80035d4:	b2d8      	uxtb	r0, r3
 80035d6:	2399      	movs	r3, #153	; 0x99
 80035d8:	224c      	movs	r2, #76	; 0x4c
 80035da:	2100      	movs	r1, #0
 80035dc:	f7fc ff7a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	3309      	adds	r3, #9
 80035e6:	b2d8      	uxtb	r0, r3
 80035e8:	2399      	movs	r3, #153	; 0x99
 80035ea:	2299      	movs	r2, #153	; 0x99
 80035ec:	2100      	movs	r1, #0
 80035ee:	f7fc ff71 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	330a      	adds	r3, #10
 80035f8:	b2d8      	uxtb	r0, r3
 80035fa:	23cc      	movs	r3, #204	; 0xcc
 80035fc:	2200      	movs	r2, #0
 80035fe:	2166      	movs	r1, #102	; 0x66
 8003600:	f7fc ff68 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	330b      	adds	r3, #11
 800360a:	b2d8      	uxtb	r0, r3
 800360c:	2300      	movs	r3, #0
 800360e:	2200      	movs	r2, #0
 8003610:	21cc      	movs	r1, #204	; 0xcc
 8003612:	f7fc ff5f 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8003616:	230c      	movs	r3, #12
 8003618:	863b      	strh	r3, [r7, #48]	; 0x30
 800361a:	e00d      	b.n	8003638 <vumetro+0x3108>
		Set_Pixel(j+numled,0,0,0);
 800361c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800361e:	b2da      	uxtb	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	4413      	add	r3, r2
 8003626:	b2d8      	uxtb	r0, r3
 8003628:	2300      	movs	r3, #0
 800362a:	2200      	movs	r2, #0
 800362c:	2100      	movs	r1, #0
 800362e:	f7fc ff51 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8003632:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003634:	3301      	adds	r3, #1
 8003636:	863b      	strh	r3, [r7, #48]	; 0x30
 8003638:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800363a:	2b0f      	cmp	r3, #15
 800363c:	d9ee      	bls.n	800361c <vumetro+0x30ec>
	}
	break;
 800363e:	e231      	b.n	8003aa4 <vumetro+0x3574>
case 5:
	Set_Pixel(0+numled,0,76,153);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	b2d8      	uxtb	r0, r3
 8003644:	2399      	movs	r3, #153	; 0x99
 8003646:	224c      	movs	r2, #76	; 0x4c
 8003648:	2100      	movs	r1, #0
 800364a:	f7fc ff43 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	3301      	adds	r3, #1
 8003654:	b2d8      	uxtb	r0, r3
 8003656:	2399      	movs	r3, #153	; 0x99
 8003658:	2299      	movs	r2, #153	; 0x99
 800365a:	2100      	movs	r1, #0
 800365c:	f7fc ff3a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	3302      	adds	r3, #2
 8003666:	b2d8      	uxtb	r0, r3
 8003668:	23cc      	movs	r3, #204	; 0xcc
 800366a:	2200      	movs	r2, #0
 800366c:	2166      	movs	r1, #102	; 0x66
 800366e:	f7fc ff31 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	3303      	adds	r3, #3
 8003678:	b2d8      	uxtb	r0, r3
 800367a:	2300      	movs	r3, #0
 800367c:	2200      	movs	r2, #0
 800367e:	21cc      	movs	r1, #204	; 0xcc
 8003680:	f7fc ff28 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	3304      	adds	r3, #4
 800368a:	b2d8      	uxtb	r0, r3
 800368c:	2300      	movs	r3, #0
 800368e:	2200      	movs	r2, #0
 8003690:	21cc      	movs	r1, #204	; 0xcc
 8003692:	f7fc ff1f 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8003696:	2305      	movs	r3, #5
 8003698:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800369a:	e00d      	b.n	80036b8 <vumetro+0x3188>
		Set_Pixel(j+numled,0,0,0);
 800369c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	4413      	add	r3, r2
 80036a6:	b2d8      	uxtb	r0, r3
 80036a8:	2300      	movs	r3, #0
 80036aa:	2200      	movs	r2, #0
 80036ac:	2100      	movs	r1, #0
 80036ae:	f7fc ff11 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 80036b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036b4:	3301      	adds	r3, #1
 80036b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80036b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036ba:	2b07      	cmp	r3, #7
 80036bc:	d9ee      	bls.n	800369c <vumetro+0x316c>
	}
	Set_Pixel(8+numled,0,76,153);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	3308      	adds	r3, #8
 80036c4:	b2d8      	uxtb	r0, r3
 80036c6:	2399      	movs	r3, #153	; 0x99
 80036c8:	224c      	movs	r2, #76	; 0x4c
 80036ca:	2100      	movs	r1, #0
 80036cc:	f7fc ff02 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	3309      	adds	r3, #9
 80036d6:	b2d8      	uxtb	r0, r3
 80036d8:	2399      	movs	r3, #153	; 0x99
 80036da:	2299      	movs	r2, #153	; 0x99
 80036dc:	2100      	movs	r1, #0
 80036de:	f7fc fef9 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	330a      	adds	r3, #10
 80036e8:	b2d8      	uxtb	r0, r3
 80036ea:	23cc      	movs	r3, #204	; 0xcc
 80036ec:	2200      	movs	r2, #0
 80036ee:	2166      	movs	r1, #102	; 0x66
 80036f0:	f7fc fef0 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	330b      	adds	r3, #11
 80036fa:	b2d8      	uxtb	r0, r3
 80036fc:	2300      	movs	r3, #0
 80036fe:	2200      	movs	r2, #0
 8003700:	21cc      	movs	r1, #204	; 0xcc
 8003702:	f7fc fee7 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	330c      	adds	r3, #12
 800370c:	b2d8      	uxtb	r0, r3
 800370e:	2300      	movs	r3, #0
 8003710:	2200      	movs	r2, #0
 8003712:	21cc      	movs	r1, #204	; 0xcc
 8003714:	f7fc fede 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8003718:	230d      	movs	r3, #13
 800371a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800371c:	e00d      	b.n	800373a <vumetro+0x320a>
		Set_Pixel(j+numled,0,0,0);
 800371e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003720:	b2da      	uxtb	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	4413      	add	r3, r2
 8003728:	b2d8      	uxtb	r0, r3
 800372a:	2300      	movs	r3, #0
 800372c:	2200      	movs	r2, #0
 800372e:	2100      	movs	r1, #0
 8003730:	f7fc fed0 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8003734:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003736:	3301      	adds	r3, #1
 8003738:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800373a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800373c:	2b0f      	cmp	r3, #15
 800373e:	d9ee      	bls.n	800371e <vumetro+0x31ee>
	}
	break;
 8003740:	e1b0      	b.n	8003aa4 <vumetro+0x3574>
case 6:
	Set_Pixel(0+numled,0,76,153);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	b2d8      	uxtb	r0, r3
 8003746:	2399      	movs	r3, #153	; 0x99
 8003748:	224c      	movs	r2, #76	; 0x4c
 800374a:	2100      	movs	r1, #0
 800374c:	f7fc fec2 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	3301      	adds	r3, #1
 8003756:	b2d8      	uxtb	r0, r3
 8003758:	2399      	movs	r3, #153	; 0x99
 800375a:	2299      	movs	r2, #153	; 0x99
 800375c:	2100      	movs	r1, #0
 800375e:	f7fc feb9 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	3302      	adds	r3, #2
 8003768:	b2d8      	uxtb	r0, r3
 800376a:	23cc      	movs	r3, #204	; 0xcc
 800376c:	2200      	movs	r2, #0
 800376e:	2166      	movs	r1, #102	; 0x66
 8003770:	f7fc feb0 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	3303      	adds	r3, #3
 800377a:	b2d8      	uxtb	r0, r3
 800377c:	2300      	movs	r3, #0
 800377e:	2200      	movs	r2, #0
 8003780:	21cc      	movs	r1, #204	; 0xcc
 8003782:	f7fc fea7 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	3304      	adds	r3, #4
 800378c:	b2d8      	uxtb	r0, r3
 800378e:	2300      	movs	r3, #0
 8003790:	2200      	movs	r2, #0
 8003792:	21cc      	movs	r1, #204	; 0xcc
 8003794:	f7fc fe9e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	3305      	adds	r3, #5
 800379e:	b2d8      	uxtb	r0, r3
 80037a0:	2333      	movs	r3, #51	; 0x33
 80037a2:	22ff      	movs	r2, #255	; 0xff
 80037a4:	21ff      	movs	r1, #255	; 0xff
 80037a6:	f7fc fe95 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 80037aa:	2306      	movs	r3, #6
 80037ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80037ae:	e00d      	b.n	80037cc <vumetro+0x329c>
		Set_Pixel(j+numled,0,0,0);
 80037b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	b2d8      	uxtb	r0, r3
 80037bc:	2300      	movs	r3, #0
 80037be:	2200      	movs	r2, #0
 80037c0:	2100      	movs	r1, #0
 80037c2:	f7fc fe87 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 80037c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037c8:	3301      	adds	r3, #1
 80037ca:	857b      	strh	r3, [r7, #42]	; 0x2a
 80037cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037ce:	2b07      	cmp	r3, #7
 80037d0:	d9ee      	bls.n	80037b0 <vumetro+0x3280>
	}
	Set_Pixel(8+numled,0,76,153);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	3308      	adds	r3, #8
 80037d8:	b2d8      	uxtb	r0, r3
 80037da:	2399      	movs	r3, #153	; 0x99
 80037dc:	224c      	movs	r2, #76	; 0x4c
 80037de:	2100      	movs	r1, #0
 80037e0:	f7fc fe78 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	3309      	adds	r3, #9
 80037ea:	b2d8      	uxtb	r0, r3
 80037ec:	2399      	movs	r3, #153	; 0x99
 80037ee:	2299      	movs	r2, #153	; 0x99
 80037f0:	2100      	movs	r1, #0
 80037f2:	f7fc fe6f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	330a      	adds	r3, #10
 80037fc:	b2d8      	uxtb	r0, r3
 80037fe:	23cc      	movs	r3, #204	; 0xcc
 8003800:	2200      	movs	r2, #0
 8003802:	2166      	movs	r1, #102	; 0x66
 8003804:	f7fc fe66 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	330b      	adds	r3, #11
 800380e:	b2d8      	uxtb	r0, r3
 8003810:	2300      	movs	r3, #0
 8003812:	2200      	movs	r2, #0
 8003814:	21cc      	movs	r1, #204	; 0xcc
 8003816:	f7fc fe5d 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	330c      	adds	r3, #12
 8003820:	b2d8      	uxtb	r0, r3
 8003822:	2300      	movs	r3, #0
 8003824:	2200      	movs	r2, #0
 8003826:	21cc      	movs	r1, #204	; 0xcc
 8003828:	f7fc fe54 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	330d      	adds	r3, #13
 8003832:	b2d8      	uxtb	r0, r3
 8003834:	2333      	movs	r3, #51	; 0x33
 8003836:	22ff      	movs	r2, #255	; 0xff
 8003838:	21ff      	movs	r1, #255	; 0xff
 800383a:	f7fc fe4b 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 800383e:	230e      	movs	r3, #14
 8003840:	853b      	strh	r3, [r7, #40]	; 0x28
 8003842:	e00d      	b.n	8003860 <vumetro+0x3330>
		Set_Pixel(j+numled,0,0,0);
 8003844:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003846:	b2da      	uxtb	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	4413      	add	r3, r2
 800384e:	b2d8      	uxtb	r0, r3
 8003850:	2300      	movs	r3, #0
 8003852:	2200      	movs	r2, #0
 8003854:	2100      	movs	r1, #0
 8003856:	f7fc fe3d 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 800385a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800385c:	3301      	adds	r3, #1
 800385e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003860:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003862:	2b0f      	cmp	r3, #15
 8003864:	d9ee      	bls.n	8003844 <vumetro+0x3314>
	}
	break;
 8003866:	e11d      	b.n	8003aa4 <vumetro+0x3574>
case 7:
	Set_Pixel(0+numled,0,76,153);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	b2d8      	uxtb	r0, r3
 800386c:	2399      	movs	r3, #153	; 0x99
 800386e:	224c      	movs	r2, #76	; 0x4c
 8003870:	2100      	movs	r1, #0
 8003872:	f7fc fe2f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	3301      	adds	r3, #1
 800387c:	b2d8      	uxtb	r0, r3
 800387e:	2399      	movs	r3, #153	; 0x99
 8003880:	2299      	movs	r2, #153	; 0x99
 8003882:	2100      	movs	r1, #0
 8003884:	f7fc fe26 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	3302      	adds	r3, #2
 800388e:	b2d8      	uxtb	r0, r3
 8003890:	23cc      	movs	r3, #204	; 0xcc
 8003892:	2200      	movs	r2, #0
 8003894:	2166      	movs	r1, #102	; 0x66
 8003896:	f7fc fe1d 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	3303      	adds	r3, #3
 80038a0:	b2d8      	uxtb	r0, r3
 80038a2:	2300      	movs	r3, #0
 80038a4:	2200      	movs	r2, #0
 80038a6:	21cc      	movs	r1, #204	; 0xcc
 80038a8:	f7fc fe14 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	3304      	adds	r3, #4
 80038b2:	b2d8      	uxtb	r0, r3
 80038b4:	2300      	movs	r3, #0
 80038b6:	2200      	movs	r2, #0
 80038b8:	21cc      	movs	r1, #204	; 0xcc
 80038ba:	f7fc fe0b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	3305      	adds	r3, #5
 80038c4:	b2d8      	uxtb	r0, r3
 80038c6:	2333      	movs	r3, #51	; 0x33
 80038c8:	22ff      	movs	r2, #255	; 0xff
 80038ca:	21ff      	movs	r1, #255	; 0xff
 80038cc:	f7fc fe02 	bl	80004d4 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	3306      	adds	r3, #6
 80038d6:	b2d8      	uxtb	r0, r3
 80038d8:	2300      	movs	r3, #0
 80038da:	22cc      	movs	r2, #204	; 0xcc
 80038dc:	2100      	movs	r1, #0
 80038de:	f7fc fdf9 	bl	80004d4 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	3307      	adds	r3, #7
 80038e8:	b2d8      	uxtb	r0, r3
 80038ea:	2300      	movs	r3, #0
 80038ec:	2200      	movs	r2, #0
 80038ee:	2100      	movs	r1, #0
 80038f0:	f7fc fdf0 	bl	80004d4 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	3308      	adds	r3, #8
 80038fa:	b2d8      	uxtb	r0, r3
 80038fc:	2399      	movs	r3, #153	; 0x99
 80038fe:	224c      	movs	r2, #76	; 0x4c
 8003900:	2100      	movs	r1, #0
 8003902:	f7fc fde7 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	3309      	adds	r3, #9
 800390c:	b2d8      	uxtb	r0, r3
 800390e:	2399      	movs	r3, #153	; 0x99
 8003910:	2299      	movs	r2, #153	; 0x99
 8003912:	2100      	movs	r1, #0
 8003914:	f7fc fdde 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	b2db      	uxtb	r3, r3
 800391c:	330a      	adds	r3, #10
 800391e:	b2d8      	uxtb	r0, r3
 8003920:	23cc      	movs	r3, #204	; 0xcc
 8003922:	2200      	movs	r2, #0
 8003924:	2166      	movs	r1, #102	; 0x66
 8003926:	f7fc fdd5 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	330b      	adds	r3, #11
 8003930:	b2d8      	uxtb	r0, r3
 8003932:	2300      	movs	r3, #0
 8003934:	2200      	movs	r2, #0
 8003936:	21cc      	movs	r1, #204	; 0xcc
 8003938:	f7fc fdcc 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	330c      	adds	r3, #12
 8003942:	b2d8      	uxtb	r0, r3
 8003944:	2300      	movs	r3, #0
 8003946:	2200      	movs	r2, #0
 8003948:	21cc      	movs	r1, #204	; 0xcc
 800394a:	f7fc fdc3 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	330d      	adds	r3, #13
 8003954:	b2d8      	uxtb	r0, r3
 8003956:	2333      	movs	r3, #51	; 0x33
 8003958:	22ff      	movs	r2, #255	; 0xff
 800395a:	21ff      	movs	r1, #255	; 0xff
 800395c:	f7fc fdba 	bl	80004d4 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	330e      	adds	r3, #14
 8003966:	b2d8      	uxtb	r0, r3
 8003968:	2300      	movs	r3, #0
 800396a:	22cc      	movs	r2, #204	; 0xcc
 800396c:	2100      	movs	r1, #0
 800396e:	f7fc fdb1 	bl	80004d4 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	330f      	adds	r3, #15
 8003978:	b2d8      	uxtb	r0, r3
 800397a:	2300      	movs	r3, #0
 800397c:	2200      	movs	r2, #0
 800397e:	2100      	movs	r1, #0
 8003980:	f7fc fda8 	bl	80004d4 <Set_Pixel>
	break;
 8003984:	e08e      	b.n	8003aa4 <vumetro+0x3574>
case 8:
	Set_Pixel(0+numled,0,76,153);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	b2d8      	uxtb	r0, r3
 800398a:	2399      	movs	r3, #153	; 0x99
 800398c:	224c      	movs	r2, #76	; 0x4c
 800398e:	2100      	movs	r1, #0
 8003990:	f7fc fda0 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	3301      	adds	r3, #1
 800399a:	b2d8      	uxtb	r0, r3
 800399c:	2399      	movs	r3, #153	; 0x99
 800399e:	2299      	movs	r2, #153	; 0x99
 80039a0:	2100      	movs	r1, #0
 80039a2:	f7fc fd97 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	3302      	adds	r3, #2
 80039ac:	b2d8      	uxtb	r0, r3
 80039ae:	23cc      	movs	r3, #204	; 0xcc
 80039b0:	2200      	movs	r2, #0
 80039b2:	2166      	movs	r1, #102	; 0x66
 80039b4:	f7fc fd8e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	3303      	adds	r3, #3
 80039be:	b2d8      	uxtb	r0, r3
 80039c0:	2300      	movs	r3, #0
 80039c2:	2200      	movs	r2, #0
 80039c4:	21cc      	movs	r1, #204	; 0xcc
 80039c6:	f7fc fd85 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	3304      	adds	r3, #4
 80039d0:	b2d8      	uxtb	r0, r3
 80039d2:	2300      	movs	r3, #0
 80039d4:	2200      	movs	r2, #0
 80039d6:	21cc      	movs	r1, #204	; 0xcc
 80039d8:	f7fc fd7c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	3305      	adds	r3, #5
 80039e2:	b2d8      	uxtb	r0, r3
 80039e4:	2333      	movs	r3, #51	; 0x33
 80039e6:	22ff      	movs	r2, #255	; 0xff
 80039e8:	21ff      	movs	r1, #255	; 0xff
 80039ea:	f7fc fd73 	bl	80004d4 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	3306      	adds	r3, #6
 80039f4:	b2d8      	uxtb	r0, r3
 80039f6:	2300      	movs	r3, #0
 80039f8:	22cc      	movs	r2, #204	; 0xcc
 80039fa:	2100      	movs	r1, #0
 80039fc:	f7fc fd6a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	3307      	adds	r3, #7
 8003a06:	b2d8      	uxtb	r0, r3
 8003a08:	2300      	movs	r3, #0
 8003a0a:	22cc      	movs	r2, #204	; 0xcc
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	f7fc fd61 	bl	80004d4 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	3308      	adds	r3, #8
 8003a18:	b2d8      	uxtb	r0, r3
 8003a1a:	2399      	movs	r3, #153	; 0x99
 8003a1c:	224c      	movs	r2, #76	; 0x4c
 8003a1e:	2100      	movs	r1, #0
 8003a20:	f7fc fd58 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	3309      	adds	r3, #9
 8003a2a:	b2d8      	uxtb	r0, r3
 8003a2c:	2399      	movs	r3, #153	; 0x99
 8003a2e:	2299      	movs	r2, #153	; 0x99
 8003a30:	2100      	movs	r1, #0
 8003a32:	f7fc fd4f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	330a      	adds	r3, #10
 8003a3c:	b2d8      	uxtb	r0, r3
 8003a3e:	23cc      	movs	r3, #204	; 0xcc
 8003a40:	2200      	movs	r2, #0
 8003a42:	2166      	movs	r1, #102	; 0x66
 8003a44:	f7fc fd46 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	330b      	adds	r3, #11
 8003a4e:	b2d8      	uxtb	r0, r3
 8003a50:	2300      	movs	r3, #0
 8003a52:	2200      	movs	r2, #0
 8003a54:	21cc      	movs	r1, #204	; 0xcc
 8003a56:	f7fc fd3d 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	330c      	adds	r3, #12
 8003a60:	b2d8      	uxtb	r0, r3
 8003a62:	2300      	movs	r3, #0
 8003a64:	2200      	movs	r2, #0
 8003a66:	21cc      	movs	r1, #204	; 0xcc
 8003a68:	f7fc fd34 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	330d      	adds	r3, #13
 8003a72:	b2d8      	uxtb	r0, r3
 8003a74:	2333      	movs	r3, #51	; 0x33
 8003a76:	22ff      	movs	r2, #255	; 0xff
 8003a78:	21ff      	movs	r1, #255	; 0xff
 8003a7a:	f7fc fd2b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	330e      	adds	r3, #14
 8003a84:	b2d8      	uxtb	r0, r3
 8003a86:	2300      	movs	r3, #0
 8003a88:	22cc      	movs	r2, #204	; 0xcc
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	f7fc fd22 	bl	80004d4 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	330f      	adds	r3, #15
 8003a96:	b2d8      	uxtb	r0, r3
 8003a98:	2300      	movs	r3, #0
 8003a9a:	22cc      	movs	r2, #204	; 0xcc
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	f7fc fd19 	bl	80004d4 <Set_Pixel>
	break;
 8003aa2:	bf00      	nop
}

numled=112;
 8003aa4:	2370      	movs	r3, #112	; 0x70
 8003aa6:	60fb      	str	r3, [r7, #12]
switch(banda8){
 8003aa8:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8003aac:	3b01      	subs	r3, #1
 8003aae:	2b07      	cmp	r3, #7
 8003ab0:	f200 8396 	bhi.w	80041e0 <vumetro+0x3cb0>
 8003ab4:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <vumetro+0x358c>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003add 	.word	0x08003add
 8003ac0:	08003b4f 	.word	0x08003b4f
 8003ac4:	08003be5 	.word	0x08003be5
 8003ac8:	08003c9f 	.word	0x08003c9f
 8003acc:	08003d7d 	.word	0x08003d7d
 8003ad0:	08003e7f 	.word	0x08003e7f
 8003ad4:	08003fa5 	.word	0x08003fa5
 8003ad8:	080040c3 	.word	0x080040c3
case 1:
	Set_Pixel(0+numled,76,0,153);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	b2d8      	uxtb	r0, r3
 8003ae0:	2399      	movs	r3, #153	; 0x99
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	214c      	movs	r1, #76	; 0x4c
 8003ae6:	f7fc fcf5 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8003aea:	2301      	movs	r3, #1
 8003aec:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003aee:	e00d      	b.n	8003b0c <vumetro+0x35dc>
		Set_Pixel(j+numled,0,0,0);
 8003af0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	4413      	add	r3, r2
 8003afa:	b2d8      	uxtb	r0, r3
 8003afc:	2300      	movs	r3, #0
 8003afe:	2200      	movs	r2, #0
 8003b00:	2100      	movs	r1, #0
 8003b02:	f7fc fce7 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=1;j<=7;j++){
 8003b06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b08:	3301      	adds	r3, #1
 8003b0a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003b0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b0e:	2b07      	cmp	r3, #7
 8003b10:	d9ee      	bls.n	8003af0 <vumetro+0x35c0>
	}
	Set_Pixel(8+numled,76,0,153);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	3308      	adds	r3, #8
 8003b18:	b2d8      	uxtb	r0, r3
 8003b1a:	2399      	movs	r3, #153	; 0x99
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	214c      	movs	r1, #76	; 0x4c
 8003b20:	f7fc fcd8 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8003b24:	2309      	movs	r3, #9
 8003b26:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003b28:	e00d      	b.n	8003b46 <vumetro+0x3616>
		Set_Pixel(j+numled,0,0,0);
 8003b2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	b2d8      	uxtb	r0, r3
 8003b36:	2300      	movs	r3, #0
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	f7fc fcca 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=9;j<=15;j++){
 8003b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b42:	3301      	adds	r3, #1
 8003b44:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003b46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b48:	2b0f      	cmp	r3, #15
 8003b4a:	d9ee      	bls.n	8003b2a <vumetro+0x35fa>
	}
	break;
 8003b4c:	e348      	b.n	80041e0 <vumetro+0x3cb0>
case 2:
	Set_Pixel(0+numled,0,76,153);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	b2d8      	uxtb	r0, r3
 8003b52:	2399      	movs	r3, #153	; 0x99
 8003b54:	224c      	movs	r2, #76	; 0x4c
 8003b56:	2100      	movs	r1, #0
 8003b58:	f7fc fcbc 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	3301      	adds	r3, #1
 8003b62:	b2d8      	uxtb	r0, r3
 8003b64:	2399      	movs	r3, #153	; 0x99
 8003b66:	2299      	movs	r2, #153	; 0x99
 8003b68:	2100      	movs	r1, #0
 8003b6a:	f7fc fcb3 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8003b6e:	2302      	movs	r3, #2
 8003b70:	847b      	strh	r3, [r7, #34]	; 0x22
 8003b72:	e00d      	b.n	8003b90 <vumetro+0x3660>
		Set_Pixel(j+numled,0,0,0);
 8003b74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	b2d8      	uxtb	r0, r3
 8003b80:	2300      	movs	r3, #0
 8003b82:	2200      	movs	r2, #0
 8003b84:	2100      	movs	r1, #0
 8003b86:	f7fc fca5 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=2;j<=7;j++){
 8003b8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003b90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b92:	2b07      	cmp	r3, #7
 8003b94:	d9ee      	bls.n	8003b74 <vumetro+0x3644>
	}
	Set_Pixel(8+numled,0,76,153);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	b2d8      	uxtb	r0, r3
 8003b9e:	2399      	movs	r3, #153	; 0x99
 8003ba0:	224c      	movs	r2, #76	; 0x4c
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	f7fc fc96 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	3309      	adds	r3, #9
 8003bae:	b2d8      	uxtb	r0, r3
 8003bb0:	2399      	movs	r3, #153	; 0x99
 8003bb2:	2299      	movs	r2, #153	; 0x99
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	f7fc fc8d 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8003bba:	230a      	movs	r3, #10
 8003bbc:	843b      	strh	r3, [r7, #32]
 8003bbe:	e00d      	b.n	8003bdc <vumetro+0x36ac>
		Set_Pixel(j+numled,0,0,0);
 8003bc0:	8c3b      	ldrh	r3, [r7, #32]
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	b2d8      	uxtb	r0, r3
 8003bcc:	2300      	movs	r3, #0
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	f7fc fc7f 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=10;j<=15;j++){
 8003bd6:	8c3b      	ldrh	r3, [r7, #32]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	843b      	strh	r3, [r7, #32]
 8003bdc:	8c3b      	ldrh	r3, [r7, #32]
 8003bde:	2b0f      	cmp	r3, #15
 8003be0:	d9ee      	bls.n	8003bc0 <vumetro+0x3690>
	}
	break;
 8003be2:	e2fd      	b.n	80041e0 <vumetro+0x3cb0>

case 3:
	Set_Pixel(0+numled,0,76,153);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	b2d8      	uxtb	r0, r3
 8003be8:	2399      	movs	r3, #153	; 0x99
 8003bea:	224c      	movs	r2, #76	; 0x4c
 8003bec:	2100      	movs	r1, #0
 8003bee:	f7fc fc71 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	b2d8      	uxtb	r0, r3
 8003bfa:	2399      	movs	r3, #153	; 0x99
 8003bfc:	2299      	movs	r2, #153	; 0x99
 8003bfe:	2100      	movs	r1, #0
 8003c00:	f7fc fc68 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	3302      	adds	r3, #2
 8003c0a:	b2d8      	uxtb	r0, r3
 8003c0c:	23cc      	movs	r3, #204	; 0xcc
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2166      	movs	r1, #102	; 0x66
 8003c12:	f7fc fc5f 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8003c16:	2303      	movs	r3, #3
 8003c18:	83fb      	strh	r3, [r7, #30]
 8003c1a:	e00d      	b.n	8003c38 <vumetro+0x3708>
		Set_Pixel(j+numled,0,0,0);
 8003c1c:	8bfb      	ldrh	r3, [r7, #30]
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	4413      	add	r3, r2
 8003c26:	b2d8      	uxtb	r0, r3
 8003c28:	2300      	movs	r3, #0
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	f7fc fc51 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=3;j<=7;j++){
 8003c32:	8bfb      	ldrh	r3, [r7, #30]
 8003c34:	3301      	adds	r3, #1
 8003c36:	83fb      	strh	r3, [r7, #30]
 8003c38:	8bfb      	ldrh	r3, [r7, #30]
 8003c3a:	2b07      	cmp	r3, #7
 8003c3c:	d9ee      	bls.n	8003c1c <vumetro+0x36ec>
	}
	Set_Pixel(8+numled,0,76,153);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	3308      	adds	r3, #8
 8003c44:	b2d8      	uxtb	r0, r3
 8003c46:	2399      	movs	r3, #153	; 0x99
 8003c48:	224c      	movs	r2, #76	; 0x4c
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	f7fc fc42 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	3309      	adds	r3, #9
 8003c56:	b2d8      	uxtb	r0, r3
 8003c58:	2399      	movs	r3, #153	; 0x99
 8003c5a:	2299      	movs	r2, #153	; 0x99
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	f7fc fc39 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	330a      	adds	r3, #10
 8003c68:	b2d8      	uxtb	r0, r3
 8003c6a:	23cc      	movs	r3, #204	; 0xcc
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2166      	movs	r1, #102	; 0x66
 8003c70:	f7fc fc30 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8003c74:	230b      	movs	r3, #11
 8003c76:	83bb      	strh	r3, [r7, #28]
 8003c78:	e00d      	b.n	8003c96 <vumetro+0x3766>
		Set_Pixel(j+numled,0,0,0);
 8003c7a:	8bbb      	ldrh	r3, [r7, #28]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	b2d8      	uxtb	r0, r3
 8003c86:	2300      	movs	r3, #0
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	f7fc fc22 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=11;j<=15;j++){
 8003c90:	8bbb      	ldrh	r3, [r7, #28]
 8003c92:	3301      	adds	r3, #1
 8003c94:	83bb      	strh	r3, [r7, #28]
 8003c96:	8bbb      	ldrh	r3, [r7, #28]
 8003c98:	2b0f      	cmp	r3, #15
 8003c9a:	d9ee      	bls.n	8003c7a <vumetro+0x374a>
	}
	break;
 8003c9c:	e2a0      	b.n	80041e0 <vumetro+0x3cb0>
case 4:
	Set_Pixel(0+numled,0,76,153);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	b2d8      	uxtb	r0, r3
 8003ca2:	2399      	movs	r3, #153	; 0x99
 8003ca4:	224c      	movs	r2, #76	; 0x4c
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	f7fc fc14 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	b2d8      	uxtb	r0, r3
 8003cb4:	2399      	movs	r3, #153	; 0x99
 8003cb6:	2299      	movs	r2, #153	; 0x99
 8003cb8:	2100      	movs	r1, #0
 8003cba:	f7fc fc0b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	3302      	adds	r3, #2
 8003cc4:	b2d8      	uxtb	r0, r3
 8003cc6:	23cc      	movs	r3, #204	; 0xcc
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2166      	movs	r1, #102	; 0x66
 8003ccc:	f7fc fc02 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	3303      	adds	r3, #3
 8003cd6:	b2d8      	uxtb	r0, r3
 8003cd8:	2300      	movs	r3, #0
 8003cda:	2200      	movs	r2, #0
 8003cdc:	21cc      	movs	r1, #204	; 0xcc
 8003cde:	f7fc fbf9 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	837b      	strh	r3, [r7, #26]
 8003ce6:	e00d      	b.n	8003d04 <vumetro+0x37d4>
		Set_Pixel(j+numled,0,0,0);
 8003ce8:	8b7b      	ldrh	r3, [r7, #26]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	b2d8      	uxtb	r0, r3
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	f7fc fbeb 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=4;j<=7;j++){
 8003cfe:	8b7b      	ldrh	r3, [r7, #26]
 8003d00:	3301      	adds	r3, #1
 8003d02:	837b      	strh	r3, [r7, #26]
 8003d04:	8b7b      	ldrh	r3, [r7, #26]
 8003d06:	2b07      	cmp	r3, #7
 8003d08:	d9ee      	bls.n	8003ce8 <vumetro+0x37b8>
	}
	Set_Pixel(8+numled,0,76,153);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	3308      	adds	r3, #8
 8003d10:	b2d8      	uxtb	r0, r3
 8003d12:	2399      	movs	r3, #153	; 0x99
 8003d14:	224c      	movs	r2, #76	; 0x4c
 8003d16:	2100      	movs	r1, #0
 8003d18:	f7fc fbdc 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	3309      	adds	r3, #9
 8003d22:	b2d8      	uxtb	r0, r3
 8003d24:	2399      	movs	r3, #153	; 0x99
 8003d26:	2299      	movs	r2, #153	; 0x99
 8003d28:	2100      	movs	r1, #0
 8003d2a:	f7fc fbd3 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	330a      	adds	r3, #10
 8003d34:	b2d8      	uxtb	r0, r3
 8003d36:	23cc      	movs	r3, #204	; 0xcc
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2166      	movs	r1, #102	; 0x66
 8003d3c:	f7fc fbca 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	330b      	adds	r3, #11
 8003d46:	b2d8      	uxtb	r0, r3
 8003d48:	2300      	movs	r3, #0
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	21cc      	movs	r1, #204	; 0xcc
 8003d4e:	f7fc fbc1 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8003d52:	230c      	movs	r3, #12
 8003d54:	833b      	strh	r3, [r7, #24]
 8003d56:	e00d      	b.n	8003d74 <vumetro+0x3844>
		Set_Pixel(j+numled,0,0,0);
 8003d58:	8b3b      	ldrh	r3, [r7, #24]
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	4413      	add	r3, r2
 8003d62:	b2d8      	uxtb	r0, r3
 8003d64:	2300      	movs	r3, #0
 8003d66:	2200      	movs	r2, #0
 8003d68:	2100      	movs	r1, #0
 8003d6a:	f7fc fbb3 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=12;j<=15;j++){
 8003d6e:	8b3b      	ldrh	r3, [r7, #24]
 8003d70:	3301      	adds	r3, #1
 8003d72:	833b      	strh	r3, [r7, #24]
 8003d74:	8b3b      	ldrh	r3, [r7, #24]
 8003d76:	2b0f      	cmp	r3, #15
 8003d78:	d9ee      	bls.n	8003d58 <vumetro+0x3828>
	}
	break;
 8003d7a:	e231      	b.n	80041e0 <vumetro+0x3cb0>
case 5:
	Set_Pixel(0+numled,0,76,153);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	b2d8      	uxtb	r0, r3
 8003d80:	2399      	movs	r3, #153	; 0x99
 8003d82:	224c      	movs	r2, #76	; 0x4c
 8003d84:	2100      	movs	r1, #0
 8003d86:	f7fc fba5 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	b2d8      	uxtb	r0, r3
 8003d92:	2399      	movs	r3, #153	; 0x99
 8003d94:	2299      	movs	r2, #153	; 0x99
 8003d96:	2100      	movs	r1, #0
 8003d98:	f7fc fb9c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	3302      	adds	r3, #2
 8003da2:	b2d8      	uxtb	r0, r3
 8003da4:	23cc      	movs	r3, #204	; 0xcc
 8003da6:	2200      	movs	r2, #0
 8003da8:	2166      	movs	r1, #102	; 0x66
 8003daa:	f7fc fb93 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	3303      	adds	r3, #3
 8003db4:	b2d8      	uxtb	r0, r3
 8003db6:	2300      	movs	r3, #0
 8003db8:	2200      	movs	r2, #0
 8003dba:	21cc      	movs	r1, #204	; 0xcc
 8003dbc:	f7fc fb8a 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	b2d8      	uxtb	r0, r3
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2200      	movs	r2, #0
 8003dcc:	21cc      	movs	r1, #204	; 0xcc
 8003dce:	f7fc fb81 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8003dd2:	2305      	movs	r3, #5
 8003dd4:	82fb      	strh	r3, [r7, #22]
 8003dd6:	e00d      	b.n	8003df4 <vumetro+0x38c4>
		Set_Pixel(j+numled,0,0,0);
 8003dd8:	8afb      	ldrh	r3, [r7, #22]
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	4413      	add	r3, r2
 8003de2:	b2d8      	uxtb	r0, r3
 8003de4:	2300      	movs	r3, #0
 8003de6:	2200      	movs	r2, #0
 8003de8:	2100      	movs	r1, #0
 8003dea:	f7fc fb73 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=5;j<=7;j++){
 8003dee:	8afb      	ldrh	r3, [r7, #22]
 8003df0:	3301      	adds	r3, #1
 8003df2:	82fb      	strh	r3, [r7, #22]
 8003df4:	8afb      	ldrh	r3, [r7, #22]
 8003df6:	2b07      	cmp	r3, #7
 8003df8:	d9ee      	bls.n	8003dd8 <vumetro+0x38a8>
	}
	Set_Pixel(8+numled,0,76,153);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	3308      	adds	r3, #8
 8003e00:	b2d8      	uxtb	r0, r3
 8003e02:	2399      	movs	r3, #153	; 0x99
 8003e04:	224c      	movs	r2, #76	; 0x4c
 8003e06:	2100      	movs	r1, #0
 8003e08:	f7fc fb64 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	3309      	adds	r3, #9
 8003e12:	b2d8      	uxtb	r0, r3
 8003e14:	2399      	movs	r3, #153	; 0x99
 8003e16:	2299      	movs	r2, #153	; 0x99
 8003e18:	2100      	movs	r1, #0
 8003e1a:	f7fc fb5b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	330a      	adds	r3, #10
 8003e24:	b2d8      	uxtb	r0, r3
 8003e26:	23cc      	movs	r3, #204	; 0xcc
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2166      	movs	r1, #102	; 0x66
 8003e2c:	f7fc fb52 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	330b      	adds	r3, #11
 8003e36:	b2d8      	uxtb	r0, r3
 8003e38:	2300      	movs	r3, #0
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	21cc      	movs	r1, #204	; 0xcc
 8003e3e:	f7fc fb49 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	330c      	adds	r3, #12
 8003e48:	b2d8      	uxtb	r0, r3
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	21cc      	movs	r1, #204	; 0xcc
 8003e50:	f7fc fb40 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8003e54:	230d      	movs	r3, #13
 8003e56:	82bb      	strh	r3, [r7, #20]
 8003e58:	e00d      	b.n	8003e76 <vumetro+0x3946>
		Set_Pixel(j+numled,0,0,0);
 8003e5a:	8abb      	ldrh	r3, [r7, #20]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	b2d8      	uxtb	r0, r3
 8003e66:	2300      	movs	r3, #0
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	f7fc fb32 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=13;j<=15;j++){
 8003e70:	8abb      	ldrh	r3, [r7, #20]
 8003e72:	3301      	adds	r3, #1
 8003e74:	82bb      	strh	r3, [r7, #20]
 8003e76:	8abb      	ldrh	r3, [r7, #20]
 8003e78:	2b0f      	cmp	r3, #15
 8003e7a:	d9ee      	bls.n	8003e5a <vumetro+0x392a>
	}
	break;
 8003e7c:	e1b0      	b.n	80041e0 <vumetro+0x3cb0>
case 6:
	Set_Pixel(0+numled,0,76,153);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	b2d8      	uxtb	r0, r3
 8003e82:	2399      	movs	r3, #153	; 0x99
 8003e84:	224c      	movs	r2, #76	; 0x4c
 8003e86:	2100      	movs	r1, #0
 8003e88:	f7fc fb24 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	3301      	adds	r3, #1
 8003e92:	b2d8      	uxtb	r0, r3
 8003e94:	2399      	movs	r3, #153	; 0x99
 8003e96:	2299      	movs	r2, #153	; 0x99
 8003e98:	2100      	movs	r1, #0
 8003e9a:	f7fc fb1b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	3302      	adds	r3, #2
 8003ea4:	b2d8      	uxtb	r0, r3
 8003ea6:	23cc      	movs	r3, #204	; 0xcc
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2166      	movs	r1, #102	; 0x66
 8003eac:	f7fc fb12 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	3303      	adds	r3, #3
 8003eb6:	b2d8      	uxtb	r0, r3
 8003eb8:	2300      	movs	r3, #0
 8003eba:	2200      	movs	r2, #0
 8003ebc:	21cc      	movs	r1, #204	; 0xcc
 8003ebe:	f7fc fb09 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	b2d8      	uxtb	r0, r3
 8003eca:	2300      	movs	r3, #0
 8003ecc:	2200      	movs	r2, #0
 8003ece:	21cc      	movs	r1, #204	; 0xcc
 8003ed0:	f7fc fb00 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	3305      	adds	r3, #5
 8003eda:	b2d8      	uxtb	r0, r3
 8003edc:	2333      	movs	r3, #51	; 0x33
 8003ede:	22ff      	movs	r2, #255	; 0xff
 8003ee0:	21ff      	movs	r1, #255	; 0xff
 8003ee2:	f7fc faf7 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8003ee6:	2306      	movs	r3, #6
 8003ee8:	827b      	strh	r3, [r7, #18]
 8003eea:	e00d      	b.n	8003f08 <vumetro+0x39d8>
		Set_Pixel(j+numled,0,0,0);
 8003eec:	8a7b      	ldrh	r3, [r7, #18]
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	b2d8      	uxtb	r0, r3
 8003ef8:	2300      	movs	r3, #0
 8003efa:	2200      	movs	r2, #0
 8003efc:	2100      	movs	r1, #0
 8003efe:	f7fc fae9 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=6;j<=7;j++){
 8003f02:	8a7b      	ldrh	r3, [r7, #18]
 8003f04:	3301      	adds	r3, #1
 8003f06:	827b      	strh	r3, [r7, #18]
 8003f08:	8a7b      	ldrh	r3, [r7, #18]
 8003f0a:	2b07      	cmp	r3, #7
 8003f0c:	d9ee      	bls.n	8003eec <vumetro+0x39bc>
	}
	Set_Pixel(8+numled,0,76,153);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	3308      	adds	r3, #8
 8003f14:	b2d8      	uxtb	r0, r3
 8003f16:	2399      	movs	r3, #153	; 0x99
 8003f18:	224c      	movs	r2, #76	; 0x4c
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	f7fc fada 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	3309      	adds	r3, #9
 8003f26:	b2d8      	uxtb	r0, r3
 8003f28:	2399      	movs	r3, #153	; 0x99
 8003f2a:	2299      	movs	r2, #153	; 0x99
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	f7fc fad1 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	330a      	adds	r3, #10
 8003f38:	b2d8      	uxtb	r0, r3
 8003f3a:	23cc      	movs	r3, #204	; 0xcc
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2166      	movs	r1, #102	; 0x66
 8003f40:	f7fc fac8 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	330b      	adds	r3, #11
 8003f4a:	b2d8      	uxtb	r0, r3
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	2200      	movs	r2, #0
 8003f50:	21cc      	movs	r1, #204	; 0xcc
 8003f52:	f7fc fabf 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	330c      	adds	r3, #12
 8003f5c:	b2d8      	uxtb	r0, r3
 8003f5e:	2300      	movs	r3, #0
 8003f60:	2200      	movs	r2, #0
 8003f62:	21cc      	movs	r1, #204	; 0xcc
 8003f64:	f7fc fab6 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	330d      	adds	r3, #13
 8003f6e:	b2d8      	uxtb	r0, r3
 8003f70:	2333      	movs	r3, #51	; 0x33
 8003f72:	22ff      	movs	r2, #255	; 0xff
 8003f74:	21ff      	movs	r1, #255	; 0xff
 8003f76:	f7fc faad 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8003f7a:	230e      	movs	r3, #14
 8003f7c:	823b      	strh	r3, [r7, #16]
 8003f7e:	e00d      	b.n	8003f9c <vumetro+0x3a6c>
		Set_Pixel(j+numled,0,0,0);
 8003f80:	8a3b      	ldrh	r3, [r7, #16]
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	b2d8      	uxtb	r0, r3
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2100      	movs	r1, #0
 8003f92:	f7fc fa9f 	bl	80004d4 <Set_Pixel>
	for(uint16_t j=14;j<=15;j++){
 8003f96:	8a3b      	ldrh	r3, [r7, #16]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	823b      	strh	r3, [r7, #16]
 8003f9c:	8a3b      	ldrh	r3, [r7, #16]
 8003f9e:	2b0f      	cmp	r3, #15
 8003fa0:	d9ee      	bls.n	8003f80 <vumetro+0x3a50>
	}
	break;
 8003fa2:	e11d      	b.n	80041e0 <vumetro+0x3cb0>
case 7:
	Set_Pixel(0+numled,0,76,153);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	b2d8      	uxtb	r0, r3
 8003fa8:	2399      	movs	r3, #153	; 0x99
 8003faa:	224c      	movs	r2, #76	; 0x4c
 8003fac:	2100      	movs	r1, #0
 8003fae:	f7fc fa91 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	b2d8      	uxtb	r0, r3
 8003fba:	2399      	movs	r3, #153	; 0x99
 8003fbc:	2299      	movs	r2, #153	; 0x99
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	f7fc fa88 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	3302      	adds	r3, #2
 8003fca:	b2d8      	uxtb	r0, r3
 8003fcc:	23cc      	movs	r3, #204	; 0xcc
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2166      	movs	r1, #102	; 0x66
 8003fd2:	f7fc fa7f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	3303      	adds	r3, #3
 8003fdc:	b2d8      	uxtb	r0, r3
 8003fde:	2300      	movs	r3, #0
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	21cc      	movs	r1, #204	; 0xcc
 8003fe4:	f7fc fa76 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	3304      	adds	r3, #4
 8003fee:	b2d8      	uxtb	r0, r3
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	21cc      	movs	r1, #204	; 0xcc
 8003ff6:	f7fc fa6d 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	3305      	adds	r3, #5
 8004000:	b2d8      	uxtb	r0, r3
 8004002:	2333      	movs	r3, #51	; 0x33
 8004004:	22ff      	movs	r2, #255	; 0xff
 8004006:	21ff      	movs	r1, #255	; 0xff
 8004008:	f7fc fa64 	bl	80004d4 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	3306      	adds	r3, #6
 8004012:	b2d8      	uxtb	r0, r3
 8004014:	2300      	movs	r3, #0
 8004016:	22cc      	movs	r2, #204	; 0xcc
 8004018:	2100      	movs	r1, #0
 800401a:	f7fc fa5b 	bl	80004d4 <Set_Pixel>
	Set_Pixel(7+numled,0,0,0);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	3307      	adds	r3, #7
 8004024:	b2d8      	uxtb	r0, r3
 8004026:	2300      	movs	r3, #0
 8004028:	2200      	movs	r2, #0
 800402a:	2100      	movs	r1, #0
 800402c:	f7fc fa52 	bl	80004d4 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	b2db      	uxtb	r3, r3
 8004034:	3308      	adds	r3, #8
 8004036:	b2d8      	uxtb	r0, r3
 8004038:	2399      	movs	r3, #153	; 0x99
 800403a:	224c      	movs	r2, #76	; 0x4c
 800403c:	2100      	movs	r1, #0
 800403e:	f7fc fa49 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	3309      	adds	r3, #9
 8004048:	b2d8      	uxtb	r0, r3
 800404a:	2399      	movs	r3, #153	; 0x99
 800404c:	2299      	movs	r2, #153	; 0x99
 800404e:	2100      	movs	r1, #0
 8004050:	f7fc fa40 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	330a      	adds	r3, #10
 800405a:	b2d8      	uxtb	r0, r3
 800405c:	23cc      	movs	r3, #204	; 0xcc
 800405e:	2200      	movs	r2, #0
 8004060:	2166      	movs	r1, #102	; 0x66
 8004062:	f7fc fa37 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	330b      	adds	r3, #11
 800406c:	b2d8      	uxtb	r0, r3
 800406e:	2300      	movs	r3, #0
 8004070:	2200      	movs	r2, #0
 8004072:	21cc      	movs	r1, #204	; 0xcc
 8004074:	f7fc fa2e 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	330c      	adds	r3, #12
 800407e:	b2d8      	uxtb	r0, r3
 8004080:	2300      	movs	r3, #0
 8004082:	2200      	movs	r2, #0
 8004084:	21cc      	movs	r1, #204	; 0xcc
 8004086:	f7fc fa25 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	330d      	adds	r3, #13
 8004090:	b2d8      	uxtb	r0, r3
 8004092:	2333      	movs	r3, #51	; 0x33
 8004094:	22ff      	movs	r2, #255	; 0xff
 8004096:	21ff      	movs	r1, #255	; 0xff
 8004098:	f7fc fa1c 	bl	80004d4 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	330e      	adds	r3, #14
 80040a2:	b2d8      	uxtb	r0, r3
 80040a4:	2300      	movs	r3, #0
 80040a6:	22cc      	movs	r2, #204	; 0xcc
 80040a8:	2100      	movs	r1, #0
 80040aa:	f7fc fa13 	bl	80004d4 <Set_Pixel>
	Set_Pixel(15+numled,0,0,0);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	330f      	adds	r3, #15
 80040b4:	b2d8      	uxtb	r0, r3
 80040b6:	2300      	movs	r3, #0
 80040b8:	2200      	movs	r2, #0
 80040ba:	2100      	movs	r1, #0
 80040bc:	f7fc fa0a 	bl	80004d4 <Set_Pixel>
	break;
 80040c0:	e08e      	b.n	80041e0 <vumetro+0x3cb0>
case 8:
	Set_Pixel(0+numled,0,76,153);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	b2d8      	uxtb	r0, r3
 80040c6:	2399      	movs	r3, #153	; 0x99
 80040c8:	224c      	movs	r2, #76	; 0x4c
 80040ca:	2100      	movs	r1, #0
 80040cc:	f7fc fa02 	bl	80004d4 <Set_Pixel>
	Set_Pixel(1+numled,0,153,153);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	3301      	adds	r3, #1
 80040d6:	b2d8      	uxtb	r0, r3
 80040d8:	2399      	movs	r3, #153	; 0x99
 80040da:	2299      	movs	r2, #153	; 0x99
 80040dc:	2100      	movs	r1, #0
 80040de:	f7fc f9f9 	bl	80004d4 <Set_Pixel>
	Set_Pixel(2+numled,102,0,204);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	3302      	adds	r3, #2
 80040e8:	b2d8      	uxtb	r0, r3
 80040ea:	23cc      	movs	r3, #204	; 0xcc
 80040ec:	2200      	movs	r2, #0
 80040ee:	2166      	movs	r1, #102	; 0x66
 80040f0:	f7fc f9f0 	bl	80004d4 <Set_Pixel>
	Set_Pixel(3+numled,204,0,0);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	3303      	adds	r3, #3
 80040fa:	b2d8      	uxtb	r0, r3
 80040fc:	2300      	movs	r3, #0
 80040fe:	2200      	movs	r2, #0
 8004100:	21cc      	movs	r1, #204	; 0xcc
 8004102:	f7fc f9e7 	bl	80004d4 <Set_Pixel>
	Set_Pixel(4+numled,204,0,0);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	3304      	adds	r3, #4
 800410c:	b2d8      	uxtb	r0, r3
 800410e:	2300      	movs	r3, #0
 8004110:	2200      	movs	r2, #0
 8004112:	21cc      	movs	r1, #204	; 0xcc
 8004114:	f7fc f9de 	bl	80004d4 <Set_Pixel>
	Set_Pixel(5+numled,255,255,51);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	b2db      	uxtb	r3, r3
 800411c:	3305      	adds	r3, #5
 800411e:	b2d8      	uxtb	r0, r3
 8004120:	2333      	movs	r3, #51	; 0x33
 8004122:	22ff      	movs	r2, #255	; 0xff
 8004124:	21ff      	movs	r1, #255	; 0xff
 8004126:	f7fc f9d5 	bl	80004d4 <Set_Pixel>
	Set_Pixel(6+numled,0,204,0);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	3306      	adds	r3, #6
 8004130:	b2d8      	uxtb	r0, r3
 8004132:	2300      	movs	r3, #0
 8004134:	22cc      	movs	r2, #204	; 0xcc
 8004136:	2100      	movs	r1, #0
 8004138:	f7fc f9cc 	bl	80004d4 <Set_Pixel>
	Set_Pixel(7+numled,0,204,0);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	3307      	adds	r3, #7
 8004142:	b2d8      	uxtb	r0, r3
 8004144:	2300      	movs	r3, #0
 8004146:	22cc      	movs	r2, #204	; 0xcc
 8004148:	2100      	movs	r1, #0
 800414a:	f7fc f9c3 	bl	80004d4 <Set_Pixel>
	Set_Pixel(8+numled,0,76,153);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	3308      	adds	r3, #8
 8004154:	b2d8      	uxtb	r0, r3
 8004156:	2399      	movs	r3, #153	; 0x99
 8004158:	224c      	movs	r2, #76	; 0x4c
 800415a:	2100      	movs	r1, #0
 800415c:	f7fc f9ba 	bl	80004d4 <Set_Pixel>
	Set_Pixel(9+numled,0,153,153);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	3309      	adds	r3, #9
 8004166:	b2d8      	uxtb	r0, r3
 8004168:	2399      	movs	r3, #153	; 0x99
 800416a:	2299      	movs	r2, #153	; 0x99
 800416c:	2100      	movs	r1, #0
 800416e:	f7fc f9b1 	bl	80004d4 <Set_Pixel>
	Set_Pixel(10+numled,102,0,204);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	330a      	adds	r3, #10
 8004178:	b2d8      	uxtb	r0, r3
 800417a:	23cc      	movs	r3, #204	; 0xcc
 800417c:	2200      	movs	r2, #0
 800417e:	2166      	movs	r1, #102	; 0x66
 8004180:	f7fc f9a8 	bl	80004d4 <Set_Pixel>
	Set_Pixel(11+numled,204,0,0);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	330b      	adds	r3, #11
 800418a:	b2d8      	uxtb	r0, r3
 800418c:	2300      	movs	r3, #0
 800418e:	2200      	movs	r2, #0
 8004190:	21cc      	movs	r1, #204	; 0xcc
 8004192:	f7fc f99f 	bl	80004d4 <Set_Pixel>
	Set_Pixel(12+numled,204,0,0);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	330c      	adds	r3, #12
 800419c:	b2d8      	uxtb	r0, r3
 800419e:	2300      	movs	r3, #0
 80041a0:	2200      	movs	r2, #0
 80041a2:	21cc      	movs	r1, #204	; 0xcc
 80041a4:	f7fc f996 	bl	80004d4 <Set_Pixel>
	Set_Pixel(13+numled,255,255,51);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	330d      	adds	r3, #13
 80041ae:	b2d8      	uxtb	r0, r3
 80041b0:	2333      	movs	r3, #51	; 0x33
 80041b2:	22ff      	movs	r2, #255	; 0xff
 80041b4:	21ff      	movs	r1, #255	; 0xff
 80041b6:	f7fc f98d 	bl	80004d4 <Set_Pixel>
	Set_Pixel(14+numled,0,204,0);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	330e      	adds	r3, #14
 80041c0:	b2d8      	uxtb	r0, r3
 80041c2:	2300      	movs	r3, #0
 80041c4:	22cc      	movs	r2, #204	; 0xcc
 80041c6:	2100      	movs	r1, #0
 80041c8:	f7fc f984 	bl	80004d4 <Set_Pixel>
	Set_Pixel(15+numled,0,204,0);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	330f      	adds	r3, #15
 80041d2:	b2d8      	uxtb	r0, r3
 80041d4:	2300      	movs	r3, #0
 80041d6:	22cc      	movs	r2, #204	; 0xcc
 80041d8:	2100      	movs	r1, #0
 80041da:	f7fc f97b 	bl	80004d4 <Set_Pixel>
	break;
 80041de:	bf00      	nop
}
}
 80041e0:	bf00      	nop
 80041e2:	37d4      	adds	r7, #212	; 0xd4
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd90      	pop	{r4, r7, pc}

080041e8 <valor_maximo>:


//Una funcion para procesar los datos de los filtros
void valor_maximo(float32_t out1,float32_t out2,float32_t out3,float32_t out4,float32_t out5,float32_t out6,float32_t out7,float32_t out8){
 80041e8:	b480      	push	{r7}
 80041ea:	b089      	sub	sp, #36	; 0x24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	ed87 0a07 	vstr	s0, [r7, #28]
 80041f2:	edc7 0a06 	vstr	s1, [r7, #24]
 80041f6:	ed87 1a05 	vstr	s2, [r7, #20]
 80041fa:	edc7 1a04 	vstr	s3, [r7, #16]
 80041fe:	ed87 2a03 	vstr	s4, [r7, #12]
 8004202:	edc7 2a02 	vstr	s5, [r7, #8]
 8004206:	ed87 3a01 	vstr	s6, [r7, #4]
 800420a:	edc7 3a00 	vstr	s7, [r7]
 * filtro 7= 10000 Hz
 * filtro 8= 20000 Hz
 * Con 16 puntos por senoidal de maxima frecuencia el algoritmo de busqueda de
 * valor maximo tiene una precision de abs(1-sen(pi/2+-pi/16))=1.92%<2%
 */
if(max8<out8){
 800420e:	4b59      	ldr	r3, [pc, #356]	; (8004374 <valor_maximo+0x18c>)
 8004210:	edd3 7a00 	vldr	s15, [r3]
 8004214:	ed97 7a00 	vldr	s14, [r7]
 8004218:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004220:	dd02      	ble.n	8004228 <valor_maximo+0x40>
	max8=out8;
 8004222:	4a54      	ldr	r2, [pc, #336]	; (8004374 <valor_maximo+0x18c>)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	6013      	str	r3, [r2, #0]
}
if(max7<out7){
 8004228:	4b53      	ldr	r3, [pc, #332]	; (8004378 <valor_maximo+0x190>)
 800422a:	edd3 7a00 	vldr	s15, [r3]
 800422e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004232:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423a:	dd02      	ble.n	8004242 <valor_maximo+0x5a>
	max7=out7;
 800423c:	4a4e      	ldr	r2, [pc, #312]	; (8004378 <valor_maximo+0x190>)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6013      	str	r3, [r2, #0]
}
if(max6<out6){
 8004242:	4b4e      	ldr	r3, [pc, #312]	; (800437c <valor_maximo+0x194>)
 8004244:	edd3 7a00 	vldr	s15, [r3]
 8004248:	ed97 7a02 	vldr	s14, [r7, #8]
 800424c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004254:	dd02      	ble.n	800425c <valor_maximo+0x74>
	max6=out6;
 8004256:	4a49      	ldr	r2, [pc, #292]	; (800437c <valor_maximo+0x194>)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	6013      	str	r3, [r2, #0]
}
if(max5<out5){
 800425c:	4b48      	ldr	r3, [pc, #288]	; (8004380 <valor_maximo+0x198>)
 800425e:	edd3 7a00 	vldr	s15, [r3]
 8004262:	ed97 7a03 	vldr	s14, [r7, #12]
 8004266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800426a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426e:	dd02      	ble.n	8004276 <valor_maximo+0x8e>
	max5=out5;
 8004270:	4a43      	ldr	r2, [pc, #268]	; (8004380 <valor_maximo+0x198>)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6013      	str	r3, [r2, #0]
}
if((max4<out4)&(contador_adc%2==0)){
 8004276:	4b43      	ldr	r3, [pc, #268]	; (8004384 <valor_maximo+0x19c>)
 8004278:	edd3 7a00 	vldr	s15, [r3]
 800427c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004280:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004288:	bfcc      	ite	gt
 800428a:	2301      	movgt	r3, #1
 800428c:	2300      	movle	r3, #0
 800428e:	b2da      	uxtb	r2, r3
 8004290:	4b3d      	ldr	r3, [pc, #244]	; (8004388 <valor_maximo+0x1a0>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	bf0c      	ite	eq
 800429e:	2301      	moveq	r3, #1
 80042a0:	2300      	movne	r3, #0
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	4013      	ands	r3, r2
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <valor_maximo+0xca>
	max4=out4;
 80042ac:	4a35      	ldr	r2, [pc, #212]	; (8004384 <valor_maximo+0x19c>)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	6013      	str	r3, [r2, #0]
}
if((max3<out3)&(contador_adc%4==0)){
 80042b2:	4b36      	ldr	r3, [pc, #216]	; (800438c <valor_maximo+0x1a4>)
 80042b4:	edd3 7a00 	vldr	s15, [r3]
 80042b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80042bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c4:	bfcc      	ite	gt
 80042c6:	2301      	movgt	r3, #1
 80042c8:	2300      	movle	r3, #0
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	4b2e      	ldr	r3, [pc, #184]	; (8004388 <valor_maximo+0x1a0>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	bf0c      	ite	eq
 80042da:	2301      	moveq	r3, #1
 80042dc:	2300      	movne	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	4013      	ands	r3, r2
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <valor_maximo+0x106>
	max3=out3;
 80042e8:	4a28      	ldr	r2, [pc, #160]	; (800438c <valor_maximo+0x1a4>)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	6013      	str	r3, [r2, #0]
}
if((max2<out2)&(contador_adc%8==0)){
 80042ee:	4b28      	ldr	r3, [pc, #160]	; (8004390 <valor_maximo+0x1a8>)
 80042f0:	edd3 7a00 	vldr	s15, [r3]
 80042f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80042f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004300:	bfcc      	ite	gt
 8004302:	2301      	movgt	r3, #1
 8004304:	2300      	movle	r3, #0
 8004306:	b2da      	uxtb	r2, r3
 8004308:	4b1f      	ldr	r3, [pc, #124]	; (8004388 <valor_maximo+0x1a0>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	bf0c      	ite	eq
 8004316:	2301      	moveq	r3, #1
 8004318:	2300      	movne	r3, #0
 800431a:	b2db      	uxtb	r3, r3
 800431c:	4013      	ands	r3, r2
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <valor_maximo+0x142>
	max2=out2;
 8004324:	4a1a      	ldr	r2, [pc, #104]	; (8004390 <valor_maximo+0x1a8>)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	6013      	str	r3, [r2, #0]
}
if((max1<out1)&(contador_adc%16==0)){
 800432a:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <valor_maximo+0x1ac>)
 800432c:	edd3 7a00 	vldr	s15, [r3]
 8004330:	ed97 7a07 	vldr	s14, [r7, #28]
 8004334:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433c:	bfcc      	ite	gt
 800433e:	2301      	movgt	r3, #1
 8004340:	2300      	movle	r3, #0
 8004342:	b2da      	uxtb	r2, r3
 8004344:	4b10      	ldr	r3, [pc, #64]	; (8004388 <valor_maximo+0x1a0>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	bf0c      	ite	eq
 8004352:	2301      	moveq	r3, #1
 8004354:	2300      	movne	r3, #0
 8004356:	b2db      	uxtb	r3, r3
 8004358:	4013      	ands	r3, r2
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <valor_maximo+0x17e>
	max1=out1;
 8004360:	4a0c      	ldr	r2, [pc, #48]	; (8004394 <valor_maximo+0x1ac>)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	6013      	str	r3, [r2, #0]
}
}
 8004366:	bf00      	nop
 8004368:	3724      	adds	r7, #36	; 0x24
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20000578 	.word	0x20000578
 8004378:	20000574 	.word	0x20000574
 800437c:	20000570 	.word	0x20000570
 8004380:	2000056c 	.word	0x2000056c
 8004384:	20000568 	.word	0x20000568
 8004388:	20000558 	.word	0x20000558
 800438c:	20000564 	.word	0x20000564
 8004390:	20000560 	.word	0x20000560
 8004394:	2000055c 	.word	0x2000055c

08004398 <barras>:

//Genera las barras antes de mandarlas
void barras(void){
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0

//primer arbol de ifs
if(max1>1815){
 800439c:	4bb3      	ldr	r3, [pc, #716]	; (800466c <barras+0x2d4>)
 800439e:	edd3 7a00 	vldr	s15, [r3]
 80043a2:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8004670 <barras+0x2d8>
 80043a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ae:	dd2d      	ble.n	800440c <barras+0x74>
	if(max1>1907){
 80043b0:	4bae      	ldr	r3, [pc, #696]	; (800466c <barras+0x2d4>)
 80043b2:	edd3 7a00 	vldr	s15, [r3]
 80043b6:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8004674 <barras+0x2dc>
 80043ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c2:	dd11      	ble.n	80043e8 <barras+0x50>
		if(max1>1953){
 80043c4:	4ba9      	ldr	r3, [pc, #676]	; (800466c <barras+0x2d4>)
 80043c6:	edd3 7a00 	vldr	s15, [r3]
 80043ca:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8004678 <barras+0x2e0>
 80043ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d6:	dd03      	ble.n	80043e0 <barras+0x48>
			banda1=8;
 80043d8:	4ba8      	ldr	r3, [pc, #672]	; (800467c <barras+0x2e4>)
 80043da:	2208      	movs	r2, #8
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	e042      	b.n	8004466 <barras+0xce>
		}
		else{
			banda1=7;
 80043e0:	4ba6      	ldr	r3, [pc, #664]	; (800467c <barras+0x2e4>)
 80043e2:	2207      	movs	r2, #7
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	e03e      	b.n	8004466 <barras+0xce>
		}
	}
	else{
		if(max1>1861){
 80043e8:	4ba0      	ldr	r3, [pc, #640]	; (800466c <barras+0x2d4>)
 80043ea:	edd3 7a00 	vldr	s15, [r3]
 80043ee:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8004680 <barras+0x2e8>
 80043f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043fa:	dd03      	ble.n	8004404 <barras+0x6c>
			banda1=6;
 80043fc:	4b9f      	ldr	r3, [pc, #636]	; (800467c <barras+0x2e4>)
 80043fe:	2206      	movs	r2, #6
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	e030      	b.n	8004466 <barras+0xce>
		}
		else{
			banda1=5;
 8004404:	4b9d      	ldr	r3, [pc, #628]	; (800467c <barras+0x2e4>)
 8004406:	2205      	movs	r2, #5
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	e02c      	b.n	8004466 <barras+0xce>
		}
	}
}
else{
	if(max1>1722){
 800440c:	4b97      	ldr	r3, [pc, #604]	; (800466c <barras+0x2d4>)
 800440e:	edd3 7a00 	vldr	s15, [r3]
 8004412:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8004684 <barras+0x2ec>
 8004416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800441a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441e:	dd11      	ble.n	8004444 <barras+0xac>
		if(max1>1769){
 8004420:	4b92      	ldr	r3, [pc, #584]	; (800466c <barras+0x2d4>)
 8004422:	edd3 7a00 	vldr	s15, [r3]
 8004426:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8004688 <barras+0x2f0>
 800442a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800442e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004432:	dd03      	ble.n	800443c <barras+0xa4>
			banda1=4;
 8004434:	4b91      	ldr	r3, [pc, #580]	; (800467c <barras+0x2e4>)
 8004436:	2204      	movs	r2, #4
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	e014      	b.n	8004466 <barras+0xce>
		}
		else{
			banda1=3;
 800443c:	4b8f      	ldr	r3, [pc, #572]	; (800467c <barras+0x2e4>)
 800443e:	2203      	movs	r2, #3
 8004440:	701a      	strb	r2, [r3, #0]
 8004442:	e010      	b.n	8004466 <barras+0xce>
		}
     }
	else{
		if(max1>1676){
 8004444:	4b89      	ldr	r3, [pc, #548]	; (800466c <barras+0x2d4>)
 8004446:	edd3 7a00 	vldr	s15, [r3]
 800444a:	ed9f 7a90 	vldr	s14, [pc, #576]	; 800468c <barras+0x2f4>
 800444e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004456:	dd03      	ble.n	8004460 <barras+0xc8>
			banda1=2;
 8004458:	4b88      	ldr	r3, [pc, #544]	; (800467c <barras+0x2e4>)
 800445a:	2202      	movs	r2, #2
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	e002      	b.n	8004466 <barras+0xce>
		}
		else{
			banda1=1;
 8004460:	4b86      	ldr	r3, [pc, #536]	; (800467c <barras+0x2e4>)
 8004462:	2201      	movs	r2, #1
 8004464:	701a      	strb	r2, [r3, #0]
		}
	}
}

//segundo arbol de ifs
if(max2>312){
 8004466:	4b8a      	ldr	r3, [pc, #552]	; (8004690 <barras+0x2f8>)
 8004468:	edd3 7a00 	vldr	s15, [r3]
 800446c:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8004694 <barras+0x2fc>
 8004470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004478:	dd2d      	ble.n	80044d6 <barras+0x13e>
	if(max2>469){
 800447a:	4b85      	ldr	r3, [pc, #532]	; (8004690 <barras+0x2f8>)
 800447c:	edd3 7a00 	vldr	s15, [r3]
 8004480:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8004698 <barras+0x300>
 8004484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448c:	dd11      	ble.n	80044b2 <barras+0x11a>
		if(max2>547){
 800448e:	4b80      	ldr	r3, [pc, #512]	; (8004690 <barras+0x2f8>)
 8004490:	edd3 7a00 	vldr	s15, [r3]
 8004494:	ed9f 7a81 	vldr	s14, [pc, #516]	; 800469c <barras+0x304>
 8004498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800449c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a0:	dd03      	ble.n	80044aa <barras+0x112>
			banda2=8;
 80044a2:	4b7f      	ldr	r3, [pc, #508]	; (80046a0 <barras+0x308>)
 80044a4:	2208      	movs	r2, #8
 80044a6:	701a      	strb	r2, [r3, #0]
 80044a8:	e042      	b.n	8004530 <barras+0x198>
		}
		else{
			banda2=7;
 80044aa:	4b7d      	ldr	r3, [pc, #500]	; (80046a0 <barras+0x308>)
 80044ac:	2207      	movs	r2, #7
 80044ae:	701a      	strb	r2, [r3, #0]
 80044b0:	e03e      	b.n	8004530 <barras+0x198>
		}
	}
	else{
		if(max2>390){
 80044b2:	4b77      	ldr	r3, [pc, #476]	; (8004690 <barras+0x2f8>)
 80044b4:	edd3 7a00 	vldr	s15, [r3]
 80044b8:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80046a4 <barras+0x30c>
 80044bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c4:	dd03      	ble.n	80044ce <barras+0x136>
			banda2=6;
 80044c6:	4b76      	ldr	r3, [pc, #472]	; (80046a0 <barras+0x308>)
 80044c8:	2206      	movs	r2, #6
 80044ca:	701a      	strb	r2, [r3, #0]
 80044cc:	e030      	b.n	8004530 <barras+0x198>
		}
		else{
			banda2=5;
 80044ce:	4b74      	ldr	r3, [pc, #464]	; (80046a0 <barras+0x308>)
 80044d0:	2205      	movs	r2, #5
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	e02c      	b.n	8004530 <barras+0x198>
		}
	}
}
else{
	if(max2>156){
 80044d6:	4b6e      	ldr	r3, [pc, #440]	; (8004690 <barras+0x2f8>)
 80044d8:	edd3 7a00 	vldr	s15, [r3]
 80044dc:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80046a8 <barras+0x310>
 80044e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e8:	dd11      	ble.n	800450e <barras+0x176>
		if(max2>234){
 80044ea:	4b69      	ldr	r3, [pc, #420]	; (8004690 <barras+0x2f8>)
 80044ec:	edd3 7a00 	vldr	s15, [r3]
 80044f0:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80046ac <barras+0x314>
 80044f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044fc:	dd03      	ble.n	8004506 <barras+0x16e>
			banda2=4;
 80044fe:	4b68      	ldr	r3, [pc, #416]	; (80046a0 <barras+0x308>)
 8004500:	2204      	movs	r2, #4
 8004502:	701a      	strb	r2, [r3, #0]
 8004504:	e014      	b.n	8004530 <barras+0x198>
		}
		else{
			banda2=3;
 8004506:	4b66      	ldr	r3, [pc, #408]	; (80046a0 <barras+0x308>)
 8004508:	2203      	movs	r2, #3
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	e010      	b.n	8004530 <barras+0x198>
		}
     }
	else{
		if(max2>78){
 800450e:	4b60      	ldr	r3, [pc, #384]	; (8004690 <barras+0x2f8>)
 8004510:	edd3 7a00 	vldr	s15, [r3]
 8004514:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80046b0 <barras+0x318>
 8004518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800451c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004520:	dd03      	ble.n	800452a <barras+0x192>
			banda2=2;
 8004522:	4b5f      	ldr	r3, [pc, #380]	; (80046a0 <barras+0x308>)
 8004524:	2202      	movs	r2, #2
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	e002      	b.n	8004530 <barras+0x198>
		}
		else{
			banda2=1;
 800452a:	4b5d      	ldr	r3, [pc, #372]	; (80046a0 <barras+0x308>)
 800452c:	2201      	movs	r2, #1
 800452e:	701a      	strb	r2, [r3, #0]
		}
	}
}

//tercer arbol de ifs
if(max3>578){
 8004530:	4b60      	ldr	r3, [pc, #384]	; (80046b4 <barras+0x31c>)
 8004532:	edd3 7a00 	vldr	s15, [r3]
 8004536:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80046b8 <barras+0x320>
 800453a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800453e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004542:	dd2d      	ble.n	80045a0 <barras+0x208>
	if(max3>864){
 8004544:	4b5b      	ldr	r3, [pc, #364]	; (80046b4 <barras+0x31c>)
 8004546:	edd3 7a00 	vldr	s15, [r3]
 800454a:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80046bc <barras+0x324>
 800454e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004556:	dd11      	ble.n	800457c <barras+0x1e4>
		if(max3>1007){
 8004558:	4b56      	ldr	r3, [pc, #344]	; (80046b4 <barras+0x31c>)
 800455a:	edd3 7a00 	vldr	s15, [r3]
 800455e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80046c0 <barras+0x328>
 8004562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800456a:	dd03      	ble.n	8004574 <barras+0x1dc>
			banda3=8;
 800456c:	4b55      	ldr	r3, [pc, #340]	; (80046c4 <barras+0x32c>)
 800456e:	2208      	movs	r2, #8
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	e042      	b.n	80045fa <barras+0x262>
		}
		else{
			banda3=7;
 8004574:	4b53      	ldr	r3, [pc, #332]	; (80046c4 <barras+0x32c>)
 8004576:	2207      	movs	r2, #7
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	e03e      	b.n	80045fa <barras+0x262>
		}
	}
	else{
		if(max3>721){
 800457c:	4b4d      	ldr	r3, [pc, #308]	; (80046b4 <barras+0x31c>)
 800457e:	edd3 7a00 	vldr	s15, [r3]
 8004582:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80046c8 <barras+0x330>
 8004586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800458a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458e:	dd03      	ble.n	8004598 <barras+0x200>
			banda3=6;
 8004590:	4b4c      	ldr	r3, [pc, #304]	; (80046c4 <barras+0x32c>)
 8004592:	2206      	movs	r2, #6
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	e030      	b.n	80045fa <barras+0x262>
		}
		else{
			banda3=5;
 8004598:	4b4a      	ldr	r3, [pc, #296]	; (80046c4 <barras+0x32c>)
 800459a:	2205      	movs	r2, #5
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	e02c      	b.n	80045fa <barras+0x262>
		}
	}
}
else{
	if(max3>291){
 80045a0:	4b44      	ldr	r3, [pc, #272]	; (80046b4 <barras+0x31c>)
 80045a2:	edd3 7a00 	vldr	s15, [r3]
 80045a6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80046cc <barras+0x334>
 80045aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b2:	dd11      	ble.n	80045d8 <barras+0x240>
		if(max3>434){
 80045b4:	4b3f      	ldr	r3, [pc, #252]	; (80046b4 <barras+0x31c>)
 80045b6:	edd3 7a00 	vldr	s15, [r3]
 80045ba:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80046d0 <barras+0x338>
 80045be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c6:	dd03      	ble.n	80045d0 <barras+0x238>
			banda3=4;
 80045c8:	4b3e      	ldr	r3, [pc, #248]	; (80046c4 <barras+0x32c>)
 80045ca:	2204      	movs	r2, #4
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	e014      	b.n	80045fa <barras+0x262>
		}
		else{
			banda3=3;
 80045d0:	4b3c      	ldr	r3, [pc, #240]	; (80046c4 <barras+0x32c>)
 80045d2:	2203      	movs	r2, #3
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	e010      	b.n	80045fa <barras+0x262>
		}
     }
	else{
		if(max3>148){
 80045d8:	4b36      	ldr	r3, [pc, #216]	; (80046b4 <barras+0x31c>)
 80045da:	edd3 7a00 	vldr	s15, [r3]
 80045de:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80046d4 <barras+0x33c>
 80045e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ea:	dd03      	ble.n	80045f4 <barras+0x25c>
			banda3=2;
 80045ec:	4b35      	ldr	r3, [pc, #212]	; (80046c4 <barras+0x32c>)
 80045ee:	2202      	movs	r2, #2
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	e002      	b.n	80045fa <barras+0x262>
		}
		else{
			banda3=1;
 80045f4:	4b33      	ldr	r3, [pc, #204]	; (80046c4 <barras+0x32c>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	701a      	strb	r2, [r3, #0]
		}
	}
}

//cuarto arbol de ifs
if(max4>588){
 80045fa:	4b37      	ldr	r3, [pc, #220]	; (80046d8 <barras+0x340>)
 80045fc:	edd3 7a00 	vldr	s15, [r3]
 8004600:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80046dc <barras+0x344>
 8004604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460c:	dd70      	ble.n	80046f0 <barras+0x358>
	if(max4>869){
 800460e:	4b32      	ldr	r3, [pc, #200]	; (80046d8 <barras+0x340>)
 8004610:	edd3 7a00 	vldr	s15, [r3]
 8004614:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80046e0 <barras+0x348>
 8004618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800461c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004620:	dd11      	ble.n	8004646 <barras+0x2ae>
		if(max4>1009){
 8004622:	4b2d      	ldr	r3, [pc, #180]	; (80046d8 <barras+0x340>)
 8004624:	edd3 7a00 	vldr	s15, [r3]
 8004628:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80046e4 <barras+0x34c>
 800462c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004634:	dd03      	ble.n	800463e <barras+0x2a6>
			banda4=8;
 8004636:	4b2c      	ldr	r3, [pc, #176]	; (80046e8 <barras+0x350>)
 8004638:	2208      	movs	r2, #8
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	e085      	b.n	800474a <barras+0x3b2>
		}
		else{
			banda4=7;
 800463e:	4b2a      	ldr	r3, [pc, #168]	; (80046e8 <barras+0x350>)
 8004640:	2207      	movs	r2, #7
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	e081      	b.n	800474a <barras+0x3b2>
		}
	}
	else{
		if(max4>728){
 8004646:	4b24      	ldr	r3, [pc, #144]	; (80046d8 <barras+0x340>)
 8004648:	edd3 7a00 	vldr	s15, [r3]
 800464c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80046ec <barras+0x354>
 8004650:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004658:	dd03      	ble.n	8004662 <barras+0x2ca>
			banda4=6;
 800465a:	4b23      	ldr	r3, [pc, #140]	; (80046e8 <barras+0x350>)
 800465c:	2206      	movs	r2, #6
 800465e:	701a      	strb	r2, [r3, #0]
 8004660:	e073      	b.n	800474a <barras+0x3b2>
		}
		else{
			banda4=5;
 8004662:	4b21      	ldr	r3, [pc, #132]	; (80046e8 <barras+0x350>)
 8004664:	2205      	movs	r2, #5
 8004666:	701a      	strb	r2, [r3, #0]
 8004668:	e06f      	b.n	800474a <barras+0x3b2>
 800466a:	bf00      	nop
 800466c:	2000055c 	.word	0x2000055c
 8004670:	44e2e000 	.word	0x44e2e000
 8004674:	44ee6000 	.word	0x44ee6000
 8004678:	44f42000 	.word	0x44f42000
 800467c:	20000000 	.word	0x20000000
 8004680:	44e8a000 	.word	0x44e8a000
 8004684:	44d74000 	.word	0x44d74000
 8004688:	44dd2000 	.word	0x44dd2000
 800468c:	44d18000 	.word	0x44d18000
 8004690:	20000560 	.word	0x20000560
 8004694:	439c0000 	.word	0x439c0000
 8004698:	43ea8000 	.word	0x43ea8000
 800469c:	4408c000 	.word	0x4408c000
 80046a0:	20000001 	.word	0x20000001
 80046a4:	43c30000 	.word	0x43c30000
 80046a8:	431c0000 	.word	0x431c0000
 80046ac:	436a0000 	.word	0x436a0000
 80046b0:	429c0000 	.word	0x429c0000
 80046b4:	20000564 	.word	0x20000564
 80046b8:	44108000 	.word	0x44108000
 80046bc:	44580000 	.word	0x44580000
 80046c0:	447bc000 	.word	0x447bc000
 80046c4:	20000002 	.word	0x20000002
 80046c8:	44344000 	.word	0x44344000
 80046cc:	43918000 	.word	0x43918000
 80046d0:	43d90000 	.word	0x43d90000
 80046d4:	43140000 	.word	0x43140000
 80046d8:	20000568 	.word	0x20000568
 80046dc:	44130000 	.word	0x44130000
 80046e0:	44594000 	.word	0x44594000
 80046e4:	447c4000 	.word	0x447c4000
 80046e8:	20000003 	.word	0x20000003
 80046ec:	44360000 	.word	0x44360000
		}
	}
}
else{
	if(max4>306){
 80046f0:	4bac      	ldr	r3, [pc, #688]	; (80049a4 <barras+0x60c>)
 80046f2:	edd3 7a00 	vldr	s15, [r3]
 80046f6:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80049a8 <barras+0x610>
 80046fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004702:	dd11      	ble.n	8004728 <barras+0x390>
		if(max4>447){
 8004704:	4ba7      	ldr	r3, [pc, #668]	; (80049a4 <barras+0x60c>)
 8004706:	edd3 7a00 	vldr	s15, [r3]
 800470a:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 80049ac <barras+0x614>
 800470e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004716:	dd03      	ble.n	8004720 <barras+0x388>
			banda4=4;
 8004718:	4ba5      	ldr	r3, [pc, #660]	; (80049b0 <barras+0x618>)
 800471a:	2204      	movs	r2, #4
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e014      	b.n	800474a <barras+0x3b2>
		}
		else{
			banda4=3;
 8004720:	4ba3      	ldr	r3, [pc, #652]	; (80049b0 <barras+0x618>)
 8004722:	2203      	movs	r2, #3
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	e010      	b.n	800474a <barras+0x3b2>
		}
     }
	else{
		if(max4>166){
 8004728:	4b9e      	ldr	r3, [pc, #632]	; (80049a4 <barras+0x60c>)
 800472a:	edd3 7a00 	vldr	s15, [r3]
 800472e:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80049b4 <barras+0x61c>
 8004732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473a:	dd03      	ble.n	8004744 <barras+0x3ac>
			banda4=2;
 800473c:	4b9c      	ldr	r3, [pc, #624]	; (80049b0 <barras+0x618>)
 800473e:	2202      	movs	r2, #2
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	e002      	b.n	800474a <barras+0x3b2>
		}
		else{
			banda4=1;
 8004744:	4b9a      	ldr	r3, [pc, #616]	; (80049b0 <barras+0x618>)
 8004746:	2201      	movs	r2, #1
 8004748:	701a      	strb	r2, [r3, #0]
		}
	}
}

//quinto arbol de ifs
if(max5>638){
 800474a:	4b9b      	ldr	r3, [pc, #620]	; (80049b8 <barras+0x620>)
 800474c:	edd3 7a00 	vldr	s15, [r3]
 8004750:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80049bc <barras+0x624>
 8004754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475c:	dd2d      	ble.n	80047ba <barras+0x422>
	if(max5>944){
 800475e:	4b96      	ldr	r3, [pc, #600]	; (80049b8 <barras+0x620>)
 8004760:	edd3 7a00 	vldr	s15, [r3]
 8004764:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80049c0 <barras+0x628>
 8004768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800476c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004770:	dd11      	ble.n	8004796 <barras+0x3fe>
		if(max5>1097){
 8004772:	4b91      	ldr	r3, [pc, #580]	; (80049b8 <barras+0x620>)
 8004774:	edd3 7a00 	vldr	s15, [r3]
 8004778:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80049c4 <barras+0x62c>
 800477c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004784:	dd03      	ble.n	800478e <barras+0x3f6>
			banda5=8;
 8004786:	4b90      	ldr	r3, [pc, #576]	; (80049c8 <barras+0x630>)
 8004788:	2208      	movs	r2, #8
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e042      	b.n	8004814 <barras+0x47c>
		}
		else{
			banda5=7;
 800478e:	4b8e      	ldr	r3, [pc, #568]	; (80049c8 <barras+0x630>)
 8004790:	2207      	movs	r2, #7
 8004792:	701a      	strb	r2, [r3, #0]
 8004794:	e03e      	b.n	8004814 <barras+0x47c>
		}
	}
	else{
		if(max5>791){
 8004796:	4b88      	ldr	r3, [pc, #544]	; (80049b8 <barras+0x620>)
 8004798:	edd3 7a00 	vldr	s15, [r3]
 800479c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80049cc <barras+0x634>
 80047a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a8:	dd03      	ble.n	80047b2 <barras+0x41a>
			banda5=6;
 80047aa:	4b87      	ldr	r3, [pc, #540]	; (80049c8 <barras+0x630>)
 80047ac:	2206      	movs	r2, #6
 80047ae:	701a      	strb	r2, [r3, #0]
 80047b0:	e030      	b.n	8004814 <barras+0x47c>
		}
		else{
			banda5=5;
 80047b2:	4b85      	ldr	r3, [pc, #532]	; (80049c8 <barras+0x630>)
 80047b4:	2205      	movs	r2, #5
 80047b6:	701a      	strb	r2, [r3, #0]
 80047b8:	e02c      	b.n	8004814 <barras+0x47c>
		}
	}
}
else{
	if(max5>331){
 80047ba:	4b7f      	ldr	r3, [pc, #508]	; (80049b8 <barras+0x620>)
 80047bc:	edd3 7a00 	vldr	s15, [r3]
 80047c0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80049d0 <barras+0x638>
 80047c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047cc:	dd11      	ble.n	80047f2 <barras+0x45a>
		if(max5>484){
 80047ce:	4b7a      	ldr	r3, [pc, #488]	; (80049b8 <barras+0x620>)
 80047d0:	edd3 7a00 	vldr	s15, [r3]
 80047d4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80049d4 <barras+0x63c>
 80047d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e0:	dd03      	ble.n	80047ea <barras+0x452>
			banda5=4;
 80047e2:	4b79      	ldr	r3, [pc, #484]	; (80049c8 <barras+0x630>)
 80047e4:	2204      	movs	r2, #4
 80047e6:	701a      	strb	r2, [r3, #0]
 80047e8:	e014      	b.n	8004814 <barras+0x47c>
		}
		else{
			banda5=3;
 80047ea:	4b77      	ldr	r3, [pc, #476]	; (80049c8 <barras+0x630>)
 80047ec:	2203      	movs	r2, #3
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	e010      	b.n	8004814 <barras+0x47c>
		}
     }
	else{
		if(max5>178){
 80047f2:	4b71      	ldr	r3, [pc, #452]	; (80049b8 <barras+0x620>)
 80047f4:	edd3 7a00 	vldr	s15, [r3]
 80047f8:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80049d8 <barras+0x640>
 80047fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004804:	dd03      	ble.n	800480e <barras+0x476>
			banda5=2;
 8004806:	4b70      	ldr	r3, [pc, #448]	; (80049c8 <barras+0x630>)
 8004808:	2202      	movs	r2, #2
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	e002      	b.n	8004814 <barras+0x47c>
		}
		else{
			banda5=1;
 800480e:	4b6e      	ldr	r3, [pc, #440]	; (80049c8 <barras+0x630>)
 8004810:	2201      	movs	r2, #1
 8004812:	701a      	strb	r2, [r3, #0]
		}
	}
}

//sexto arbol de ifs
if(max6>485){
 8004814:	4b71      	ldr	r3, [pc, #452]	; (80049dc <barras+0x644>)
 8004816:	edd3 7a00 	vldr	s15, [r3]
 800481a:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80049e0 <barras+0x648>
 800481e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004826:	dd2d      	ble.n	8004884 <barras+0x4ec>
	if(max6>707){
 8004828:	4b6c      	ldr	r3, [pc, #432]	; (80049dc <barras+0x644>)
 800482a:	edd3 7a00 	vldr	s15, [r3]
 800482e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80049e4 <barras+0x64c>
 8004832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483a:	dd11      	ble.n	8004860 <barras+0x4c8>
		if(max6>819){
 800483c:	4b67      	ldr	r3, [pc, #412]	; (80049dc <barras+0x644>)
 800483e:	edd3 7a00 	vldr	s15, [r3]
 8004842:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80049e8 <barras+0x650>
 8004846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800484a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484e:	dd03      	ble.n	8004858 <barras+0x4c0>
			banda6=8;
 8004850:	4b66      	ldr	r3, [pc, #408]	; (80049ec <barras+0x654>)
 8004852:	2208      	movs	r2, #8
 8004854:	701a      	strb	r2, [r3, #0]
 8004856:	e042      	b.n	80048de <barras+0x546>
		}
		else{
			banda6=7;
 8004858:	4b64      	ldr	r3, [pc, #400]	; (80049ec <barras+0x654>)
 800485a:	2207      	movs	r2, #7
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	e03e      	b.n	80048de <barras+0x546>
		}
	}
	else{
		if(max6>596){
 8004860:	4b5e      	ldr	r3, [pc, #376]	; (80049dc <barras+0x644>)
 8004862:	edd3 7a00 	vldr	s15, [r3]
 8004866:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80049f0 <barras+0x658>
 800486a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800486e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004872:	dd03      	ble.n	800487c <barras+0x4e4>
			banda6=6;
 8004874:	4b5d      	ldr	r3, [pc, #372]	; (80049ec <barras+0x654>)
 8004876:	2206      	movs	r2, #6
 8004878:	701a      	strb	r2, [r3, #0]
 800487a:	e030      	b.n	80048de <barras+0x546>
		}
		else{
			banda6=5;
 800487c:	4b5b      	ldr	r3, [pc, #364]	; (80049ec <barras+0x654>)
 800487e:	2205      	movs	r2, #5
 8004880:	701a      	strb	r2, [r3, #0]
 8004882:	e02c      	b.n	80048de <barras+0x546>
		}
	}
}
else{
	if(max6>262){
 8004884:	4b55      	ldr	r3, [pc, #340]	; (80049dc <barras+0x644>)
 8004886:	edd3 7a00 	vldr	s15, [r3]
 800488a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80049f4 <barras+0x65c>
 800488e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004896:	dd11      	ble.n	80048bc <barras+0x524>
		if(max6>374){
 8004898:	4b50      	ldr	r3, [pc, #320]	; (80049dc <barras+0x644>)
 800489a:	edd3 7a00 	vldr	s15, [r3]
 800489e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80049f8 <barras+0x660>
 80048a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048aa:	dd03      	ble.n	80048b4 <barras+0x51c>
			banda6=4;
 80048ac:	4b4f      	ldr	r3, [pc, #316]	; (80049ec <barras+0x654>)
 80048ae:	2204      	movs	r2, #4
 80048b0:	701a      	strb	r2, [r3, #0]
 80048b2:	e014      	b.n	80048de <barras+0x546>
		}
		else{
			banda6=3;
 80048b4:	4b4d      	ldr	r3, [pc, #308]	; (80049ec <barras+0x654>)
 80048b6:	2203      	movs	r2, #3
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	e010      	b.n	80048de <barras+0x546>
		}
     }
	else{
		if(max6>151){
 80048bc:	4b47      	ldr	r3, [pc, #284]	; (80049dc <barras+0x644>)
 80048be:	edd3 7a00 	vldr	s15, [r3]
 80048c2:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80049fc <barras+0x664>
 80048c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ce:	dd03      	ble.n	80048d8 <barras+0x540>
			banda6=2;
 80048d0:	4b46      	ldr	r3, [pc, #280]	; (80049ec <barras+0x654>)
 80048d2:	2202      	movs	r2, #2
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	e002      	b.n	80048de <barras+0x546>
		}
		else{
			banda6=1;
 80048d8:	4b44      	ldr	r3, [pc, #272]	; (80049ec <barras+0x654>)
 80048da:	2201      	movs	r2, #1
 80048dc:	701a      	strb	r2, [r3, #0]
		}
	}
}

//septimo arbol de ifs
if(max7>523){
 80048de:	4b48      	ldr	r3, [pc, #288]	; (8004a00 <barras+0x668>)
 80048e0:	edd3 7a00 	vldr	s15, [r3]
 80048e4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004a04 <barras+0x66c>
 80048e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f0:	dd2d      	ble.n	800494e <barras+0x5b6>
	if(max7>756){
 80048f2:	4b43      	ldr	r3, [pc, #268]	; (8004a00 <barras+0x668>)
 80048f4:	edd3 7a00 	vldr	s15, [r3]
 80048f8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8004a08 <barras+0x670>
 80048fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004904:	dd11      	ble.n	800492a <barras+0x592>
		if(max7>873){
 8004906:	4b3e      	ldr	r3, [pc, #248]	; (8004a00 <barras+0x668>)
 8004908:	edd3 7a00 	vldr	s15, [r3]
 800490c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004a0c <barras+0x674>
 8004910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004918:	dd03      	ble.n	8004922 <barras+0x58a>
			banda7=8;
 800491a:	4b3d      	ldr	r3, [pc, #244]	; (8004a10 <barras+0x678>)
 800491c:	2208      	movs	r2, #8
 800491e:	701a      	strb	r2, [r3, #0]
 8004920:	e083      	b.n	8004a2a <barras+0x692>
		}
		else{
			banda7=7;
 8004922:	4b3b      	ldr	r3, [pc, #236]	; (8004a10 <barras+0x678>)
 8004924:	2207      	movs	r2, #7
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	e07f      	b.n	8004a2a <barras+0x692>
		}
	}
	else{
		if(max7>639){
 800492a:	4b35      	ldr	r3, [pc, #212]	; (8004a00 <barras+0x668>)
 800492c:	edd3 7a00 	vldr	s15, [r3]
 8004930:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004a14 <barras+0x67c>
 8004934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493c:	dd03      	ble.n	8004946 <barras+0x5ae>
			banda7=6;
 800493e:	4b34      	ldr	r3, [pc, #208]	; (8004a10 <barras+0x678>)
 8004940:	2206      	movs	r2, #6
 8004942:	701a      	strb	r2, [r3, #0]
 8004944:	e071      	b.n	8004a2a <barras+0x692>
		}
		else{
			banda7=5;
 8004946:	4b32      	ldr	r3, [pc, #200]	; (8004a10 <barras+0x678>)
 8004948:	2205      	movs	r2, #5
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	e06d      	b.n	8004a2a <barras+0x692>
		}
	}
}
else{
	if(max7>289){
 800494e:	4b2c      	ldr	r3, [pc, #176]	; (8004a00 <barras+0x668>)
 8004950:	edd3 7a00 	vldr	s15, [r3]
 8004954:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004a18 <barras+0x680>
 8004958:	eef4 7ac7 	vcmpe.f32	s15, s14
 800495c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004960:	dd11      	ble.n	8004986 <barras+0x5ee>
		if(max7>406){
 8004962:	4b27      	ldr	r3, [pc, #156]	; (8004a00 <barras+0x668>)
 8004964:	edd3 7a00 	vldr	s15, [r3]
 8004968:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004a1c <barras+0x684>
 800496c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004974:	dd03      	ble.n	800497e <barras+0x5e6>
			banda7=4;
 8004976:	4b26      	ldr	r3, [pc, #152]	; (8004a10 <barras+0x678>)
 8004978:	2204      	movs	r2, #4
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	e055      	b.n	8004a2a <barras+0x692>
		}
		else{
			banda7=3;
 800497e:	4b24      	ldr	r3, [pc, #144]	; (8004a10 <barras+0x678>)
 8004980:	2203      	movs	r2, #3
 8004982:	701a      	strb	r2, [r3, #0]
 8004984:	e051      	b.n	8004a2a <barras+0x692>
		}
     }
	else{
		if(max7>172){
 8004986:	4b1e      	ldr	r3, [pc, #120]	; (8004a00 <barras+0x668>)
 8004988:	edd3 7a00 	vldr	s15, [r3]
 800498c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004a20 <barras+0x688>
 8004990:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004998:	dd44      	ble.n	8004a24 <barras+0x68c>
			banda7=2;
 800499a:	4b1d      	ldr	r3, [pc, #116]	; (8004a10 <barras+0x678>)
 800499c:	2202      	movs	r2, #2
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	e043      	b.n	8004a2a <barras+0x692>
 80049a2:	bf00      	nop
 80049a4:	20000568 	.word	0x20000568
 80049a8:	43990000 	.word	0x43990000
 80049ac:	43df8000 	.word	0x43df8000
 80049b0:	20000003 	.word	0x20000003
 80049b4:	43260000 	.word	0x43260000
 80049b8:	2000056c 	.word	0x2000056c
 80049bc:	441f8000 	.word	0x441f8000
 80049c0:	446c0000 	.word	0x446c0000
 80049c4:	44892000 	.word	0x44892000
 80049c8:	20000004 	.word	0x20000004
 80049cc:	4445c000 	.word	0x4445c000
 80049d0:	43a58000 	.word	0x43a58000
 80049d4:	43f20000 	.word	0x43f20000
 80049d8:	43320000 	.word	0x43320000
 80049dc:	20000570 	.word	0x20000570
 80049e0:	43f28000 	.word	0x43f28000
 80049e4:	4430c000 	.word	0x4430c000
 80049e8:	444cc000 	.word	0x444cc000
 80049ec:	20000005 	.word	0x20000005
 80049f0:	44150000 	.word	0x44150000
 80049f4:	43830000 	.word	0x43830000
 80049f8:	43bb0000 	.word	0x43bb0000
 80049fc:	43170000 	.word	0x43170000
 8004a00:	20000574 	.word	0x20000574
 8004a04:	4402c000 	.word	0x4402c000
 8004a08:	443d0000 	.word	0x443d0000
 8004a0c:	445a4000 	.word	0x445a4000
 8004a10:	20000006 	.word	0x20000006
 8004a14:	441fc000 	.word	0x441fc000
 8004a18:	43908000 	.word	0x43908000
 8004a1c:	43cb0000 	.word	0x43cb0000
 8004a20:	432c0000 	.word	0x432c0000
		}
		else{
			banda7=1;
 8004a24:	4b36      	ldr	r3, [pc, #216]	; (8004b00 <barras+0x768>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
		}
	}
}

//octavo arbol de ifs
if(max8>438){
 8004a2a:	4b36      	ldr	r3, [pc, #216]	; (8004b04 <barras+0x76c>)
 8004a2c:	edd3 7a00 	vldr	s15, [r3]
 8004a30:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004b08 <barras+0x770>
 8004a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3c:	dd2d      	ble.n	8004a9a <barras+0x702>
	if(max8>619){
 8004a3e:	4b31      	ldr	r3, [pc, #196]	; (8004b04 <barras+0x76c>)
 8004a40:	edd3 7a00 	vldr	s15, [r3]
 8004a44:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8004b0c <barras+0x774>
 8004a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a50:	dd11      	ble.n	8004a76 <barras+0x6de>
		if(max8>709){
 8004a52:	4b2c      	ldr	r3, [pc, #176]	; (8004b04 <barras+0x76c>)
 8004a54:	edd3 7a00 	vldr	s15, [r3]
 8004a58:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004b10 <barras+0x778>
 8004a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a64:	dd03      	ble.n	8004a6e <barras+0x6d6>
			banda8=8;
 8004a66:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <barras+0x77c>)
 8004a68:	2208      	movs	r2, #8
 8004a6a:	701a      	strb	r2, [r3, #0]
			banda8=1;
		}
	}
}

}
 8004a6c:	e042      	b.n	8004af4 <barras+0x75c>
			banda8=7;
 8004a6e:	4b29      	ldr	r3, [pc, #164]	; (8004b14 <barras+0x77c>)
 8004a70:	2207      	movs	r2, #7
 8004a72:	701a      	strb	r2, [r3, #0]
}
 8004a74:	e03e      	b.n	8004af4 <barras+0x75c>
		if(max8>528){
 8004a76:	4b23      	ldr	r3, [pc, #140]	; (8004b04 <barras+0x76c>)
 8004a78:	edd3 7a00 	vldr	s15, [r3]
 8004a7c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004b18 <barras+0x780>
 8004a80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a88:	dd03      	ble.n	8004a92 <barras+0x6fa>
			banda8=6;
 8004a8a:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <barras+0x77c>)
 8004a8c:	2206      	movs	r2, #6
 8004a8e:	701a      	strb	r2, [r3, #0]
}
 8004a90:	e030      	b.n	8004af4 <barras+0x75c>
			banda8=5;
 8004a92:	4b20      	ldr	r3, [pc, #128]	; (8004b14 <barras+0x77c>)
 8004a94:	2205      	movs	r2, #5
 8004a96:	701a      	strb	r2, [r3, #0]
}
 8004a98:	e02c      	b.n	8004af4 <barras+0x75c>
	if(max8>256){
 8004a9a:	4b1a      	ldr	r3, [pc, #104]	; (8004b04 <barras+0x76c>)
 8004a9c:	edd3 7a00 	vldr	s15, [r3]
 8004aa0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004b1c <barras+0x784>
 8004aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aac:	dd11      	ble.n	8004ad2 <barras+0x73a>
		if(max8>347){
 8004aae:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <barras+0x76c>)
 8004ab0:	edd3 7a00 	vldr	s15, [r3]
 8004ab4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004b20 <barras+0x788>
 8004ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac0:	dd03      	ble.n	8004aca <barras+0x732>
			banda8=4;
 8004ac2:	4b14      	ldr	r3, [pc, #80]	; (8004b14 <barras+0x77c>)
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	701a      	strb	r2, [r3, #0]
}
 8004ac8:	e014      	b.n	8004af4 <barras+0x75c>
			banda8=3;
 8004aca:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <barras+0x77c>)
 8004acc:	2203      	movs	r2, #3
 8004ace:	701a      	strb	r2, [r3, #0]
}
 8004ad0:	e010      	b.n	8004af4 <barras+0x75c>
		if(max8>166){
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <barras+0x76c>)
 8004ad4:	edd3 7a00 	vldr	s15, [r3]
 8004ad8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004b24 <barras+0x78c>
 8004adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae4:	dd03      	ble.n	8004aee <barras+0x756>
			banda8=2;
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <barras+0x77c>)
 8004ae8:	2202      	movs	r2, #2
 8004aea:	701a      	strb	r2, [r3, #0]
}
 8004aec:	e002      	b.n	8004af4 <barras+0x75c>
			banda8=1;
 8004aee:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <barras+0x77c>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	701a      	strb	r2, [r3, #0]
}
 8004af4:	bf00      	nop
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000006 	.word	0x20000006
 8004b04:	20000578 	.word	0x20000578
 8004b08:	43db0000 	.word	0x43db0000
 8004b0c:	441ac000 	.word	0x441ac000
 8004b10:	44314000 	.word	0x44314000
 8004b14:	20000007 	.word	0x20000007
 8004b18:	44040000 	.word	0x44040000
 8004b1c:	43800000 	.word	0x43800000
 8004b20:	43ad8000 	.word	0x43ad8000
 8004b24:	43260000 	.word	0x43260000

08004b28 <Enviar_datos>:

//Me armo una función que envíe los datos desde DMA a neopixeles

void Enviar_datos (void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
// Para el programa final trabajar a 24 fps
	//uint32_t datos;
	datos datos;
	uint16_t index = 0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	82fb      	strh	r3, [r7, #22]


	for (int i = 0; i<Num_pixels; i++)
 8004b32:	2300      	movs	r3, #0
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	e033      	b.n	8004ba0 <Enviar_datos+0x78>
	{
		//si no funciona tambien deberia andar el codigo siguiente
		datos.Datos8[0]=Datos_Pixel[i][3];
 8004b38:	4a28      	ldr	r2, [pc, #160]	; (8004bdc <Enviar_datos+0xb4>)
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	78db      	ldrb	r3, [r3, #3]
 8004b42:	713b      	strb	r3, [r7, #4]
		datos.Datos8[1]=Datos_Pixel[i][2];
 8004b44:	4a25      	ldr	r2, [pc, #148]	; (8004bdc <Enviar_datos+0xb4>)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	789b      	ldrb	r3, [r3, #2]
 8004b4e:	717b      	strb	r3, [r7, #5]
		datos.Datos8[2]=Datos_Pixel[i][1];
 8004b50:	4a22      	ldr	r2, [pc, #136]	; (8004bdc <Enviar_datos+0xb4>)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	785b      	ldrb	r3, [r3, #1]
 8004b5a:	71bb      	strb	r3, [r7, #6]


		for (int i = 23; i>=0; i--)
 8004b5c:	2317      	movs	r3, #23
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	e018      	b.n	8004b94 <Enviar_datos+0x6c>
		{

			if (datos.Datos32&(1<<i) ) pwmDatos[index] = Neopixel_uno; //ver counter&(1<<j)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2101      	movs	r1, #1
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	fa01 f202 	lsl.w	r2, r1, r2
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d005      	beq.n	8004b7e <Enviar_datos+0x56>
 8004b72:	8afb      	ldrh	r3, [r7, #22]
 8004b74:	4a1a      	ldr	r2, [pc, #104]	; (8004be0 <Enviar_datos+0xb8>)
 8004b76:	214c      	movs	r1, #76	; 0x4c
 8004b78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004b7c:	e004      	b.n	8004b88 <Enviar_datos+0x60>
			else pwmDatos[index] = Neopixel_cero;
 8004b7e:	8afb      	ldrh	r3, [r7, #22]
 8004b80:	4a17      	ldr	r2, [pc, #92]	; (8004be0 <Enviar_datos+0xb8>)
 8004b82:	2126      	movs	r1, #38	; 0x26
 8004b84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			index++;
 8004b88:	8afb      	ldrh	r3, [r7, #22]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	82fb      	strh	r3, [r7, #22]
		for (int i = 23; i>=0; i--)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	dae3      	bge.n	8004b62 <Enviar_datos+0x3a>
	for (int i = 0; i<Num_pixels; i++)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ba4:	ddc8      	ble.n	8004b38 <Enviar_datos+0x10>

		}

	}

	for (int i=0; i<50;i++)
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	e00a      	b.n	8004bc2 <Enviar_datos+0x9a>
	{
		pwmDatos[index] = 0;
 8004bac:	8afb      	ldrh	r3, [r7, #22]
 8004bae:	4a0c      	ldr	r2, [pc, #48]	; (8004be0 <Enviar_datos+0xb8>)
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		index++;
 8004bb6:	8afb      	ldrh	r3, [r7, #22]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	82fb      	strh	r3, [r7, #22]
	for (int i=0; i<50;i++)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b31      	cmp	r3, #49	; 0x31
 8004bc6:	ddf1      	ble.n	8004bac <Enviar_datos+0x84>
/*		if(HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_2,(uint32_t *)pwmDatos,index)!=HAL_OK)
			{
			Error_Handler();
			};
			*/
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_2,(uint32_t *)pwmDatos,index);
 8004bc8:	8afb      	ldrh	r3, [r7, #22]
 8004bca:	4a05      	ldr	r2, [pc, #20]	; (8004be0 <Enviar_datos+0xb8>)
 8004bcc:	2104      	movs	r1, #4
 8004bce:	4805      	ldr	r0, [pc, #20]	; (8004be4 <Enviar_datos+0xbc>)
 8004bd0:	f003 fa6a 	bl	80080a8 <HAL_TIM_PWM_Start_DMA>
	}
 8004bd4:	bf00      	nop
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20001de8 	.word	0x20001de8
 8004be0:	20000584 	.word	0x20000584
 8004be4:	200002e8 	.word	0x200002e8

08004be8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af04      	add	r7, sp, #16
 8004bee:	6078      	str	r0, [r7, #4]
barras();
 8004bf0:	f7ff fbd2 	bl	8004398 <barras>

if(banda1>7 && banda2>7 && banda3>5 && banda4>4)
 8004bf4:	4b51      	ldr	r3, [pc, #324]	; (8004d3c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b07      	cmp	r3, #7
 8004bfa:	d95e      	bls.n	8004cba <HAL_TIM_PeriodElapsedCallback+0xd2>
 8004bfc:	4b50      	ldr	r3, [pc, #320]	; (8004d40 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b07      	cmp	r3, #7
 8004c02:	d95a      	bls.n	8004cba <HAL_TIM_PeriodElapsedCallback+0xd2>
 8004c04:	4b4f      	ldr	r3, [pc, #316]	; (8004d44 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b05      	cmp	r3, #5
 8004c0a:	d956      	bls.n	8004cba <HAL_TIM_PeriodElapsedCallback+0xd2>
 8004c0c:	4b4e      	ldr	r3, [pc, #312]	; (8004d48 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d952      	bls.n	8004cba <HAL_TIM_PeriodElapsedCallback+0xd2>
{
switch(caso_laser)
 8004c14:	4b4d      	ldr	r3, [pc, #308]	; (8004d4c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d004      	beq.n	8004c2a <HAL_TIM_PeriodElapsedCallback+0x42>
 8004c20:	e007      	b.n	8004c32 <HAL_TIM_PeriodElapsedCallback+0x4a>
{
//case 0: HAL_GPIO_TogglePin(GPIOC, LASER1_Pin);
case 0: GPIOC->ODR = 2;
 8004c22:	4b4b      	ldr	r3, [pc, #300]	; (8004d50 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004c24:	2202      	movs	r2, #2
 8004c26:	615a      	str	r2, [r3, #20]
break;
 8004c28:	e003      	b.n	8004c32 <HAL_TIM_PeriodElapsedCallback+0x4a>
//case 1: 	HAL_GPIO_TogglePin(GPIOC, LASER2_Pin);
case 1: GPIOC->ODR = 4;
 8004c2a:	4b49      	ldr	r3, [pc, #292]	; (8004d50 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004c2c:	2204      	movs	r2, #4
 8004c2e:	615a      	str	r2, [r3, #20]
break;
 8004c30:	bf00      	nop
}
caso_laser = (caso_laser+1)%2;
 8004c32:	4b46      	ldr	r3, [pc, #280]	; (8004d4c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	3301      	adds	r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	bfb8      	it	lt
 8004c40:	425b      	neglt	r3, r3
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	4b41      	ldr	r3, [pc, #260]	; (8004d4c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8004c46:	701a      	strb	r2, [r3, #0]

switch(prueba_pwm)
 8004c48:	4b42      	ldr	r3, [pc, #264]	; (8004d54 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d827      	bhi.n	8004ca0 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8004c50:	a201      	add	r2, pc, #4	; (adr r2, 8004c58 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c56:	bf00      	nop
 8004c58:	08004c69 	.word	0x08004c69
 8004c5c:	08004c77 	.word	0x08004c77
 8004c60:	08004c85 	.word	0x08004c85
 8004c64:	08004c93 	.word	0x08004c93
{
case 0:
pwm_H = 20;
 8004c68:	4b3b      	ldr	r3, [pc, #236]	; (8004d58 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8004c6a:	2214      	movs	r2, #20
 8004c6c:	601a      	str	r2, [r3, #0]
pwm_L = 180;
 8004c6e:	4b3b      	ldr	r3, [pc, #236]	; (8004d5c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004c70:	22b4      	movs	r2, #180	; 0xb4
 8004c72:	601a      	str	r2, [r3, #0]
break;
 8004c74:	e014      	b.n	8004ca0 <HAL_TIM_PeriodElapsedCallback+0xb8>
case 1:
pwm_H = 15;
 8004c76:	4b38      	ldr	r3, [pc, #224]	; (8004d58 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8004c78:	220f      	movs	r2, #15
 8004c7a:	601a      	str	r2, [r3, #0]
pwm_L = 185;
 8004c7c:	4b37      	ldr	r3, [pc, #220]	; (8004d5c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004c7e:	22b9      	movs	r2, #185	; 0xb9
 8004c80:	601a      	str	r2, [r3, #0]
break;
 8004c82:	e00d      	b.n	8004ca0 <HAL_TIM_PeriodElapsedCallback+0xb8>
case 2:
pwm_H = 10;
 8004c84:	4b34      	ldr	r3, [pc, #208]	; (8004d58 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8004c86:	220a      	movs	r2, #10
 8004c88:	601a      	str	r2, [r3, #0]
pwm_L = 190;
 8004c8a:	4b34      	ldr	r3, [pc, #208]	; (8004d5c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004c8c:	22be      	movs	r2, #190	; 0xbe
 8004c8e:	601a      	str	r2, [r3, #0]
break;
 8004c90:	e006      	b.n	8004ca0 <HAL_TIM_PeriodElapsedCallback+0xb8>
case 3:
pwm_H = 15;
 8004c92:	4b31      	ldr	r3, [pc, #196]	; (8004d58 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8004c94:	220f      	movs	r2, #15
 8004c96:	601a      	str	r2, [r3, #0]
pwm_L = 185;
 8004c98:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004c9a:	22b9      	movs	r2, #185	; 0xb9
 8004c9c:	601a      	str	r2, [r3, #0]
break;
 8004c9e:	bf00      	nop
}
prueba_pwm = (prueba_pwm+1)%4;
 8004ca0:	4b2c      	ldr	r3, [pc, #176]	; (8004d54 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	425a      	negs	r2, r3
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	f002 0203 	and.w	r2, r2, #3
 8004cb0:	bf58      	it	pl
 8004cb2:	4253      	negpl	r3, r2
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8004cb8:	701a      	strb	r2, [r3, #0]
}

Enviar_datos();
 8004cba:	f7ff ff35 	bl	8004b28 <Enviar_datos>
vumetro(banda1,banda2,banda3,banda4,banda5,banda6,banda7,banda8);
 8004cbe:	4b1f      	ldr	r3, [pc, #124]	; (8004d3c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004cc0:	781c      	ldrb	r4, [r3, #0]
 8004cc2:	4b1f      	ldr	r3, [pc, #124]	; (8004d40 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004cc4:	781d      	ldrb	r5, [r3, #0]
 8004cc6:	4b1f      	ldr	r3, [pc, #124]	; (8004d44 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004cc8:	781e      	ldrb	r6, [r3, #0]
 8004cca:	4b1f      	ldr	r3, [pc, #124]	; (8004d48 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8004ccc:	f893 c000 	ldrb.w	ip, [r3]
 8004cd0:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	4a23      	ldr	r2, [pc, #140]	; (8004d64 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8004cd6:	7812      	ldrb	r2, [r2, #0]
 8004cd8:	4923      	ldr	r1, [pc, #140]	; (8004d68 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004cda:	7809      	ldrb	r1, [r1, #0]
 8004cdc:	4823      	ldr	r0, [pc, #140]	; (8004d6c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8004cde:	7800      	ldrb	r0, [r0, #0]
 8004ce0:	9003      	str	r0, [sp, #12]
 8004ce2:	9102      	str	r1, [sp, #8]
 8004ce4:	9201      	str	r2, [sp, #4]
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	4663      	mov	r3, ip
 8004cea:	4632      	mov	r2, r6
 8004cec:	4629      	mov	r1, r5
 8004cee:	4620      	mov	r0, r4
 8004cf0:	f7fb fc1e 	bl	8000530 <vumetro>
//Devuelvo los valores maximos de las bandas a su origen
max1=0;
 8004cf4:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]
max2=0;
 8004cfc:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
max3=0;
 8004d04:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
max4=0;
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
max5=0;
 8004d14:	4b1a      	ldr	r3, [pc, #104]	; (8004d80 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]
max6=0;
 8004d1c:	4b19      	ldr	r3, [pc, #100]	; (8004d84 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
max7=0;
 8004d24:	4b18      	ldr	r3, [pc, #96]	; (8004d88 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]
max8=0;
 8004d2c:	4b17      	ldr	r3, [pc, #92]	; (8004d8c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d3c:	20000000 	.word	0x20000000
 8004d40:	20000001 	.word	0x20000001
 8004d44:	20000002 	.word	0x20000002
 8004d48:	20000003 	.word	0x20000003
 8004d4c:	2000057c 	.word	0x2000057c
 8004d50:	40020800 	.word	0x40020800
 8004d54:	2000057d 	.word	0x2000057d
 8004d58:	20000198 	.word	0x20000198
 8004d5c:	2000019c 	.word	0x2000019c
 8004d60:	20000004 	.word	0x20000004
 8004d64:	20000005 	.word	0x20000005
 8004d68:	20000006 	.word	0x20000006
 8004d6c:	20000007 	.word	0x20000007
 8004d70:	2000055c 	.word	0x2000055c
 8004d74:	20000560 	.word	0x20000560
 8004d78:	20000564 	.word	0x20000564
 8004d7c:	20000568 	.word	0x20000568
 8004d80:	2000056c 	.word	0x2000056c
 8004d84:	20000570 	.word	0x20000570
 8004d88:	20000574 	.word	0x20000574
 8004d8c:	20000578 	.word	0x20000578

08004d90 <HAL_TIM_OC_DelayElapsedCallback>:





void HAL_TIM_OC_DelayElapsedCallback (TIM_HandleTypeDef * htim){
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]


if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	7f1b      	ldrb	r3, [r3, #28]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d131      	bne.n	8004e04 <HAL_TIM_OC_DelayElapsedCallback+0x74>
	//pwm_pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
	pwm_pulse = TIM1->CCR1;
 8004da0:	4b36      	ldr	r3, [pc, #216]	; (8004e7c <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 8004da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	4b36      	ldr	r3, [pc, #216]	; (8004e80 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8004da8:	801a      	strh	r2, [r3, #0]
if(flag_pwm == 0)
 8004daa:	4b36      	ldr	r3, [pc, #216]	; (8004e84 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d114      	bne.n	8004ddc <HAL_TIM_OC_DelayElapsedCallback+0x4c>
{
	//__HAL_TIM_SET_COMPARE (htim, TIM_CHANNEL_1, (pwm_pulse+pwm_H)%60000);
	TIM1->CCR1 = (pwm_pulse+pwm_H)%60000;
 8004db2:	4b33      	ldr	r3, [pc, #204]	; (8004e80 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	4b33      	ldr	r3, [pc, #204]	; (8004e88 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	441a      	add	r2, r3
 8004dbe:	492f      	ldr	r1, [pc, #188]	; (8004e7c <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 8004dc0:	4b32      	ldr	r3, [pc, #200]	; (8004e8c <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8004dc2:	fba3 0302 	umull	r0, r3, r3, r2
 8004dc6:	0b9b      	lsrs	r3, r3, #14
 8004dc8:	f64e 2060 	movw	r0, #60000	; 0xea60
 8004dcc:	fb00 f303 	mul.w	r3, r0, r3
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	634b      	str	r3, [r1, #52]	; 0x34
	flag_pwm = 1;
 8004dd4:	4b2b      	ldr	r3, [pc, #172]	; (8004e84 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	e013      	b.n	8004e04 <HAL_TIM_OC_DelayElapsedCallback+0x74>
}
else
{
	//__HAL_TIM_SET_COMPARE (htim, TIM_CHANNEL_1, (pwm_pulse+pwm_L)%60000);
	TIM1->CCR1 = (pwm_pulse+pwm_L)%60000;
 8004ddc:	4b28      	ldr	r3, [pc, #160]	; (8004e80 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b2b      	ldr	r3, [pc, #172]	; (8004e90 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	441a      	add	r2, r3
 8004de8:	4924      	ldr	r1, [pc, #144]	; (8004e7c <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 8004dea:	4b28      	ldr	r3, [pc, #160]	; (8004e8c <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8004dec:	fba3 0302 	umull	r0, r3, r3, r2
 8004df0:	0b9b      	lsrs	r3, r3, #14
 8004df2:	f64e 2060 	movw	r0, #60000	; 0xea60
 8004df6:	fb00 f303 	mul.w	r3, r0, r3
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	634b      	str	r3, [r1, #52]	; 0x34
	flag_pwm = 0;
 8004dfe:	4b21      	ldr	r3, [pc, #132]	; (8004e84 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	701a      	strb	r2, [r3, #0]
}

}

if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	7f1b      	ldrb	r3, [r3, #28]
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d131      	bne.n	8004e70 <HAL_TIM_OC_DelayElapsedCallback+0xe0>
	//pwm_pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
	pwm_pulse = TIM1->CCR3;
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 8004e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8004e14:	801a      	strh	r2, [r3, #0]
if(flag2_pwm == 0)
 8004e16:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d114      	bne.n	8004e48 <HAL_TIM_OC_DelayElapsedCallback+0xb8>
{
	//__HAL_TIM_SET_COMPARE (htim, TIM_CHANNEL_3, (pwm_pulse+pwm_H)%60000);
	TIM1->CCR3 = (pwm_pulse+pwm_H)%60000;
 8004e1e:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	4b18      	ldr	r3, [pc, #96]	; (8004e88 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	441a      	add	r2, r3
 8004e2a:	4914      	ldr	r1, [pc, #80]	; (8004e7c <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 8004e2c:	4b17      	ldr	r3, [pc, #92]	; (8004e8c <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8004e2e:	fba3 0302 	umull	r0, r3, r3, r2
 8004e32:	0b9b      	lsrs	r3, r3, #14
 8004e34:	f64e 2060 	movw	r0, #60000	; 0xea60
 8004e38:	fb00 f303 	mul.w	r3, r0, r3
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	63cb      	str	r3, [r1, #60]	; 0x3c
	flag2_pwm = 1;
 8004e40:	4b14      	ldr	r3, [pc, #80]	; (8004e94 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	701a      	strb	r2, [r3, #0]
	//__HAL_TIM_SET_COMPARE (htim, TIM_CHANNEL_3, (pwm_pulse+pwm_L)%60000);
	TIM1->CCR3 = (pwm_pulse+pwm_L)%60000;
	flag2_pwm = 0;
}
}
}
 8004e46:	e013      	b.n	8004e70 <HAL_TIM_OC_DelayElapsedCallback+0xe0>
	TIM1->CCR3 = (pwm_pulse+pwm_L)%60000;
 8004e48:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	441a      	add	r2, r3
 8004e54:	4909      	ldr	r1, [pc, #36]	; (8004e7c <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 8004e56:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 8004e58:	fba3 0302 	umull	r0, r3, r3, r2
 8004e5c:	0b9b      	lsrs	r3, r3, #14
 8004e5e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8004e62:	fb00 f303 	mul.w	r3, r0, r3
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	63cb      	str	r3, [r1, #60]	; 0x3c
	flag2_pwm = 0;
 8004e6a:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	701a      	strb	r2, [r3, #0]
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	40010000 	.word	0x40010000
 8004e80:	20000580 	.word	0x20000580
 8004e84:	2000057e 	.word	0x2000057e
 8004e88:	20000198 	.word	0x20000198
 8004e8c:	45e7b273 	.word	0x45e7b273
 8004e90:	2000019c 	.word	0x2000019c
 8004e94:	2000057f 	.word	0x2000057f

08004e98 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
iir_int = (float32_t)HAL_ADC_GetValue(&hadc1);
 8004ea0:	483b      	ldr	r0, [pc, #236]	; (8004f90 <HAL_ADC_ConvCpltCallback+0xf8>)
 8004ea2:	f001 f90f 	bl	80060c4 <HAL_ADC_GetValue>
 8004ea6:	ee07 0a90 	vmov	s15, r0
 8004eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eae:	4b39      	ldr	r3, [pc, #228]	; (8004f94 <HAL_ADC_ConvCpltCallback+0xfc>)
 8004eb0:	edc3 7a00 	vstr	s15, [r3]
if(i<10)
 8004eb4:	4b38      	ldr	r3, [pc, #224]	; (8004f98 <HAL_ADC_ConvCpltCallback+0x100>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b09      	cmp	r3, #9
 8004eba:	dc05      	bgt.n	8004ec8 <HAL_ADC_ConvCpltCallback+0x30>
{
i++;
 8004ebc:	4b36      	ldr	r3, [pc, #216]	; (8004f98 <HAL_ADC_ConvCpltCallback+0x100>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	4a35      	ldr	r2, [pc, #212]	; (8004f98 <HAL_ADC_ConvCpltCallback+0x100>)
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	e02f      	b.n	8004f28 <HAL_ADC_ConvCpltCallback+0x90>
	}
else
{
//Para usar los filtros
arm_biquad_cascade_df1_f32(&S1,&iir_int,&iir_out1,1);
 8004ec8:	2301      	movs	r3, #1
 8004eca:	4a34      	ldr	r2, [pc, #208]	; (8004f9c <HAL_ADC_ConvCpltCallback+0x104>)
 8004ecc:	4931      	ldr	r1, [pc, #196]	; (8004f94 <HAL_ADC_ConvCpltCallback+0xfc>)
 8004ece:	4834      	ldr	r0, [pc, #208]	; (8004fa0 <HAL_ADC_ConvCpltCallback+0x108>)
 8004ed0:	f004 fa36 	bl	8009340 <arm_biquad_cascade_df1_f32>
arm_biquad_cascade_df1_f32(&S2,&iir_int,&iir_out2,1);
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	4a33      	ldr	r2, [pc, #204]	; (8004fa4 <HAL_ADC_ConvCpltCallback+0x10c>)
 8004ed8:	492e      	ldr	r1, [pc, #184]	; (8004f94 <HAL_ADC_ConvCpltCallback+0xfc>)
 8004eda:	4833      	ldr	r0, [pc, #204]	; (8004fa8 <HAL_ADC_ConvCpltCallback+0x110>)
 8004edc:	f004 fa30 	bl	8009340 <arm_biquad_cascade_df1_f32>
arm_biquad_cascade_df1_f32(&S3,&iir_int,&iir_out3,1);
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	4a32      	ldr	r2, [pc, #200]	; (8004fac <HAL_ADC_ConvCpltCallback+0x114>)
 8004ee4:	492b      	ldr	r1, [pc, #172]	; (8004f94 <HAL_ADC_ConvCpltCallback+0xfc>)
 8004ee6:	4832      	ldr	r0, [pc, #200]	; (8004fb0 <HAL_ADC_ConvCpltCallback+0x118>)
 8004ee8:	f004 fa2a 	bl	8009340 <arm_biquad_cascade_df1_f32>
arm_biquad_cascade_df1_f32(&S4,&iir_int,&iir_out4,1);
 8004eec:	2301      	movs	r3, #1
 8004eee:	4a31      	ldr	r2, [pc, #196]	; (8004fb4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8004ef0:	4928      	ldr	r1, [pc, #160]	; (8004f94 <HAL_ADC_ConvCpltCallback+0xfc>)
 8004ef2:	4831      	ldr	r0, [pc, #196]	; (8004fb8 <HAL_ADC_ConvCpltCallback+0x120>)
 8004ef4:	f004 fa24 	bl	8009340 <arm_biquad_cascade_df1_f32>
arm_biquad_cascade_df1_f32(&S5,&iir_int,&iir_out5,1);
 8004ef8:	2301      	movs	r3, #1
 8004efa:	4a30      	ldr	r2, [pc, #192]	; (8004fbc <HAL_ADC_ConvCpltCallback+0x124>)
 8004efc:	4925      	ldr	r1, [pc, #148]	; (8004f94 <HAL_ADC_ConvCpltCallback+0xfc>)
 8004efe:	4830      	ldr	r0, [pc, #192]	; (8004fc0 <HAL_ADC_ConvCpltCallback+0x128>)
 8004f00:	f004 fa1e 	bl	8009340 <arm_biquad_cascade_df1_f32>
arm_biquad_cascade_df1_f32(&S6,&iir_int,&iir_out6,1);
 8004f04:	2301      	movs	r3, #1
 8004f06:	4a2f      	ldr	r2, [pc, #188]	; (8004fc4 <HAL_ADC_ConvCpltCallback+0x12c>)
 8004f08:	4922      	ldr	r1, [pc, #136]	; (8004f94 <HAL_ADC_ConvCpltCallback+0xfc>)
 8004f0a:	482f      	ldr	r0, [pc, #188]	; (8004fc8 <HAL_ADC_ConvCpltCallback+0x130>)
 8004f0c:	f004 fa18 	bl	8009340 <arm_biquad_cascade_df1_f32>
arm_biquad_cascade_df1_f32(&S7,&iir_int,&iir_out7,1);
 8004f10:	2301      	movs	r3, #1
 8004f12:	4a2e      	ldr	r2, [pc, #184]	; (8004fcc <HAL_ADC_ConvCpltCallback+0x134>)
 8004f14:	491f      	ldr	r1, [pc, #124]	; (8004f94 <HAL_ADC_ConvCpltCallback+0xfc>)
 8004f16:	482e      	ldr	r0, [pc, #184]	; (8004fd0 <HAL_ADC_ConvCpltCallback+0x138>)
 8004f18:	f004 fa12 	bl	8009340 <arm_biquad_cascade_df1_f32>
arm_biquad_cascade_df1_f32(&S8,&iir_int,&iir_out8,1);
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	4a2d      	ldr	r2, [pc, #180]	; (8004fd4 <HAL_ADC_ConvCpltCallback+0x13c>)
 8004f20:	491c      	ldr	r1, [pc, #112]	; (8004f94 <HAL_ADC_ConvCpltCallback+0xfc>)
 8004f22:	482d      	ldr	r0, [pc, #180]	; (8004fd8 <HAL_ADC_ConvCpltCallback+0x140>)
 8004f24:	f004 fa0c 	bl	8009340 <arm_biquad_cascade_df1_f32>


}
valor_maximo(iir_out1,iir_out2,iir_out3,iir_out4,iir_out5,iir_out6,iir_out7,iir_out8);
 8004f28:	4b1c      	ldr	r3, [pc, #112]	; (8004f9c <HAL_ADC_ConvCpltCallback+0x104>)
 8004f2a:	edd3 7a00 	vldr	s15, [r3]
 8004f2e:	4b1d      	ldr	r3, [pc, #116]	; (8004fa4 <HAL_ADC_ConvCpltCallback+0x10c>)
 8004f30:	ed93 7a00 	vldr	s14, [r3]
 8004f34:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <HAL_ADC_ConvCpltCallback+0x114>)
 8004f36:	edd3 6a00 	vldr	s13, [r3]
 8004f3a:	4b1e      	ldr	r3, [pc, #120]	; (8004fb4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8004f3c:	ed93 6a00 	vldr	s12, [r3]
 8004f40:	4b1e      	ldr	r3, [pc, #120]	; (8004fbc <HAL_ADC_ConvCpltCallback+0x124>)
 8004f42:	edd3 5a00 	vldr	s11, [r3]
 8004f46:	4b1f      	ldr	r3, [pc, #124]	; (8004fc4 <HAL_ADC_ConvCpltCallback+0x12c>)
 8004f48:	ed93 5a00 	vldr	s10, [r3]
 8004f4c:	4b1f      	ldr	r3, [pc, #124]	; (8004fcc <HAL_ADC_ConvCpltCallback+0x134>)
 8004f4e:	edd3 4a00 	vldr	s9, [r3]
 8004f52:	4b20      	ldr	r3, [pc, #128]	; (8004fd4 <HAL_ADC_ConvCpltCallback+0x13c>)
 8004f54:	ed93 4a00 	vldr	s8, [r3]
 8004f58:	eef0 3a44 	vmov.f32	s7, s8
 8004f5c:	eeb0 3a64 	vmov.f32	s6, s9
 8004f60:	eef0 2a45 	vmov.f32	s5, s10
 8004f64:	eeb0 2a65 	vmov.f32	s4, s11
 8004f68:	eef0 1a46 	vmov.f32	s3, s12
 8004f6c:	eeb0 1a66 	vmov.f32	s2, s13
 8004f70:	eef0 0a47 	vmov.f32	s1, s14
 8004f74:	eeb0 0a67 	vmov.f32	s0, s15
 8004f78:	f7ff f936 	bl	80041e8 <valor_maximo>

contador_adc++;
 8004f7c:	4b17      	ldr	r3, [pc, #92]	; (8004fdc <HAL_ADC_ConvCpltCallback+0x144>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	3301      	adds	r3, #1
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	4b15      	ldr	r3, [pc, #84]	; (8004fdc <HAL_ADC_ConvCpltCallback+0x144>)
 8004f86:	701a      	strb	r2, [r3, #0]

}
 8004f88:	bf00      	nop
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	200001c8 	.word	0x200001c8
 8004f94:	20000394 	.word	0x20000394
 8004f98:	20000390 	.word	0x20000390
 8004f9c:	200003a8 	.word	0x200003a8
 8004fa0:	200003ac 	.word	0x200003ac
 8004fa4:	200003d8 	.word	0x200003d8
 8004fa8:	200003dc 	.word	0x200003dc
 8004fac:	20000408 	.word	0x20000408
 8004fb0:	2000040c 	.word	0x2000040c
 8004fb4:	20000438 	.word	0x20000438
 8004fb8:	2000043c 	.word	0x2000043c
 8004fbc:	20000478 	.word	0x20000478
 8004fc0:	2000047c 	.word	0x2000047c
 8004fc4:	200004c8 	.word	0x200004c8
 8004fc8:	200004cc 	.word	0x200004cc
 8004fcc:	20000518 	.word	0x20000518
 8004fd0:	2000051c 	.word	0x2000051c
 8004fd4:	20000548 	.word	0x20000548
 8004fd8:	2000054c 	.word	0x2000054c
 8004fdc:	20000558 	.word	0x20000558

08004fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004fe4:	f000 fdea 	bl	8005bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004fe8:	f000 f88a 	bl	8005100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004fec:	f000 fb46 	bl	800567c <MX_GPIO_Init>
  MX_DMA_Init();
 8004ff0:	f000 fb24 	bl	800563c <MX_DMA_Init>
  MX_ADC1_Init();
 8004ff4:	f000 f8ec 	bl	80051d0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8004ff8:	f000 fa5c 	bl	80054b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004ffc:	f000 faa8 	bl	8005550 <MX_TIM4_Init>
  MX_TIM1_Init();
 8005000:	f000 f938 	bl	8005274 <MX_TIM1_Init>
  MX_TIM2_Init();
 8005004:	f000 f9e4 	bl	80053d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //Para inicializar los filtros

arm_biquad_cascade_df1_init_f32(&S1,1,&iir_coeff1[0],&iir_state1[0]);
 8005008:	4b21      	ldr	r3, [pc, #132]	; (8005090 <main+0xb0>)
 800500a:	4a22      	ldr	r2, [pc, #136]	; (8005094 <main+0xb4>)
 800500c:	2101      	movs	r1, #1
 800500e:	4822      	ldr	r0, [pc, #136]	; (8005098 <main+0xb8>)
 8005010:	f004 f98a 	bl	8009328 <arm_biquad_cascade_df1_init_f32>
arm_biquad_cascade_df1_init_f32(&S2,2,&iir_coeff2[0],&iir_state2[0]);
 8005014:	4b21      	ldr	r3, [pc, #132]	; (800509c <main+0xbc>)
 8005016:	4a22      	ldr	r2, [pc, #136]	; (80050a0 <main+0xc0>)
 8005018:	2102      	movs	r1, #2
 800501a:	4822      	ldr	r0, [pc, #136]	; (80050a4 <main+0xc4>)
 800501c:	f004 f984 	bl	8009328 <arm_biquad_cascade_df1_init_f32>
arm_biquad_cascade_df1_init_f32(&S3,2,&iir_coeff3[0],&iir_state3[0]);
 8005020:	4b21      	ldr	r3, [pc, #132]	; (80050a8 <main+0xc8>)
 8005022:	4a22      	ldr	r2, [pc, #136]	; (80050ac <main+0xcc>)
 8005024:	2102      	movs	r1, #2
 8005026:	4822      	ldr	r0, [pc, #136]	; (80050b0 <main+0xd0>)
 8005028:	f004 f97e 	bl	8009328 <arm_biquad_cascade_df1_init_f32>
arm_biquad_cascade_df1_init_f32(&S4,2,&iir_coeff4[0],&iir_state4[0]);
 800502c:	4b21      	ldr	r3, [pc, #132]	; (80050b4 <main+0xd4>)
 800502e:	4a22      	ldr	r2, [pc, #136]	; (80050b8 <main+0xd8>)
 8005030:	2102      	movs	r1, #2
 8005032:	4822      	ldr	r0, [pc, #136]	; (80050bc <main+0xdc>)
 8005034:	f004 f978 	bl	8009328 <arm_biquad_cascade_df1_init_f32>
arm_biquad_cascade_df1_init_f32(&S5,3,&iir_coeff5[0],&iir_state5[0]);
 8005038:	4b21      	ldr	r3, [pc, #132]	; (80050c0 <main+0xe0>)
 800503a:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <main+0xe4>)
 800503c:	2103      	movs	r1, #3
 800503e:	4822      	ldr	r0, [pc, #136]	; (80050c8 <main+0xe8>)
 8005040:	f004 f972 	bl	8009328 <arm_biquad_cascade_df1_init_f32>
arm_biquad_cascade_df1_init_f32(&S6,4,&iir_coeff6[0],&iir_state6[0]);
 8005044:	4b21      	ldr	r3, [pc, #132]	; (80050cc <main+0xec>)
 8005046:	4a22      	ldr	r2, [pc, #136]	; (80050d0 <main+0xf0>)
 8005048:	2104      	movs	r1, #4
 800504a:	4822      	ldr	r0, [pc, #136]	; (80050d4 <main+0xf4>)
 800504c:	f004 f96c 	bl	8009328 <arm_biquad_cascade_df1_init_f32>
arm_biquad_cascade_df1_init_f32(&S7,4,&iir_coeff7[0],&iir_state7[0]);
 8005050:	4b21      	ldr	r3, [pc, #132]	; (80050d8 <main+0xf8>)
 8005052:	4a22      	ldr	r2, [pc, #136]	; (80050dc <main+0xfc>)
 8005054:	2104      	movs	r1, #4
 8005056:	4822      	ldr	r0, [pc, #136]	; (80050e0 <main+0x100>)
 8005058:	f004 f966 	bl	8009328 <arm_biquad_cascade_df1_init_f32>
arm_biquad_cascade_df1_init_f32(&S8,2,&iir_coeff8[0],&iir_state8[0]);
 800505c:	4b21      	ldr	r3, [pc, #132]	; (80050e4 <main+0x104>)
 800505e:	4a22      	ldr	r2, [pc, #136]	; (80050e8 <main+0x108>)
 8005060:	2102      	movs	r1, #2
 8005062:	4822      	ldr	r0, [pc, #136]	; (80050ec <main+0x10c>)
 8005064:	f004 f960 	bl	8009328 <arm_biquad_cascade_df1_init_f32>


  HAL_ADC_Start_IT(&hadc1);
 8005068:	4821      	ldr	r0, [pc, #132]	; (80050f0 <main+0x110>)
 800506a:	f000 fe5d 	bl	8005d28 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800506e:	2100      	movs	r1, #0
 8005070:	4820      	ldr	r0, [pc, #128]	; (80050f4 <main+0x114>)
 8005072:	f002 ff69 	bl	8007f48 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8005076:	4820      	ldr	r0, [pc, #128]	; (80050f8 <main+0x118>)
 8005078:	f002 fd52 	bl	8007b20 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 800507c:	2100      	movs	r1, #0
 800507e:	481f      	ldr	r0, [pc, #124]	; (80050fc <main+0x11c>)
 8005080:	f002 fe0a 	bl	8007c98 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_3);
 8005084:	2108      	movs	r1, #8
 8005086:	481d      	ldr	r0, [pc, #116]	; (80050fc <main+0x11c>)
 8005088:	f002 fe06 	bl	8007c98 <HAL_TIM_OC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 800508c:	e7fe      	b.n	800508c <main+0xac>
 800508e:	bf00      	nop
 8005090:	20000398 	.word	0x20000398
 8005094:	20000008 	.word	0x20000008
 8005098:	200003ac 	.word	0x200003ac
 800509c:	200003b8 	.word	0x200003b8
 80050a0:	2000001c 	.word	0x2000001c
 80050a4:	200003dc 	.word	0x200003dc
 80050a8:	200003e8 	.word	0x200003e8
 80050ac:	20000044 	.word	0x20000044
 80050b0:	2000040c 	.word	0x2000040c
 80050b4:	20000418 	.word	0x20000418
 80050b8:	2000006c 	.word	0x2000006c
 80050bc:	2000043c 	.word	0x2000043c
 80050c0:	20000448 	.word	0x20000448
 80050c4:	20000094 	.word	0x20000094
 80050c8:	2000047c 	.word	0x2000047c
 80050cc:	20000488 	.word	0x20000488
 80050d0:	200000d0 	.word	0x200000d0
 80050d4:	200004cc 	.word	0x200004cc
 80050d8:	200004d8 	.word	0x200004d8
 80050dc:	20000120 	.word	0x20000120
 80050e0:	2000051c 	.word	0x2000051c
 80050e4:	20000528 	.word	0x20000528
 80050e8:	20000170 	.word	0x20000170
 80050ec:	2000054c 	.word	0x2000054c
 80050f0:	200001c8 	.word	0x200001c8
 80050f4:	20000258 	.word	0x20000258
 80050f8:	200002a0 	.word	0x200002a0
 80050fc:	20000210 	.word	0x20000210

08005100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b094      	sub	sp, #80	; 0x50
 8005104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005106:	f107 0320 	add.w	r3, r7, #32
 800510a:	2230      	movs	r2, #48	; 0x30
 800510c:	2100      	movs	r1, #0
 800510e:	4618      	mov	r0, r3
 8005110:	f004 fa14 	bl	800953c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005114:	f107 030c 	add.w	r3, r7, #12
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	605a      	str	r2, [r3, #4]
 800511e:	609a      	str	r2, [r3, #8]
 8005120:	60da      	str	r2, [r3, #12]
 8005122:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005124:	2300      	movs	r3, #0
 8005126:	60bb      	str	r3, [r7, #8]
 8005128:	4b27      	ldr	r3, [pc, #156]	; (80051c8 <SystemClock_Config+0xc8>)
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	4a26      	ldr	r2, [pc, #152]	; (80051c8 <SystemClock_Config+0xc8>)
 800512e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005132:	6413      	str	r3, [r2, #64]	; 0x40
 8005134:	4b24      	ldr	r3, [pc, #144]	; (80051c8 <SystemClock_Config+0xc8>)
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513c:	60bb      	str	r3, [r7, #8]
 800513e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005140:	2300      	movs	r3, #0
 8005142:	607b      	str	r3, [r7, #4]
 8005144:	4b21      	ldr	r3, [pc, #132]	; (80051cc <SystemClock_Config+0xcc>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a20      	ldr	r2, [pc, #128]	; (80051cc <SystemClock_Config+0xcc>)
 800514a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	4b1e      	ldr	r3, [pc, #120]	; (80051cc <SystemClock_Config+0xcc>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800515c:	2301      	movs	r3, #1
 800515e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005160:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005166:	2302      	movs	r3, #2
 8005168:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800516a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800516e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005170:	2304      	movs	r3, #4
 8005172:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8005174:	23c0      	movs	r3, #192	; 0xc0
 8005176:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005178:	2304      	movs	r3, #4
 800517a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800517c:	2308      	movs	r3, #8
 800517e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005180:	f107 0320 	add.w	r3, r7, #32
 8005184:	4618      	mov	r0, r3
 8005186:	f002 f817 	bl	80071b8 <HAL_RCC_OscConfig>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005190:	f000 faf4 	bl	800577c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005194:	230f      	movs	r3, #15
 8005196:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005198:	2302      	movs	r3, #2
 800519a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800519c:	2300      	movs	r3, #0
 800519e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80051a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80051aa:	f107 030c 	add.w	r3, r7, #12
 80051ae:	2103      	movs	r1, #3
 80051b0:	4618      	mov	r0, r3
 80051b2:	f002 fa79 	bl	80076a8 <HAL_RCC_ClockConfig>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80051bc:	f000 fade 	bl	800577c <Error_Handler>
  }
}
 80051c0:	bf00      	nop
 80051c2:	3750      	adds	r7, #80	; 0x50
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40023800 	.word	0x40023800
 80051cc:	40007000 	.word	0x40007000

080051d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80051d6:	463b      	mov	r3, r7
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	609a      	str	r2, [r3, #8]
 80051e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80051e2:	4b22      	ldr	r3, [pc, #136]	; (800526c <MX_ADC1_Init+0x9c>)
 80051e4:	4a22      	ldr	r2, [pc, #136]	; (8005270 <MX_ADC1_Init+0xa0>)
 80051e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80051e8:	4b20      	ldr	r3, [pc, #128]	; (800526c <MX_ADC1_Init+0x9c>)
 80051ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80051f0:	4b1e      	ldr	r3, [pc, #120]	; (800526c <MX_ADC1_Init+0x9c>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80051f6:	4b1d      	ldr	r3, [pc, #116]	; (800526c <MX_ADC1_Init+0x9c>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80051fc:	4b1b      	ldr	r3, [pc, #108]	; (800526c <MX_ADC1_Init+0x9c>)
 80051fe:	2200      	movs	r2, #0
 8005200:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005202:	4b1a      	ldr	r3, [pc, #104]	; (800526c <MX_ADC1_Init+0x9c>)
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800520a:	4b18      	ldr	r3, [pc, #96]	; (800526c <MX_ADC1_Init+0x9c>)
 800520c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005210:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8005212:	4b16      	ldr	r3, [pc, #88]	; (800526c <MX_ADC1_Init+0x9c>)
 8005214:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005218:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800521a:	4b14      	ldr	r3, [pc, #80]	; (800526c <MX_ADC1_Init+0x9c>)
 800521c:	2200      	movs	r2, #0
 800521e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005220:	4b12      	ldr	r3, [pc, #72]	; (800526c <MX_ADC1_Init+0x9c>)
 8005222:	2201      	movs	r2, #1
 8005224:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005226:	4b11      	ldr	r3, [pc, #68]	; (800526c <MX_ADC1_Init+0x9c>)
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800522e:	4b0f      	ldr	r3, [pc, #60]	; (800526c <MX_ADC1_Init+0x9c>)
 8005230:	2201      	movs	r2, #1
 8005232:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005234:	480d      	ldr	r0, [pc, #52]	; (800526c <MX_ADC1_Init+0x9c>)
 8005236:	f000 fd33 	bl	8005ca0 <HAL_ADC_Init>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8005240:	f000 fa9c 	bl	800577c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005244:	2302      	movs	r3, #2
 8005246:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005248:	2301      	movs	r3, #1
 800524a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800524c:	2300      	movs	r3, #0
 800524e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005250:	463b      	mov	r3, r7
 8005252:	4619      	mov	r1, r3
 8005254:	4805      	ldr	r0, [pc, #20]	; (800526c <MX_ADC1_Init+0x9c>)
 8005256:	f000 ff57 	bl	8006108 <HAL_ADC_ConfigChannel>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8005260:	f000 fa8c 	bl	800577c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	200001c8 	.word	0x200001c8
 8005270:	40012000 	.word	0x40012000

08005274 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b096      	sub	sp, #88	; 0x58
 8005278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800527a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	605a      	str	r2, [r3, #4]
 8005284:	609a      	str	r2, [r3, #8]
 8005286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005288:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	605a      	str	r2, [r3, #4]
 800529c:	609a      	str	r2, [r3, #8]
 800529e:	60da      	str	r2, [r3, #12]
 80052a0:	611a      	str	r2, [r3, #16]
 80052a2:	615a      	str	r2, [r3, #20]
 80052a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80052a6:	1d3b      	adds	r3, r7, #4
 80052a8:	2220      	movs	r2, #32
 80052aa:	2100      	movs	r1, #0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f004 f945 	bl	800953c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80052b2:	4b45      	ldr	r3, [pc, #276]	; (80053c8 <MX_TIM1_Init+0x154>)
 80052b4:	4a45      	ldr	r2, [pc, #276]	; (80053cc <MX_TIM1_Init+0x158>)
 80052b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9600;
 80052b8:	4b43      	ldr	r3, [pc, #268]	; (80053c8 <MX_TIM1_Init+0x154>)
 80052ba:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80052be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052c0:	4b41      	ldr	r3, [pc, #260]	; (80053c8 <MX_TIM1_Init+0x154>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 80052c6:	4b40      	ldr	r3, [pc, #256]	; (80053c8 <MX_TIM1_Init+0x154>)
 80052c8:	f64e 2260 	movw	r2, #60000	; 0xea60
 80052cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052ce:	4b3e      	ldr	r3, [pc, #248]	; (80053c8 <MX_TIM1_Init+0x154>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80052d4:	4b3c      	ldr	r3, [pc, #240]	; (80053c8 <MX_TIM1_Init+0x154>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052da:	4b3b      	ldr	r3, [pc, #236]	; (80053c8 <MX_TIM1_Init+0x154>)
 80052dc:	2200      	movs	r2, #0
 80052de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80052e0:	4839      	ldr	r0, [pc, #228]	; (80053c8 <MX_TIM1_Init+0x154>)
 80052e2:	f002 fbcd 	bl	8007a80 <HAL_TIM_Base_Init>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80052ec:	f000 fa46 	bl	800577c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80052f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80052fa:	4619      	mov	r1, r3
 80052fc:	4832      	ldr	r0, [pc, #200]	; (80053c8 <MX_TIM1_Init+0x154>)
 80052fe:	f003 faa9 	bl	8008854 <HAL_TIM_ConfigClockSource>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005308:	f000 fa38 	bl	800577c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800530c:	482e      	ldr	r0, [pc, #184]	; (80053c8 <MX_TIM1_Init+0x154>)
 800530e:	f002 fc69 	bl	8007be4 <HAL_TIM_OC_Init>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005318:	f000 fa30 	bl	800577c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800531c:	2300      	movs	r3, #0
 800531e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005320:	2300      	movs	r3, #0
 8005322:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005324:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005328:	4619      	mov	r1, r3
 800532a:	4827      	ldr	r0, [pc, #156]	; (80053c8 <MX_TIM1_Init+0x154>)
 800532c:	f003 ff28 	bl	8009180 <HAL_TIMEx_MasterConfigSynchronization>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8005336:	f000 fa21 	bl	800577c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800533a:	2330      	movs	r3, #48	; 0x30
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 185;
 800533e:	23b9      	movs	r3, #185	; 0xb9
 8005340:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005342:	2300      	movs	r3, #0
 8005344:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005346:	2300      	movs	r3, #0
 8005348:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800534a:	2300      	movs	r3, #0
 800534c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800534e:	2300      	movs	r3, #0
 8005350:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005352:	2300      	movs	r3, #0
 8005354:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800535a:	2200      	movs	r2, #0
 800535c:	4619      	mov	r1, r3
 800535e:	481a      	ldr	r0, [pc, #104]	; (80053c8 <MX_TIM1_Init+0x154>)
 8005360:	f003 f95a 	bl	8008618 <HAL_TIM_OC_ConfigChannel>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800536a:	f000 fa07 	bl	800577c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800536e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005372:	2208      	movs	r2, #8
 8005374:	4619      	mov	r1, r3
 8005376:	4814      	ldr	r0, [pc, #80]	; (80053c8 <MX_TIM1_Init+0x154>)
 8005378:	f003 f94e 	bl	8008618 <HAL_TIM_OC_ConfigChannel>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8005382:	f000 f9fb 	bl	800577c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005386:	2300      	movs	r3, #0
 8005388:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800538a:	2300      	movs	r3, #0
 800538c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800539a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800539e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80053a0:	2300      	movs	r3, #0
 80053a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80053a4:	1d3b      	adds	r3, r7, #4
 80053a6:	4619      	mov	r1, r3
 80053a8:	4807      	ldr	r0, [pc, #28]	; (80053c8 <MX_TIM1_Init+0x154>)
 80053aa:	f003 ff57 	bl	800925c <HAL_TIMEx_ConfigBreakDeadTime>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80053b4:	f000 f9e2 	bl	800577c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80053b8:	4803      	ldr	r0, [pc, #12]	; (80053c8 <MX_TIM1_Init+0x154>)
 80053ba:	f000 fb05 	bl	80059c8 <HAL_TIM_MspPostInit>

}
 80053be:	bf00      	nop
 80053c0:	3758      	adds	r7, #88	; 0x58
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000210 	.word	0x20000210
 80053cc:	40010000 	.word	0x40010000

080053d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08e      	sub	sp, #56	; 0x38
 80053d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	605a      	str	r2, [r3, #4]
 80053e0:	609a      	str	r2, [r3, #8]
 80053e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053e4:	f107 0320 	add.w	r3, r7, #32
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80053ee:	1d3b      	adds	r3, r7, #4
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	605a      	str	r2, [r3, #4]
 80053f6:	609a      	str	r2, [r3, #8]
 80053f8:	60da      	str	r2, [r3, #12]
 80053fa:	611a      	str	r2, [r3, #16]
 80053fc:	615a      	str	r2, [r3, #20]
 80053fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005400:	4b2b      	ldr	r3, [pc, #172]	; (80054b0 <MX_TIM2_Init+0xe0>)
 8005402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005406:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005408:	4b29      	ldr	r3, [pc, #164]	; (80054b0 <MX_TIM2_Init+0xe0>)
 800540a:	2200      	movs	r2, #0
 800540c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800540e:	4b28      	ldr	r3, [pc, #160]	; (80054b0 <MX_TIM2_Init+0xe0>)
 8005410:	2200      	movs	r2, #0
 8005412:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2176-1;
 8005414:	4b26      	ldr	r3, [pc, #152]	; (80054b0 <MX_TIM2_Init+0xe0>)
 8005416:	f640 027f 	movw	r2, #2175	; 0x87f
 800541a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800541c:	4b24      	ldr	r3, [pc, #144]	; (80054b0 <MX_TIM2_Init+0xe0>)
 800541e:	2200      	movs	r2, #0
 8005420:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005422:	4b23      	ldr	r3, [pc, #140]	; (80054b0 <MX_TIM2_Init+0xe0>)
 8005424:	2200      	movs	r2, #0
 8005426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005428:	4821      	ldr	r0, [pc, #132]	; (80054b0 <MX_TIM2_Init+0xe0>)
 800542a:	f002 fb29 	bl	8007a80 <HAL_TIM_Base_Init>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8005434:	f000 f9a2 	bl	800577c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800543c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800543e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005442:	4619      	mov	r1, r3
 8005444:	481a      	ldr	r0, [pc, #104]	; (80054b0 <MX_TIM2_Init+0xe0>)
 8005446:	f003 fa05 	bl	8008854 <HAL_TIM_ConfigClockSource>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8005450:	f000 f994 	bl	800577c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005454:	4816      	ldr	r0, [pc, #88]	; (80054b0 <MX_TIM2_Init+0xe0>)
 8005456:	f002 fd1d 	bl	8007e94 <HAL_TIM_PWM_Init>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8005460:	f000 f98c 	bl	800577c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005464:	2320      	movs	r3, #32
 8005466:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005468:	2300      	movs	r3, #0
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800546c:	f107 0320 	add.w	r3, r7, #32
 8005470:	4619      	mov	r1, r3
 8005472:	480f      	ldr	r0, [pc, #60]	; (80054b0 <MX_TIM2_Init+0xe0>)
 8005474:	f003 fe84 	bl	8009180 <HAL_TIMEx_MasterConfigSynchronization>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800547e:	f000 f97d 	bl	800577c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005482:	2360      	movs	r3, #96	; 0x60
 8005484:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005492:	1d3b      	adds	r3, r7, #4
 8005494:	2200      	movs	r2, #0
 8005496:	4619      	mov	r1, r3
 8005498:	4805      	ldr	r0, [pc, #20]	; (80054b0 <MX_TIM2_Init+0xe0>)
 800549a:	f003 f919 	bl	80086d0 <HAL_TIM_PWM_ConfigChannel>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80054a4:	f000 f96a 	bl	800577c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80054a8:	bf00      	nop
 80054aa:	3738      	adds	r7, #56	; 0x38
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20000258 	.word	0x20000258

080054b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054ba:	f107 0308 	add.w	r3, r7, #8
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	605a      	str	r2, [r3, #4]
 80054c4:	609a      	str	r2, [r3, #8]
 80054c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054c8:	463b      	mov	r3, r7
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80054d0:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <MX_TIM3_Init+0x94>)
 80054d2:	4a1e      	ldr	r2, [pc, #120]	; (800554c <MX_TIM3_Init+0x98>)
 80054d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000;
 80054d6:	4b1c      	ldr	r3, [pc, #112]	; (8005548 <MX_TIM3_Init+0x94>)
 80054d8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80054dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054de:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <MX_TIM3_Init+0x94>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 166-1;
 80054e4:	4b18      	ldr	r3, [pc, #96]	; (8005548 <MX_TIM3_Init+0x94>)
 80054e6:	22a5      	movs	r2, #165	; 0xa5
 80054e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054ea:	4b17      	ldr	r3, [pc, #92]	; (8005548 <MX_TIM3_Init+0x94>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054f0:	4b15      	ldr	r3, [pc, #84]	; (8005548 <MX_TIM3_Init+0x94>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80054f6:	4814      	ldr	r0, [pc, #80]	; (8005548 <MX_TIM3_Init+0x94>)
 80054f8:	f002 fac2 	bl	8007a80 <HAL_TIM_Base_Init>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8005502:	f000 f93b 	bl	800577c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800550a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800550c:	f107 0308 	add.w	r3, r7, #8
 8005510:	4619      	mov	r1, r3
 8005512:	480d      	ldr	r0, [pc, #52]	; (8005548 <MX_TIM3_Init+0x94>)
 8005514:	f003 f99e 	bl	8008854 <HAL_TIM_ConfigClockSource>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800551e:	f000 f92d 	bl	800577c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005522:	2300      	movs	r3, #0
 8005524:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005526:	2300      	movs	r3, #0
 8005528:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800552a:	463b      	mov	r3, r7
 800552c:	4619      	mov	r1, r3
 800552e:	4806      	ldr	r0, [pc, #24]	; (8005548 <MX_TIM3_Init+0x94>)
 8005530:	f003 fe26 	bl	8009180 <HAL_TIMEx_MasterConfigSynchronization>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800553a:	f000 f91f 	bl	800577c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800553e:	bf00      	nop
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	200002a0 	.word	0x200002a0
 800554c:	40000400 	.word	0x40000400

08005550 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08e      	sub	sp, #56	; 0x38
 8005554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	605a      	str	r2, [r3, #4]
 8005560:	609a      	str	r2, [r3, #8]
 8005562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005564:	f107 0320 	add.w	r3, r7, #32
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800556e:	1d3b      	adds	r3, r7, #4
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	605a      	str	r2, [r3, #4]
 8005576:	609a      	str	r2, [r3, #8]
 8005578:	60da      	str	r2, [r3, #12]
 800557a:	611a      	str	r2, [r3, #16]
 800557c:	615a      	str	r2, [r3, #20]
 800557e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005580:	4b2c      	ldr	r3, [pc, #176]	; (8005634 <MX_TIM4_Init+0xe4>)
 8005582:	4a2d      	ldr	r2, [pc, #180]	; (8005638 <MX_TIM4_Init+0xe8>)
 8005584:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005586:	4b2b      	ldr	r3, [pc, #172]	; (8005634 <MX_TIM4_Init+0xe4>)
 8005588:	2200      	movs	r2, #0
 800558a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800558c:	4b29      	ldr	r3, [pc, #164]	; (8005634 <MX_TIM4_Init+0xe4>)
 800558e:	2200      	movs	r2, #0
 8005590:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 120-1;
 8005592:	4b28      	ldr	r3, [pc, #160]	; (8005634 <MX_TIM4_Init+0xe4>)
 8005594:	2277      	movs	r2, #119	; 0x77
 8005596:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005598:	4b26      	ldr	r3, [pc, #152]	; (8005634 <MX_TIM4_Init+0xe4>)
 800559a:	2200      	movs	r2, #0
 800559c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800559e:	4b25      	ldr	r3, [pc, #148]	; (8005634 <MX_TIM4_Init+0xe4>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80055a4:	4823      	ldr	r0, [pc, #140]	; (8005634 <MX_TIM4_Init+0xe4>)
 80055a6:	f002 fa6b 	bl	8007a80 <HAL_TIM_Base_Init>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80055b0:	f000 f8e4 	bl	800577c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80055ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055be:	4619      	mov	r1, r3
 80055c0:	481c      	ldr	r0, [pc, #112]	; (8005634 <MX_TIM4_Init+0xe4>)
 80055c2:	f003 f947 	bl	8008854 <HAL_TIM_ConfigClockSource>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80055cc:	f000 f8d6 	bl	800577c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80055d0:	4818      	ldr	r0, [pc, #96]	; (8005634 <MX_TIM4_Init+0xe4>)
 80055d2:	f002 fc5f 	bl	8007e94 <HAL_TIM_PWM_Init>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80055dc:	f000 f8ce 	bl	800577c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055e0:	2300      	movs	r3, #0
 80055e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055e4:	2300      	movs	r3, #0
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80055e8:	f107 0320 	add.w	r3, r7, #32
 80055ec:	4619      	mov	r1, r3
 80055ee:	4811      	ldr	r0, [pc, #68]	; (8005634 <MX_TIM4_Init+0xe4>)
 80055f0:	f003 fdc6 	bl	8009180 <HAL_TIMEx_MasterConfigSynchronization>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80055fa:	f000 f8bf 	bl	800577c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055fe:	2360      	movs	r3, #96	; 0x60
 8005600:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800560e:	1d3b      	adds	r3, r7, #4
 8005610:	2204      	movs	r2, #4
 8005612:	4619      	mov	r1, r3
 8005614:	4807      	ldr	r0, [pc, #28]	; (8005634 <MX_TIM4_Init+0xe4>)
 8005616:	f003 f85b 	bl	80086d0 <HAL_TIM_PWM_ConfigChannel>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8005620:	f000 f8ac 	bl	800577c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005624:	4803      	ldr	r0, [pc, #12]	; (8005634 <MX_TIM4_Init+0xe4>)
 8005626:	f000 f9cf 	bl	80059c8 <HAL_TIM_MspPostInit>

}
 800562a:	bf00      	nop
 800562c:	3738      	adds	r7, #56	; 0x38
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	200002e8 	.word	0x200002e8
 8005638:	40000800 	.word	0x40000800

0800563c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005642:	2300      	movs	r3, #0
 8005644:	607b      	str	r3, [r7, #4]
 8005646:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <MX_DMA_Init+0x3c>)
 8005648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564a:	4a0b      	ldr	r2, [pc, #44]	; (8005678 <MX_DMA_Init+0x3c>)
 800564c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005650:	6313      	str	r3, [r2, #48]	; 0x30
 8005652:	4b09      	ldr	r3, [pc, #36]	; (8005678 <MX_DMA_Init+0x3c>)
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800565a:	607b      	str	r3, [r7, #4]
 800565c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800565e:	2200      	movs	r2, #0
 8005660:	2100      	movs	r1, #0
 8005662:	200e      	movs	r0, #14
 8005664:	f001 f863 	bl	800672e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8005668:	200e      	movs	r0, #14
 800566a:	f001 f87c 	bl	8006766 <HAL_NVIC_EnableIRQ>

}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40023800 	.word	0x40023800

0800567c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	; 0x28
 8005680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005682:	f107 0314 	add.w	r3, r7, #20
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	605a      	str	r2, [r3, #4]
 800568c:	609a      	str	r2, [r3, #8]
 800568e:	60da      	str	r2, [r3, #12]
 8005690:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005692:	2300      	movs	r3, #0
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	4b36      	ldr	r3, [pc, #216]	; (8005770 <MX_GPIO_Init+0xf4>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	4a35      	ldr	r2, [pc, #212]	; (8005770 <MX_GPIO_Init+0xf4>)
 800569c:	f043 0304 	orr.w	r3, r3, #4
 80056a0:	6313      	str	r3, [r2, #48]	; 0x30
 80056a2:	4b33      	ldr	r3, [pc, #204]	; (8005770 <MX_GPIO_Init+0xf4>)
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	613b      	str	r3, [r7, #16]
 80056ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	4b2f      	ldr	r3, [pc, #188]	; (8005770 <MX_GPIO_Init+0xf4>)
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	4a2e      	ldr	r2, [pc, #184]	; (8005770 <MX_GPIO_Init+0xf4>)
 80056b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056bc:	6313      	str	r3, [r2, #48]	; 0x30
 80056be:	4b2c      	ldr	r3, [pc, #176]	; (8005770 <MX_GPIO_Init+0xf4>)
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ca:	2300      	movs	r3, #0
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	4b28      	ldr	r3, [pc, #160]	; (8005770 <MX_GPIO_Init+0xf4>)
 80056d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d2:	4a27      	ldr	r2, [pc, #156]	; (8005770 <MX_GPIO_Init+0xf4>)
 80056d4:	f043 0301 	orr.w	r3, r3, #1
 80056d8:	6313      	str	r3, [r2, #48]	; 0x30
 80056da:	4b25      	ldr	r3, [pc, #148]	; (8005770 <MX_GPIO_Init+0xf4>)
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	60bb      	str	r3, [r7, #8]
 80056e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80056e6:	2300      	movs	r3, #0
 80056e8:	607b      	str	r3, [r7, #4]
 80056ea:	4b21      	ldr	r3, [pc, #132]	; (8005770 <MX_GPIO_Init+0xf4>)
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	4a20      	ldr	r2, [pc, #128]	; (8005770 <MX_GPIO_Init+0xf4>)
 80056f0:	f043 0310 	orr.w	r3, r3, #16
 80056f4:	6313      	str	r3, [r2, #48]	; 0x30
 80056f6:	4b1e      	ldr	r3, [pc, #120]	; (8005770 <MX_GPIO_Init+0xf4>)
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	607b      	str	r3, [r7, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005702:	2300      	movs	r3, #0
 8005704:	603b      	str	r3, [r7, #0]
 8005706:	4b1a      	ldr	r3, [pc, #104]	; (8005770 <MX_GPIO_Init+0xf4>)
 8005708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570a:	4a19      	ldr	r2, [pc, #100]	; (8005770 <MX_GPIO_Init+0xf4>)
 800570c:	f043 0302 	orr.w	r3, r3, #2
 8005710:	6313      	str	r3, [r2, #48]	; 0x30
 8005712:	4b17      	ldr	r3, [pc, #92]	; (8005770 <MX_GPIO_Init+0xf4>)
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800571e:	2201      	movs	r2, #1
 8005720:	2101      	movs	r1, #1
 8005722:	4814      	ldr	r0, [pc, #80]	; (8005774 <MX_GPIO_Init+0xf8>)
 8005724:	f001 fd2e 	bl	8007184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8005728:	2200      	movs	r2, #0
 800572a:	2106      	movs	r1, #6
 800572c:	4811      	ldr	r0, [pc, #68]	; (8005774 <MX_GPIO_Init+0xf8>)
 800572e:	f001 fd29 	bl	8007184 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC1 PC2 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_1|GPIO_PIN_2;
 8005732:	2307      	movs	r3, #7
 8005734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005736:	2301      	movs	r3, #1
 8005738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800573a:	2300      	movs	r3, #0
 800573c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800573e:	2300      	movs	r3, #0
 8005740:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005742:	f107 0314 	add.w	r3, r7, #20
 8005746:	4619      	mov	r1, r3
 8005748:	480a      	ldr	r0, [pc, #40]	; (8005774 <MX_GPIO_Init+0xf8>)
 800574a:	f001 fb97 	bl	8006e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800574e:	2301      	movs	r3, #1
 8005750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8005752:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8005756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005758:	2300      	movs	r3, #0
 800575a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800575c:	f107 0314 	add.w	r3, r7, #20
 8005760:	4619      	mov	r1, r3
 8005762:	4805      	ldr	r0, [pc, #20]	; (8005778 <MX_GPIO_Init+0xfc>)
 8005764:	f001 fb8a 	bl	8006e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005768:	bf00      	nop
 800576a:	3728      	adds	r7, #40	; 0x28
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	40023800 	.word	0x40023800
 8005774:	40020800 	.word	0x40020800
 8005778:	40020000 	.word	0x40020000

0800577c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005780:	b672      	cpsid	i
}
 8005782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005784:	e7fe      	b.n	8005784 <Error_Handler+0x8>
	...

08005788 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);

 800578e:	2300      	movs	r3, #0
 8005790:	607b      	str	r3, [r7, #4]
 8005792:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <HAL_MspInit+0x4c>)
 8005794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005796:	4a0f      	ldr	r2, [pc, #60]	; (80057d4 <HAL_MspInit+0x4c>)
 8005798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800579c:	6453      	str	r3, [r2, #68]	; 0x44
 800579e:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <HAL_MspInit+0x4c>)
 80057a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057a6:	607b      	str	r3, [r7, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/
 80057aa:	2300      	movs	r3, #0
 80057ac:	603b      	str	r3, [r7, #0]
 80057ae:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <HAL_MspInit+0x4c>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	4a08      	ldr	r2, [pc, #32]	; (80057d4 <HAL_MspInit+0x4c>)
 80057b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b8:	6413      	str	r3, [r2, #64]	; 0x40
 80057ba:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <HAL_MspInit+0x4c>)
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c2:	603b      	str	r3, [r7, #0]
 80057c4:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MspInit 1 */
 80057c6:	2007      	movs	r0, #7
 80057c8:	f000 ffa6 	bl	8006718 <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}

/**
* @brief ADC MSP Initialization
* This function configures the hardware resources used in this example
 80057cc:	bf00      	nop
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40023800 	.word	0x40023800

080057d8 <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	; 0x28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]

 80057e0:	f107 0314 	add.w	r3, r7, #20
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	605a      	str	r2, [r3, #4]
 80057ea:	609a      	str	r2, [r3, #8]
 80057ec:	60da      	str	r2, [r3, #12]
 80057ee:	611a      	str	r2, [r3, #16]
  /* USER CODE END ADC1_MspInit 0 */
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a1b      	ldr	r2, [pc, #108]	; (8005864 <HAL_ADC_MspInit+0x8c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d12f      	bne.n	800585a <HAL_ADC_MspInit+0x82>
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
 80057fa:	2300      	movs	r3, #0
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	4b1a      	ldr	r3, [pc, #104]	; (8005868 <HAL_ADC_MspInit+0x90>)
 8005800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005802:	4a19      	ldr	r2, [pc, #100]	; (8005868 <HAL_ADC_MspInit+0x90>)
 8005804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005808:	6453      	str	r3, [r2, #68]	; 0x44
 800580a:	4b17      	ldr	r3, [pc, #92]	; (8005868 <HAL_ADC_MspInit+0x90>)
 800580c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	693b      	ldr	r3, [r7, #16]
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	4b13      	ldr	r3, [pc, #76]	; (8005868 <HAL_ADC_MspInit+0x90>)
 800581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581e:	4a12      	ldr	r2, [pc, #72]	; (8005868 <HAL_ADC_MspInit+0x90>)
 8005820:	f043 0301 	orr.w	r3, r3, #1
 8005824:	6313      	str	r3, [r2, #48]	; 0x30
 8005826:	4b10      	ldr	r3, [pc, #64]	; (8005868 <HAL_ADC_MspInit+0x90>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

 8005832:	2304      	movs	r3, #4
 8005834:	617b      	str	r3, [r7, #20]
    /* ADC1 interrupt Init */
 8005836:	2303      	movs	r3, #3
 8005838:	61bb      	str	r3, [r7, #24]
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800583e:	f107 0314 	add.w	r3, r7, #20
 8005842:	4619      	mov	r1, r3
 8005844:	4809      	ldr	r0, [pc, #36]	; (800586c <HAL_ADC_MspInit+0x94>)
 8005846:	f001 fb19 	bl	8006e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
 800584a:	2200      	movs	r2, #0
 800584c:	2100      	movs	r1, #0
 800584e:	2012      	movs	r0, #18
 8005850:	f000 ff6d 	bl	800672e <HAL_NVIC_SetPriority>
  }
 8005854:	2012      	movs	r0, #18
 8005856:	f000 ff86 	bl	8006766 <HAL_NVIC_EnableIRQ>

}

/**
* @brief ADC MSP De-Initialization
* This function freeze the hardware resources used in this example
 800585a:	bf00      	nop
 800585c:	3728      	adds	r7, #40	; 0x28
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40012000 	.word	0x40012000
 8005868:	40023800 	.word	0x40023800
 800586c:	40020000 	.word	0x40020000

08005870 <HAL_TIM_Base_MspInit>:
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* USER CODE END TIM2_MspInit 0 */
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a4c      	ldr	r2, [pc, #304]	; (80059b0 <HAL_TIM_Base_MspInit+0x140>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d116      	bne.n	80058b0 <HAL_TIM_Base_MspInit+0x40>
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
 8005882:	2300      	movs	r3, #0
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	4b4b      	ldr	r3, [pc, #300]	; (80059b4 <HAL_TIM_Base_MspInit+0x144>)
 8005888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588a:	4a4a      	ldr	r2, [pc, #296]	; (80059b4 <HAL_TIM_Base_MspInit+0x144>)
 800588c:	f043 0301 	orr.w	r3, r3, #1
 8005890:	6453      	str	r3, [r2, #68]	; 0x44
 8005892:	4b48      	ldr	r3, [pc, #288]	; (80059b4 <HAL_TIM_Base_MspInit+0x144>)
 8005894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	697b      	ldr	r3, [r7, #20]

}
 800589e:	2200      	movs	r2, #0
 80058a0:	2100      	movs	r1, #0
 80058a2:	201b      	movs	r0, #27
 80058a4:	f000 ff43 	bl	800672e <HAL_NVIC_SetPriority>

 80058a8:	201b      	movs	r0, #27
 80058aa:	f000 ff5c 	bl	8006766 <HAL_NVIC_EnableIRQ>
 80058ae:	e07b      	b.n	80059a8 <HAL_TIM_Base_MspInit+0x138>
* @retval None
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b8:	d10e      	bne.n	80058d8 <HAL_TIM_Base_MspInit+0x68>
  /* USER CODE BEGIN TIM2_MspDeInit 0 */
 80058ba:	2300      	movs	r3, #0
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	4b3d      	ldr	r3, [pc, #244]	; (80059b4 <HAL_TIM_Base_MspInit+0x144>)
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	4a3c      	ldr	r2, [pc, #240]	; (80059b4 <HAL_TIM_Base_MspInit+0x144>)
 80058c4:	f043 0301 	orr.w	r3, r3, #1
 80058c8:	6413      	str	r3, [r2, #64]	; 0x40
 80058ca:	4b3a      	ldr	r3, [pc, #232]	; (80059b4 <HAL_TIM_Base_MspInit+0x144>)
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	e067      	b.n	80059a8 <HAL_TIM_Base_MspInit+0x138>
  /* USER CODE BEGIN TIM2_MspDeInit 1 */
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a36      	ldr	r2, [pc, #216]	; (80059b8 <HAL_TIM_Base_MspInit+0x148>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d116      	bne.n	8005910 <HAL_TIM_Base_MspInit+0xa0>

 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	4b33      	ldr	r3, [pc, #204]	; (80059b4 <HAL_TIM_Base_MspInit+0x144>)
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	4a32      	ldr	r2, [pc, #200]	; (80059b4 <HAL_TIM_Base_MspInit+0x144>)
 80058ec:	f043 0302 	orr.w	r3, r3, #2
 80058f0:	6413      	str	r3, [r2, #64]	; 0x40
 80058f2:	4b30      	ldr	r3, [pc, #192]	; (80059b4 <HAL_TIM_Base_MspInit+0x144>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]

 80058fe:	2200      	movs	r2, #0
 8005900:	2100      	movs	r1, #0
 8005902:	201d      	movs	r0, #29
 8005904:	f000 ff13 	bl	800672e <HAL_NVIC_SetPriority>
/* USER CODE END 1 */
 8005908:	201d      	movs	r0, #29
 800590a:	f000 ff2c 	bl	8006766 <HAL_NVIC_EnableIRQ>
 800590e:	e04b      	b.n	80059a8 <HAL_TIM_Base_MspInit+0x138>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a29      	ldr	r2, [pc, #164]	; (80059bc <HAL_TIM_Base_MspInit+0x14c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d146      	bne.n	80059a8 <HAL_TIM_Base_MspInit+0x138>
 800591a:	2300      	movs	r3, #0
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <HAL_TIM_Base_MspInit+0x144>)
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	4a24      	ldr	r2, [pc, #144]	; (80059b4 <HAL_TIM_Base_MspInit+0x144>)
 8005924:	f043 0304 	orr.w	r3, r3, #4
 8005928:	6413      	str	r3, [r2, #64]	; 0x40
 800592a:	4b22      	ldr	r3, [pc, #136]	; (80059b4 <HAL_TIM_Base_MspInit+0x144>)
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	60bb      	str	r3, [r7, #8]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4b22      	ldr	r3, [pc, #136]	; (80059c0 <HAL_TIM_Base_MspInit+0x150>)
 8005938:	4a22      	ldr	r2, [pc, #136]	; (80059c4 <HAL_TIM_Base_MspInit+0x154>)
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	4b20      	ldr	r3, [pc, #128]	; (80059c0 <HAL_TIM_Base_MspInit+0x150>)
 800593e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005942:	605a      	str	r2, [r3, #4]
 8005944:	4b1e      	ldr	r3, [pc, #120]	; (80059c0 <HAL_TIM_Base_MspInit+0x150>)
 8005946:	2240      	movs	r2, #64	; 0x40
 8005948:	609a      	str	r2, [r3, #8]
 800594a:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <HAL_TIM_Base_MspInit+0x150>)
 800594c:	2200      	movs	r2, #0
 800594e:	60da      	str	r2, [r3, #12]
 8005950:	4b1b      	ldr	r3, [pc, #108]	; (80059c0 <HAL_TIM_Base_MspInit+0x150>)
 8005952:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005956:	611a      	str	r2, [r3, #16]
 8005958:	4b19      	ldr	r3, [pc, #100]	; (80059c0 <HAL_TIM_Base_MspInit+0x150>)
 800595a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800595e:	615a      	str	r2, [r3, #20]
 8005960:	4b17      	ldr	r3, [pc, #92]	; (80059c0 <HAL_TIM_Base_MspInit+0x150>)
 8005962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005966:	619a      	str	r2, [r3, #24]
 8005968:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <HAL_TIM_Base_MspInit+0x150>)
 800596a:	2200      	movs	r2, #0
 800596c:	61da      	str	r2, [r3, #28]
 800596e:	4b14      	ldr	r3, [pc, #80]	; (80059c0 <HAL_TIM_Base_MspInit+0x150>)
 8005970:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005974:	621a      	str	r2, [r3, #32]
 8005976:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <HAL_TIM_Base_MspInit+0x150>)
 8005978:	2200      	movs	r2, #0
 800597a:	625a      	str	r2, [r3, #36]	; 0x24
 800597c:	4810      	ldr	r0, [pc, #64]	; (80059c0 <HAL_TIM_Base_MspInit+0x150>)
 800597e:	f000 ff0d 	bl	800679c <HAL_DMA_Init>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_TIM_Base_MspInit+0x11c>
 8005988:	f7ff fef8 	bl	800577c <Error_Handler>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a0c      	ldr	r2, [pc, #48]	; (80059c0 <HAL_TIM_Base_MspInit+0x150>)
 8005990:	629a      	str	r2, [r3, #40]	; 0x28
 8005992:	4a0b      	ldr	r2, [pc, #44]	; (80059c0 <HAL_TIM_Base_MspInit+0x150>)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6393      	str	r3, [r2, #56]	; 0x38
 8005998:	2200      	movs	r2, #0
 800599a:	2100      	movs	r1, #0
 800599c:	201e      	movs	r0, #30
 800599e:	f000 fec6 	bl	800672e <HAL_NVIC_SetPriority>
 80059a2:	201e      	movs	r0, #30
 80059a4:	f000 fedf 	bl	8006766 <HAL_NVIC_EnableIRQ>
 80059a8:	bf00      	nop
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40010000 	.word	0x40010000
 80059b4:	40023800 	.word	0x40023800
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40000800 	.word	0x40000800
 80059c0:	20000330 	.word	0x20000330
 80059c4:	40026058 	.word	0x40026058

080059c8 <HAL_TIM_MspPostInit>:
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08a      	sub	sp, #40	; 0x28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	f107 0314 	add.w	r3, r7, #20
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	609a      	str	r2, [r3, #8]
 80059dc:	60da      	str	r2, [r3, #12]
 80059de:	611a      	str	r2, [r3, #16]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a24      	ldr	r2, [pc, #144]	; (8005a78 <HAL_TIM_MspPostInit+0xb0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d11f      	bne.n	8005a2a <HAL_TIM_MspPostInit+0x62>
 80059ea:	2300      	movs	r3, #0
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	4b23      	ldr	r3, [pc, #140]	; (8005a7c <HAL_TIM_MspPostInit+0xb4>)
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	4a22      	ldr	r2, [pc, #136]	; (8005a7c <HAL_TIM_MspPostInit+0xb4>)
 80059f4:	f043 0310 	orr.w	r3, r3, #16
 80059f8:	6313      	str	r3, [r2, #48]	; 0x30
 80059fa:	4b20      	ldr	r3, [pc, #128]	; (8005a7c <HAL_TIM_MspPostInit+0xb4>)
 80059fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fe:	f003 0310 	and.w	r3, r3, #16
 8005a02:	613b      	str	r3, [r7, #16]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	61bb      	str	r3, [r7, #24]
 8005a10:	2300      	movs	r3, #0
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	2300      	movs	r3, #0
 8005a16:	623b      	str	r3, [r7, #32]
 8005a18:	2301      	movs	r3, #1
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1c:	f107 0314 	add.w	r3, r7, #20
 8005a20:	4619      	mov	r1, r3
 8005a22:	4817      	ldr	r0, [pc, #92]	; (8005a80 <HAL_TIM_MspPostInit+0xb8>)
 8005a24:	f001 fa2a 	bl	8006e7c <HAL_GPIO_Init>
 8005a28:	e022      	b.n	8005a70 <HAL_TIM_MspPostInit+0xa8>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a15      	ldr	r2, [pc, #84]	; (8005a84 <HAL_TIM_MspPostInit+0xbc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d11d      	bne.n	8005a70 <HAL_TIM_MspPostInit+0xa8>
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	4b10      	ldr	r3, [pc, #64]	; (8005a7c <HAL_TIM_MspPostInit+0xb4>)
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3c:	4a0f      	ldr	r2, [pc, #60]	; (8005a7c <HAL_TIM_MspPostInit+0xb4>)
 8005a3e:	f043 0302 	orr.w	r3, r3, #2
 8005a42:	6313      	str	r3, [r2, #48]	; 0x30
 8005a44:	4b0d      	ldr	r3, [pc, #52]	; (8005a7c <HAL_TIM_MspPostInit+0xb4>)
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2380      	movs	r3, #128	; 0x80
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	2302      	movs	r3, #2
 8005a56:	61bb      	str	r3, [r7, #24]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61fb      	str	r3, [r7, #28]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	623b      	str	r3, [r7, #32]
 8005a60:	2302      	movs	r3, #2
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
 8005a64:	f107 0314 	add.w	r3, r7, #20
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4807      	ldr	r0, [pc, #28]	; (8005a88 <HAL_TIM_MspPostInit+0xc0>)
 8005a6c:	f001 fa06 	bl	8006e7c <HAL_GPIO_Init>
 8005a70:	bf00      	nop
 8005a72:	3728      	adds	r7, #40	; 0x28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	40023800 	.word	0x40023800
 8005a80:	40021000 	.word	0x40021000
 8005a84:	40000800 	.word	0x40000800
 8005a88:	40020400 	.word	0x40020400

08005a8c <NMI_Handler>:
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  while (1)
  {
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005a90:	e7fe      	b.n	8005a90 <NMI_Handler+0x4>

08005a92 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a92:	b480      	push	{r7}
 8005a94:	af00      	add	r7, sp, #0
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
 8005a96:	e7fe      	b.n	8005a96 <HardFault_Handler+0x4>

08005a98 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
  }
 8005a9c:	e7fe      	b.n	8005a9c <MemManage_Handler+0x4>

08005a9e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a9e:	b480      	push	{r7}
 8005aa0:	af00      	add	r7, sp, #0
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    /* USER CODE END W1_BusFault_IRQn 0 */
  }
 8005aa2:	e7fe      	b.n	8005aa2 <BusFault_Handler+0x4>

08005aa4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
 8005aa8:	e7fe      	b.n	8005aa8 <UsageFault_Handler+0x4>

08005aaa <SVC_Handler>:
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
 8005aaa:	b480      	push	{r7}
 8005aac:	af00      	add	r7, sp, #0
  /* USER CODE END SVCall_IRQn 1 */
}

/**
  * @brief This function handles Debug monitor.
  */
 8005aae:	bf00      	nop
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <DebugMon_Handler>:
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  /* USER CODE END DebugMonitor_IRQn 1 */
}

/**
  * @brief This function handles Pendable request for system service.
  */
 8005abc:	bf00      	nop
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <PendSV_Handler>:
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
 8005ac6:	b480      	push	{r7}
 8005ac8:	af00      	add	r7, sp, #0
  /* USER CODE END PendSV_IRQn 1 */
}

/**
  * @brief This function handles System tick timer.
  */
 8005aca:	bf00      	nop
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ad8:	f000 f8c2 	bl	8005c60 <HAL_IncTick>

/******************************************************************************/
/* STM32F4xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
 8005adc:	bf00      	nop
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <DMA1_Stream3_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005ae4:	4802      	ldr	r0, [pc, #8]	; (8005af0 <DMA1_Stream3_IRQHandler+0x10>)
 8005ae6:	f000 ff5f 	bl	80069a8 <HAL_DMA_IRQHandler>

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
 8005aea:	bf00      	nop
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000330 	.word	0x20000330

08005af4 <ADC_IRQHandler>:
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	4802      	ldr	r0, [pc, #8]	; (8005b04 <ADC_IRQHandler+0x10>)
 8005afa:	f000 f9d3 	bl	8005ea4 <HAL_ADC_IRQHandler>
 8005afe:	bf00      	nop
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	200001c8 	.word	0x200001c8

08005b08 <TIM1_CC_IRQHandler>:
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	4802      	ldr	r0, [pc, #8]	; (8005b18 <TIM1_CC_IRQHandler+0x10>)
 8005b0e:	f002 fc7b 	bl	8008408 <HAL_TIM_IRQHandler>
 8005b12:	bf00      	nop
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000210 	.word	0x20000210

08005b1c <TIM3_IRQHandler>:
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	4802      	ldr	r0, [pc, #8]	; (8005b2c <TIM3_IRQHandler+0x10>)
 8005b22:	f002 fc71 	bl	8008408 <HAL_TIM_IRQHandler>
 8005b26:	bf00      	nop
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	200002a0 	.word	0x200002a0

08005b30 <TIM4_IRQHandler>:
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	4802      	ldr	r0, [pc, #8]	; (8005b40 <TIM4_IRQHandler+0x10>)
 8005b36:	f002 fc67 	bl	8008408 <HAL_TIM_IRQHandler>
 8005b3a:	bf00      	nop
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	200002e8 	.word	0x200002e8

08005b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b48:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <SystemInit+0x20>)
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4e:	4a05      	ldr	r2, [pc, #20]	; (8005b64 <SystemInit+0x20>)
 8005b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b58:	bf00      	nop
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	e000ed00 	.word	0xe000ed00

08005b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ba0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b6c:	480d      	ldr	r0, [pc, #52]	; (8005ba4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005b6e:	490e      	ldr	r1, [pc, #56]	; (8005ba8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005b70:	4a0e      	ldr	r2, [pc, #56]	; (8005bac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b74:	e002      	b.n	8005b7c <LoopCopyDataInit>

08005b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b7a:	3304      	adds	r3, #4

08005b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b80:	d3f9      	bcc.n	8005b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b82:	4a0b      	ldr	r2, [pc, #44]	; (8005bb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005b84:	4c0b      	ldr	r4, [pc, #44]	; (8005bb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b88:	e001      	b.n	8005b8e <LoopFillZerobss>

08005b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b8c:	3204      	adds	r2, #4

08005b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b90:	d3fb      	bcc.n	8005b8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005b92:	f7ff ffd7 	bl	8005b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b96:	f003 fcd9 	bl	800954c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b9a:	f7ff fa21 	bl	8004fe0 <main>
  bx  lr    
 8005b9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005ba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ba8:	200001ac 	.word	0x200001ac
  ldr r2, =_sidata
 8005bac:	080095d4 	.word	0x080095d4
  ldr r2, =_sbss
 8005bb0:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8005bb4:	20001fec 	.word	0x20001fec

08005bb8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005bb8:	e7fe      	b.n	8005bb8 <DMA1_Stream0_IRQHandler>
	...

08005bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005bc0:	4b0e      	ldr	r3, [pc, #56]	; (8005bfc <HAL_Init+0x40>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a0d      	ldr	r2, [pc, #52]	; (8005bfc <HAL_Init+0x40>)
 8005bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005bcc:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <HAL_Init+0x40>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a0a      	ldr	r2, [pc, #40]	; (8005bfc <HAL_Init+0x40>)
 8005bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005bd8:	4b08      	ldr	r3, [pc, #32]	; (8005bfc <HAL_Init+0x40>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a07      	ldr	r2, [pc, #28]	; (8005bfc <HAL_Init+0x40>)
 8005bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005be4:	2003      	movs	r0, #3
 8005be6:	f000 fd97 	bl	8006718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005bea:	2000      	movs	r0, #0
 8005bec:	f000 f808 	bl	8005c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005bf0:	f7ff fdca 	bl	8005788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40023c00 	.word	0x40023c00

08005c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005c08:	4b12      	ldr	r3, [pc, #72]	; (8005c54 <HAL_InitTick+0x54>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4b12      	ldr	r3, [pc, #72]	; (8005c58 <HAL_InitTick+0x58>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	4619      	mov	r1, r3
 8005c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fdaf 	bl	8006782 <HAL_SYSTICK_Config>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e00e      	b.n	8005c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b0f      	cmp	r3, #15
 8005c32:	d80a      	bhi.n	8005c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c34:	2200      	movs	r2, #0
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3c:	f000 fd77 	bl	800672e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c40:	4a06      	ldr	r2, [pc, #24]	; (8005c5c <HAL_InitTick+0x5c>)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e000      	b.n	8005c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	200001a0 	.word	0x200001a0
 8005c58:	200001a8 	.word	0x200001a8
 8005c5c:	200001a4 	.word	0x200001a4

08005c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c64:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <HAL_IncTick+0x20>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <HAL_IncTick+0x24>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4413      	add	r3, r2
 8005c70:	4a04      	ldr	r2, [pc, #16]	; (8005c84 <HAL_IncTick+0x24>)
 8005c72:	6013      	str	r3, [r2, #0]
}
 8005c74:	bf00      	nop
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	200001a8 	.word	0x200001a8
 8005c84:	20001fe8 	.word	0x20001fe8

08005c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8005c8c:	4b03      	ldr	r3, [pc, #12]	; (8005c9c <HAL_GetTick+0x14>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	20001fe8 	.word	0x20001fe8

08005ca0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e033      	b.n	8005d1e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d109      	bne.n	8005cd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff fd8a 	bl	80057d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d118      	bne.n	8005d10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005ce6:	f023 0302 	bic.w	r3, r3, #2
 8005cea:	f043 0202 	orr.w	r2, r3, #2
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fb3a 	bl	800636c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	f043 0201 	orr.w	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	641a      	str	r2, [r3, #64]	; 0x40
 8005d0e:	e001      	b.n	8005d14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <HAL_ADC_Start_IT+0x1a>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e0a1      	b.n	8005e86 <HAL_ADC_Start_IT+0x15e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d018      	beq.n	8005d8a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0201 	orr.w	r2, r2, #1
 8005d66:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005d68:	4b4a      	ldr	r3, [pc, #296]	; (8005e94 <HAL_ADC_Start_IT+0x16c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a4a      	ldr	r2, [pc, #296]	; (8005e98 <HAL_ADC_Start_IT+0x170>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	0c9a      	lsrs	r2, r3, #18
 8005d74:	4613      	mov	r3, r2
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	4413      	add	r3, r2
 8005d7a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005d7c:	e002      	b.n	8005d84 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f9      	bne.n	8005d7e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d169      	bne.n	8005e6c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005da0:	f023 0301 	bic.w	r3, r3, #1
 8005da4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d007      	beq.n	8005dca <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005dc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd6:	d106      	bne.n	8005de6 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ddc:	f023 0206 	bic.w	r2, r3, #6
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	645a      	str	r2, [r3, #68]	; 0x44
 8005de4:	e002      	b.n	8005dec <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005df4:	4b29      	ldr	r3, [pc, #164]	; (8005e9c <HAL_ADC_Start_IT+0x174>)
 8005df6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005e00:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6812      	ldr	r2, [r2, #0]
 8005e0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e10:	f043 0320 	orr.w	r3, r3, #32
 8005e14:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10f      	bne.n	8005e42 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d129      	bne.n	8005e84 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005e3e:	609a      	str	r2, [r3, #8]
 8005e40:	e020      	b.n	8005e84 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a16      	ldr	r2, [pc, #88]	; (8005ea0 <HAL_ADC_Start_IT+0x178>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d11b      	bne.n	8005e84 <HAL_ADC_Start_IT+0x15c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d114      	bne.n	8005e84 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005e68:	609a      	str	r2, [r3, #8]
 8005e6a:	e00b      	b.n	8005e84 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e70:	f043 0210 	orr.w	r2, r3, #16
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7c:	f043 0201 	orr.w	r2, r3, #1
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	200001a0 	.word	0x200001a0
 8005e98:	431bde83 	.word	0x431bde83
 8005e9c:	40012300 	.word	0x40012300
 8005ea0:	40012000 	.word	0x40012000

08005ea4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d049      	beq.n	8005f6e <HAL_ADC_IRQHandler+0xca>
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d046      	beq.n	8005f6e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	f003 0310 	and.w	r3, r3, #16
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d105      	bne.n	8005ef8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d12b      	bne.n	8005f5e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d127      	bne.n	8005f5e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d006      	beq.n	8005f2a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d119      	bne.n	8005f5e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0220 	bic.w	r2, r2, #32
 8005f38:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d105      	bne.n	8005f5e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f043 0201 	orr.w	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fe ff9a 	bl	8004e98 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0212 	mvn.w	r2, #18
 8005f6c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d057      	beq.n	8006034 <HAL_ADC_IRQHandler+0x190>
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d054      	beq.n	8006034 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	f003 0310 	and.w	r3, r3, #16
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d105      	bne.n	8005fa2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d139      	bne.n	8006024 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d006      	beq.n	8005fcc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d12b      	bne.n	8006024 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d124      	bne.n	8006024 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d11d      	bne.n	8006024 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d119      	bne.n	8006024 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ffe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d105      	bne.n	8006024 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	f043 0201 	orr.w	r2, r3, #1
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fa9d 	bl	8006564 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f06f 020c 	mvn.w	r2, #12
 8006032:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006042:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d017      	beq.n	800607a <HAL_ADC_IRQHandler+0x1d6>
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d014      	beq.n	800607a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b01      	cmp	r3, #1
 800605c:	d10d      	bne.n	800607a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f837 	bl	80060de <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0201 	mvn.w	r2, #1
 8006078:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f003 0320 	and.w	r3, r3, #32
 8006080:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006088:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d015      	beq.n	80060bc <HAL_ADC_IRQHandler+0x218>
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d012      	beq.n	80060bc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609a:	f043 0202 	orr.w	r2, r3, #2
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f06f 0220 	mvn.w	r2, #32
 80060aa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f820 	bl	80060f2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f06f 0220 	mvn.w	r2, #32
 80060ba:	601a      	str	r2, [r3, #0]
  }
}
 80060bc:	bf00      	nop
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
	...

08006108 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <HAL_ADC_ConfigChannel+0x1c>
 8006120:	2302      	movs	r3, #2
 8006122:	e113      	b.n	800634c <HAL_ADC_ConfigChannel+0x244>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b09      	cmp	r3, #9
 8006132:	d925      	bls.n	8006180 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68d9      	ldr	r1, [r3, #12]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	b29b      	uxth	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	4613      	mov	r3, r2
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	4413      	add	r3, r2
 8006148:	3b1e      	subs	r3, #30
 800614a:	2207      	movs	r2, #7
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	43da      	mvns	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	400a      	ands	r2, r1
 8006158:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68d9      	ldr	r1, [r3, #12]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	b29b      	uxth	r3, r3
 800616a:	4618      	mov	r0, r3
 800616c:	4603      	mov	r3, r0
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	4403      	add	r3, r0
 8006172:	3b1e      	subs	r3, #30
 8006174:	409a      	lsls	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	60da      	str	r2, [r3, #12]
 800617e:	e022      	b.n	80061c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6919      	ldr	r1, [r3, #16]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	461a      	mov	r2, r3
 800618e:	4613      	mov	r3, r2
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	4413      	add	r3, r2
 8006194:	2207      	movs	r2, #7
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	43da      	mvns	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	400a      	ands	r2, r1
 80061a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6919      	ldr	r1, [r3, #16]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	4618      	mov	r0, r3
 80061b6:	4603      	mov	r3, r0
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	4403      	add	r3, r0
 80061bc:	409a      	lsls	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b06      	cmp	r3, #6
 80061cc:	d824      	bhi.n	8006218 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	4613      	mov	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	3b05      	subs	r3, #5
 80061e0:	221f      	movs	r2, #31
 80061e2:	fa02 f303 	lsl.w	r3, r2, r3
 80061e6:	43da      	mvns	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	400a      	ands	r2, r1
 80061ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	4618      	mov	r0, r3
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	3b05      	subs	r3, #5
 800620a:	fa00 f203 	lsl.w	r2, r0, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	635a      	str	r2, [r3, #52]	; 0x34
 8006216:	e04c      	b.n	80062b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b0c      	cmp	r3, #12
 800621e:	d824      	bhi.n	800626a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	3b23      	subs	r3, #35	; 0x23
 8006232:	221f      	movs	r2, #31
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	43da      	mvns	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	400a      	ands	r2, r1
 8006240:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	4618      	mov	r0, r3
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	3b23      	subs	r3, #35	; 0x23
 800625c:	fa00 f203 	lsl.w	r2, r0, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	631a      	str	r2, [r3, #48]	; 0x30
 8006268:	e023      	b.n	80062b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	3b41      	subs	r3, #65	; 0x41
 800627c:	221f      	movs	r2, #31
 800627e:	fa02 f303 	lsl.w	r3, r2, r3
 8006282:	43da      	mvns	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	400a      	ands	r2, r1
 800628a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	b29b      	uxth	r3, r3
 8006298:	4618      	mov	r0, r3
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	3b41      	subs	r3, #65	; 0x41
 80062a6:	fa00 f203 	lsl.w	r2, r0, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80062b2:	4b29      	ldr	r3, [pc, #164]	; (8006358 <HAL_ADC_ConfigChannel+0x250>)
 80062b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a28      	ldr	r2, [pc, #160]	; (800635c <HAL_ADC_ConfigChannel+0x254>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d10f      	bne.n	80062e0 <HAL_ADC_ConfigChannel+0x1d8>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b12      	cmp	r3, #18
 80062c6:	d10b      	bne.n	80062e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1d      	ldr	r2, [pc, #116]	; (800635c <HAL_ADC_ConfigChannel+0x254>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d12b      	bne.n	8006342 <HAL_ADC_ConfigChannel+0x23a>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1c      	ldr	r2, [pc, #112]	; (8006360 <HAL_ADC_ConfigChannel+0x258>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d003      	beq.n	80062fc <HAL_ADC_ConfigChannel+0x1f4>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b11      	cmp	r3, #17
 80062fa:	d122      	bne.n	8006342 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a11      	ldr	r2, [pc, #68]	; (8006360 <HAL_ADC_ConfigChannel+0x258>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d111      	bne.n	8006342 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800631e:	4b11      	ldr	r3, [pc, #68]	; (8006364 <HAL_ADC_ConfigChannel+0x25c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a11      	ldr	r2, [pc, #68]	; (8006368 <HAL_ADC_ConfigChannel+0x260>)
 8006324:	fba2 2303 	umull	r2, r3, r2, r3
 8006328:	0c9a      	lsrs	r2, r3, #18
 800632a:	4613      	mov	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006334:	e002      	b.n	800633c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	3b01      	subs	r3, #1
 800633a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1f9      	bne.n	8006336 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	40012300 	.word	0x40012300
 800635c:	40012000 	.word	0x40012000
 8006360:	10000012 	.word	0x10000012
 8006364:	200001a0 	.word	0x200001a0
 8006368:	431bde83 	.word	0x431bde83

0800636c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006374:	4b79      	ldr	r3, [pc, #484]	; (800655c <ADC_Init+0x1f0>)
 8006376:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	431a      	orrs	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6859      	ldr	r1, [r3, #4]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	021a      	lsls	r2, r3, #8
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80063c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6859      	ldr	r1, [r3, #4]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689a      	ldr	r2, [r3, #8]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6899      	ldr	r1, [r3, #8]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fe:	4a58      	ldr	r2, [pc, #352]	; (8006560 <ADC_Init+0x1f4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d022      	beq.n	800644a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006412:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6899      	ldr	r1, [r3, #8]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6899      	ldr	r1, [r3, #8]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	609a      	str	r2, [r3, #8]
 8006448:	e00f      	b.n	800646a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006458:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006468:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0202 	bic.w	r2, r2, #2
 8006478:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6899      	ldr	r1, [r3, #8]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	7e1b      	ldrb	r3, [r3, #24]
 8006484:	005a      	lsls	r2, r3, #1
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01b      	beq.n	80064d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80064b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6859      	ldr	r1, [r3, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	3b01      	subs	r3, #1
 80064c4:	035a      	lsls	r2, r3, #13
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	605a      	str	r2, [r3, #4]
 80064ce:	e007      	b.n	80064e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80064ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	051a      	lsls	r2, r3, #20
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006514:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6899      	ldr	r1, [r3, #8]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006522:	025a      	lsls	r2, r3, #9
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6899      	ldr	r1, [r3, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	029a      	lsls	r2, r3, #10
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	609a      	str	r2, [r3, #8]
}
 8006550:	bf00      	nop
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	40012300 	.word	0x40012300
 8006560:	0f000001 	.word	0x0f000001

08006564 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006588:	4b0c      	ldr	r3, [pc, #48]	; (80065bc <__NVIC_SetPriorityGrouping+0x44>)
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006594:	4013      	ands	r3, r2
 8006596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80065a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065aa:	4a04      	ldr	r2, [pc, #16]	; (80065bc <__NVIC_SetPriorityGrouping+0x44>)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	60d3      	str	r3, [r2, #12]
}
 80065b0:	bf00      	nop
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	e000ed00 	.word	0xe000ed00

080065c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065c4:	4b04      	ldr	r3, [pc, #16]	; (80065d8 <__NVIC_GetPriorityGrouping+0x18>)
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	0a1b      	lsrs	r3, r3, #8
 80065ca:	f003 0307 	and.w	r3, r3, #7
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	e000ed00 	.word	0xe000ed00

080065dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	4603      	mov	r3, r0
 80065e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	db0b      	blt.n	8006606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065ee:	79fb      	ldrb	r3, [r7, #7]
 80065f0:	f003 021f 	and.w	r2, r3, #31
 80065f4:	4907      	ldr	r1, [pc, #28]	; (8006614 <__NVIC_EnableIRQ+0x38>)
 80065f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065fa:	095b      	lsrs	r3, r3, #5
 80065fc:	2001      	movs	r0, #1
 80065fe:	fa00 f202 	lsl.w	r2, r0, r2
 8006602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	e000e100 	.word	0xe000e100

08006618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	4603      	mov	r3, r0
 8006620:	6039      	str	r1, [r7, #0]
 8006622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006628:	2b00      	cmp	r3, #0
 800662a:	db0a      	blt.n	8006642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	b2da      	uxtb	r2, r3
 8006630:	490c      	ldr	r1, [pc, #48]	; (8006664 <__NVIC_SetPriority+0x4c>)
 8006632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006636:	0112      	lsls	r2, r2, #4
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	440b      	add	r3, r1
 800663c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006640:	e00a      	b.n	8006658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	b2da      	uxtb	r2, r3
 8006646:	4908      	ldr	r1, [pc, #32]	; (8006668 <__NVIC_SetPriority+0x50>)
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	f003 030f 	and.w	r3, r3, #15
 800664e:	3b04      	subs	r3, #4
 8006650:	0112      	lsls	r2, r2, #4
 8006652:	b2d2      	uxtb	r2, r2
 8006654:	440b      	add	r3, r1
 8006656:	761a      	strb	r2, [r3, #24]
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	e000e100 	.word	0xe000e100
 8006668:	e000ed00 	.word	0xe000ed00

0800666c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800666c:	b480      	push	{r7}
 800666e:	b089      	sub	sp, #36	; 0x24
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f003 0307 	and.w	r3, r3, #7
 800667e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	f1c3 0307 	rsb	r3, r3, #7
 8006686:	2b04      	cmp	r3, #4
 8006688:	bf28      	it	cs
 800668a:	2304      	movcs	r3, #4
 800668c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	3304      	adds	r3, #4
 8006692:	2b06      	cmp	r3, #6
 8006694:	d902      	bls.n	800669c <NVIC_EncodePriority+0x30>
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	3b03      	subs	r3, #3
 800669a:	e000      	b.n	800669e <NVIC_EncodePriority+0x32>
 800669c:	2300      	movs	r3, #0
 800669e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066a0:	f04f 32ff 	mov.w	r2, #4294967295
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	fa02 f303 	lsl.w	r3, r2, r3
 80066aa:	43da      	mvns	r2, r3
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	401a      	ands	r2, r3
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066b4:	f04f 31ff 	mov.w	r1, #4294967295
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	fa01 f303 	lsl.w	r3, r1, r3
 80066be:	43d9      	mvns	r1, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066c4:	4313      	orrs	r3, r2
         );
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3724      	adds	r7, #36	; 0x24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
	...

080066d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	3b01      	subs	r3, #1
 80066e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066e4:	d301      	bcc.n	80066ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066e6:	2301      	movs	r3, #1
 80066e8:	e00f      	b.n	800670a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066ea:	4a0a      	ldr	r2, [pc, #40]	; (8006714 <SysTick_Config+0x40>)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066f2:	210f      	movs	r1, #15
 80066f4:	f04f 30ff 	mov.w	r0, #4294967295
 80066f8:	f7ff ff8e 	bl	8006618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066fc:	4b05      	ldr	r3, [pc, #20]	; (8006714 <SysTick_Config+0x40>)
 80066fe:	2200      	movs	r2, #0
 8006700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006702:	4b04      	ldr	r3, [pc, #16]	; (8006714 <SysTick_Config+0x40>)
 8006704:	2207      	movs	r2, #7
 8006706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	e000e010 	.word	0xe000e010

08006718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7ff ff29 	bl	8006578 <__NVIC_SetPriorityGrouping>
}
 8006726:	bf00      	nop
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800672e:	b580      	push	{r7, lr}
 8006730:	b086      	sub	sp, #24
 8006732:	af00      	add	r7, sp, #0
 8006734:	4603      	mov	r3, r0
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	607a      	str	r2, [r7, #4]
 800673a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800673c:	2300      	movs	r3, #0
 800673e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006740:	f7ff ff3e 	bl	80065c0 <__NVIC_GetPriorityGrouping>
 8006744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	6978      	ldr	r0, [r7, #20]
 800674c:	f7ff ff8e 	bl	800666c <NVIC_EncodePriority>
 8006750:	4602      	mov	r2, r0
 8006752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006756:	4611      	mov	r1, r2
 8006758:	4618      	mov	r0, r3
 800675a:	f7ff ff5d 	bl	8006618 <__NVIC_SetPriority>
}
 800675e:	bf00      	nop
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b082      	sub	sp, #8
 800676a:	af00      	add	r7, sp, #0
 800676c:	4603      	mov	r3, r0
 800676e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff ff31 	bl	80065dc <__NVIC_EnableIRQ>
}
 800677a:	bf00      	nop
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff ffa2 	bl	80066d4 <SysTick_Config>
 8006790:	4603      	mov	r3, r0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80067a8:	f7ff fa6e 	bl	8005c88 <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e099      	b.n	80068ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0201 	bic.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067d8:	e00f      	b.n	80067fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80067da:	f7ff fa55 	bl	8005c88 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b05      	cmp	r3, #5
 80067e6:	d908      	bls.n	80067fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2220      	movs	r2, #32
 80067ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2203      	movs	r2, #3
 80067f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e078      	b.n	80068ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e8      	bne.n	80067da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	4b38      	ldr	r3, [pc, #224]	; (80068f4 <HAL_DMA_Init+0x158>)
 8006814:	4013      	ands	r3, r2
 8006816:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006826:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800683e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	2b04      	cmp	r3, #4
 8006852:	d107      	bne.n	8006864 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	4313      	orrs	r3, r2
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f023 0307 	bic.w	r3, r3, #7
 800687a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	2b04      	cmp	r3, #4
 800688c:	d117      	bne.n	80068be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4313      	orrs	r3, r2
 8006896:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00e      	beq.n	80068be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fa6f 	bl	8006d84 <DMA_CheckFifoParam>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2240      	movs	r2, #64	; 0x40
 80068b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80068ba:	2301      	movs	r3, #1
 80068bc:	e016      	b.n	80068ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fa26 	bl	8006d18 <DMA_CalcBaseAndBitshift>
 80068cc:	4603      	mov	r3, r0
 80068ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d4:	223f      	movs	r2, #63	; 0x3f
 80068d6:	409a      	lsls	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	f010803f 	.word	0xf010803f

080068f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <HAL_DMA_Start_IT+0x26>
 800691a:	2302      	movs	r3, #2
 800691c:	e040      	b.n	80069a0 <HAL_DMA_Start_IT+0xa8>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b01      	cmp	r3, #1
 8006930:	d12f      	bne.n	8006992 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2202      	movs	r2, #2
 8006936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 f9b8 	bl	8006cbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006950:	223f      	movs	r2, #63	; 0x3f
 8006952:	409a      	lsls	r2, r3
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0216 	orr.w	r2, r2, #22
 8006966:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696c:	2b00      	cmp	r3, #0
 800696e:	d007      	beq.n	8006980 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0208 	orr.w	r2, r2, #8
 800697e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0201 	orr.w	r2, r2, #1
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	e005      	b.n	800699e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800699a:	2302      	movs	r3, #2
 800699c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800699e:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80069b4:	4b8e      	ldr	r3, [pc, #568]	; (8006bf0 <HAL_DMA_IRQHandler+0x248>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a8e      	ldr	r2, [pc, #568]	; (8006bf4 <HAL_DMA_IRQHandler+0x24c>)
 80069ba:	fba2 2303 	umull	r2, r3, r2, r3
 80069be:	0a9b      	lsrs	r3, r3, #10
 80069c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d2:	2208      	movs	r2, #8
 80069d4:	409a      	lsls	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4013      	ands	r3, r2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d01a      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d013      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0204 	bic.w	r2, r2, #4
 80069fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a00:	2208      	movs	r2, #8
 8006a02:	409a      	lsls	r2, r3
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0c:	f043 0201 	orr.w	r2, r3, #1
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a18:	2201      	movs	r2, #1
 8006a1a:	409a      	lsls	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d012      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00b      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a36:	2201      	movs	r2, #1
 8006a38:	409a      	lsls	r2, r3
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a42:	f043 0202 	orr.w	r2, r3, #2
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4e:	2204      	movs	r2, #4
 8006a50:	409a      	lsls	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4013      	ands	r3, r2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d012      	beq.n	8006a80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00b      	beq.n	8006a80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a6c:	2204      	movs	r2, #4
 8006a6e:	409a      	lsls	r2, r3
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a78:	f043 0204 	orr.w	r2, r3, #4
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a84:	2210      	movs	r2, #16
 8006a86:	409a      	lsls	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d043      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0308 	and.w	r3, r3, #8
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d03c      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa2:	2210      	movs	r2, #16
 8006aa4:	409a      	lsls	r2, r3
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d018      	beq.n	8006aea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d108      	bne.n	8006ad8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d024      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	4798      	blx	r3
 8006ad6:	e01f      	b.n	8006b18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d01b      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	4798      	blx	r3
 8006ae8:	e016      	b.n	8006b18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d107      	bne.n	8006b08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0208 	bic.w	r2, r2, #8
 8006b06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	409a      	lsls	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4013      	ands	r3, r2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 808f 	beq.w	8006c48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0310 	and.w	r3, r3, #16
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 8087 	beq.w	8006c48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b3e:	2220      	movs	r2, #32
 8006b40:	409a      	lsls	r2, r3
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b05      	cmp	r3, #5
 8006b50:	d136      	bne.n	8006bc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0216 	bic.w	r2, r2, #22
 8006b60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	695a      	ldr	r2, [r3, #20]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d103      	bne.n	8006b82 <HAL_DMA_IRQHandler+0x1da>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d007      	beq.n	8006b92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0208 	bic.w	r2, r2, #8
 8006b90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b96:	223f      	movs	r2, #63	; 0x3f
 8006b98:	409a      	lsls	r2, r3
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d07e      	beq.n	8006cb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	4798      	blx	r3
        }
        return;
 8006bbe:	e079      	b.n	8006cb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d01d      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10d      	bne.n	8006bf8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d031      	beq.n	8006c48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	4798      	blx	r3
 8006bec:	e02c      	b.n	8006c48 <HAL_DMA_IRQHandler+0x2a0>
 8006bee:	bf00      	nop
 8006bf0:	200001a0 	.word	0x200001a0
 8006bf4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d023      	beq.n	8006c48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	4798      	blx	r3
 8006c08:	e01e      	b.n	8006c48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10f      	bne.n	8006c38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0210 	bic.w	r2, r2, #16
 8006c26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d032      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d022      	beq.n	8006ca2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2205      	movs	r2, #5
 8006c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f022 0201 	bic.w	r2, r2, #1
 8006c72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	3301      	adds	r3, #1
 8006c78:	60bb      	str	r3, [r7, #8]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d307      	bcc.n	8006c90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1f2      	bne.n	8006c74 <HAL_DMA_IRQHandler+0x2cc>
 8006c8e:	e000      	b.n	8006c92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006c90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
 8006cb2:	e000      	b.n	8006cb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006cb4:	bf00      	nop
    }
  }
}
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006cd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b40      	cmp	r3, #64	; 0x40
 8006ce8:	d108      	bne.n	8006cfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006cfa:	e007      	b.n	8006d0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	60da      	str	r2, [r3, #12]
}
 8006d0c:	bf00      	nop
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	3b10      	subs	r3, #16
 8006d28:	4a14      	ldr	r2, [pc, #80]	; (8006d7c <DMA_CalcBaseAndBitshift+0x64>)
 8006d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2e:	091b      	lsrs	r3, r3, #4
 8006d30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006d32:	4a13      	ldr	r2, [pc, #76]	; (8006d80 <DMA_CalcBaseAndBitshift+0x68>)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4413      	add	r3, r2
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	d909      	bls.n	8006d5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006d4e:	f023 0303 	bic.w	r3, r3, #3
 8006d52:	1d1a      	adds	r2, r3, #4
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	659a      	str	r2, [r3, #88]	; 0x58
 8006d58:	e007      	b.n	8006d6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006d62:	f023 0303 	bic.w	r3, r3, #3
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	aaaaaaab 	.word	0xaaaaaaab
 8006d80:	080095bc 	.word	0x080095bc

08006d84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d11f      	bne.n	8006dde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d856      	bhi.n	8006e52 <DMA_CheckFifoParam+0xce>
 8006da4:	a201      	add	r2, pc, #4	; (adr r2, 8006dac <DMA_CheckFifoParam+0x28>)
 8006da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006daa:	bf00      	nop
 8006dac:	08006dbd 	.word	0x08006dbd
 8006db0:	08006dcf 	.word	0x08006dcf
 8006db4:	08006dbd 	.word	0x08006dbd
 8006db8:	08006e53 	.word	0x08006e53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d046      	beq.n	8006e56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dcc:	e043      	b.n	8006e56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006dd6:	d140      	bne.n	8006e5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ddc:	e03d      	b.n	8006e5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006de6:	d121      	bne.n	8006e2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d837      	bhi.n	8006e5e <DMA_CheckFifoParam+0xda>
 8006dee:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <DMA_CheckFifoParam+0x70>)
 8006df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df4:	08006e05 	.word	0x08006e05
 8006df8:	08006e0b 	.word	0x08006e0b
 8006dfc:	08006e05 	.word	0x08006e05
 8006e00:	08006e1d 	.word	0x08006e1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	73fb      	strb	r3, [r7, #15]
      break;
 8006e08:	e030      	b.n	8006e6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d025      	beq.n	8006e62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e1a:	e022      	b.n	8006e62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e24:	d11f      	bne.n	8006e66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006e2a:	e01c      	b.n	8006e66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d903      	bls.n	8006e3a <DMA_CheckFifoParam+0xb6>
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d003      	beq.n	8006e40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006e38:	e018      	b.n	8006e6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e3e:	e015      	b.n	8006e6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00e      	beq.n	8006e6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e50:	e00b      	b.n	8006e6a <DMA_CheckFifoParam+0xe6>
      break;
 8006e52:	bf00      	nop
 8006e54:	e00a      	b.n	8006e6c <DMA_CheckFifoParam+0xe8>
      break;
 8006e56:	bf00      	nop
 8006e58:	e008      	b.n	8006e6c <DMA_CheckFifoParam+0xe8>
      break;
 8006e5a:	bf00      	nop
 8006e5c:	e006      	b.n	8006e6c <DMA_CheckFifoParam+0xe8>
      break;
 8006e5e:	bf00      	nop
 8006e60:	e004      	b.n	8006e6c <DMA_CheckFifoParam+0xe8>
      break;
 8006e62:	bf00      	nop
 8006e64:	e002      	b.n	8006e6c <DMA_CheckFifoParam+0xe8>
      break;   
 8006e66:	bf00      	nop
 8006e68:	e000      	b.n	8006e6c <DMA_CheckFifoParam+0xe8>
      break;
 8006e6a:	bf00      	nop
    }
  } 
  
  return status; 
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop

08006e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b089      	sub	sp, #36	; 0x24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e92:	2300      	movs	r3, #0
 8006e94:	61fb      	str	r3, [r7, #28]
 8006e96:	e159      	b.n	800714c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006e98:	2201      	movs	r2, #1
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	f040 8148 	bne.w	8007146 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f003 0303 	and.w	r3, r3, #3
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d005      	beq.n	8006ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d130      	bne.n	8006f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	2203      	movs	r2, #3
 8006eda:	fa02 f303 	lsl.w	r3, r2, r3
 8006ede:	43db      	mvns	r3, r3
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f04:	2201      	movs	r2, #1
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	4013      	ands	r3, r2
 8006f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	091b      	lsrs	r3, r3, #4
 8006f1a:	f003 0201 	and.w	r2, r3, #1
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	fa02 f303 	lsl.w	r3, r2, r3
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f003 0303 	and.w	r3, r3, #3
 8006f38:	2b03      	cmp	r3, #3
 8006f3a:	d017      	beq.n	8006f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	2203      	movs	r2, #3
 8006f48:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	4013      	ands	r3, r2
 8006f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f003 0303 	and.w	r3, r3, #3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d123      	bne.n	8006fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	08da      	lsrs	r2, r3, #3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3208      	adds	r2, #8
 8006f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	220f      	movs	r2, #15
 8006f90:	fa02 f303 	lsl.w	r3, r2, r3
 8006f94:	43db      	mvns	r3, r3
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	691a      	ldr	r2, [r3, #16]
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	08da      	lsrs	r2, r3, #3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	3208      	adds	r2, #8
 8006fba:	69b9      	ldr	r1, [r7, #24]
 8006fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	2203      	movs	r2, #3
 8006fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd0:	43db      	mvns	r3, r3
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f003 0203 	and.w	r2, r3, #3
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 80a2 	beq.w	8007146 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007002:	2300      	movs	r3, #0
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	4b57      	ldr	r3, [pc, #348]	; (8007164 <HAL_GPIO_Init+0x2e8>)
 8007008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700a:	4a56      	ldr	r2, [pc, #344]	; (8007164 <HAL_GPIO_Init+0x2e8>)
 800700c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007010:	6453      	str	r3, [r2, #68]	; 0x44
 8007012:	4b54      	ldr	r3, [pc, #336]	; (8007164 <HAL_GPIO_Init+0x2e8>)
 8007014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800701e:	4a52      	ldr	r2, [pc, #328]	; (8007168 <HAL_GPIO_Init+0x2ec>)
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	089b      	lsrs	r3, r3, #2
 8007024:	3302      	adds	r3, #2
 8007026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800702a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	f003 0303 	and.w	r3, r3, #3
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	220f      	movs	r2, #15
 8007036:	fa02 f303 	lsl.w	r3, r2, r3
 800703a:	43db      	mvns	r3, r3
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	4013      	ands	r3, r2
 8007040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a49      	ldr	r2, [pc, #292]	; (800716c <HAL_GPIO_Init+0x2f0>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d019      	beq.n	800707e <HAL_GPIO_Init+0x202>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a48      	ldr	r2, [pc, #288]	; (8007170 <HAL_GPIO_Init+0x2f4>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d013      	beq.n	800707a <HAL_GPIO_Init+0x1fe>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a47      	ldr	r2, [pc, #284]	; (8007174 <HAL_GPIO_Init+0x2f8>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00d      	beq.n	8007076 <HAL_GPIO_Init+0x1fa>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a46      	ldr	r2, [pc, #280]	; (8007178 <HAL_GPIO_Init+0x2fc>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d007      	beq.n	8007072 <HAL_GPIO_Init+0x1f6>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a45      	ldr	r2, [pc, #276]	; (800717c <HAL_GPIO_Init+0x300>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d101      	bne.n	800706e <HAL_GPIO_Init+0x1f2>
 800706a:	2304      	movs	r3, #4
 800706c:	e008      	b.n	8007080 <HAL_GPIO_Init+0x204>
 800706e:	2307      	movs	r3, #7
 8007070:	e006      	b.n	8007080 <HAL_GPIO_Init+0x204>
 8007072:	2303      	movs	r3, #3
 8007074:	e004      	b.n	8007080 <HAL_GPIO_Init+0x204>
 8007076:	2302      	movs	r3, #2
 8007078:	e002      	b.n	8007080 <HAL_GPIO_Init+0x204>
 800707a:	2301      	movs	r3, #1
 800707c:	e000      	b.n	8007080 <HAL_GPIO_Init+0x204>
 800707e:	2300      	movs	r3, #0
 8007080:	69fa      	ldr	r2, [r7, #28]
 8007082:	f002 0203 	and.w	r2, r2, #3
 8007086:	0092      	lsls	r2, r2, #2
 8007088:	4093      	lsls	r3, r2
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	4313      	orrs	r3, r2
 800708e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007090:	4935      	ldr	r1, [pc, #212]	; (8007168 <HAL_GPIO_Init+0x2ec>)
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	089b      	lsrs	r3, r3, #2
 8007096:	3302      	adds	r3, #2
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800709e:	4b38      	ldr	r3, [pc, #224]	; (8007180 <HAL_GPIO_Init+0x304>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	43db      	mvns	r3, r3
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	4013      	ands	r3, r2
 80070ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070c2:	4a2f      	ldr	r2, [pc, #188]	; (8007180 <HAL_GPIO_Init+0x304>)
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80070c8:	4b2d      	ldr	r3, [pc, #180]	; (8007180 <HAL_GPIO_Init+0x304>)
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	43db      	mvns	r3, r3
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	4013      	ands	r3, r2
 80070d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80070ec:	4a24      	ldr	r2, [pc, #144]	; (8007180 <HAL_GPIO_Init+0x304>)
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80070f2:	4b23      	ldr	r3, [pc, #140]	; (8007180 <HAL_GPIO_Init+0x304>)
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	43db      	mvns	r3, r3
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	4013      	ands	r3, r2
 8007100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	4313      	orrs	r3, r2
 8007114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007116:	4a1a      	ldr	r2, [pc, #104]	; (8007180 <HAL_GPIO_Init+0x304>)
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800711c:	4b18      	ldr	r3, [pc, #96]	; (8007180 <HAL_GPIO_Init+0x304>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	43db      	mvns	r3, r3
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	4013      	ands	r3, r2
 800712a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d003      	beq.n	8007140 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	4313      	orrs	r3, r2
 800713e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007140:	4a0f      	ldr	r2, [pc, #60]	; (8007180 <HAL_GPIO_Init+0x304>)
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	3301      	adds	r3, #1
 800714a:	61fb      	str	r3, [r7, #28]
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	2b0f      	cmp	r3, #15
 8007150:	f67f aea2 	bls.w	8006e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop
 8007158:	3724      	adds	r7, #36	; 0x24
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	40023800 	.word	0x40023800
 8007168:	40013800 	.word	0x40013800
 800716c:	40020000 	.word	0x40020000
 8007170:	40020400 	.word	0x40020400
 8007174:	40020800 	.word	0x40020800
 8007178:	40020c00 	.word	0x40020c00
 800717c:	40021000 	.word	0x40021000
 8007180:	40013c00 	.word	0x40013c00

08007184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	460b      	mov	r3, r1
 800718e:	807b      	strh	r3, [r7, #2]
 8007190:	4613      	mov	r3, r2
 8007192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007194:	787b      	ldrb	r3, [r7, #1]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800719a:	887a      	ldrh	r2, [r7, #2]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80071a0:	e003      	b.n	80071aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80071a2:	887b      	ldrh	r3, [r7, #2]
 80071a4:	041a      	lsls	r2, r3, #16
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	619a      	str	r2, [r3, #24]
}
 80071aa:	bf00      	nop
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
	...

080071b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e267      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d075      	beq.n	80072c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071d6:	4b88      	ldr	r3, [pc, #544]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 030c 	and.w	r3, r3, #12
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d00c      	beq.n	80071fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071e2:	4b85      	ldr	r3, [pc, #532]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071ea:	2b08      	cmp	r3, #8
 80071ec:	d112      	bne.n	8007214 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071ee:	4b82      	ldr	r3, [pc, #520]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071fa:	d10b      	bne.n	8007214 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071fc:	4b7e      	ldr	r3, [pc, #504]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d05b      	beq.n	80072c0 <HAL_RCC_OscConfig+0x108>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d157      	bne.n	80072c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e242      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800721c:	d106      	bne.n	800722c <HAL_RCC_OscConfig+0x74>
 800721e:	4b76      	ldr	r3, [pc, #472]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a75      	ldr	r2, [pc, #468]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	e01d      	b.n	8007268 <HAL_RCC_OscConfig+0xb0>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007234:	d10c      	bne.n	8007250 <HAL_RCC_OscConfig+0x98>
 8007236:	4b70      	ldr	r3, [pc, #448]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a6f      	ldr	r2, [pc, #444]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 800723c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	4b6d      	ldr	r3, [pc, #436]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a6c      	ldr	r2, [pc, #432]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	e00b      	b.n	8007268 <HAL_RCC_OscConfig+0xb0>
 8007250:	4b69      	ldr	r3, [pc, #420]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a68      	ldr	r2, [pc, #416]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800725a:	6013      	str	r3, [r2, #0]
 800725c:	4b66      	ldr	r3, [pc, #408]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a65      	ldr	r2, [pc, #404]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d013      	beq.n	8007298 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007270:	f7fe fd0a 	bl	8005c88 <HAL_GetTick>
 8007274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007278:	f7fe fd06 	bl	8005c88 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b64      	cmp	r3, #100	; 0x64
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e207      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800728a:	4b5b      	ldr	r3, [pc, #364]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0f0      	beq.n	8007278 <HAL_RCC_OscConfig+0xc0>
 8007296:	e014      	b.n	80072c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007298:	f7fe fcf6 	bl	8005c88 <HAL_GetTick>
 800729c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800729e:	e008      	b.n	80072b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072a0:	f7fe fcf2 	bl	8005c88 <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	2b64      	cmp	r3, #100	; 0x64
 80072ac:	d901      	bls.n	80072b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e1f3      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072b2:	4b51      	ldr	r3, [pc, #324]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1f0      	bne.n	80072a0 <HAL_RCC_OscConfig+0xe8>
 80072be:	e000      	b.n	80072c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d063      	beq.n	8007396 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072ce:	4b4a      	ldr	r3, [pc, #296]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f003 030c 	and.w	r3, r3, #12
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00b      	beq.n	80072f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072da:	4b47      	ldr	r3, [pc, #284]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d11c      	bne.n	8007320 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072e6:	4b44      	ldr	r3, [pc, #272]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d116      	bne.n	8007320 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072f2:	4b41      	ldr	r3, [pc, #260]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d005      	beq.n	800730a <HAL_RCC_OscConfig+0x152>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d001      	beq.n	800730a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e1c7      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800730a:	4b3b      	ldr	r3, [pc, #236]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	4937      	ldr	r1, [pc, #220]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 800731a:	4313      	orrs	r3, r2
 800731c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800731e:	e03a      	b.n	8007396 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d020      	beq.n	800736a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007328:	4b34      	ldr	r3, [pc, #208]	; (80073fc <HAL_RCC_OscConfig+0x244>)
 800732a:	2201      	movs	r2, #1
 800732c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800732e:	f7fe fcab 	bl	8005c88 <HAL_GetTick>
 8007332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007334:	e008      	b.n	8007348 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007336:	f7fe fca7 	bl	8005c88 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d901      	bls.n	8007348 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e1a8      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007348:	4b2b      	ldr	r3, [pc, #172]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d0f0      	beq.n	8007336 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007354:	4b28      	ldr	r3, [pc, #160]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	4925      	ldr	r1, [pc, #148]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007364:	4313      	orrs	r3, r2
 8007366:	600b      	str	r3, [r1, #0]
 8007368:	e015      	b.n	8007396 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800736a:	4b24      	ldr	r3, [pc, #144]	; (80073fc <HAL_RCC_OscConfig+0x244>)
 800736c:	2200      	movs	r2, #0
 800736e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007370:	f7fe fc8a 	bl	8005c88 <HAL_GetTick>
 8007374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007376:	e008      	b.n	800738a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007378:	f7fe fc86 	bl	8005c88 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b02      	cmp	r3, #2
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e187      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800738a:	4b1b      	ldr	r3, [pc, #108]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1f0      	bne.n	8007378 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0308 	and.w	r3, r3, #8
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d036      	beq.n	8007410 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d016      	beq.n	80073d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073aa:	4b15      	ldr	r3, [pc, #84]	; (8007400 <HAL_RCC_OscConfig+0x248>)
 80073ac:	2201      	movs	r2, #1
 80073ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b0:	f7fe fc6a 	bl	8005c88 <HAL_GetTick>
 80073b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073b6:	e008      	b.n	80073ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073b8:	f7fe fc66 	bl	8005c88 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e167      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073ca:	4b0b      	ldr	r3, [pc, #44]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80073cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d0f0      	beq.n	80073b8 <HAL_RCC_OscConfig+0x200>
 80073d6:	e01b      	b.n	8007410 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073d8:	4b09      	ldr	r3, [pc, #36]	; (8007400 <HAL_RCC_OscConfig+0x248>)
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073de:	f7fe fc53 	bl	8005c88 <HAL_GetTick>
 80073e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073e4:	e00e      	b.n	8007404 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073e6:	f7fe fc4f 	bl	8005c88 <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d907      	bls.n	8007404 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e150      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
 80073f8:	40023800 	.word	0x40023800
 80073fc:	42470000 	.word	0x42470000
 8007400:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007404:	4b88      	ldr	r3, [pc, #544]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1ea      	bne.n	80073e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 8097 	beq.w	800754c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800741e:	2300      	movs	r3, #0
 8007420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007422:	4b81      	ldr	r3, [pc, #516]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10f      	bne.n	800744e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800742e:	2300      	movs	r3, #0
 8007430:	60bb      	str	r3, [r7, #8]
 8007432:	4b7d      	ldr	r3, [pc, #500]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	4a7c      	ldr	r2, [pc, #496]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800743c:	6413      	str	r3, [r2, #64]	; 0x40
 800743e:	4b7a      	ldr	r3, [pc, #488]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007446:	60bb      	str	r3, [r7, #8]
 8007448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800744a:	2301      	movs	r3, #1
 800744c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800744e:	4b77      	ldr	r3, [pc, #476]	; (800762c <HAL_RCC_OscConfig+0x474>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007456:	2b00      	cmp	r3, #0
 8007458:	d118      	bne.n	800748c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800745a:	4b74      	ldr	r3, [pc, #464]	; (800762c <HAL_RCC_OscConfig+0x474>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a73      	ldr	r2, [pc, #460]	; (800762c <HAL_RCC_OscConfig+0x474>)
 8007460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007466:	f7fe fc0f 	bl	8005c88 <HAL_GetTick>
 800746a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800746c:	e008      	b.n	8007480 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800746e:	f7fe fc0b 	bl	8005c88 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d901      	bls.n	8007480 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e10c      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007480:	4b6a      	ldr	r3, [pc, #424]	; (800762c <HAL_RCC_OscConfig+0x474>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007488:	2b00      	cmp	r3, #0
 800748a:	d0f0      	beq.n	800746e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d106      	bne.n	80074a2 <HAL_RCC_OscConfig+0x2ea>
 8007494:	4b64      	ldr	r3, [pc, #400]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007498:	4a63      	ldr	r2, [pc, #396]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 800749a:	f043 0301 	orr.w	r3, r3, #1
 800749e:	6713      	str	r3, [r2, #112]	; 0x70
 80074a0:	e01c      	b.n	80074dc <HAL_RCC_OscConfig+0x324>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	2b05      	cmp	r3, #5
 80074a8:	d10c      	bne.n	80074c4 <HAL_RCC_OscConfig+0x30c>
 80074aa:	4b5f      	ldr	r3, [pc, #380]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80074ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ae:	4a5e      	ldr	r2, [pc, #376]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80074b0:	f043 0304 	orr.w	r3, r3, #4
 80074b4:	6713      	str	r3, [r2, #112]	; 0x70
 80074b6:	4b5c      	ldr	r3, [pc, #368]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80074b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ba:	4a5b      	ldr	r2, [pc, #364]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80074bc:	f043 0301 	orr.w	r3, r3, #1
 80074c0:	6713      	str	r3, [r2, #112]	; 0x70
 80074c2:	e00b      	b.n	80074dc <HAL_RCC_OscConfig+0x324>
 80074c4:	4b58      	ldr	r3, [pc, #352]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80074c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c8:	4a57      	ldr	r2, [pc, #348]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80074ca:	f023 0301 	bic.w	r3, r3, #1
 80074ce:	6713      	str	r3, [r2, #112]	; 0x70
 80074d0:	4b55      	ldr	r3, [pc, #340]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80074d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d4:	4a54      	ldr	r2, [pc, #336]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80074d6:	f023 0304 	bic.w	r3, r3, #4
 80074da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d015      	beq.n	8007510 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e4:	f7fe fbd0 	bl	8005c88 <HAL_GetTick>
 80074e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ea:	e00a      	b.n	8007502 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074ec:	f7fe fbcc 	bl	8005c88 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e0cb      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007502:	4b49      	ldr	r3, [pc, #292]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d0ee      	beq.n	80074ec <HAL_RCC_OscConfig+0x334>
 800750e:	e014      	b.n	800753a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007510:	f7fe fbba 	bl	8005c88 <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007516:	e00a      	b.n	800752e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007518:	f7fe fbb6 	bl	8005c88 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	f241 3288 	movw	r2, #5000	; 0x1388
 8007526:	4293      	cmp	r3, r2
 8007528:	d901      	bls.n	800752e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e0b5      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800752e:	4b3e      	ldr	r3, [pc, #248]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1ee      	bne.n	8007518 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800753a:	7dfb      	ldrb	r3, [r7, #23]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d105      	bne.n	800754c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007540:	4b39      	ldr	r3, [pc, #228]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	4a38      	ldr	r2, [pc, #224]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800754a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 80a1 	beq.w	8007698 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007556:	4b34      	ldr	r3, [pc, #208]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 030c 	and.w	r3, r3, #12
 800755e:	2b08      	cmp	r3, #8
 8007560:	d05c      	beq.n	800761c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	2b02      	cmp	r3, #2
 8007568:	d141      	bne.n	80075ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800756a:	4b31      	ldr	r3, [pc, #196]	; (8007630 <HAL_RCC_OscConfig+0x478>)
 800756c:	2200      	movs	r2, #0
 800756e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007570:	f7fe fb8a 	bl	8005c88 <HAL_GetTick>
 8007574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007576:	e008      	b.n	800758a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007578:	f7fe fb86 	bl	8005c88 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	2b02      	cmp	r3, #2
 8007584:	d901      	bls.n	800758a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e087      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800758a:	4b27      	ldr	r3, [pc, #156]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1f0      	bne.n	8007578 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	69da      	ldr	r2, [r3, #28]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	019b      	lsls	r3, r3, #6
 80075a6:	431a      	orrs	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ac:	085b      	lsrs	r3, r3, #1
 80075ae:	3b01      	subs	r3, #1
 80075b0:	041b      	lsls	r3, r3, #16
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	061b      	lsls	r3, r3, #24
 80075ba:	491b      	ldr	r1, [pc, #108]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075c0:	4b1b      	ldr	r3, [pc, #108]	; (8007630 <HAL_RCC_OscConfig+0x478>)
 80075c2:	2201      	movs	r2, #1
 80075c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075c6:	f7fe fb5f 	bl	8005c88 <HAL_GetTick>
 80075ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075cc:	e008      	b.n	80075e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075ce:	f7fe fb5b 	bl	8005c88 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d901      	bls.n	80075e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e05c      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075e0:	4b11      	ldr	r3, [pc, #68]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0f0      	beq.n	80075ce <HAL_RCC_OscConfig+0x416>
 80075ec:	e054      	b.n	8007698 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075ee:	4b10      	ldr	r3, [pc, #64]	; (8007630 <HAL_RCC_OscConfig+0x478>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075f4:	f7fe fb48 	bl	8005c88 <HAL_GetTick>
 80075f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075fa:	e008      	b.n	800760e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075fc:	f7fe fb44 	bl	8005c88 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b02      	cmp	r3, #2
 8007608:	d901      	bls.n	800760e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e045      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800760e:	4b06      	ldr	r3, [pc, #24]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1f0      	bne.n	80075fc <HAL_RCC_OscConfig+0x444>
 800761a:	e03d      	b.n	8007698 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d107      	bne.n	8007634 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e038      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
 8007628:	40023800 	.word	0x40023800
 800762c:	40007000 	.word	0x40007000
 8007630:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007634:	4b1b      	ldr	r3, [pc, #108]	; (80076a4 <HAL_RCC_OscConfig+0x4ec>)
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d028      	beq.n	8007694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800764c:	429a      	cmp	r2, r3
 800764e:	d121      	bne.n	8007694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800765a:	429a      	cmp	r2, r3
 800765c:	d11a      	bne.n	8007694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007664:	4013      	ands	r3, r2
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800766a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800766c:	4293      	cmp	r3, r2
 800766e:	d111      	bne.n	8007694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	085b      	lsrs	r3, r3, #1
 800767c:	3b01      	subs	r3, #1
 800767e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007680:	429a      	cmp	r2, r3
 8007682:	d107      	bne.n	8007694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007690:	429a      	cmp	r2, r3
 8007692:	d001      	beq.n	8007698 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	40023800 	.word	0x40023800

080076a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e0cc      	b.n	8007856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076bc:	4b68      	ldr	r3, [pc, #416]	; (8007860 <HAL_RCC_ClockConfig+0x1b8>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0307 	and.w	r3, r3, #7
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d90c      	bls.n	80076e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ca:	4b65      	ldr	r3, [pc, #404]	; (8007860 <HAL_RCC_ClockConfig+0x1b8>)
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	b2d2      	uxtb	r2, r2
 80076d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d2:	4b63      	ldr	r3, [pc, #396]	; (8007860 <HAL_RCC_ClockConfig+0x1b8>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0307 	and.w	r3, r3, #7
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d001      	beq.n	80076e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e0b8      	b.n	8007856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0302 	and.w	r3, r3, #2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d020      	beq.n	8007732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0304 	and.w	r3, r3, #4
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d005      	beq.n	8007708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076fc:	4b59      	ldr	r3, [pc, #356]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	4a58      	ldr	r2, [pc, #352]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007702:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007706:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0308 	and.w	r3, r3, #8
 8007710:	2b00      	cmp	r3, #0
 8007712:	d005      	beq.n	8007720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007714:	4b53      	ldr	r3, [pc, #332]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	4a52      	ldr	r2, [pc, #328]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 800771a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800771e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007720:	4b50      	ldr	r3, [pc, #320]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	494d      	ldr	r1, [pc, #308]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 800772e:	4313      	orrs	r3, r2
 8007730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b00      	cmp	r3, #0
 800773c:	d044      	beq.n	80077c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d107      	bne.n	8007756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007746:	4b47      	ldr	r3, [pc, #284]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d119      	bne.n	8007786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e07f      	b.n	8007856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2b02      	cmp	r3, #2
 800775c:	d003      	beq.n	8007766 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007762:	2b03      	cmp	r3, #3
 8007764:	d107      	bne.n	8007776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007766:	4b3f      	ldr	r3, [pc, #252]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d109      	bne.n	8007786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e06f      	b.n	8007856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007776:	4b3b      	ldr	r3, [pc, #236]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e067      	b.n	8007856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007786:	4b37      	ldr	r3, [pc, #220]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f023 0203 	bic.w	r2, r3, #3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	4934      	ldr	r1, [pc, #208]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007794:	4313      	orrs	r3, r2
 8007796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007798:	f7fe fa76 	bl	8005c88 <HAL_GetTick>
 800779c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800779e:	e00a      	b.n	80077b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077a0:	f7fe fa72 	bl	8005c88 <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e04f      	b.n	8007856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077b6:	4b2b      	ldr	r3, [pc, #172]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f003 020c 	and.w	r2, r3, #12
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d1eb      	bne.n	80077a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077c8:	4b25      	ldr	r3, [pc, #148]	; (8007860 <HAL_RCC_ClockConfig+0x1b8>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0307 	and.w	r3, r3, #7
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d20c      	bcs.n	80077f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077d6:	4b22      	ldr	r3, [pc, #136]	; (8007860 <HAL_RCC_ClockConfig+0x1b8>)
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077de:	4b20      	ldr	r3, [pc, #128]	; (8007860 <HAL_RCC_ClockConfig+0x1b8>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0307 	and.w	r3, r3, #7
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d001      	beq.n	80077f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e032      	b.n	8007856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d008      	beq.n	800780e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077fc:	4b19      	ldr	r3, [pc, #100]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	4916      	ldr	r1, [pc, #88]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 800780a:	4313      	orrs	r3, r2
 800780c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0308 	and.w	r3, r3, #8
 8007816:	2b00      	cmp	r3, #0
 8007818:	d009      	beq.n	800782e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800781a:	4b12      	ldr	r3, [pc, #72]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	490e      	ldr	r1, [pc, #56]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 800782a:	4313      	orrs	r3, r2
 800782c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800782e:	f000 f821 	bl	8007874 <HAL_RCC_GetSysClockFreq>
 8007832:	4602      	mov	r2, r0
 8007834:	4b0b      	ldr	r3, [pc, #44]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	091b      	lsrs	r3, r3, #4
 800783a:	f003 030f 	and.w	r3, r3, #15
 800783e:	490a      	ldr	r1, [pc, #40]	; (8007868 <HAL_RCC_ClockConfig+0x1c0>)
 8007840:	5ccb      	ldrb	r3, [r1, r3]
 8007842:	fa22 f303 	lsr.w	r3, r2, r3
 8007846:	4a09      	ldr	r2, [pc, #36]	; (800786c <HAL_RCC_ClockConfig+0x1c4>)
 8007848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800784a:	4b09      	ldr	r3, [pc, #36]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4618      	mov	r0, r3
 8007850:	f7fe f9d6 	bl	8005c00 <HAL_InitTick>

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	40023c00 	.word	0x40023c00
 8007864:	40023800 	.word	0x40023800
 8007868:	080095ac 	.word	0x080095ac
 800786c:	200001a0 	.word	0x200001a0
 8007870:	200001a4 	.word	0x200001a4

08007874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007878:	b094      	sub	sp, #80	; 0x50
 800787a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	647b      	str	r3, [r7, #68]	; 0x44
 8007880:	2300      	movs	r3, #0
 8007882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007884:	2300      	movs	r3, #0
 8007886:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007888:	2300      	movs	r3, #0
 800788a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800788c:	4b79      	ldr	r3, [pc, #484]	; (8007a74 <HAL_RCC_GetSysClockFreq+0x200>)
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f003 030c 	and.w	r3, r3, #12
 8007894:	2b08      	cmp	r3, #8
 8007896:	d00d      	beq.n	80078b4 <HAL_RCC_GetSysClockFreq+0x40>
 8007898:	2b08      	cmp	r3, #8
 800789a:	f200 80e1 	bhi.w	8007a60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <HAL_RCC_GetSysClockFreq+0x34>
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d003      	beq.n	80078ae <HAL_RCC_GetSysClockFreq+0x3a>
 80078a6:	e0db      	b.n	8007a60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078a8:	4b73      	ldr	r3, [pc, #460]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x204>)
 80078aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80078ac:	e0db      	b.n	8007a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078ae:	4b73      	ldr	r3, [pc, #460]	; (8007a7c <HAL_RCC_GetSysClockFreq+0x208>)
 80078b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80078b2:	e0d8      	b.n	8007a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078b4:	4b6f      	ldr	r3, [pc, #444]	; (8007a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078be:	4b6d      	ldr	r3, [pc, #436]	; (8007a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d063      	beq.n	8007992 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078ca:	4b6a      	ldr	r3, [pc, #424]	; (8007a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	099b      	lsrs	r3, r3, #6
 80078d0:	2200      	movs	r2, #0
 80078d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80078d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80078d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078dc:	633b      	str	r3, [r7, #48]	; 0x30
 80078de:	2300      	movs	r3, #0
 80078e0:	637b      	str	r3, [r7, #52]	; 0x34
 80078e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80078e6:	4622      	mov	r2, r4
 80078e8:	462b      	mov	r3, r5
 80078ea:	f04f 0000 	mov.w	r0, #0
 80078ee:	f04f 0100 	mov.w	r1, #0
 80078f2:	0159      	lsls	r1, r3, #5
 80078f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078f8:	0150      	lsls	r0, r2, #5
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	4621      	mov	r1, r4
 8007900:	1a51      	subs	r1, r2, r1
 8007902:	6139      	str	r1, [r7, #16]
 8007904:	4629      	mov	r1, r5
 8007906:	eb63 0301 	sbc.w	r3, r3, r1
 800790a:	617b      	str	r3, [r7, #20]
 800790c:	f04f 0200 	mov.w	r2, #0
 8007910:	f04f 0300 	mov.w	r3, #0
 8007914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007918:	4659      	mov	r1, fp
 800791a:	018b      	lsls	r3, r1, #6
 800791c:	4651      	mov	r1, sl
 800791e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007922:	4651      	mov	r1, sl
 8007924:	018a      	lsls	r2, r1, #6
 8007926:	4651      	mov	r1, sl
 8007928:	ebb2 0801 	subs.w	r8, r2, r1
 800792c:	4659      	mov	r1, fp
 800792e:	eb63 0901 	sbc.w	r9, r3, r1
 8007932:	f04f 0200 	mov.w	r2, #0
 8007936:	f04f 0300 	mov.w	r3, #0
 800793a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800793e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007946:	4690      	mov	r8, r2
 8007948:	4699      	mov	r9, r3
 800794a:	4623      	mov	r3, r4
 800794c:	eb18 0303 	adds.w	r3, r8, r3
 8007950:	60bb      	str	r3, [r7, #8]
 8007952:	462b      	mov	r3, r5
 8007954:	eb49 0303 	adc.w	r3, r9, r3
 8007958:	60fb      	str	r3, [r7, #12]
 800795a:	f04f 0200 	mov.w	r2, #0
 800795e:	f04f 0300 	mov.w	r3, #0
 8007962:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007966:	4629      	mov	r1, r5
 8007968:	024b      	lsls	r3, r1, #9
 800796a:	4621      	mov	r1, r4
 800796c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007970:	4621      	mov	r1, r4
 8007972:	024a      	lsls	r2, r1, #9
 8007974:	4610      	mov	r0, r2
 8007976:	4619      	mov	r1, r3
 8007978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800797a:	2200      	movs	r2, #0
 800797c:	62bb      	str	r3, [r7, #40]	; 0x28
 800797e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007980:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007984:	f7f8 fc28 	bl	80001d8 <__aeabi_uldivmod>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	4613      	mov	r3, r2
 800798e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007990:	e058      	b.n	8007a44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007992:	4b38      	ldr	r3, [pc, #224]	; (8007a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	099b      	lsrs	r3, r3, #6
 8007998:	2200      	movs	r2, #0
 800799a:	4618      	mov	r0, r3
 800799c:	4611      	mov	r1, r2
 800799e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80079a2:	623b      	str	r3, [r7, #32]
 80079a4:	2300      	movs	r3, #0
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
 80079a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80079ac:	4642      	mov	r2, r8
 80079ae:	464b      	mov	r3, r9
 80079b0:	f04f 0000 	mov.w	r0, #0
 80079b4:	f04f 0100 	mov.w	r1, #0
 80079b8:	0159      	lsls	r1, r3, #5
 80079ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079be:	0150      	lsls	r0, r2, #5
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4641      	mov	r1, r8
 80079c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80079ca:	4649      	mov	r1, r9
 80079cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80079d0:	f04f 0200 	mov.w	r2, #0
 80079d4:	f04f 0300 	mov.w	r3, #0
 80079d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80079dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80079e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80079e4:	ebb2 040a 	subs.w	r4, r2, sl
 80079e8:	eb63 050b 	sbc.w	r5, r3, fp
 80079ec:	f04f 0200 	mov.w	r2, #0
 80079f0:	f04f 0300 	mov.w	r3, #0
 80079f4:	00eb      	lsls	r3, r5, #3
 80079f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079fa:	00e2      	lsls	r2, r4, #3
 80079fc:	4614      	mov	r4, r2
 80079fe:	461d      	mov	r5, r3
 8007a00:	4643      	mov	r3, r8
 8007a02:	18e3      	adds	r3, r4, r3
 8007a04:	603b      	str	r3, [r7, #0]
 8007a06:	464b      	mov	r3, r9
 8007a08:	eb45 0303 	adc.w	r3, r5, r3
 8007a0c:	607b      	str	r3, [r7, #4]
 8007a0e:	f04f 0200 	mov.w	r2, #0
 8007a12:	f04f 0300 	mov.w	r3, #0
 8007a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	028b      	lsls	r3, r1, #10
 8007a1e:	4621      	mov	r1, r4
 8007a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a24:	4621      	mov	r1, r4
 8007a26:	028a      	lsls	r2, r1, #10
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a2e:	2200      	movs	r2, #0
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	61fa      	str	r2, [r7, #28]
 8007a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a38:	f7f8 fbce 	bl	80001d8 <__aeabi_uldivmod>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4613      	mov	r3, r2
 8007a42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a44:	4b0b      	ldr	r3, [pc, #44]	; (8007a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	0c1b      	lsrs	r3, r3, #16
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	3301      	adds	r3, #1
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007a54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a5e:	e002      	b.n	8007a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3750      	adds	r7, #80	; 0x50
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a72:	bf00      	nop
 8007a74:	40023800 	.word	0x40023800
 8007a78:	00f42400 	.word	0x00f42400
 8007a7c:	007a1200 	.word	0x007a1200

08007a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e041      	b.n	8007b16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d106      	bne.n	8007aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7fd fee2 	bl	8005870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3304      	adds	r3, #4
 8007abc:	4619      	mov	r1, r3
 8007abe:	4610      	mov	r0, r2
 8007ac0:	f001 f892 	bl	8008be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d001      	beq.n	8007b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e044      	b.n	8007bc2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68da      	ldr	r2, [r3, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f042 0201 	orr.w	r2, r2, #1
 8007b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a1e      	ldr	r2, [pc, #120]	; (8007bd0 <HAL_TIM_Base_Start_IT+0xb0>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d018      	beq.n	8007b8c <HAL_TIM_Base_Start_IT+0x6c>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b62:	d013      	beq.n	8007b8c <HAL_TIM_Base_Start_IT+0x6c>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a1a      	ldr	r2, [pc, #104]	; (8007bd4 <HAL_TIM_Base_Start_IT+0xb4>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d00e      	beq.n	8007b8c <HAL_TIM_Base_Start_IT+0x6c>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a19      	ldr	r2, [pc, #100]	; (8007bd8 <HAL_TIM_Base_Start_IT+0xb8>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d009      	beq.n	8007b8c <HAL_TIM_Base_Start_IT+0x6c>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a17      	ldr	r2, [pc, #92]	; (8007bdc <HAL_TIM_Base_Start_IT+0xbc>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d004      	beq.n	8007b8c <HAL_TIM_Base_Start_IT+0x6c>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a16      	ldr	r2, [pc, #88]	; (8007be0 <HAL_TIM_Base_Start_IT+0xc0>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d111      	bne.n	8007bb0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b06      	cmp	r3, #6
 8007b9c:	d010      	beq.n	8007bc0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f042 0201 	orr.w	r2, r2, #1
 8007bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bae:	e007      	b.n	8007bc0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0201 	orr.w	r2, r2, #1
 8007bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	40010000 	.word	0x40010000
 8007bd4:	40000400 	.word	0x40000400
 8007bd8:	40000800 	.word	0x40000800
 8007bdc:	40000c00 	.word	0x40000c00
 8007be0:	40014000 	.word	0x40014000

08007be4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e041      	b.n	8007c7a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d106      	bne.n	8007c10 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f839 	bl	8007c82 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3304      	adds	r3, #4
 8007c20:	4619      	mov	r1, r3
 8007c22:	4610      	mov	r0, r2
 8007c24:	f000 ffe0 	bl	8008be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
	...

08007c98 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d109      	bne.n	8007cc0 <HAL_TIM_OC_Start_IT+0x28>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	bf14      	ite	ne
 8007cb8:	2301      	movne	r3, #1
 8007cba:	2300      	moveq	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	e022      	b.n	8007d06 <HAL_TIM_OC_Start_IT+0x6e>
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	d109      	bne.n	8007cda <HAL_TIM_OC_Start_IT+0x42>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	bf14      	ite	ne
 8007cd2:	2301      	movne	r3, #1
 8007cd4:	2300      	moveq	r3, #0
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	e015      	b.n	8007d06 <HAL_TIM_OC_Start_IT+0x6e>
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b08      	cmp	r3, #8
 8007cde:	d109      	bne.n	8007cf4 <HAL_TIM_OC_Start_IT+0x5c>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	bf14      	ite	ne
 8007cec:	2301      	movne	r3, #1
 8007cee:	2300      	moveq	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	e008      	b.n	8007d06 <HAL_TIM_OC_Start_IT+0x6e>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	bf14      	ite	ne
 8007d00:	2301      	movne	r3, #1
 8007d02:	2300      	moveq	r3, #0
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e0b3      	b.n	8007e76 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d104      	bne.n	8007d1e <HAL_TIM_OC_Start_IT+0x86>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2202      	movs	r2, #2
 8007d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d1c:	e013      	b.n	8007d46 <HAL_TIM_OC_Start_IT+0xae>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d104      	bne.n	8007d2e <HAL_TIM_OC_Start_IT+0x96>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d2c:	e00b      	b.n	8007d46 <HAL_TIM_OC_Start_IT+0xae>
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d104      	bne.n	8007d3e <HAL_TIM_OC_Start_IT+0xa6>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d3c:	e003      	b.n	8007d46 <HAL_TIM_OC_Start_IT+0xae>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2202      	movs	r2, #2
 8007d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b0c      	cmp	r3, #12
 8007d4a:	d841      	bhi.n	8007dd0 <HAL_TIM_OC_Start_IT+0x138>
 8007d4c:	a201      	add	r2, pc, #4	; (adr r2, 8007d54 <HAL_TIM_OC_Start_IT+0xbc>)
 8007d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d52:	bf00      	nop
 8007d54:	08007d89 	.word	0x08007d89
 8007d58:	08007dd1 	.word	0x08007dd1
 8007d5c:	08007dd1 	.word	0x08007dd1
 8007d60:	08007dd1 	.word	0x08007dd1
 8007d64:	08007d9b 	.word	0x08007d9b
 8007d68:	08007dd1 	.word	0x08007dd1
 8007d6c:	08007dd1 	.word	0x08007dd1
 8007d70:	08007dd1 	.word	0x08007dd1
 8007d74:	08007dad 	.word	0x08007dad
 8007d78:	08007dd1 	.word	0x08007dd1
 8007d7c:	08007dd1 	.word	0x08007dd1
 8007d80:	08007dd1 	.word	0x08007dd1
 8007d84:	08007dbf 	.word	0x08007dbf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68da      	ldr	r2, [r3, #12]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f042 0202 	orr.w	r2, r2, #2
 8007d96:	60da      	str	r2, [r3, #12]
      break;
 8007d98:	e01d      	b.n	8007dd6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f042 0204 	orr.w	r2, r2, #4
 8007da8:	60da      	str	r2, [r3, #12]
      break;
 8007daa:	e014      	b.n	8007dd6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68da      	ldr	r2, [r3, #12]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f042 0208 	orr.w	r2, r2, #8
 8007dba:	60da      	str	r2, [r3, #12]
      break;
 8007dbc:	e00b      	b.n	8007dd6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68da      	ldr	r2, [r3, #12]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f042 0210 	orr.w	r2, r2, #16
 8007dcc:	60da      	str	r2, [r3, #12]
      break;
 8007dce:	e002      	b.n	8007dd6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd4:	bf00      	nop
  }

  if (status == HAL_OK)
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d14b      	bne.n	8007e74 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2201      	movs	r2, #1
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f001 f9a5 	bl	8009134 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a24      	ldr	r2, [pc, #144]	; (8007e80 <HAL_TIM_OC_Start_IT+0x1e8>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d107      	bne.n	8007e04 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e02:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a1d      	ldr	r2, [pc, #116]	; (8007e80 <HAL_TIM_OC_Start_IT+0x1e8>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d018      	beq.n	8007e40 <HAL_TIM_OC_Start_IT+0x1a8>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e16:	d013      	beq.n	8007e40 <HAL_TIM_OC_Start_IT+0x1a8>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a19      	ldr	r2, [pc, #100]	; (8007e84 <HAL_TIM_OC_Start_IT+0x1ec>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d00e      	beq.n	8007e40 <HAL_TIM_OC_Start_IT+0x1a8>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a18      	ldr	r2, [pc, #96]	; (8007e88 <HAL_TIM_OC_Start_IT+0x1f0>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d009      	beq.n	8007e40 <HAL_TIM_OC_Start_IT+0x1a8>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a16      	ldr	r2, [pc, #88]	; (8007e8c <HAL_TIM_OC_Start_IT+0x1f4>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d004      	beq.n	8007e40 <HAL_TIM_OC_Start_IT+0x1a8>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a15      	ldr	r2, [pc, #84]	; (8007e90 <HAL_TIM_OC_Start_IT+0x1f8>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d111      	bne.n	8007e64 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2b06      	cmp	r3, #6
 8007e50:	d010      	beq.n	8007e74 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f042 0201 	orr.w	r2, r2, #1
 8007e60:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e62:	e007      	b.n	8007e74 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f042 0201 	orr.w	r2, r2, #1
 8007e72:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	40010000 	.word	0x40010000
 8007e84:	40000400 	.word	0x40000400
 8007e88:	40000800 	.word	0x40000800
 8007e8c:	40000c00 	.word	0x40000c00
 8007e90:	40014000 	.word	0x40014000

08007e94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e041      	b.n	8007f2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d106      	bne.n	8007ec0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f839 	bl	8007f32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	3304      	adds	r3, #4
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	f000 fe88 	bl	8008be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
	...

08007f48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d109      	bne.n	8007f6c <HAL_TIM_PWM_Start+0x24>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	bf14      	ite	ne
 8007f64:	2301      	movne	r3, #1
 8007f66:	2300      	moveq	r3, #0
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	e022      	b.n	8007fb2 <HAL_TIM_PWM_Start+0x6a>
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	d109      	bne.n	8007f86 <HAL_TIM_PWM_Start+0x3e>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	bf14      	ite	ne
 8007f7e:	2301      	movne	r3, #1
 8007f80:	2300      	moveq	r3, #0
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	e015      	b.n	8007fb2 <HAL_TIM_PWM_Start+0x6a>
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	2b08      	cmp	r3, #8
 8007f8a:	d109      	bne.n	8007fa0 <HAL_TIM_PWM_Start+0x58>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	bf14      	ite	ne
 8007f98:	2301      	movne	r3, #1
 8007f9a:	2300      	moveq	r3, #0
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	e008      	b.n	8007fb2 <HAL_TIM_PWM_Start+0x6a>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	bf14      	ite	ne
 8007fac:	2301      	movne	r3, #1
 8007fae:	2300      	moveq	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e068      	b.n	800808c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d104      	bne.n	8007fca <HAL_TIM_PWM_Start+0x82>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fc8:	e013      	b.n	8007ff2 <HAL_TIM_PWM_Start+0xaa>
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d104      	bne.n	8007fda <HAL_TIM_PWM_Start+0x92>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fd8:	e00b      	b.n	8007ff2 <HAL_TIM_PWM_Start+0xaa>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d104      	bne.n	8007fea <HAL_TIM_PWM_Start+0xa2>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fe8:	e003      	b.n	8007ff2 <HAL_TIM_PWM_Start+0xaa>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2202      	movs	r2, #2
 8007fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f001 f89a 	bl	8009134 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a23      	ldr	r2, [pc, #140]	; (8008094 <HAL_TIM_PWM_Start+0x14c>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d107      	bne.n	800801a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008018:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a1d      	ldr	r2, [pc, #116]	; (8008094 <HAL_TIM_PWM_Start+0x14c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d018      	beq.n	8008056 <HAL_TIM_PWM_Start+0x10e>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800802c:	d013      	beq.n	8008056 <HAL_TIM_PWM_Start+0x10e>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a19      	ldr	r2, [pc, #100]	; (8008098 <HAL_TIM_PWM_Start+0x150>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d00e      	beq.n	8008056 <HAL_TIM_PWM_Start+0x10e>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a17      	ldr	r2, [pc, #92]	; (800809c <HAL_TIM_PWM_Start+0x154>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d009      	beq.n	8008056 <HAL_TIM_PWM_Start+0x10e>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a16      	ldr	r2, [pc, #88]	; (80080a0 <HAL_TIM_PWM_Start+0x158>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d004      	beq.n	8008056 <HAL_TIM_PWM_Start+0x10e>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a14      	ldr	r2, [pc, #80]	; (80080a4 <HAL_TIM_PWM_Start+0x15c>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d111      	bne.n	800807a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f003 0307 	and.w	r3, r3, #7
 8008060:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b06      	cmp	r3, #6
 8008066:	d010      	beq.n	800808a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0201 	orr.w	r2, r2, #1
 8008076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008078:	e007      	b.n	800808a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f042 0201 	orr.w	r2, r2, #1
 8008088:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	40010000 	.word	0x40010000
 8008098:	40000400 	.word	0x40000400
 800809c:	40000800 	.word	0x40000800
 80080a0:	40000c00 	.word	0x40000c00
 80080a4:	40014000 	.word	0x40014000

080080a8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d109      	bne.n	80080d4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	bf0c      	ite	eq
 80080cc:	2301      	moveq	r3, #1
 80080ce:	2300      	movne	r3, #0
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	e022      	b.n	800811a <HAL_TIM_PWM_Start_DMA+0x72>
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2b04      	cmp	r3, #4
 80080d8:	d109      	bne.n	80080ee <HAL_TIM_PWM_Start_DMA+0x46>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	bf0c      	ite	eq
 80080e6:	2301      	moveq	r3, #1
 80080e8:	2300      	movne	r3, #0
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	e015      	b.n	800811a <HAL_TIM_PWM_Start_DMA+0x72>
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2b08      	cmp	r3, #8
 80080f2:	d109      	bne.n	8008108 <HAL_TIM_PWM_Start_DMA+0x60>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	bf0c      	ite	eq
 8008100:	2301      	moveq	r3, #1
 8008102:	2300      	movne	r3, #0
 8008104:	b2db      	uxtb	r3, r3
 8008106:	e008      	b.n	800811a <HAL_TIM_PWM_Start_DMA+0x72>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b02      	cmp	r3, #2
 8008112:	bf0c      	ite	eq
 8008114:	2301      	moveq	r3, #1
 8008116:	2300      	movne	r3, #0
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800811e:	2302      	movs	r3, #2
 8008120:	e15d      	b.n	80083de <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d109      	bne.n	800813c <HAL_TIM_PWM_Start_DMA+0x94>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b01      	cmp	r3, #1
 8008132:	bf0c      	ite	eq
 8008134:	2301      	moveq	r3, #1
 8008136:	2300      	movne	r3, #0
 8008138:	b2db      	uxtb	r3, r3
 800813a:	e022      	b.n	8008182 <HAL_TIM_PWM_Start_DMA+0xda>
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2b04      	cmp	r3, #4
 8008140:	d109      	bne.n	8008156 <HAL_TIM_PWM_Start_DMA+0xae>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b01      	cmp	r3, #1
 800814c:	bf0c      	ite	eq
 800814e:	2301      	moveq	r3, #1
 8008150:	2300      	movne	r3, #0
 8008152:	b2db      	uxtb	r3, r3
 8008154:	e015      	b.n	8008182 <HAL_TIM_PWM_Start_DMA+0xda>
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2b08      	cmp	r3, #8
 800815a:	d109      	bne.n	8008170 <HAL_TIM_PWM_Start_DMA+0xc8>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b01      	cmp	r3, #1
 8008166:	bf0c      	ite	eq
 8008168:	2301      	moveq	r3, #1
 800816a:	2300      	movne	r3, #0
 800816c:	b2db      	uxtb	r3, r3
 800816e:	e008      	b.n	8008182 <HAL_TIM_PWM_Start_DMA+0xda>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b01      	cmp	r3, #1
 800817a:	bf0c      	ite	eq
 800817c:	2301      	moveq	r3, #1
 800817e:	2300      	movne	r3, #0
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d024      	beq.n	80081d0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d104      	bne.n	8008196 <HAL_TIM_PWM_Start_DMA+0xee>
 800818c:	887b      	ldrh	r3, [r7, #2]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e123      	b.n	80083de <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d104      	bne.n	80081a6 <HAL_TIM_PWM_Start_DMA+0xfe>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2202      	movs	r2, #2
 80081a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081a4:	e016      	b.n	80081d4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2b04      	cmp	r3, #4
 80081aa:	d104      	bne.n	80081b6 <HAL_TIM_PWM_Start_DMA+0x10e>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2202      	movs	r2, #2
 80081b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081b4:	e00e      	b.n	80081d4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	d104      	bne.n	80081c6 <HAL_TIM_PWM_Start_DMA+0x11e>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2202      	movs	r2, #2
 80081c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081c4:	e006      	b.n	80081d4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2202      	movs	r2, #2
 80081ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081ce:	e001      	b.n	80081d4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e104      	b.n	80083de <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	2b0c      	cmp	r3, #12
 80081d8:	f200 80ae 	bhi.w	8008338 <HAL_TIM_PWM_Start_DMA+0x290>
 80081dc:	a201      	add	r2, pc, #4	; (adr r2, 80081e4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80081de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e2:	bf00      	nop
 80081e4:	08008219 	.word	0x08008219
 80081e8:	08008339 	.word	0x08008339
 80081ec:	08008339 	.word	0x08008339
 80081f0:	08008339 	.word	0x08008339
 80081f4:	08008261 	.word	0x08008261
 80081f8:	08008339 	.word	0x08008339
 80081fc:	08008339 	.word	0x08008339
 8008200:	08008339 	.word	0x08008339
 8008204:	080082a9 	.word	0x080082a9
 8008208:	08008339 	.word	0x08008339
 800820c:	08008339 	.word	0x08008339
 8008210:	08008339 	.word	0x08008339
 8008214:	080082f1 	.word	0x080082f1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821c:	4a72      	ldr	r2, [pc, #456]	; (80083e8 <HAL_TIM_PWM_Start_DMA+0x340>)
 800821e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008224:	4a71      	ldr	r2, [pc, #452]	; (80083ec <HAL_TIM_PWM_Start_DMA+0x344>)
 8008226:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822c:	4a70      	ldr	r2, [pc, #448]	; (80083f0 <HAL_TIM_PWM_Start_DMA+0x348>)
 800822e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3334      	adds	r3, #52	; 0x34
 800823c:	461a      	mov	r2, r3
 800823e:	887b      	ldrh	r3, [r7, #2]
 8008240:	f7fe fb5a 	bl	80068f8 <HAL_DMA_Start_IT>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e0c7      	b.n	80083de <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68da      	ldr	r2, [r3, #12]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800825c:	60da      	str	r2, [r3, #12]
      break;
 800825e:	e06e      	b.n	800833e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008264:	4a60      	ldr	r2, [pc, #384]	; (80083e8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008266:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826c:	4a5f      	ldr	r2, [pc, #380]	; (80083ec <HAL_TIM_PWM_Start_DMA+0x344>)
 800826e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008274:	4a5e      	ldr	r2, [pc, #376]	; (80083f0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008276:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800827c:	6879      	ldr	r1, [r7, #4]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3338      	adds	r3, #56	; 0x38
 8008284:	461a      	mov	r2, r3
 8008286:	887b      	ldrh	r3, [r7, #2]
 8008288:	f7fe fb36 	bl	80068f8 <HAL_DMA_Start_IT>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e0a3      	b.n	80083de <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68da      	ldr	r2, [r3, #12]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80082a4:	60da      	str	r2, [r3, #12]
      break;
 80082a6:	e04a      	b.n	800833e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ac:	4a4e      	ldr	r2, [pc, #312]	; (80083e8 <HAL_TIM_PWM_Start_DMA+0x340>)
 80082ae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b4:	4a4d      	ldr	r2, [pc, #308]	; (80083ec <HAL_TIM_PWM_Start_DMA+0x344>)
 80082b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082bc:	4a4c      	ldr	r2, [pc, #304]	; (80083f0 <HAL_TIM_PWM_Start_DMA+0x348>)
 80082be:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80082c4:	6879      	ldr	r1, [r7, #4]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	333c      	adds	r3, #60	; 0x3c
 80082cc:	461a      	mov	r2, r3
 80082ce:	887b      	ldrh	r3, [r7, #2]
 80082d0:	f7fe fb12 	bl	80068f8 <HAL_DMA_Start_IT>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e07f      	b.n	80083de <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082ec:	60da      	str	r2, [r3, #12]
      break;
 80082ee:	e026      	b.n	800833e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f4:	4a3c      	ldr	r2, [pc, #240]	; (80083e8 <HAL_TIM_PWM_Start_DMA+0x340>)
 80082f6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fc:	4a3b      	ldr	r2, [pc, #236]	; (80083ec <HAL_TIM_PWM_Start_DMA+0x344>)
 80082fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008304:	4a3a      	ldr	r2, [pc, #232]	; (80083f0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008306:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800830c:	6879      	ldr	r1, [r7, #4]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3340      	adds	r3, #64	; 0x40
 8008314:	461a      	mov	r2, r3
 8008316:	887b      	ldrh	r3, [r7, #2]
 8008318:	f7fe faee 	bl	80068f8 <HAL_DMA_Start_IT>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e05b      	b.n	80083de <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008334:	60da      	str	r2, [r3, #12]
      break;
 8008336:	e002      	b.n	800833e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	75fb      	strb	r3, [r7, #23]
      break;
 800833c:	bf00      	nop
  }

  if (status == HAL_OK)
 800833e:	7dfb      	ldrb	r3, [r7, #23]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d14b      	bne.n	80083dc <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2201      	movs	r2, #1
 800834a:	68b9      	ldr	r1, [r7, #8]
 800834c:	4618      	mov	r0, r3
 800834e:	f000 fef1 	bl	8009134 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a27      	ldr	r2, [pc, #156]	; (80083f4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d107      	bne.n	800836c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800836a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a20      	ldr	r2, [pc, #128]	; (80083f4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d018      	beq.n	80083a8 <HAL_TIM_PWM_Start_DMA+0x300>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800837e:	d013      	beq.n	80083a8 <HAL_TIM_PWM_Start_DMA+0x300>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a1c      	ldr	r2, [pc, #112]	; (80083f8 <HAL_TIM_PWM_Start_DMA+0x350>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d00e      	beq.n	80083a8 <HAL_TIM_PWM_Start_DMA+0x300>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a1b      	ldr	r2, [pc, #108]	; (80083fc <HAL_TIM_PWM_Start_DMA+0x354>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d009      	beq.n	80083a8 <HAL_TIM_PWM_Start_DMA+0x300>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a19      	ldr	r2, [pc, #100]	; (8008400 <HAL_TIM_PWM_Start_DMA+0x358>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d004      	beq.n	80083a8 <HAL_TIM_PWM_Start_DMA+0x300>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a18      	ldr	r2, [pc, #96]	; (8008404 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d111      	bne.n	80083cc <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f003 0307 	and.w	r3, r3, #7
 80083b2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	2b06      	cmp	r3, #6
 80083b8:	d010      	beq.n	80083dc <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f042 0201 	orr.w	r2, r2, #1
 80083c8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ca:	e007      	b.n	80083dc <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f042 0201 	orr.w	r2, r2, #1
 80083da:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	08008ad9 	.word	0x08008ad9
 80083ec:	08008b81 	.word	0x08008b81
 80083f0:	08008a47 	.word	0x08008a47
 80083f4:	40010000 	.word	0x40010000
 80083f8:	40000400 	.word	0x40000400
 80083fc:	40000800 	.word	0x40000800
 8008400:	40000c00 	.word	0x40000c00
 8008404:	40014000 	.word	0x40014000

08008408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b02      	cmp	r3, #2
 800841c:	d122      	bne.n	8008464 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f003 0302 	and.w	r3, r3, #2
 8008428:	2b02      	cmp	r3, #2
 800842a:	d11b      	bne.n	8008464 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f06f 0202 	mvn.w	r2, #2
 8008434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	f003 0303 	and.w	r3, r3, #3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fac9 	bl	80089e2 <HAL_TIM_IC_CaptureCallback>
 8008450:	e005      	b.n	800845e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f7fc fc9c 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 facc 	bl	80089f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	f003 0304 	and.w	r3, r3, #4
 800846e:	2b04      	cmp	r3, #4
 8008470:	d122      	bne.n	80084b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f003 0304 	and.w	r3, r3, #4
 800847c:	2b04      	cmp	r3, #4
 800847e:	d11b      	bne.n	80084b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f06f 0204 	mvn.w	r2, #4
 8008488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2202      	movs	r2, #2
 800848e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fa9f 	bl	80089e2 <HAL_TIM_IC_CaptureCallback>
 80084a4:	e005      	b.n	80084b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7fc fc72 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 faa2 	bl	80089f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	f003 0308 	and.w	r3, r3, #8
 80084c2:	2b08      	cmp	r3, #8
 80084c4:	d122      	bne.n	800850c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f003 0308 	and.w	r3, r3, #8
 80084d0:	2b08      	cmp	r3, #8
 80084d2:	d11b      	bne.n	800850c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f06f 0208 	mvn.w	r2, #8
 80084dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2204      	movs	r2, #4
 80084e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fa75 	bl	80089e2 <HAL_TIM_IC_CaptureCallback>
 80084f8:	e005      	b.n	8008506 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7fc fc48 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fa78 	bl	80089f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	f003 0310 	and.w	r3, r3, #16
 8008516:	2b10      	cmp	r3, #16
 8008518:	d122      	bne.n	8008560 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f003 0310 	and.w	r3, r3, #16
 8008524:	2b10      	cmp	r3, #16
 8008526:	d11b      	bne.n	8008560 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f06f 0210 	mvn.w	r2, #16
 8008530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2208      	movs	r2, #8
 8008536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fa4b 	bl	80089e2 <HAL_TIM_IC_CaptureCallback>
 800854c:	e005      	b.n	800855a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7fc fc1e 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fa4e 	bl	80089f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b01      	cmp	r3, #1
 800856c:	d10e      	bne.n	800858c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	f003 0301 	and.w	r3, r3, #1
 8008578:	2b01      	cmp	r3, #1
 800857a:	d107      	bne.n	800858c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f06f 0201 	mvn.w	r2, #1
 8008584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7fc fb2e 	bl	8004be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008596:	2b80      	cmp	r3, #128	; 0x80
 8008598:	d10e      	bne.n	80085b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085a4:	2b80      	cmp	r3, #128	; 0x80
 80085a6:	d107      	bne.n	80085b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80085b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 feae 	bl	8009314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c2:	2b40      	cmp	r3, #64	; 0x40
 80085c4:	d10e      	bne.n	80085e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d0:	2b40      	cmp	r3, #64	; 0x40
 80085d2:	d107      	bne.n	80085e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80085dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa1d 	bl	8008a1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	f003 0320 	and.w	r3, r3, #32
 80085ee:	2b20      	cmp	r3, #32
 80085f0:	d10e      	bne.n	8008610 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	f003 0320 	and.w	r3, r3, #32
 80085fc:	2b20      	cmp	r3, #32
 80085fe:	d107      	bne.n	8008610 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f06f 0220 	mvn.w	r2, #32
 8008608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fe78 	bl	8009300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008610:	bf00      	nop
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800862e:	2b01      	cmp	r3, #1
 8008630:	d101      	bne.n	8008636 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008632:	2302      	movs	r3, #2
 8008634:	e048      	b.n	80086c8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b0c      	cmp	r3, #12
 8008642:	d839      	bhi.n	80086b8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8008644:	a201      	add	r2, pc, #4	; (adr r2, 800864c <HAL_TIM_OC_ConfigChannel+0x34>)
 8008646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864a:	bf00      	nop
 800864c:	08008681 	.word	0x08008681
 8008650:	080086b9 	.word	0x080086b9
 8008654:	080086b9 	.word	0x080086b9
 8008658:	080086b9 	.word	0x080086b9
 800865c:	0800868f 	.word	0x0800868f
 8008660:	080086b9 	.word	0x080086b9
 8008664:	080086b9 	.word	0x080086b9
 8008668:	080086b9 	.word	0x080086b9
 800866c:	0800869d 	.word	0x0800869d
 8008670:	080086b9 	.word	0x080086b9
 8008674:	080086b9 	.word	0x080086b9
 8008678:	080086b9 	.word	0x080086b9
 800867c:	080086ab 	.word	0x080086ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68b9      	ldr	r1, [r7, #8]
 8008686:	4618      	mov	r0, r3
 8008688:	f000 fb2e 	bl	8008ce8 <TIM_OC1_SetConfig>
      break;
 800868c:	e017      	b.n	80086be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68b9      	ldr	r1, [r7, #8]
 8008694:	4618      	mov	r0, r3
 8008696:	f000 fb8d 	bl	8008db4 <TIM_OC2_SetConfig>
      break;
 800869a:	e010      	b.n	80086be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68b9      	ldr	r1, [r7, #8]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 fbf2 	bl	8008e8c <TIM_OC3_SetConfig>
      break;
 80086a8:	e009      	b.n	80086be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68b9      	ldr	r1, [r7, #8]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 fc55 	bl	8008f60 <TIM_OC4_SetConfig>
      break;
 80086b6:	e002      	b.n	80086be <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	75fb      	strb	r3, [r7, #23]
      break;
 80086bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d101      	bne.n	80086ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80086ea:	2302      	movs	r3, #2
 80086ec:	e0ae      	b.n	800884c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b0c      	cmp	r3, #12
 80086fa:	f200 809f 	bhi.w	800883c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80086fe:	a201      	add	r2, pc, #4	; (adr r2, 8008704 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008704:	08008739 	.word	0x08008739
 8008708:	0800883d 	.word	0x0800883d
 800870c:	0800883d 	.word	0x0800883d
 8008710:	0800883d 	.word	0x0800883d
 8008714:	08008779 	.word	0x08008779
 8008718:	0800883d 	.word	0x0800883d
 800871c:	0800883d 	.word	0x0800883d
 8008720:	0800883d 	.word	0x0800883d
 8008724:	080087bb 	.word	0x080087bb
 8008728:	0800883d 	.word	0x0800883d
 800872c:	0800883d 	.word	0x0800883d
 8008730:	0800883d 	.word	0x0800883d
 8008734:	080087fb 	.word	0x080087fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68b9      	ldr	r1, [r7, #8]
 800873e:	4618      	mov	r0, r3
 8008740:	f000 fad2 	bl	8008ce8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	699a      	ldr	r2, [r3, #24]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f042 0208 	orr.w	r2, r2, #8
 8008752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	699a      	ldr	r2, [r3, #24]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 0204 	bic.w	r2, r2, #4
 8008762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6999      	ldr	r1, [r3, #24]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	691a      	ldr	r2, [r3, #16]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	619a      	str	r2, [r3, #24]
      break;
 8008776:	e064      	b.n	8008842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68b9      	ldr	r1, [r7, #8]
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fb18 	bl	8008db4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699a      	ldr	r2, [r3, #24]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699a      	ldr	r2, [r3, #24]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6999      	ldr	r1, [r3, #24]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	021a      	lsls	r2, r3, #8
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	430a      	orrs	r2, r1
 80087b6:	619a      	str	r2, [r3, #24]
      break;
 80087b8:	e043      	b.n	8008842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68b9      	ldr	r1, [r7, #8]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 fb63 	bl	8008e8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69da      	ldr	r2, [r3, #28]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f042 0208 	orr.w	r2, r2, #8
 80087d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	69da      	ldr	r2, [r3, #28]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 0204 	bic.w	r2, r2, #4
 80087e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69d9      	ldr	r1, [r3, #28]
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	691a      	ldr	r2, [r3, #16]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	430a      	orrs	r2, r1
 80087f6:	61da      	str	r2, [r3, #28]
      break;
 80087f8:	e023      	b.n	8008842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	4618      	mov	r0, r3
 8008802:	f000 fbad 	bl	8008f60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	69da      	ldr	r2, [r3, #28]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69da      	ldr	r2, [r3, #28]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69d9      	ldr	r1, [r3, #28]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	021a      	lsls	r2, r3, #8
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	430a      	orrs	r2, r1
 8008838:	61da      	str	r2, [r3, #28]
      break;
 800883a:	e002      	b.n	8008842 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	75fb      	strb	r3, [r7, #23]
      break;
 8008840:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800884a:	7dfb      	ldrb	r3, [r7, #23]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3718      	adds	r7, #24
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008868:	2b01      	cmp	r3, #1
 800886a:	d101      	bne.n	8008870 <HAL_TIM_ConfigClockSource+0x1c>
 800886c:	2302      	movs	r3, #2
 800886e:	e0b4      	b.n	80089da <HAL_TIM_ConfigClockSource+0x186>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2202      	movs	r2, #2
 800887c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800888e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008896:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088a8:	d03e      	beq.n	8008928 <HAL_TIM_ConfigClockSource+0xd4>
 80088aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088ae:	f200 8087 	bhi.w	80089c0 <HAL_TIM_ConfigClockSource+0x16c>
 80088b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b6:	f000 8086 	beq.w	80089c6 <HAL_TIM_ConfigClockSource+0x172>
 80088ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088be:	d87f      	bhi.n	80089c0 <HAL_TIM_ConfigClockSource+0x16c>
 80088c0:	2b70      	cmp	r3, #112	; 0x70
 80088c2:	d01a      	beq.n	80088fa <HAL_TIM_ConfigClockSource+0xa6>
 80088c4:	2b70      	cmp	r3, #112	; 0x70
 80088c6:	d87b      	bhi.n	80089c0 <HAL_TIM_ConfigClockSource+0x16c>
 80088c8:	2b60      	cmp	r3, #96	; 0x60
 80088ca:	d050      	beq.n	800896e <HAL_TIM_ConfigClockSource+0x11a>
 80088cc:	2b60      	cmp	r3, #96	; 0x60
 80088ce:	d877      	bhi.n	80089c0 <HAL_TIM_ConfigClockSource+0x16c>
 80088d0:	2b50      	cmp	r3, #80	; 0x50
 80088d2:	d03c      	beq.n	800894e <HAL_TIM_ConfigClockSource+0xfa>
 80088d4:	2b50      	cmp	r3, #80	; 0x50
 80088d6:	d873      	bhi.n	80089c0 <HAL_TIM_ConfigClockSource+0x16c>
 80088d8:	2b40      	cmp	r3, #64	; 0x40
 80088da:	d058      	beq.n	800898e <HAL_TIM_ConfigClockSource+0x13a>
 80088dc:	2b40      	cmp	r3, #64	; 0x40
 80088de:	d86f      	bhi.n	80089c0 <HAL_TIM_ConfigClockSource+0x16c>
 80088e0:	2b30      	cmp	r3, #48	; 0x30
 80088e2:	d064      	beq.n	80089ae <HAL_TIM_ConfigClockSource+0x15a>
 80088e4:	2b30      	cmp	r3, #48	; 0x30
 80088e6:	d86b      	bhi.n	80089c0 <HAL_TIM_ConfigClockSource+0x16c>
 80088e8:	2b20      	cmp	r3, #32
 80088ea:	d060      	beq.n	80089ae <HAL_TIM_ConfigClockSource+0x15a>
 80088ec:	2b20      	cmp	r3, #32
 80088ee:	d867      	bhi.n	80089c0 <HAL_TIM_ConfigClockSource+0x16c>
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d05c      	beq.n	80089ae <HAL_TIM_ConfigClockSource+0x15a>
 80088f4:	2b10      	cmp	r3, #16
 80088f6:	d05a      	beq.n	80089ae <HAL_TIM_ConfigClockSource+0x15a>
 80088f8:	e062      	b.n	80089c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6818      	ldr	r0, [r3, #0]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	6899      	ldr	r1, [r3, #8]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	f000 fbf3 	bl	80090f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800891c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	609a      	str	r2, [r3, #8]
      break;
 8008926:	e04f      	b.n	80089c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6818      	ldr	r0, [r3, #0]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	6899      	ldr	r1, [r3, #8]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	f000 fbdc 	bl	80090f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689a      	ldr	r2, [r3, #8]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800894a:	609a      	str	r2, [r3, #8]
      break;
 800894c:	e03c      	b.n	80089c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6818      	ldr	r0, [r3, #0]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	6859      	ldr	r1, [r3, #4]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	461a      	mov	r2, r3
 800895c:	f000 fb50 	bl	8009000 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2150      	movs	r1, #80	; 0x50
 8008966:	4618      	mov	r0, r3
 8008968:	f000 fba9 	bl	80090be <TIM_ITRx_SetConfig>
      break;
 800896c:	e02c      	b.n	80089c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	6859      	ldr	r1, [r3, #4]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	461a      	mov	r2, r3
 800897c:	f000 fb6f 	bl	800905e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2160      	movs	r1, #96	; 0x60
 8008986:	4618      	mov	r0, r3
 8008988:	f000 fb99 	bl	80090be <TIM_ITRx_SetConfig>
      break;
 800898c:	e01c      	b.n	80089c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6818      	ldr	r0, [r3, #0]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	6859      	ldr	r1, [r3, #4]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	461a      	mov	r2, r3
 800899c:	f000 fb30 	bl	8009000 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2140      	movs	r1, #64	; 0x40
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 fb89 	bl	80090be <TIM_ITRx_SetConfig>
      break;
 80089ac:	e00c      	b.n	80089c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4619      	mov	r1, r3
 80089b8:	4610      	mov	r0, r2
 80089ba:	f000 fb80 	bl	80090be <TIM_ITRx_SetConfig>
      break;
 80089be:	e003      	b.n	80089c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	73fb      	strb	r3, [r7, #15]
      break;
 80089c4:	e000      	b.n	80089c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80089c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089ea:	bf00      	nop
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b083      	sub	sp, #12
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089fe:	bf00      	nop
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b083      	sub	sp, #12
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008a12:	bf00      	nop
 8008a14:	370c      	adds	r7, #12
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b083      	sub	sp, #12
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a26:	bf00      	nop
 8008a28:	370c      	adds	r7, #12
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b083      	sub	sp, #12
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008a3a:	bf00      	nop
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a52:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d107      	bne.n	8008a6e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2201      	movs	r2, #1
 8008a62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a6c:	e02a      	b.n	8008ac4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d107      	bne.n	8008a88 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a86:	e01d      	b.n	8008ac4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d107      	bne.n	8008aa2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2204      	movs	r2, #4
 8008a96:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008aa0:	e010      	b.n	8008ac4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d107      	bne.n	8008abc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2208      	movs	r2, #8
 8008ab0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008aba:	e003      	b.n	8008ac4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f7ff ffb4 	bl	8008a32 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	771a      	strb	r2, [r3, #28]
}
 8008ad0:	bf00      	nop
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d10b      	bne.n	8008b08 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2201      	movs	r2, #1
 8008af4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d136      	bne.n	8008b6c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b06:	e031      	b.n	8008b6c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d10b      	bne.n	8008b2a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2202      	movs	r2, #2
 8008b16:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d125      	bne.n	8008b6c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b28:	e020      	b.n	8008b6c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d10b      	bne.n	8008b4c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2204      	movs	r2, #4
 8008b38:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	69db      	ldr	r3, [r3, #28]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d114      	bne.n	8008b6c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b4a:	e00f      	b.n	8008b6c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d10a      	bne.n	8008b6c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2208      	movs	r2, #8
 8008b5a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	69db      	ldr	r3, [r3, #28]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d103      	bne.n	8008b6c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f7ff ff42 	bl	80089f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	771a      	strb	r2, [r3, #28]
}
 8008b78:	bf00      	nop
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d103      	bne.n	8008ba0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	771a      	strb	r2, [r3, #28]
 8008b9e:	e019      	b.n	8008bd4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d103      	bne.n	8008bb2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2202      	movs	r2, #2
 8008bae:	771a      	strb	r2, [r3, #28]
 8008bb0:	e010      	b.n	8008bd4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d103      	bne.n	8008bc4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2204      	movs	r2, #4
 8008bc0:	771a      	strb	r2, [r3, #28]
 8008bc2:	e007      	b.n	8008bd4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d102      	bne.n	8008bd4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2208      	movs	r2, #8
 8008bd2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff ff18 	bl	8008a0a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	771a      	strb	r2, [r3, #28]
}
 8008be0:	bf00      	nop
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a34      	ldr	r2, [pc, #208]	; (8008ccc <TIM_Base_SetConfig+0xe4>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d00f      	beq.n	8008c20 <TIM_Base_SetConfig+0x38>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c06:	d00b      	beq.n	8008c20 <TIM_Base_SetConfig+0x38>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a31      	ldr	r2, [pc, #196]	; (8008cd0 <TIM_Base_SetConfig+0xe8>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d007      	beq.n	8008c20 <TIM_Base_SetConfig+0x38>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a30      	ldr	r2, [pc, #192]	; (8008cd4 <TIM_Base_SetConfig+0xec>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d003      	beq.n	8008c20 <TIM_Base_SetConfig+0x38>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a2f      	ldr	r2, [pc, #188]	; (8008cd8 <TIM_Base_SetConfig+0xf0>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d108      	bne.n	8008c32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a25      	ldr	r2, [pc, #148]	; (8008ccc <TIM_Base_SetConfig+0xe4>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d01b      	beq.n	8008c72 <TIM_Base_SetConfig+0x8a>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c40:	d017      	beq.n	8008c72 <TIM_Base_SetConfig+0x8a>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a22      	ldr	r2, [pc, #136]	; (8008cd0 <TIM_Base_SetConfig+0xe8>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d013      	beq.n	8008c72 <TIM_Base_SetConfig+0x8a>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a21      	ldr	r2, [pc, #132]	; (8008cd4 <TIM_Base_SetConfig+0xec>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d00f      	beq.n	8008c72 <TIM_Base_SetConfig+0x8a>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a20      	ldr	r2, [pc, #128]	; (8008cd8 <TIM_Base_SetConfig+0xf0>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d00b      	beq.n	8008c72 <TIM_Base_SetConfig+0x8a>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a1f      	ldr	r2, [pc, #124]	; (8008cdc <TIM_Base_SetConfig+0xf4>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d007      	beq.n	8008c72 <TIM_Base_SetConfig+0x8a>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a1e      	ldr	r2, [pc, #120]	; (8008ce0 <TIM_Base_SetConfig+0xf8>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d003      	beq.n	8008c72 <TIM_Base_SetConfig+0x8a>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a1d      	ldr	r2, [pc, #116]	; (8008ce4 <TIM_Base_SetConfig+0xfc>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d108      	bne.n	8008c84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	695b      	ldr	r3, [r3, #20]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	689a      	ldr	r2, [r3, #8]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a08      	ldr	r2, [pc, #32]	; (8008ccc <TIM_Base_SetConfig+0xe4>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d103      	bne.n	8008cb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	691a      	ldr	r2, [r3, #16]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	615a      	str	r2, [r3, #20]
}
 8008cbe:	bf00      	nop
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	40010000 	.word	0x40010000
 8008cd0:	40000400 	.word	0x40000400
 8008cd4:	40000800 	.word	0x40000800
 8008cd8:	40000c00 	.word	0x40000c00
 8008cdc:	40014000 	.word	0x40014000
 8008ce0:	40014400 	.word	0x40014400
 8008ce4:	40014800 	.word	0x40014800

08008ce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	f023 0201 	bic.w	r2, r3, #1
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	699b      	ldr	r3, [r3, #24]
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f023 0303 	bic.w	r3, r3, #3
 8008d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f023 0302 	bic.w	r3, r3, #2
 8008d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a1c      	ldr	r2, [pc, #112]	; (8008db0 <TIM_OC1_SetConfig+0xc8>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d10c      	bne.n	8008d5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f023 0308 	bic.w	r3, r3, #8
 8008d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f023 0304 	bic.w	r3, r3, #4
 8008d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a13      	ldr	r2, [pc, #76]	; (8008db0 <TIM_OC1_SetConfig+0xc8>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d111      	bne.n	8008d8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	693a      	ldr	r2, [r7, #16]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	685a      	ldr	r2, [r3, #4]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	621a      	str	r2, [r3, #32]
}
 8008da4:	bf00      	nop
 8008da6:	371c      	adds	r7, #28
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	40010000 	.word	0x40010000

08008db4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b087      	sub	sp, #28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	f023 0210 	bic.w	r2, r3, #16
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	021b      	lsls	r3, r3, #8
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	f023 0320 	bic.w	r3, r3, #32
 8008dfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	011b      	lsls	r3, r3, #4
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a1e      	ldr	r2, [pc, #120]	; (8008e88 <TIM_OC2_SetConfig+0xd4>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d10d      	bne.n	8008e30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	011b      	lsls	r3, r3, #4
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a15      	ldr	r2, [pc, #84]	; (8008e88 <TIM_OC2_SetConfig+0xd4>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d113      	bne.n	8008e60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	695b      	ldr	r3, [r3, #20]
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	621a      	str	r2, [r3, #32]
}
 8008e7a:	bf00      	nop
 8008e7c:	371c      	adds	r7, #28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	40010000 	.word	0x40010000

08008e8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f023 0303 	bic.w	r3, r3, #3
 8008ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	021b      	lsls	r3, r3, #8
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a1d      	ldr	r2, [pc, #116]	; (8008f5c <TIM_OC3_SetConfig+0xd0>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d10d      	bne.n	8008f06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	021b      	lsls	r3, r3, #8
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a14      	ldr	r2, [pc, #80]	; (8008f5c <TIM_OC3_SetConfig+0xd0>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d113      	bne.n	8008f36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	011b      	lsls	r3, r3, #4
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	011b      	lsls	r3, r3, #4
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	697a      	ldr	r2, [r7, #20]
 8008f4e:	621a      	str	r2, [r3, #32]
}
 8008f50:	bf00      	nop
 8008f52:	371c      	adds	r7, #28
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	40010000 	.word	0x40010000

08008f60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	021b      	lsls	r3, r3, #8
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	031b      	lsls	r3, r3, #12
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a10      	ldr	r2, [pc, #64]	; (8008ffc <TIM_OC4_SetConfig+0x9c>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d109      	bne.n	8008fd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	019b      	lsls	r3, r3, #6
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	621a      	str	r2, [r3, #32]
}
 8008fee:	bf00      	nop
 8008ff0:	371c      	adds	r7, #28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	40010000 	.word	0x40010000

08009000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009000:	b480      	push	{r7}
 8009002:	b087      	sub	sp, #28
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6a1b      	ldr	r3, [r3, #32]
 8009010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	f023 0201 	bic.w	r2, r3, #1
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800902a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	4313      	orrs	r3, r2
 8009034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f023 030a 	bic.w	r3, r3, #10
 800903c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	4313      	orrs	r3, r2
 8009044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	697a      	ldr	r2, [r7, #20]
 8009050:	621a      	str	r2, [r3, #32]
}
 8009052:	bf00      	nop
 8009054:	371c      	adds	r7, #28
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800905e:	b480      	push	{r7}
 8009060:	b087      	sub	sp, #28
 8009062:	af00      	add	r7, sp, #0
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	60b9      	str	r1, [r7, #8]
 8009068:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	f023 0210 	bic.w	r2, r3, #16
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6a1b      	ldr	r3, [r3, #32]
 8009080:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009088:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	031b      	lsls	r3, r3, #12
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	4313      	orrs	r3, r2
 8009092:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800909a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	011b      	lsls	r3, r3, #4
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	697a      	ldr	r2, [r7, #20]
 80090aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	621a      	str	r2, [r3, #32]
}
 80090b2:	bf00      	nop
 80090b4:	371c      	adds	r7, #28
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090be:	b480      	push	{r7}
 80090c0:	b085      	sub	sp, #20
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4313      	orrs	r3, r2
 80090dc:	f043 0307 	orr.w	r3, r3, #7
 80090e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	609a      	str	r2, [r3, #8]
}
 80090e8:	bf00      	nop
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
 8009100:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800910e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	021a      	lsls	r2, r3, #8
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	431a      	orrs	r2, r3
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	4313      	orrs	r3, r2
 800911c:	697a      	ldr	r2, [r7, #20]
 800911e:	4313      	orrs	r3, r2
 8009120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	609a      	str	r2, [r3, #8]
}
 8009128:	bf00      	nop
 800912a:	371c      	adds	r7, #28
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009134:	b480      	push	{r7}
 8009136:	b087      	sub	sp, #28
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f003 031f 	and.w	r3, r3, #31
 8009146:	2201      	movs	r2, #1
 8009148:	fa02 f303 	lsl.w	r3, r2, r3
 800914c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6a1a      	ldr	r2, [r3, #32]
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	43db      	mvns	r3, r3
 8009156:	401a      	ands	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6a1a      	ldr	r2, [r3, #32]
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f003 031f 	and.w	r3, r3, #31
 8009166:	6879      	ldr	r1, [r7, #4]
 8009168:	fa01 f303 	lsl.w	r3, r1, r3
 800916c:	431a      	orrs	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	621a      	str	r2, [r3, #32]
}
 8009172:	bf00      	nop
 8009174:	371c      	adds	r7, #28
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
	...

08009180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009190:	2b01      	cmp	r3, #1
 8009192:	d101      	bne.n	8009198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009194:	2302      	movs	r3, #2
 8009196:	e050      	b.n	800923a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2202      	movs	r2, #2
 80091a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a1c      	ldr	r2, [pc, #112]	; (8009248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d018      	beq.n	800920e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091e4:	d013      	beq.n	800920e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a18      	ldr	r2, [pc, #96]	; (800924c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d00e      	beq.n	800920e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a16      	ldr	r2, [pc, #88]	; (8009250 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d009      	beq.n	800920e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a15      	ldr	r2, [pc, #84]	; (8009254 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d004      	beq.n	800920e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a13      	ldr	r2, [pc, #76]	; (8009258 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d10c      	bne.n	8009228 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	4313      	orrs	r3, r2
 800921e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	40010000 	.word	0x40010000
 800924c:	40000400 	.word	0x40000400
 8009250:	40000800 	.word	0x40000800
 8009254:	40000c00 	.word	0x40000c00
 8009258:	40014000 	.word	0x40014000

0800925c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009270:	2b01      	cmp	r3, #1
 8009272:	d101      	bne.n	8009278 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009274:	2302      	movs	r3, #2
 8009276:	e03d      	b.n	80092f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	4313      	orrs	r3, r2
 800928c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	4313      	orrs	r3, r2
 800929a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	695b      	ldr	r3, [r3, #20]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	4313      	orrs	r3, r2
 80092e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <arm_biquad_cascade_df1_init_f32>:
 8009328:	b510      	push	{r4, lr}
 800932a:	6082      	str	r2, [r0, #8]
 800932c:	6001      	str	r1, [r0, #0]
 800932e:	4604      	mov	r4, r0
 8009330:	010a      	lsls	r2, r1, #4
 8009332:	4618      	mov	r0, r3
 8009334:	2100      	movs	r1, #0
 8009336:	f000 f901 	bl	800953c <memset>
 800933a:	6060      	str	r0, [r4, #4]
 800933c:	bd10      	pop	{r4, pc}
 800933e:	bf00      	nop

08009340 <arm_biquad_cascade_df1_f32>:
 8009340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009344:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
 8009348:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800934c:	f003 0e03 	and.w	lr, r3, #3
 8009350:	ea4f 190c 	mov.w	r9, ip, lsl #4
 8009354:	6807      	ldr	r7, [r0, #0]
 8009356:	eb02 0a09 	add.w	sl, r2, r9
 800935a:	f10e 38ff 	add.w	r8, lr, #4294967295
 800935e:	3614      	adds	r6, #20
 8009360:	3510      	adds	r5, #16
 8009362:	ed16 4a05 	vldr	s8, [r6, #-20]	; 0xffffffec
 8009366:	ed16 2a04 	vldr	s4, [r6, #-16]
 800936a:	ed56 2a03 	vldr	s5, [r6, #-12]
 800936e:	ed16 3a02 	vldr	s6, [r6, #-8]
 8009372:	ed56 3a01 	vldr	s7, [r6, #-4]
 8009376:	ed55 5a04 	vldr	s11, [r5, #-16]
 800937a:	ed15 5a03 	vldr	s10, [r5, #-12]
 800937e:	ed15 7a02 	vldr	s14, [r5, #-8]
 8009382:	ed55 7a01 	vldr	s15, [r5, #-4]
 8009386:	f1bc 0f00 	cmp.w	ip, #0
 800938a:	f000 80d4 	beq.w	8009536 <arm_biquad_cascade_df1_f32+0x1f6>
 800938e:	f101 0010 	add.w	r0, r1, #16
 8009392:	f102 0310 	add.w	r3, r2, #16
 8009396:	4664      	mov	r4, ip
 8009398:	ed10 6a04 	vldr	s12, [r0, #-16]
 800939c:	ee62 4a25 	vmul.f32	s9, s4, s11
 80093a0:	ee64 6a06 	vmul.f32	s13, s8, s12
 80093a4:	ee22 5a85 	vmul.f32	s10, s5, s10
 80093a8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80093ac:	ee63 4a07 	vmul.f32	s9, s6, s14
 80093b0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80093b4:	ee23 5aa7 	vmul.f32	s10, s7, s15
 80093b8:	ee76 7aa4 	vadd.f32	s15, s13, s9
 80093bc:	ee22 1a06 	vmul.f32	s2, s4, s12
 80093c0:	ee77 7a85 	vadd.f32	s15, s15, s10
 80093c4:	ee62 1aa5 	vmul.f32	s3, s5, s11
 80093c8:	ed43 7a04 	vstr	s15, [r3, #-16]
 80093cc:	ed50 4a03 	vldr	s9, [r0, #-12]
 80093d0:	ee64 6a24 	vmul.f32	s13, s8, s9
 80093d4:	ee23 5a27 	vmul.f32	s10, s6, s15
 80093d8:	ee76 6a81 	vadd.f32	s13, s13, s2
 80093dc:	ee63 5a87 	vmul.f32	s11, s7, s14
 80093e0:	ee36 7aa1 	vadd.f32	s14, s13, s3
 80093e4:	ee62 1a24 	vmul.f32	s3, s4, s9
 80093e8:	ee37 7a05 	vadd.f32	s14, s14, s10
 80093ec:	ee22 6a86 	vmul.f32	s12, s5, s12
 80093f0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80093f4:	ee63 7aa7 	vmul.f32	s15, s7, s15
 80093f8:	ed03 7a03 	vstr	s14, [r3, #-12]
 80093fc:	ed10 5a02 	vldr	s10, [r0, #-8]
 8009400:	ee64 5a05 	vmul.f32	s11, s8, s10
 8009404:	ee63 6a07 	vmul.f32	s13, s6, s14
 8009408:	ee75 5aa1 	vadd.f32	s11, s11, s3
 800940c:	ee62 1a05 	vmul.f32	s3, s4, s10
 8009410:	ee75 5a86 	vadd.f32	s11, s11, s12
 8009414:	ee62 4aa4 	vmul.f32	s9, s5, s9
 8009418:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800941c:	ee23 7a87 	vmul.f32	s14, s7, s14
 8009420:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8009424:	3c01      	subs	r4, #1
 8009426:	ed43 7a02 	vstr	s15, [r3, #-8]
 800942a:	ed50 5a01 	vldr	s11, [r0, #-4]
 800942e:	ee24 6a25 	vmul.f32	s12, s8, s11
 8009432:	ee63 6a27 	vmul.f32	s13, s6, s15
 8009436:	ee36 6a21 	vadd.f32	s12, s12, s3
 800943a:	f100 0010 	add.w	r0, r0, #16
 800943e:	ee36 6a24 	vadd.f32	s12, s12, s9
 8009442:	f103 0310 	add.w	r3, r3, #16
 8009446:	ee36 6a26 	vadd.f32	s12, s12, s13
 800944a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800944e:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8009452:	d1a1      	bne.n	8009398 <arm_biquad_cascade_df1_f32+0x58>
 8009454:	4449      	add	r1, r9
 8009456:	4653      	mov	r3, sl
 8009458:	f1be 0f00 	cmp.w	lr, #0
 800945c:	d047      	beq.n	80094ee <arm_biquad_cascade_df1_f32+0x1ae>
 800945e:	edd1 4a00 	vldr	s9, [r1]
 8009462:	ee22 6a25 	vmul.f32	s12, s4, s11
 8009466:	ee64 1a24 	vmul.f32	s3, s8, s9
 800946a:	ee62 6a85 	vmul.f32	s13, s5, s10
 800946e:	ee36 5a21 	vadd.f32	s10, s12, s3
 8009472:	ee23 6a07 	vmul.f32	s12, s6, s14
 8009476:	ee35 5a26 	vadd.f32	s10, s10, s13
 800947a:	ee63 7aa7 	vmul.f32	s15, s7, s15
 800947e:	ee35 6a06 	vadd.f32	s12, s10, s12
 8009482:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009486:	ed83 6a00 	vstr	s12, [r3]
 800948a:	f1b8 0f00 	cmp.w	r8, #0
 800948e:	d040      	beq.n	8009512 <arm_biquad_cascade_df1_f32+0x1d2>
 8009490:	ed91 5a01 	vldr	s10, [r1, #4]
 8009494:	ee62 7a24 	vmul.f32	s15, s4, s9
 8009498:	ee65 1a04 	vmul.f32	s3, s10, s8
 800949c:	ee62 6aa5 	vmul.f32	s13, s5, s11
 80094a0:	ee77 5aa1 	vadd.f32	s11, s15, s3
 80094a4:	ee63 7a06 	vmul.f32	s15, s6, s12
 80094a8:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80094ac:	ee23 7a87 	vmul.f32	s14, s7, s14
 80094b0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80094b4:	f1b8 0f01 	cmp.w	r8, #1
 80094b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094bc:	edc3 7a01 	vstr	s15, [r3, #4]
 80094c0:	d030      	beq.n	8009524 <arm_biquad_cascade_df1_f32+0x1e4>
 80094c2:	edd1 5a02 	vldr	s11, [r1, #8]
 80094c6:	ee25 2a02 	vmul.f32	s4, s10, s4
 80094ca:	ee64 6a25 	vmul.f32	s13, s8, s11
 80094ce:	ee62 2aa4 	vmul.f32	s5, s5, s9
 80094d2:	ee76 6a82 	vadd.f32	s13, s13, s4
 80094d6:	ee27 3a83 	vmul.f32	s6, s15, s6
 80094da:	ee76 6aa2 	vadd.f32	s13, s13, s5
 80094de:	ee63 3a86 	vmul.f32	s7, s7, s12
 80094e2:	ee76 6a83 	vadd.f32	s13, s13, s6
 80094e6:	ee36 7aa3 	vadd.f32	s14, s13, s7
 80094ea:	ed83 7a02 	vstr	s14, [r3, #8]
 80094ee:	3f01      	subs	r7, #1
 80094f0:	ed45 5a04 	vstr	s11, [r5, #-16]
 80094f4:	ed05 5a03 	vstr	s10, [r5, #-12]
 80094f8:	ed05 7a02 	vstr	s14, [r5, #-8]
 80094fc:	ed45 7a01 	vstr	s15, [r5, #-4]
 8009500:	f106 0614 	add.w	r6, r6, #20
 8009504:	f105 0510 	add.w	r5, r5, #16
 8009508:	4611      	mov	r1, r2
 800950a:	f47f af2a 	bne.w	8009362 <arm_biquad_cascade_df1_f32+0x22>
 800950e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009512:	eef0 7a47 	vmov.f32	s15, s14
 8009516:	eeb0 5a65 	vmov.f32	s10, s11
 800951a:	eeb0 7a46 	vmov.f32	s14, s12
 800951e:	eef0 5a64 	vmov.f32	s11, s9
 8009522:	e7e4      	b.n	80094ee <arm_biquad_cascade_df1_f32+0x1ae>
 8009524:	eeb0 7a67 	vmov.f32	s14, s15
 8009528:	eef0 5a45 	vmov.f32	s11, s10
 800952c:	eef0 7a46 	vmov.f32	s15, s12
 8009530:	eeb0 5a64 	vmov.f32	s10, s9
 8009534:	e7db      	b.n	80094ee <arm_biquad_cascade_df1_f32+0x1ae>
 8009536:	4613      	mov	r3, r2
 8009538:	e78e      	b.n	8009458 <arm_biquad_cascade_df1_f32+0x118>
 800953a:	bf00      	nop

0800953c <memset>:
 800953c:	4402      	add	r2, r0
 800953e:	4603      	mov	r3, r0
 8009540:	4293      	cmp	r3, r2
 8009542:	d100      	bne.n	8009546 <memset+0xa>
 8009544:	4770      	bx	lr
 8009546:	f803 1b01 	strb.w	r1, [r3], #1
 800954a:	e7f9      	b.n	8009540 <memset+0x4>

0800954c <__libc_init_array>:
 800954c:	b570      	push	{r4, r5, r6, lr}
 800954e:	4d0d      	ldr	r5, [pc, #52]	; (8009584 <__libc_init_array+0x38>)
 8009550:	4c0d      	ldr	r4, [pc, #52]	; (8009588 <__libc_init_array+0x3c>)
 8009552:	1b64      	subs	r4, r4, r5
 8009554:	10a4      	asrs	r4, r4, #2
 8009556:	2600      	movs	r6, #0
 8009558:	42a6      	cmp	r6, r4
 800955a:	d109      	bne.n	8009570 <__libc_init_array+0x24>
 800955c:	4d0b      	ldr	r5, [pc, #44]	; (800958c <__libc_init_array+0x40>)
 800955e:	4c0c      	ldr	r4, [pc, #48]	; (8009590 <__libc_init_array+0x44>)
 8009560:	f000 f818 	bl	8009594 <_init>
 8009564:	1b64      	subs	r4, r4, r5
 8009566:	10a4      	asrs	r4, r4, #2
 8009568:	2600      	movs	r6, #0
 800956a:	42a6      	cmp	r6, r4
 800956c:	d105      	bne.n	800957a <__libc_init_array+0x2e>
 800956e:	bd70      	pop	{r4, r5, r6, pc}
 8009570:	f855 3b04 	ldr.w	r3, [r5], #4
 8009574:	4798      	blx	r3
 8009576:	3601      	adds	r6, #1
 8009578:	e7ee      	b.n	8009558 <__libc_init_array+0xc>
 800957a:	f855 3b04 	ldr.w	r3, [r5], #4
 800957e:	4798      	blx	r3
 8009580:	3601      	adds	r6, #1
 8009582:	e7f2      	b.n	800956a <__libc_init_array+0x1e>
 8009584:	080095cc 	.word	0x080095cc
 8009588:	080095cc 	.word	0x080095cc
 800958c:	080095cc 	.word	0x080095cc
 8009590:	080095d0 	.word	0x080095d0

08009594 <_init>:
 8009594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009596:	bf00      	nop
 8009598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800959a:	bc08      	pop	{r3}
 800959c:	469e      	mov	lr, r3
 800959e:	4770      	bx	lr

080095a0 <_fini>:
 80095a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a2:	bf00      	nop
 80095a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a6:	bc08      	pop	{r3}
 80095a8:	469e      	mov	lr, r3
 80095aa:	4770      	bx	lr
